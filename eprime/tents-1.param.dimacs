p cnf 6283 30181                                                                                    

1 0
c Encoding variable: grid_00000_00000 with domain: int(-1) (representing constraint )
c Var 'grid_00000_00000' direct represents '-1' with '2'
2 0
c Encoding variable: grid_00000_00001 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00000_00001' order represents '0' with '3'
c Var 'grid_00000_00001' direct represents '0' with '3'
c Var 'grid_00000_00001' order represents '1' with '4'
-3 4 0
c Var 'grid_00000_00001' direct represents '1' with '5'
3 -4 5 0
-5 4 0
-5 -3 0
c Var 'grid_00000_00001' order represents '2' with '6'
-4 6 0
c Var 'grid_00000_00001' direct represents '2' with '7'
4 -6 7 0
-7 6 0
-7 -4 0
c Var 'grid_00000_00001' order represents '3' with '8'
-6 8 0
c Var 'grid_00000_00001' direct represents '3' with '9'
6 -8 9 0
-9 8 0
-9 -6 0
c Var 'grid_00000_00001' order represents '4' with '10'
-8 10 0
c Var 'grid_00000_00001' direct represents '4' with '11'
8 -10 11 0
-11 10 0
-11 -8 0
c Var 'grid_00000_00001' order represents '5' with '12'
-10 12 0
c Var 'grid_00000_00001' direct represents '5' with '13'
10 -12 13 0
-13 12 0
-13 -10 0
c Var 'grid_00000_00001' order represents '6' with '14'
-12 14 0
c Var 'grid_00000_00001' direct represents '6' with '15'
12 -14 15 0
-15 14 0
-15 -12 0
c Var 'grid_00000_00001' order represents '7' with '16'
-14 16 0
c Var 'grid_00000_00001' direct represents '7' with '17'
14 -16 17 0
-17 16 0
-17 -14 0
c Var 'grid_00000_00001' order represents '8' with '18'
-16 18 0
c Var 'grid_00000_00001' direct represents '8' with '19'
16 -18 19 0
-19 18 0
-19 -16 0
c Var 'grid_00000_00001' direct represents '9' with '-18'
3 5 7 9 11 13 15 17 19 -18 0
c Encoding variable: grid_00000_00002 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00000_00002' order represents '0' with '20'
c Var 'grid_00000_00002' direct represents '0' with '20'
c Var 'grid_00000_00002' order represents '1' with '21'
-20 21 0
c Var 'grid_00000_00002' direct represents '1' with '22'
20 -21 22 0
-22 21 0
-22 -20 0
c Var 'grid_00000_00002' order represents '2' with '23'
-21 23 0
c Var 'grid_00000_00002' direct represents '2' with '24'
21 -23 24 0
-24 23 0
-24 -21 0
c Var 'grid_00000_00002' order represents '3' with '25'
-23 25 0
c Var 'grid_00000_00002' direct represents '3' with '26'
23 -25 26 0
-26 25 0
-26 -23 0
c Var 'grid_00000_00002' order represents '4' with '27'
-25 27 0
c Var 'grid_00000_00002' direct represents '4' with '28'
25 -27 28 0
-28 27 0
-28 -25 0
c Var 'grid_00000_00002' order represents '5' with '29'
-27 29 0
c Var 'grid_00000_00002' direct represents '5' with '30'
27 -29 30 0
-30 29 0
-30 -27 0
c Var 'grid_00000_00002' order represents '6' with '31'
-29 31 0
c Var 'grid_00000_00002' direct represents '6' with '32'
29 -31 32 0
-32 31 0
-32 -29 0
c Var 'grid_00000_00002' order represents '7' with '33'
-31 33 0
c Var 'grid_00000_00002' direct represents '7' with '34'
31 -33 34 0
-34 33 0
-34 -31 0
c Var 'grid_00000_00002' order represents '8' with '35'
-33 35 0
c Var 'grid_00000_00002' direct represents '8' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'grid_00000_00002' direct represents '9' with '-35'
20 22 24 26 28 30 32 34 36 -35 0
c Encoding variable: grid_00000_00003 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00000_00003' order represents '0' with '37'
c Var 'grid_00000_00003' direct represents '0' with '37'
c Var 'grid_00000_00003' order represents '1' with '38'
-37 38 0
c Var 'grid_00000_00003' direct represents '1' with '39'
37 -38 39 0
-39 38 0
-39 -37 0
c Var 'grid_00000_00003' order represents '2' with '40'
-38 40 0
c Var 'grid_00000_00003' direct represents '2' with '41'
38 -40 41 0
-41 40 0
-41 -38 0
c Var 'grid_00000_00003' order represents '3' with '42'
-40 42 0
c Var 'grid_00000_00003' direct represents '3' with '43'
40 -42 43 0
-43 42 0
-43 -40 0
c Var 'grid_00000_00003' order represents '4' with '44'
-42 44 0
c Var 'grid_00000_00003' direct represents '4' with '45'
42 -44 45 0
-45 44 0
-45 -42 0
c Var 'grid_00000_00003' order represents '5' with '46'
-44 46 0
c Var 'grid_00000_00003' direct represents '5' with '47'
44 -46 47 0
-47 46 0
-47 -44 0
c Var 'grid_00000_00003' order represents '6' with '48'
-46 48 0
c Var 'grid_00000_00003' direct represents '6' with '49'
46 -48 49 0
-49 48 0
-49 -46 0
c Var 'grid_00000_00003' order represents '7' with '50'
-48 50 0
c Var 'grid_00000_00003' direct represents '7' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'grid_00000_00003' order represents '8' with '52'
-50 52 0
c Var 'grid_00000_00003' direct represents '8' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'grid_00000_00003' direct represents '9' with '-52'
37 39 41 43 45 47 49 51 53 -52 0
c Encoding variable: grid_00000_00004 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00000_00004' order represents '0' with '54'
c Var 'grid_00000_00004' direct represents '0' with '54'
c Var 'grid_00000_00004' order represents '1' with '55'
-54 55 0
c Var 'grid_00000_00004' direct represents '1' with '56'
54 -55 56 0
-56 55 0
-56 -54 0
c Var 'grid_00000_00004' order represents '2' with '57'
-55 57 0
c Var 'grid_00000_00004' direct represents '2' with '58'
55 -57 58 0
-58 57 0
-58 -55 0
c Var 'grid_00000_00004' order represents '3' with '59'
-57 59 0
c Var 'grid_00000_00004' direct represents '3' with '60'
57 -59 60 0
-60 59 0
-60 -57 0
c Var 'grid_00000_00004' order represents '4' with '61'
-59 61 0
c Var 'grid_00000_00004' direct represents '4' with '62'
59 -61 62 0
-62 61 0
-62 -59 0
c Var 'grid_00000_00004' order represents '5' with '63'
-61 63 0
c Var 'grid_00000_00004' direct represents '5' with '64'
61 -63 64 0
-64 63 0
-64 -61 0
c Var 'grid_00000_00004' order represents '6' with '65'
-63 65 0
c Var 'grid_00000_00004' direct represents '6' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'grid_00000_00004' order represents '7' with '67'
-65 67 0
c Var 'grid_00000_00004' direct represents '7' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'grid_00000_00004' order represents '8' with '69'
-67 69 0
c Var 'grid_00000_00004' direct represents '8' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'grid_00000_00004' direct represents '9' with '-69'
54 56 58 60 62 64 66 68 70 -69 0
c Encoding variable: grid_00000_00005 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00000_00005' order represents '0' with '71'
c Var 'grid_00000_00005' direct represents '0' with '71'
c Var 'grid_00000_00005' order represents '1' with '72'
-71 72 0
c Var 'grid_00000_00005' direct represents '1' with '73'
71 -72 73 0
-73 72 0
-73 -71 0
c Var 'grid_00000_00005' order represents '2' with '74'
-72 74 0
c Var 'grid_00000_00005' direct represents '2' with '75'
72 -74 75 0
-75 74 0
-75 -72 0
c Var 'grid_00000_00005' order represents '3' with '76'
-74 76 0
c Var 'grid_00000_00005' direct represents '3' with '77'
74 -76 77 0
-77 76 0
-77 -74 0
c Var 'grid_00000_00005' order represents '4' with '78'
-76 78 0
c Var 'grid_00000_00005' direct represents '4' with '79'
76 -78 79 0
-79 78 0
-79 -76 0
c Var 'grid_00000_00005' order represents '5' with '80'
-78 80 0
c Var 'grid_00000_00005' direct represents '5' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'grid_00000_00005' order represents '6' with '82'
-80 82 0
c Var 'grid_00000_00005' direct represents '6' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'grid_00000_00005' order represents '7' with '84'
-82 84 0
c Var 'grid_00000_00005' direct represents '7' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'grid_00000_00005' order represents '8' with '86'
-84 86 0
c Var 'grid_00000_00005' direct represents '8' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'grid_00000_00005' direct represents '9' with '-86'
71 73 75 77 79 81 83 85 87 -86 0
c Encoding variable: grid_00000_00006 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00000_00006' order represents '0' with '88'
c Var 'grid_00000_00006' direct represents '0' with '88'
c Var 'grid_00000_00006' order represents '1' with '89'
-88 89 0
c Var 'grid_00000_00006' direct represents '1' with '90'
88 -89 90 0
-90 89 0
-90 -88 0
c Var 'grid_00000_00006' order represents '2' with '91'
-89 91 0
c Var 'grid_00000_00006' direct represents '2' with '92'
89 -91 92 0
-92 91 0
-92 -89 0
c Var 'grid_00000_00006' order represents '3' with '93'
-91 93 0
c Var 'grid_00000_00006' direct represents '3' with '94'
91 -93 94 0
-94 93 0
-94 -91 0
c Var 'grid_00000_00006' order represents '4' with '95'
-93 95 0
c Var 'grid_00000_00006' direct represents '4' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'grid_00000_00006' order represents '5' with '97'
-95 97 0
c Var 'grid_00000_00006' direct represents '5' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'grid_00000_00006' order represents '6' with '99'
-97 99 0
c Var 'grid_00000_00006' direct represents '6' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'grid_00000_00006' order represents '7' with '101'
-99 101 0
c Var 'grid_00000_00006' direct represents '7' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'grid_00000_00006' order represents '8' with '103'
-101 103 0
c Var 'grid_00000_00006' direct represents '8' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'grid_00000_00006' direct represents '9' with '-103'
88 90 92 94 96 98 100 102 104 -103 0
c Encoding variable: grid_00001_00000 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00001_00000' order represents '0' with '105'
c Var 'grid_00001_00000' direct represents '0' with '105'
c Var 'grid_00001_00000' order represents '1' with '106'
-105 106 0
c Var 'grid_00001_00000' direct represents '1' with '107'
105 -106 107 0
-107 106 0
-107 -105 0
c Var 'grid_00001_00000' order represents '2' with '108'
-106 108 0
c Var 'grid_00001_00000' direct represents '2' with '109'
106 -108 109 0
-109 108 0
-109 -106 0
c Var 'grid_00001_00000' order represents '3' with '110'
-108 110 0
c Var 'grid_00001_00000' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'grid_00001_00000' order represents '4' with '112'
-110 112 0
c Var 'grid_00001_00000' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'grid_00001_00000' order represents '5' with '114'
-112 114 0
c Var 'grid_00001_00000' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'grid_00001_00000' order represents '6' with '116'
-114 116 0
c Var 'grid_00001_00000' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'grid_00001_00000' order represents '7' with '118'
-116 118 0
c Var 'grid_00001_00000' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'grid_00001_00000' order represents '8' with '120'
-118 120 0
c Var 'grid_00001_00000' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'grid_00001_00000' direct represents '9' with '-120'
105 107 109 111 113 115 117 119 121 -120 0
c Encoding variable: grid_00001_00001 with domain: int(-2) (representing constraint )
c Var 'grid_00001_00001' direct represents '-2' with '122'
122 0
c Encoding variable: grid_00001_00002 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00001_00002' order represents '0' with '123'
c Var 'grid_00001_00002' direct represents '0' with '123'
c Var 'grid_00001_00002' order represents '1' with '124'
-123 124 0
c Var 'grid_00001_00002' direct represents '1' with '125'
123 -124 125 0
-125 124 0
-125 -123 0
c Var 'grid_00001_00002' order represents '2' with '126'
-124 126 0
c Var 'grid_00001_00002' direct represents '2' with '127'
124 -126 127 0
-127 126 0
-127 -124 0
c Var 'grid_00001_00002' order represents '3' with '128'
-126 128 0
c Var 'grid_00001_00002' direct represents '3' with '129'
126 -128 129 0
-129 128 0
-129 -126 0
c Var 'grid_00001_00002' order represents '4' with '130'
-128 130 0
c Var 'grid_00001_00002' direct represents '4' with '131'
128 -130 131 0
-131 130 0
-131 -128 0
c Var 'grid_00001_00002' order represents '5' with '132'
-130 132 0
c Var 'grid_00001_00002' direct represents '5' with '133'
130 -132 133 0
-133 132 0
-133 -130 0
c Var 'grid_00001_00002' order represents '6' with '134'
-132 134 0
c Var 'grid_00001_00002' direct represents '6' with '135'
132 -134 135 0
-135 134 0
-135 -132 0
c Var 'grid_00001_00002' order represents '7' with '136'
-134 136 0
c Var 'grid_00001_00002' direct represents '7' with '137'
134 -136 137 0
-137 136 0
-137 -134 0
c Var 'grid_00001_00002' order represents '8' with '138'
-136 138 0
c Var 'grid_00001_00002' direct represents '8' with '139'
136 -138 139 0
-139 138 0
-139 -136 0
c Var 'grid_00001_00002' direct represents '9' with '-138'
123 125 127 129 131 133 135 137 139 -138 0
c Encoding variable: grid_00001_00003 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00001_00003' order represents '0' with '140'
c Var 'grid_00001_00003' direct represents '0' with '140'
c Var 'grid_00001_00003' order represents '1' with '141'
-140 141 0
c Var 'grid_00001_00003' direct represents '1' with '142'
140 -141 142 0
-142 141 0
-142 -140 0
c Var 'grid_00001_00003' order represents '2' with '143'
-141 143 0
c Var 'grid_00001_00003' direct represents '2' with '144'
141 -143 144 0
-144 143 0
-144 -141 0
c Var 'grid_00001_00003' order represents '3' with '145'
-143 145 0
c Var 'grid_00001_00003' direct represents '3' with '146'
143 -145 146 0
-146 145 0
-146 -143 0
c Var 'grid_00001_00003' order represents '4' with '147'
-145 147 0
c Var 'grid_00001_00003' direct represents '4' with '148'
145 -147 148 0
-148 147 0
-148 -145 0
c Var 'grid_00001_00003' order represents '5' with '149'
-147 149 0
c Var 'grid_00001_00003' direct represents '5' with '150'
147 -149 150 0
-150 149 0
-150 -147 0
c Var 'grid_00001_00003' order represents '6' with '151'
-149 151 0
c Var 'grid_00001_00003' direct represents '6' with '152'
149 -151 152 0
-152 151 0
-152 -149 0
c Var 'grid_00001_00003' order represents '7' with '153'
-151 153 0
c Var 'grid_00001_00003' direct represents '7' with '154'
151 -153 154 0
-154 153 0
-154 -151 0
c Var 'grid_00001_00003' order represents '8' with '155'
-153 155 0
c Var 'grid_00001_00003' direct represents '8' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'grid_00001_00003' direct represents '9' with '-155'
140 142 144 146 148 150 152 154 156 -155 0
c Encoding variable: grid_00001_00004 with domain: int(-3) (representing constraint )
c Var 'grid_00001_00004' direct represents '-3' with '157'
157 0
c Encoding variable: grid_00001_00005 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00001_00005' order represents '0' with '158'
c Var 'grid_00001_00005' direct represents '0' with '158'
c Var 'grid_00001_00005' order represents '1' with '159'
-158 159 0
c Var 'grid_00001_00005' direct represents '1' with '160'
158 -159 160 0
-160 159 0
-160 -158 0
c Var 'grid_00001_00005' order represents '2' with '161'
-159 161 0
c Var 'grid_00001_00005' direct represents '2' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'grid_00001_00005' order represents '3' with '163'
-161 163 0
c Var 'grid_00001_00005' direct represents '3' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'grid_00001_00005' order represents '4' with '165'
-163 165 0
c Var 'grid_00001_00005' direct represents '4' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'grid_00001_00005' order represents '5' with '167'
-165 167 0
c Var 'grid_00001_00005' direct represents '5' with '168'
165 -167 168 0
-168 167 0
-168 -165 0
c Var 'grid_00001_00005' order represents '6' with '169'
-167 169 0
c Var 'grid_00001_00005' direct represents '6' with '170'
167 -169 170 0
-170 169 0
-170 -167 0
c Var 'grid_00001_00005' order represents '7' with '171'
-169 171 0
c Var 'grid_00001_00005' direct represents '7' with '172'
169 -171 172 0
-172 171 0
-172 -169 0
c Var 'grid_00001_00005' order represents '8' with '173'
-171 173 0
c Var 'grid_00001_00005' direct represents '8' with '174'
171 -173 174 0
-174 173 0
-174 -171 0
c Var 'grid_00001_00005' direct represents '9' with '-173'
158 160 162 164 166 168 170 172 174 -173 0
c Encoding variable: grid_00001_00006 with domain: int(-4) (representing constraint )
c Var 'grid_00001_00006' direct represents '-4' with '175'
175 0
c Encoding variable: grid_00002_00000 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00002_00000' order represents '0' with '176'
c Var 'grid_00002_00000' direct represents '0' with '176'
c Var 'grid_00002_00000' order represents '1' with '177'
-176 177 0
c Var 'grid_00002_00000' direct represents '1' with '178'
176 -177 178 0
-178 177 0
-178 -176 0
c Var 'grid_00002_00000' order represents '2' with '179'
-177 179 0
c Var 'grid_00002_00000' direct represents '2' with '180'
177 -179 180 0
-180 179 0
-180 -177 0
c Var 'grid_00002_00000' order represents '3' with '181'
-179 181 0
c Var 'grid_00002_00000' direct represents '3' with '182'
179 -181 182 0
-182 181 0
-182 -179 0
c Var 'grid_00002_00000' order represents '4' with '183'
-181 183 0
c Var 'grid_00002_00000' direct represents '4' with '184'
181 -183 184 0
-184 183 0
-184 -181 0
c Var 'grid_00002_00000' order represents '5' with '185'
-183 185 0
c Var 'grid_00002_00000' direct represents '5' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'grid_00002_00000' order represents '6' with '187'
-185 187 0
c Var 'grid_00002_00000' direct represents '6' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'grid_00002_00000' order represents '7' with '189'
-187 189 0
c Var 'grid_00002_00000' direct represents '7' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'grid_00002_00000' order represents '8' with '191'
-189 191 0
c Var 'grid_00002_00000' direct represents '8' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'grid_00002_00000' direct represents '9' with '-191'
176 178 180 182 184 186 188 190 192 -191 0
c Encoding variable: grid_00002_00001 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00002_00001' order represents '0' with '193'
c Var 'grid_00002_00001' direct represents '0' with '193'
c Var 'grid_00002_00001' order represents '1' with '194'
-193 194 0
c Var 'grid_00002_00001' direct represents '1' with '195'
193 -194 195 0
-195 194 0
-195 -193 0
c Var 'grid_00002_00001' order represents '2' with '196'
-194 196 0
c Var 'grid_00002_00001' direct represents '2' with '197'
194 -196 197 0
-197 196 0
-197 -194 0
c Var 'grid_00002_00001' order represents '3' with '198'
-196 198 0
c Var 'grid_00002_00001' direct represents '3' with '199'
196 -198 199 0
-199 198 0
-199 -196 0
c Var 'grid_00002_00001' order represents '4' with '200'
-198 200 0
c Var 'grid_00002_00001' direct represents '4' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'grid_00002_00001' order represents '5' with '202'
-200 202 0
c Var 'grid_00002_00001' direct represents '5' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'grid_00002_00001' order represents '6' with '204'
-202 204 0
c Var 'grid_00002_00001' direct represents '6' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'grid_00002_00001' order represents '7' with '206'
-204 206 0
c Var 'grid_00002_00001' direct represents '7' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'grid_00002_00001' order represents '8' with '208'
-206 208 0
c Var 'grid_00002_00001' direct represents '8' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'grid_00002_00001' direct represents '9' with '-208'
193 195 197 199 201 203 205 207 209 -208 0
c Encoding variable: grid_00002_00002 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00002_00002' order represents '0' with '210'
c Var 'grid_00002_00002' direct represents '0' with '210'
c Var 'grid_00002_00002' order represents '1' with '211'
-210 211 0
c Var 'grid_00002_00002' direct represents '1' with '212'
210 -211 212 0
-212 211 0
-212 -210 0
c Var 'grid_00002_00002' order represents '2' with '213'
-211 213 0
c Var 'grid_00002_00002' direct represents '2' with '214'
211 -213 214 0
-214 213 0
-214 -211 0
c Var 'grid_00002_00002' order represents '3' with '215'
-213 215 0
c Var 'grid_00002_00002' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'grid_00002_00002' order represents '4' with '217'
-215 217 0
c Var 'grid_00002_00002' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'grid_00002_00002' order represents '5' with '219'
-217 219 0
c Var 'grid_00002_00002' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'grid_00002_00002' order represents '6' with '221'
-219 221 0
c Var 'grid_00002_00002' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'grid_00002_00002' order represents '7' with '223'
-221 223 0
c Var 'grid_00002_00002' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'grid_00002_00002' order represents '8' with '225'
-223 225 0
c Var 'grid_00002_00002' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'grid_00002_00002' direct represents '9' with '-225'
210 212 214 216 218 220 222 224 226 -225 0
c Encoding variable: grid_00002_00003 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00002_00003' order represents '0' with '227'
c Var 'grid_00002_00003' direct represents '0' with '227'
c Var 'grid_00002_00003' order represents '1' with '228'
-227 228 0
c Var 'grid_00002_00003' direct represents '1' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'grid_00002_00003' order represents '2' with '230'
-228 230 0
c Var 'grid_00002_00003' direct represents '2' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'grid_00002_00003' order represents '3' with '232'
-230 232 0
c Var 'grid_00002_00003' direct represents '3' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'grid_00002_00003' order represents '4' with '234'
-232 234 0
c Var 'grid_00002_00003' direct represents '4' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'grid_00002_00003' order represents '5' with '236'
-234 236 0
c Var 'grid_00002_00003' direct represents '5' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'grid_00002_00003' order represents '6' with '238'
-236 238 0
c Var 'grid_00002_00003' direct represents '6' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'grid_00002_00003' order represents '7' with '240'
-238 240 0
c Var 'grid_00002_00003' direct represents '7' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'grid_00002_00003' order represents '8' with '242'
-240 242 0
c Var 'grid_00002_00003' direct represents '8' with '243'
240 -242 243 0
-243 242 0
-243 -240 0
c Var 'grid_00002_00003' direct represents '9' with '-242'
227 229 231 233 235 237 239 241 243 -242 0
c Encoding variable: grid_00002_00004 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00002_00004' order represents '0' with '244'
c Var 'grid_00002_00004' direct represents '0' with '244'
c Var 'grid_00002_00004' order represents '1' with '245'
-244 245 0
c Var 'grid_00002_00004' direct represents '1' with '246'
244 -245 246 0
-246 245 0
-246 -244 0
c Var 'grid_00002_00004' order represents '2' with '247'
-245 247 0
c Var 'grid_00002_00004' direct represents '2' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'grid_00002_00004' order represents '3' with '249'
-247 249 0
c Var 'grid_00002_00004' direct represents '3' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'grid_00002_00004' order represents '4' with '251'
-249 251 0
c Var 'grid_00002_00004' direct represents '4' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'grid_00002_00004' order represents '5' with '253'
-251 253 0
c Var 'grid_00002_00004' direct represents '5' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'grid_00002_00004' order represents '6' with '255'
-253 255 0
c Var 'grid_00002_00004' direct represents '6' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'grid_00002_00004' order represents '7' with '257'
-255 257 0
c Var 'grid_00002_00004' direct represents '7' with '258'
255 -257 258 0
-258 257 0
-258 -255 0
c Var 'grid_00002_00004' order represents '8' with '259'
-257 259 0
c Var 'grid_00002_00004' direct represents '8' with '260'
257 -259 260 0
-260 259 0
-260 -257 0
c Var 'grid_00002_00004' direct represents '9' with '-259'
244 246 248 250 252 254 256 258 260 -259 0
c Encoding variable: grid_00002_00005 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00002_00005' order represents '0' with '261'
c Var 'grid_00002_00005' direct represents '0' with '261'
c Var 'grid_00002_00005' order represents '1' with '262'
-261 262 0
c Var 'grid_00002_00005' direct represents '1' with '263'
261 -262 263 0
-263 262 0
-263 -261 0
c Var 'grid_00002_00005' order represents '2' with '264'
-262 264 0
c Var 'grid_00002_00005' direct represents '2' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'grid_00002_00005' order represents '3' with '266'
-264 266 0
c Var 'grid_00002_00005' direct represents '3' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'grid_00002_00005' order represents '4' with '268'
-266 268 0
c Var 'grid_00002_00005' direct represents '4' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'grid_00002_00005' order represents '5' with '270'
-268 270 0
c Var 'grid_00002_00005' direct represents '5' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'grid_00002_00005' order represents '6' with '272'
-270 272 0
c Var 'grid_00002_00005' direct represents '6' with '273'
270 -272 273 0
-273 272 0
-273 -270 0
c Var 'grid_00002_00005' order represents '7' with '274'
-272 274 0
c Var 'grid_00002_00005' direct represents '7' with '275'
272 -274 275 0
-275 274 0
-275 -272 0
c Var 'grid_00002_00005' order represents '8' with '276'
-274 276 0
c Var 'grid_00002_00005' direct represents '8' with '277'
274 -276 277 0
-277 276 0
-277 -274 0
c Var 'grid_00002_00005' direct represents '9' with '-276'
261 263 265 267 269 271 273 275 277 -276 0
c Encoding variable: grid_00002_00006 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00002_00006' order represents '0' with '278'
c Var 'grid_00002_00006' direct represents '0' with '278'
c Var 'grid_00002_00006' order represents '1' with '279'
-278 279 0
c Var 'grid_00002_00006' direct represents '1' with '280'
278 -279 280 0
-280 279 0
-280 -278 0
c Var 'grid_00002_00006' order represents '2' with '281'
-279 281 0
c Var 'grid_00002_00006' direct represents '2' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'grid_00002_00006' order represents '3' with '283'
-281 283 0
c Var 'grid_00002_00006' direct represents '3' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'grid_00002_00006' order represents '4' with '285'
-283 285 0
c Var 'grid_00002_00006' direct represents '4' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'grid_00002_00006' order represents '5' with '287'
-285 287 0
c Var 'grid_00002_00006' direct represents '5' with '288'
285 -287 288 0
-288 287 0
-288 -285 0
c Var 'grid_00002_00006' order represents '6' with '289'
-287 289 0
c Var 'grid_00002_00006' direct represents '6' with '290'
287 -289 290 0
-290 289 0
-290 -287 0
c Var 'grid_00002_00006' order represents '7' with '291'
-289 291 0
c Var 'grid_00002_00006' direct represents '7' with '292'
289 -291 292 0
-292 291 0
-292 -289 0
c Var 'grid_00002_00006' order represents '8' with '293'
-291 293 0
c Var 'grid_00002_00006' direct represents '8' with '294'
291 -293 294 0
-294 293 0
-294 -291 0
c Var 'grid_00002_00006' direct represents '9' with '-293'
278 280 282 284 286 288 290 292 294 -293 0
c Encoding variable: grid_00003_00000 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00003_00000' order represents '0' with '295'
c Var 'grid_00003_00000' direct represents '0' with '295'
c Var 'grid_00003_00000' order represents '1' with '296'
-295 296 0
c Var 'grid_00003_00000' direct represents '1' with '297'
295 -296 297 0
-297 296 0
-297 -295 0
c Var 'grid_00003_00000' order represents '2' with '298'
-296 298 0
c Var 'grid_00003_00000' direct represents '2' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'grid_00003_00000' order represents '3' with '300'
-298 300 0
c Var 'grid_00003_00000' direct represents '3' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'grid_00003_00000' order represents '4' with '302'
-300 302 0
c Var 'grid_00003_00000' direct represents '4' with '303'
300 -302 303 0
-303 302 0
-303 -300 0
c Var 'grid_00003_00000' order represents '5' with '304'
-302 304 0
c Var 'grid_00003_00000' direct represents '5' with '305'
302 -304 305 0
-305 304 0
-305 -302 0
c Var 'grid_00003_00000' order represents '6' with '306'
-304 306 0
c Var 'grid_00003_00000' direct represents '6' with '307'
304 -306 307 0
-307 306 0
-307 -304 0
c Var 'grid_00003_00000' order represents '7' with '308'
-306 308 0
c Var 'grid_00003_00000' direct represents '7' with '309'
306 -308 309 0
-309 308 0
-309 -306 0
c Var 'grid_00003_00000' order represents '8' with '310'
-308 310 0
c Var 'grid_00003_00000' direct represents '8' with '311'
308 -310 311 0
-311 310 0
-311 -308 0
c Var 'grid_00003_00000' direct represents '9' with '-310'
295 297 299 301 303 305 307 309 311 -310 0
c Encoding variable: grid_00003_00001 with domain: int(-5) (representing constraint )
c Var 'grid_00003_00001' direct represents '-5' with '312'
312 0
c Encoding variable: grid_00003_00002 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00003_00002' order represents '0' with '313'
c Var 'grid_00003_00002' direct represents '0' with '313'
c Var 'grid_00003_00002' order represents '1' with '314'
-313 314 0
c Var 'grid_00003_00002' direct represents '1' with '315'
313 -314 315 0
-315 314 0
-315 -313 0
c Var 'grid_00003_00002' order represents '2' with '316'
-314 316 0
c Var 'grid_00003_00002' direct represents '2' with '317'
314 -316 317 0
-317 316 0
-317 -314 0
c Var 'grid_00003_00002' order represents '3' with '318'
-316 318 0
c Var 'grid_00003_00002' direct represents '3' with '319'
316 -318 319 0
-319 318 0
-319 -316 0
c Var 'grid_00003_00002' order represents '4' with '320'
-318 320 0
c Var 'grid_00003_00002' direct represents '4' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'grid_00003_00002' order represents '5' with '322'
-320 322 0
c Var 'grid_00003_00002' direct represents '5' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'grid_00003_00002' order represents '6' with '324'
-322 324 0
c Var 'grid_00003_00002' direct represents '6' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'grid_00003_00002' order represents '7' with '326'
-324 326 0
c Var 'grid_00003_00002' direct represents '7' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'grid_00003_00002' order represents '8' with '328'
-326 328 0
c Var 'grid_00003_00002' direct represents '8' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'grid_00003_00002' direct represents '9' with '-328'
313 315 317 319 321 323 325 327 329 -328 0
c Encoding variable: grid_00003_00003 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00003_00003' order represents '0' with '330'
c Var 'grid_00003_00003' direct represents '0' with '330'
c Var 'grid_00003_00003' order represents '1' with '331'
-330 331 0
c Var 'grid_00003_00003' direct represents '1' with '332'
330 -331 332 0
-332 331 0
-332 -330 0
c Var 'grid_00003_00003' order represents '2' with '333'
-331 333 0
c Var 'grid_00003_00003' direct represents '2' with '334'
331 -333 334 0
-334 333 0
-334 -331 0
c Var 'grid_00003_00003' order represents '3' with '335'
-333 335 0
c Var 'grid_00003_00003' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'grid_00003_00003' order represents '4' with '337'
-335 337 0
c Var 'grid_00003_00003' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'grid_00003_00003' order represents '5' with '339'
-337 339 0
c Var 'grid_00003_00003' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'grid_00003_00003' order represents '6' with '341'
-339 341 0
c Var 'grid_00003_00003' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'grid_00003_00003' order represents '7' with '343'
-341 343 0
c Var 'grid_00003_00003' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'grid_00003_00003' order represents '8' with '345'
-343 345 0
c Var 'grid_00003_00003' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'grid_00003_00003' direct represents '9' with '-345'
330 332 334 336 338 340 342 344 346 -345 0
c Encoding variable: grid_00003_00004 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00003_00004' order represents '0' with '347'
c Var 'grid_00003_00004' direct represents '0' with '347'
c Var 'grid_00003_00004' order represents '1' with '348'
-347 348 0
c Var 'grid_00003_00004' direct represents '1' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'grid_00003_00004' order represents '2' with '350'
-348 350 0
c Var 'grid_00003_00004' direct represents '2' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'grid_00003_00004' order represents '3' with '352'
-350 352 0
c Var 'grid_00003_00004' direct represents '3' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'grid_00003_00004' order represents '4' with '354'
-352 354 0
c Var 'grid_00003_00004' direct represents '4' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'grid_00003_00004' order represents '5' with '356'
-354 356 0
c Var 'grid_00003_00004' direct represents '5' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'grid_00003_00004' order represents '6' with '358'
-356 358 0
c Var 'grid_00003_00004' direct represents '6' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'grid_00003_00004' order represents '7' with '360'
-358 360 0
c Var 'grid_00003_00004' direct represents '7' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'grid_00003_00004' order represents '8' with '362'
-360 362 0
c Var 'grid_00003_00004' direct represents '8' with '363'
360 -362 363 0
-363 362 0
-363 -360 0
c Var 'grid_00003_00004' direct represents '9' with '-362'
347 349 351 353 355 357 359 361 363 -362 0
c Encoding variable: grid_00003_00005 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00003_00005' order represents '0' with '364'
c Var 'grid_00003_00005' direct represents '0' with '364'
c Var 'grid_00003_00005' order represents '1' with '365'
-364 365 0
c Var 'grid_00003_00005' direct represents '1' with '366'
364 -365 366 0
-366 365 0
-366 -364 0
c Var 'grid_00003_00005' order represents '2' with '367'
-365 367 0
c Var 'grid_00003_00005' direct represents '2' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'grid_00003_00005' order represents '3' with '369'
-367 369 0
c Var 'grid_00003_00005' direct represents '3' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'grid_00003_00005' order represents '4' with '371'
-369 371 0
c Var 'grid_00003_00005' direct represents '4' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'grid_00003_00005' order represents '5' with '373'
-371 373 0
c Var 'grid_00003_00005' direct represents '5' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'grid_00003_00005' order represents '6' with '375'
-373 375 0
c Var 'grid_00003_00005' direct represents '6' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'grid_00003_00005' order represents '7' with '377'
-375 377 0
c Var 'grid_00003_00005' direct represents '7' with '378'
375 -377 378 0
-378 377 0
-378 -375 0
c Var 'grid_00003_00005' order represents '8' with '379'
-377 379 0
c Var 'grid_00003_00005' direct represents '8' with '380'
377 -379 380 0
-380 379 0
-380 -377 0
c Var 'grid_00003_00005' direct represents '9' with '-379'
364 366 368 370 372 374 376 378 380 -379 0
c Encoding variable: grid_00003_00006 with domain: int(-6) (representing constraint )
c Var 'grid_00003_00006' direct represents '-6' with '381'
381 0
c Encoding variable: grid_00004_00000 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00004_00000' order represents '0' with '382'
c Var 'grid_00004_00000' direct represents '0' with '382'
c Var 'grid_00004_00000' order represents '1' with '383'
-382 383 0
c Var 'grid_00004_00000' direct represents '1' with '384'
382 -383 384 0
-384 383 0
-384 -382 0
c Var 'grid_00004_00000' order represents '2' with '385'
-383 385 0
c Var 'grid_00004_00000' direct represents '2' with '386'
383 -385 386 0
-386 385 0
-386 -383 0
c Var 'grid_00004_00000' order represents '3' with '387'
-385 387 0
c Var 'grid_00004_00000' direct represents '3' with '388'
385 -387 388 0
-388 387 0
-388 -385 0
c Var 'grid_00004_00000' order represents '4' with '389'
-387 389 0
c Var 'grid_00004_00000' direct represents '4' with '390'
387 -389 390 0
-390 389 0
-390 -387 0
c Var 'grid_00004_00000' order represents '5' with '391'
-389 391 0
c Var 'grid_00004_00000' direct represents '5' with '392'
389 -391 392 0
-392 391 0
-392 -389 0
c Var 'grid_00004_00000' order represents '6' with '393'
-391 393 0
c Var 'grid_00004_00000' direct represents '6' with '394'
391 -393 394 0
-394 393 0
-394 -391 0
c Var 'grid_00004_00000' order represents '7' with '395'
-393 395 0
c Var 'grid_00004_00000' direct represents '7' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'grid_00004_00000' order represents '8' with '397'
-395 397 0
c Var 'grid_00004_00000' direct represents '8' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'grid_00004_00000' direct represents '9' with '-397'
382 384 386 388 390 392 394 396 398 -397 0
c Encoding variable: grid_00004_00001 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00004_00001' order represents '0' with '399'
c Var 'grid_00004_00001' direct represents '0' with '399'
c Var 'grid_00004_00001' order represents '1' with '400'
-399 400 0
c Var 'grid_00004_00001' direct represents '1' with '401'
399 -400 401 0
-401 400 0
-401 -399 0
c Var 'grid_00004_00001' order represents '2' with '402'
-400 402 0
c Var 'grid_00004_00001' direct represents '2' with '403'
400 -402 403 0
-403 402 0
-403 -400 0
c Var 'grid_00004_00001' order represents '3' with '404'
-402 404 0
c Var 'grid_00004_00001' direct represents '3' with '405'
402 -404 405 0
-405 404 0
-405 -402 0
c Var 'grid_00004_00001' order represents '4' with '406'
-404 406 0
c Var 'grid_00004_00001' direct represents '4' with '407'
404 -406 407 0
-407 406 0
-407 -404 0
c Var 'grid_00004_00001' order represents '5' with '408'
-406 408 0
c Var 'grid_00004_00001' direct represents '5' with '409'
406 -408 409 0
-409 408 0
-409 -406 0
c Var 'grid_00004_00001' order represents '6' with '410'
-408 410 0
c Var 'grid_00004_00001' direct represents '6' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'grid_00004_00001' order represents '7' with '412'
-410 412 0
c Var 'grid_00004_00001' direct represents '7' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'grid_00004_00001' order represents '8' with '414'
-412 414 0
c Var 'grid_00004_00001' direct represents '8' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'grid_00004_00001' direct represents '9' with '-414'
399 401 403 405 407 409 411 413 415 -414 0
c Encoding variable: grid_00004_00002 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00004_00002' order represents '0' with '416'
c Var 'grid_00004_00002' direct represents '0' with '416'
c Var 'grid_00004_00002' order represents '1' with '417'
-416 417 0
c Var 'grid_00004_00002' direct represents '1' with '418'
416 -417 418 0
-418 417 0
-418 -416 0
c Var 'grid_00004_00002' order represents '2' with '419'
-417 419 0
c Var 'grid_00004_00002' direct represents '2' with '420'
417 -419 420 0
-420 419 0
-420 -417 0
c Var 'grid_00004_00002' order represents '3' with '421'
-419 421 0
c Var 'grid_00004_00002' direct represents '3' with '422'
419 -421 422 0
-422 421 0
-422 -419 0
c Var 'grid_00004_00002' order represents '4' with '423'
-421 423 0
c Var 'grid_00004_00002' direct represents '4' with '424'
421 -423 424 0
-424 423 0
-424 -421 0
c Var 'grid_00004_00002' order represents '5' with '425'
-423 425 0
c Var 'grid_00004_00002' direct represents '5' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'grid_00004_00002' order represents '6' with '427'
-425 427 0
c Var 'grid_00004_00002' direct represents '6' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'grid_00004_00002' order represents '7' with '429'
-427 429 0
c Var 'grid_00004_00002' direct represents '7' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'grid_00004_00002' order represents '8' with '431'
-429 431 0
c Var 'grid_00004_00002' direct represents '8' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'grid_00004_00002' direct represents '9' with '-431'
416 418 420 422 424 426 428 430 432 -431 0
c Encoding variable: grid_00004_00003 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00004_00003' order represents '0' with '433'
c Var 'grid_00004_00003' direct represents '0' with '433'
c Var 'grid_00004_00003' order represents '1' with '434'
-433 434 0
c Var 'grid_00004_00003' direct represents '1' with '435'
433 -434 435 0
-435 434 0
-435 -433 0
c Var 'grid_00004_00003' order represents '2' with '436'
-434 436 0
c Var 'grid_00004_00003' direct represents '2' with '437'
434 -436 437 0
-437 436 0
-437 -434 0
c Var 'grid_00004_00003' order represents '3' with '438'
-436 438 0
c Var 'grid_00004_00003' direct represents '3' with '439'
436 -438 439 0
-439 438 0
-439 -436 0
c Var 'grid_00004_00003' order represents '4' with '440'
-438 440 0
c Var 'grid_00004_00003' direct represents '4' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'grid_00004_00003' order represents '5' with '442'
-440 442 0
c Var 'grid_00004_00003' direct represents '5' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'grid_00004_00003' order represents '6' with '444'
-442 444 0
c Var 'grid_00004_00003' direct represents '6' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'grid_00004_00003' order represents '7' with '446'
-444 446 0
c Var 'grid_00004_00003' direct represents '7' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'grid_00004_00003' order represents '8' with '448'
-446 448 0
c Var 'grid_00004_00003' direct represents '8' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'grid_00004_00003' direct represents '9' with '-448'
433 435 437 439 441 443 445 447 449 -448 0
c Encoding variable: grid_00004_00004 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00004_00004' order represents '0' with '450'
c Var 'grid_00004_00004' direct represents '0' with '450'
c Var 'grid_00004_00004' order represents '1' with '451'
-450 451 0
c Var 'grid_00004_00004' direct represents '1' with '452'
450 -451 452 0
-452 451 0
-452 -450 0
c Var 'grid_00004_00004' order represents '2' with '453'
-451 453 0
c Var 'grid_00004_00004' direct represents '2' with '454'
451 -453 454 0
-454 453 0
-454 -451 0
c Var 'grid_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'grid_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'grid_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'grid_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'grid_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'grid_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'grid_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'grid_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'grid_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'grid_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'grid_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'grid_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'grid_00004_00004' direct represents '9' with '-465'
450 452 454 456 458 460 462 464 466 -465 0
c Encoding variable: grid_00004_00005 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00004_00005' order represents '0' with '467'
c Var 'grid_00004_00005' direct represents '0' with '467'
c Var 'grid_00004_00005' order represents '1' with '468'
-467 468 0
c Var 'grid_00004_00005' direct represents '1' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'grid_00004_00005' order represents '2' with '470'
-468 470 0
c Var 'grid_00004_00005' direct represents '2' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'grid_00004_00005' order represents '3' with '472'
-470 472 0
c Var 'grid_00004_00005' direct represents '3' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'grid_00004_00005' order represents '4' with '474'
-472 474 0
c Var 'grid_00004_00005' direct represents '4' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'grid_00004_00005' order represents '5' with '476'
-474 476 0
c Var 'grid_00004_00005' direct represents '5' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'grid_00004_00005' order represents '6' with '478'
-476 478 0
c Var 'grid_00004_00005' direct represents '6' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'grid_00004_00005' order represents '7' with '480'
-478 480 0
c Var 'grid_00004_00005' direct represents '7' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'grid_00004_00005' order represents '8' with '482'
-480 482 0
c Var 'grid_00004_00005' direct represents '8' with '483'
480 -482 483 0
-483 482 0
-483 -480 0
c Var 'grid_00004_00005' direct represents '9' with '-482'
467 469 471 473 475 477 479 481 483 -482 0
c Encoding variable: grid_00004_00006 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00004_00006' order represents '0' with '484'
c Var 'grid_00004_00006' direct represents '0' with '484'
c Var 'grid_00004_00006' order represents '1' with '485'
-484 485 0
c Var 'grid_00004_00006' direct represents '1' with '486'
484 -485 486 0
-486 485 0
-486 -484 0
c Var 'grid_00004_00006' order represents '2' with '487'
-485 487 0
c Var 'grid_00004_00006' direct represents '2' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'grid_00004_00006' order represents '3' with '489'
-487 489 0
c Var 'grid_00004_00006' direct represents '3' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'grid_00004_00006' order represents '4' with '491'
-489 491 0
c Var 'grid_00004_00006' direct represents '4' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'grid_00004_00006' order represents '5' with '493'
-491 493 0
c Var 'grid_00004_00006' direct represents '5' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'grid_00004_00006' order represents '6' with '495'
-493 495 0
c Var 'grid_00004_00006' direct represents '6' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'grid_00004_00006' order represents '7' with '497'
-495 497 0
c Var 'grid_00004_00006' direct represents '7' with '498'
495 -497 498 0
-498 497 0
-498 -495 0
c Var 'grid_00004_00006' order represents '8' with '499'
-497 499 0
c Var 'grid_00004_00006' direct represents '8' with '500'
497 -499 500 0
-500 499 0
-500 -497 0
c Var 'grid_00004_00006' direct represents '9' with '-499'
484 486 488 490 492 494 496 498 500 -499 0
c Encoding variable: grid_00005_00000 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00005_00000' order represents '0' with '501'
c Var 'grid_00005_00000' direct represents '0' with '501'
c Var 'grid_00005_00000' order represents '1' with '502'
-501 502 0
c Var 'grid_00005_00000' direct represents '1' with '503'
501 -502 503 0
-503 502 0
-503 -501 0
c Var 'grid_00005_00000' order represents '2' with '504'
-502 504 0
c Var 'grid_00005_00000' direct represents '2' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'grid_00005_00000' order represents '3' with '506'
-504 506 0
c Var 'grid_00005_00000' direct represents '3' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'grid_00005_00000' order represents '4' with '508'
-506 508 0
c Var 'grid_00005_00000' direct represents '4' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'grid_00005_00000' order represents '5' with '510'
-508 510 0
c Var 'grid_00005_00000' direct represents '5' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'grid_00005_00000' order represents '6' with '512'
-510 512 0
c Var 'grid_00005_00000' direct represents '6' with '513'
510 -512 513 0
-513 512 0
-513 -510 0
c Var 'grid_00005_00000' order represents '7' with '514'
-512 514 0
c Var 'grid_00005_00000' direct represents '7' with '515'
512 -514 515 0
-515 514 0
-515 -512 0
c Var 'grid_00005_00000' order represents '8' with '516'
-514 516 0
c Var 'grid_00005_00000' direct represents '8' with '517'
514 -516 517 0
-517 516 0
-517 -514 0
c Var 'grid_00005_00000' direct represents '9' with '-516'
501 503 505 507 509 511 513 515 517 -516 0
c Encoding variable: grid_00005_00001 with domain: int(-7) (representing constraint )
c Var 'grid_00005_00001' direct represents '-7' with '518'
518 0
c Encoding variable: grid_00005_00002 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00005_00002' order represents '0' with '519'
c Var 'grid_00005_00002' direct represents '0' with '519'
c Var 'grid_00005_00002' order represents '1' with '520'
-519 520 0
c Var 'grid_00005_00002' direct represents '1' with '521'
519 -520 521 0
-521 520 0
-521 -519 0
c Var 'grid_00005_00002' order represents '2' with '522'
-520 522 0
c Var 'grid_00005_00002' direct represents '2' with '523'
520 -522 523 0
-523 522 0
-523 -520 0
c Var 'grid_00005_00002' order represents '3' with '524'
-522 524 0
c Var 'grid_00005_00002' direct represents '3' with '525'
522 -524 525 0
-525 524 0
-525 -522 0
c Var 'grid_00005_00002' order represents '4' with '526'
-524 526 0
c Var 'grid_00005_00002' direct represents '4' with '527'
524 -526 527 0
-527 526 0
-527 -524 0
c Var 'grid_00005_00002' order represents '5' with '528'
-526 528 0
c Var 'grid_00005_00002' direct represents '5' with '529'
526 -528 529 0
-529 528 0
-529 -526 0
c Var 'grid_00005_00002' order represents '6' with '530'
-528 530 0
c Var 'grid_00005_00002' direct represents '6' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'grid_00005_00002' order represents '7' with '532'
-530 532 0
c Var 'grid_00005_00002' direct represents '7' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'grid_00005_00002' order represents '8' with '534'
-532 534 0
c Var 'grid_00005_00002' direct represents '8' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'grid_00005_00002' direct represents '9' with '-534'
519 521 523 525 527 529 531 533 535 -534 0
c Encoding variable: grid_00005_00003 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00005_00003' order represents '0' with '536'
c Var 'grid_00005_00003' direct represents '0' with '536'
c Var 'grid_00005_00003' order represents '1' with '537'
-536 537 0
c Var 'grid_00005_00003' direct represents '1' with '538'
536 -537 538 0
-538 537 0
-538 -536 0
c Var 'grid_00005_00003' order represents '2' with '539'
-537 539 0
c Var 'grid_00005_00003' direct represents '2' with '540'
537 -539 540 0
-540 539 0
-540 -537 0
c Var 'grid_00005_00003' order represents '3' with '541'
-539 541 0
c Var 'grid_00005_00003' direct represents '3' with '542'
539 -541 542 0
-542 541 0
-542 -539 0
c Var 'grid_00005_00003' order represents '4' with '543'
-541 543 0
c Var 'grid_00005_00003' direct represents '4' with '544'
541 -543 544 0
-544 543 0
-544 -541 0
c Var 'grid_00005_00003' order represents '5' with '545'
-543 545 0
c Var 'grid_00005_00003' direct represents '5' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'grid_00005_00003' order represents '6' with '547'
-545 547 0
c Var 'grid_00005_00003' direct represents '6' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'grid_00005_00003' order represents '7' with '549'
-547 549 0
c Var 'grid_00005_00003' direct represents '7' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'grid_00005_00003' order represents '8' with '551'
-549 551 0
c Var 'grid_00005_00003' direct represents '8' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'grid_00005_00003' direct represents '9' with '-551'
536 538 540 542 544 546 548 550 552 -551 0
c Encoding variable: grid_00005_00004 with domain: int(-8) (representing constraint )
c Var 'grid_00005_00004' direct represents '-8' with '553'
553 0
c Encoding variable: grid_00005_00005 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00005_00005' order represents '0' with '554'
c Var 'grid_00005_00005' direct represents '0' with '554'
c Var 'grid_00005_00005' order represents '1' with '555'
-554 555 0
c Var 'grid_00005_00005' direct represents '1' with '556'
554 -555 556 0
-556 555 0
-556 -554 0
c Var 'grid_00005_00005' order represents '2' with '557'
-555 557 0
c Var 'grid_00005_00005' direct represents '2' with '558'
555 -557 558 0
-558 557 0
-558 -555 0
c Var 'grid_00005_00005' order represents '3' with '559'
-557 559 0
c Var 'grid_00005_00005' direct represents '3' with '560'
557 -559 560 0
-560 559 0
-560 -557 0
c Var 'grid_00005_00005' order represents '4' with '561'
-559 561 0
c Var 'grid_00005_00005' direct represents '4' with '562'
559 -561 562 0
-562 561 0
-562 -559 0
c Var 'grid_00005_00005' order represents '5' with '563'
-561 563 0
c Var 'grid_00005_00005' direct represents '5' with '564'
561 -563 564 0
-564 563 0
-564 -561 0
c Var 'grid_00005_00005' order represents '6' with '565'
-563 565 0
c Var 'grid_00005_00005' direct represents '6' with '566'
563 -565 566 0
-566 565 0
-566 -563 0
c Var 'grid_00005_00005' order represents '7' with '567'
-565 567 0
c Var 'grid_00005_00005' direct represents '7' with '568'
565 -567 568 0
-568 567 0
-568 -565 0
c Var 'grid_00005_00005' order represents '8' with '569'
-567 569 0
c Var 'grid_00005_00005' direct represents '8' with '570'
567 -569 570 0
-570 569 0
-570 -567 0
c Var 'grid_00005_00005' direct represents '9' with '-569'
554 556 558 560 562 564 566 568 570 -569 0
c Encoding variable: grid_00005_00006 with domain: int(-9) (representing constraint )
c Var 'grid_00005_00006' direct represents '-9' with '571'
571 0
c Encoding variable: grid_00006_00000 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00006_00000' order represents '0' with '572'
c Var 'grid_00006_00000' direct represents '0' with '572'
c Var 'grid_00006_00000' order represents '1' with '573'
-572 573 0
c Var 'grid_00006_00000' direct represents '1' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'grid_00006_00000' order represents '2' with '575'
-573 575 0
c Var 'grid_00006_00000' direct represents '2' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'grid_00006_00000' order represents '3' with '577'
-575 577 0
c Var 'grid_00006_00000' direct represents '3' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'grid_00006_00000' order represents '4' with '579'
-577 579 0
c Var 'grid_00006_00000' direct represents '4' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'grid_00006_00000' order represents '5' with '581'
-579 581 0
c Var 'grid_00006_00000' direct represents '5' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'grid_00006_00000' order represents '6' with '583'
-581 583 0
c Var 'grid_00006_00000' direct represents '6' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'grid_00006_00000' order represents '7' with '585'
-583 585 0
c Var 'grid_00006_00000' direct represents '7' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'grid_00006_00000' order represents '8' with '587'
-585 587 0
c Var 'grid_00006_00000' direct represents '8' with '588'
585 -587 588 0
-588 587 0
-588 -585 0
c Var 'grid_00006_00000' direct represents '9' with '-587'
572 574 576 578 580 582 584 586 588 -587 0
c Encoding variable: grid_00006_00001 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00006_00001' order represents '0' with '589'
c Var 'grid_00006_00001' direct represents '0' with '589'
c Var 'grid_00006_00001' order represents '1' with '590'
-589 590 0
c Var 'grid_00006_00001' direct represents '1' with '591'
589 -590 591 0
-591 590 0
-591 -589 0
c Var 'grid_00006_00001' order represents '2' with '592'
-590 592 0
c Var 'grid_00006_00001' direct represents '2' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'grid_00006_00001' order represents '3' with '594'
-592 594 0
c Var 'grid_00006_00001' direct represents '3' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'grid_00006_00001' order represents '4' with '596'
-594 596 0
c Var 'grid_00006_00001' direct represents '4' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'grid_00006_00001' order represents '5' with '598'
-596 598 0
c Var 'grid_00006_00001' direct represents '5' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'grid_00006_00001' order represents '6' with '600'
-598 600 0
c Var 'grid_00006_00001' direct represents '6' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'grid_00006_00001' order represents '7' with '602'
-600 602 0
c Var 'grid_00006_00001' direct represents '7' with '603'
600 -602 603 0
-603 602 0
-603 -600 0
c Var 'grid_00006_00001' order represents '8' with '604'
-602 604 0
c Var 'grid_00006_00001' direct represents '8' with '605'
602 -604 605 0
-605 604 0
-605 -602 0
c Var 'grid_00006_00001' direct represents '9' with '-604'
589 591 593 595 597 599 601 603 605 -604 0
c Encoding variable: grid_00006_00002 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00006_00002' order represents '0' with '606'
c Var 'grid_00006_00002' direct represents '0' with '606'
c Var 'grid_00006_00002' order represents '1' with '607'
-606 607 0
c Var 'grid_00006_00002' direct represents '1' with '608'
606 -607 608 0
-608 607 0
-608 -606 0
c Var 'grid_00006_00002' order represents '2' with '609'
-607 609 0
c Var 'grid_00006_00002' direct represents '2' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'grid_00006_00002' order represents '3' with '611'
-609 611 0
c Var 'grid_00006_00002' direct represents '3' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'grid_00006_00002' order represents '4' with '613'
-611 613 0
c Var 'grid_00006_00002' direct represents '4' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'grid_00006_00002' order represents '5' with '615'
-613 615 0
c Var 'grid_00006_00002' direct represents '5' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'grid_00006_00002' order represents '6' with '617'
-615 617 0
c Var 'grid_00006_00002' direct represents '6' with '618'
615 -617 618 0
-618 617 0
-618 -615 0
c Var 'grid_00006_00002' order represents '7' with '619'
-617 619 0
c Var 'grid_00006_00002' direct represents '7' with '620'
617 -619 620 0
-620 619 0
-620 -617 0
c Var 'grid_00006_00002' order represents '8' with '621'
-619 621 0
c Var 'grid_00006_00002' direct represents '8' with '622'
619 -621 622 0
-622 621 0
-622 -619 0
c Var 'grid_00006_00002' direct represents '9' with '-621'
606 608 610 612 614 616 618 620 622 -621 0
c Encoding variable: grid_00006_00003 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00006_00003' order represents '0' with '623'
c Var 'grid_00006_00003' direct represents '0' with '623'
c Var 'grid_00006_00003' order represents '1' with '624'
-623 624 0
c Var 'grid_00006_00003' direct represents '1' with '625'
623 -624 625 0
-625 624 0
-625 -623 0
c Var 'grid_00006_00003' order represents '2' with '626'
-624 626 0
c Var 'grid_00006_00003' direct represents '2' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'grid_00006_00003' order represents '3' with '628'
-626 628 0
c Var 'grid_00006_00003' direct represents '3' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'grid_00006_00003' order represents '4' with '630'
-628 630 0
c Var 'grid_00006_00003' direct represents '4' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'grid_00006_00003' order represents '5' with '632'
-630 632 0
c Var 'grid_00006_00003' direct represents '5' with '633'
630 -632 633 0
-633 632 0
-633 -630 0
c Var 'grid_00006_00003' order represents '6' with '634'
-632 634 0
c Var 'grid_00006_00003' direct represents '6' with '635'
632 -634 635 0
-635 634 0
-635 -632 0
c Var 'grid_00006_00003' order represents '7' with '636'
-634 636 0
c Var 'grid_00006_00003' direct represents '7' with '637'
634 -636 637 0
-637 636 0
-637 -634 0
c Var 'grid_00006_00003' order represents '8' with '638'
-636 638 0
c Var 'grid_00006_00003' direct represents '8' with '639'
636 -638 639 0
-639 638 0
-639 -636 0
c Var 'grid_00006_00003' direct represents '9' with '-638'
623 625 627 629 631 633 635 637 639 -638 0
c Encoding variable: grid_00006_00004 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00006_00004' order represents '0' with '640'
c Var 'grid_00006_00004' direct represents '0' with '640'
c Var 'grid_00006_00004' order represents '1' with '641'
-640 641 0
c Var 'grid_00006_00004' direct represents '1' with '642'
640 -641 642 0
-642 641 0
-642 -640 0
c Var 'grid_00006_00004' order represents '2' with '643'
-641 643 0
c Var 'grid_00006_00004' direct represents '2' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'grid_00006_00004' order represents '3' with '645'
-643 645 0
c Var 'grid_00006_00004' direct represents '3' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'grid_00006_00004' order represents '4' with '647'
-645 647 0
c Var 'grid_00006_00004' direct represents '4' with '648'
645 -647 648 0
-648 647 0
-648 -645 0
c Var 'grid_00006_00004' order represents '5' with '649'
-647 649 0
c Var 'grid_00006_00004' direct represents '5' with '650'
647 -649 650 0
-650 649 0
-650 -647 0
c Var 'grid_00006_00004' order represents '6' with '651'
-649 651 0
c Var 'grid_00006_00004' direct represents '6' with '652'
649 -651 652 0
-652 651 0
-652 -649 0
c Var 'grid_00006_00004' order represents '7' with '653'
-651 653 0
c Var 'grid_00006_00004' direct represents '7' with '654'
651 -653 654 0
-654 653 0
-654 -651 0
c Var 'grid_00006_00004' order represents '8' with '655'
-653 655 0
c Var 'grid_00006_00004' direct represents '8' with '656'
653 -655 656 0
-656 655 0
-656 -653 0
c Var 'grid_00006_00004' direct represents '9' with '-655'
640 642 644 646 648 650 652 654 656 -655 0
c Encoding variable: grid_00006_00005 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00006_00005' order represents '0' with '657'
c Var 'grid_00006_00005' direct represents '0' with '657'
c Var 'grid_00006_00005' order represents '1' with '658'
-657 658 0
c Var 'grid_00006_00005' direct represents '1' with '659'
657 -658 659 0
-659 658 0
-659 -657 0
c Var 'grid_00006_00005' order represents '2' with '660'
-658 660 0
c Var 'grid_00006_00005' direct represents '2' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'grid_00006_00005' order represents '3' with '662'
-660 662 0
c Var 'grid_00006_00005' direct represents '3' with '663'
660 -662 663 0
-663 662 0
-663 -660 0
c Var 'grid_00006_00005' order represents '4' with '664'
-662 664 0
c Var 'grid_00006_00005' direct represents '4' with '665'
662 -664 665 0
-665 664 0
-665 -662 0
c Var 'grid_00006_00005' order represents '5' with '666'
-664 666 0
c Var 'grid_00006_00005' direct represents '5' with '667'
664 -666 667 0
-667 666 0
-667 -664 0
c Var 'grid_00006_00005' order represents '6' with '668'
-666 668 0
c Var 'grid_00006_00005' direct represents '6' with '669'
666 -668 669 0
-669 668 0
-669 -666 0
c Var 'grid_00006_00005' order represents '7' with '670'
-668 670 0
c Var 'grid_00006_00005' direct represents '7' with '671'
668 -670 671 0
-671 670 0
-671 -668 0
c Var 'grid_00006_00005' order represents '8' with '672'
-670 672 0
c Var 'grid_00006_00005' direct represents '8' with '673'
670 -672 673 0
-673 672 0
-673 -670 0
c Var 'grid_00006_00005' direct represents '9' with '-672'
657 659 661 663 665 667 669 671 673 -672 0
c Encoding variable: grid_00006_00006 with domain: int(0..9) (representing constraint )
c Both direct and order encoding.
c Var 'grid_00006_00006' order represents '0' with '674'
c Var 'grid_00006_00006' direct represents '0' with '674'
c Var 'grid_00006_00006' order represents '1' with '675'
-674 675 0
c Var 'grid_00006_00006' direct represents '1' with '676'
674 -675 676 0
-676 675 0
-676 -674 0
c Var 'grid_00006_00006' order represents '2' with '677'
-675 677 0
c Var 'grid_00006_00006' direct represents '2' with '678'
675 -677 678 0
-678 677 0
-678 -675 0
c Var 'grid_00006_00006' order represents '3' with '679'
-677 679 0
c Var 'grid_00006_00006' direct represents '3' with '680'
677 -679 680 0
-680 679 0
-680 -677 0
c Var 'grid_00006_00006' order represents '4' with '681'
-679 681 0
c Var 'grid_00006_00006' direct represents '4' with '682'
679 -681 682 0
-682 681 0
-682 -679 0
c Var 'grid_00006_00006' order represents '5' with '683'
-681 683 0
c Var 'grid_00006_00006' direct represents '5' with '684'
681 -683 684 0
-684 683 0
-684 -681 0
c Var 'grid_00006_00006' order represents '6' with '685'
-683 685 0
c Var 'grid_00006_00006' direct represents '6' with '686'
683 -685 686 0
-686 685 0
-686 -683 0
c Var 'grid_00006_00006' order represents '7' with '687'
-685 687 0
c Var 'grid_00006_00006' direct represents '7' with '688'
685 -687 688 0
-688 687 0
-688 -685 0
c Var 'grid_00006_00006' order represents '8' with '689'
-687 689 0
c Var 'grid_00006_00006' direct represents '8' with '690'
687 -689 690 0
-690 689 0
-690 -687 0
c Var 'grid_00006_00006' direct represents '9' with '-689'
674 676 678 680 682 684 686 688 690 -689 0
c Encoding variable: adj_00000_00000_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00000_n00001_n00001' direct represents '0' with '-691'
c Var 'adj_00000_00000_n00001_n00001' direct represents '1' with '691'
c Var 'adj_00000_00000_n00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00000_n00001_n00001' order represents '0' with '-691'
691 -691 0
c Encoding variable: adj_00000_00000_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00000_n00001_00000' direct represents '0' with '-692'
c Var 'adj_00000_00000_n00001_00000' direct represents '1' with '692'
c Var 'adj_00000_00000_n00001_00000' order represents '1' with '1'
c Var 'adj_00000_00000_n00001_00000' order represents '0' with '-692'
692 -692 0
c Encoding variable: adj_00000_00000_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00000_n00001_00001' direct represents '0' with '-693'
c Var 'adj_00000_00000_n00001_00001' direct represents '1' with '693'
c Var 'adj_00000_00000_n00001_00001' order represents '1' with '1'
c Var 'adj_00000_00000_n00001_00001' order represents '0' with '-693'
693 -693 0
c Encoding variable: adj_00000_00000_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00000_00000_n00001' direct represents '0' with '-694'
c Var 'adj_00000_00000_00000_n00001' direct represents '1' with '694'
c Var 'adj_00000_00000_00000_n00001' order represents '1' with '1'
c Var 'adj_00000_00000_00000_n00001' order represents '0' with '-694'
694 -694 0
c Encoding variable: adj_00000_00000_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00000_00000_00000' direct represents '0' with '-695'
c Var 'adj_00000_00000_00000_00000' direct represents '1' with '695'
c Var 'adj_00000_00000_00000_00000' order represents '1' with '1'
c Var 'adj_00000_00000_00000_00000' order represents '0' with '-695'
695 -695 0
c Encoding variable: adj_00000_00000_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00000_00000_00001' direct represents '0' with '-696'
c Var 'adj_00000_00000_00000_00001' direct represents '1' with '696'
c Var 'adj_00000_00000_00000_00001' order represents '1' with '1'
c Var 'adj_00000_00000_00000_00001' order represents '0' with '-696'
696 -696 0
c Encoding variable: adj_00000_00000_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00000_00001_n00001' direct represents '0' with '-697'
c Var 'adj_00000_00000_00001_n00001' direct represents '1' with '697'
c Var 'adj_00000_00000_00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00000_00001_n00001' order represents '0' with '-697'
697 -697 0
c Encoding variable: adj_00000_00000_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00000_00001_00000' direct represents '0' with '-698'
c Var 'adj_00000_00000_00001_00000' direct represents '1' with '698'
c Var 'adj_00000_00000_00001_00000' order represents '1' with '1'
c Var 'adj_00000_00000_00001_00000' order represents '0' with '-698'
698 -698 0
c Encoding variable: adj_00000_00000_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00000_00001_00001' direct represents '0' with '-699'
c Var 'adj_00000_00000_00001_00001' direct represents '1' with '699'
c Var 'adj_00000_00000_00001_00001' order represents '1' with '1'
c Var 'adj_00000_00000_00001_00001' order represents '0' with '-699'
699 -699 0
c Encoding variable: adj_00000_00001_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00001_n00001_n00001' direct represents '0' with '-700'
c Var 'adj_00000_00001_n00001_n00001' direct represents '1' with '700'
c Var 'adj_00000_00001_n00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00001_n00001_n00001' order represents '0' with '-700'
700 -700 0
c Encoding variable: adj_00000_00001_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00001_n00001_00000' direct represents '0' with '-701'
c Var 'adj_00000_00001_n00001_00000' direct represents '1' with '701'
c Var 'adj_00000_00001_n00001_00000' order represents '1' with '1'
c Var 'adj_00000_00001_n00001_00000' order represents '0' with '-701'
701 -701 0
c Encoding variable: adj_00000_00001_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00001_n00001_00001' direct represents '0' with '-702'
c Var 'adj_00000_00001_n00001_00001' direct represents '1' with '702'
c Var 'adj_00000_00001_n00001_00001' order represents '1' with '1'
c Var 'adj_00000_00001_n00001_00001' order represents '0' with '-702'
702 -702 0
c Encoding variable: adj_00000_00001_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00001_00000_n00001' direct represents '0' with '-703'
c Var 'adj_00000_00001_00000_n00001' direct represents '1' with '703'
c Var 'adj_00000_00001_00000_n00001' order represents '1' with '1'
c Var 'adj_00000_00001_00000_n00001' order represents '0' with '-703'
703 -703 0
c Encoding variable: adj_00000_00001_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00001_00000_00000' direct represents '0' with '-704'
c Var 'adj_00000_00001_00000_00000' direct represents '1' with '704'
c Var 'adj_00000_00001_00000_00000' order represents '1' with '1'
c Var 'adj_00000_00001_00000_00000' order represents '0' with '-704'
704 -704 0
c Encoding variable: adj_00000_00001_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00001_00000_00001' direct represents '0' with '-705'
c Var 'adj_00000_00001_00000_00001' direct represents '1' with '705'
c Var 'adj_00000_00001_00000_00001' order represents '1' with '1'
c Var 'adj_00000_00001_00000_00001' order represents '0' with '-705'
705 -705 0
c Encoding variable: adj_00000_00001_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00001_00001_n00001' direct represents '0' with '-706'
c Var 'adj_00000_00001_00001_n00001' direct represents '1' with '706'
c Var 'adj_00000_00001_00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00001_00001_n00001' order represents '0' with '-706'
c Encoding variable: adj_00000_00001_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00001_00001_00000' direct represents '0' with '-707'
c Var 'adj_00000_00001_00001_00000' direct represents '1' with '707'
c Var 'adj_00000_00001_00001_00000' order represents '1' with '1'
c Var 'adj_00000_00001_00001_00000' order represents '0' with '-707'
707 -707 0
c Encoding variable: adj_00000_00001_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00001_00001_00001' direct represents '0' with '-708'
c Var 'adj_00000_00001_00001_00001' direct represents '1' with '708'
c Var 'adj_00000_00001_00001_00001' order represents '1' with '1'
c Var 'adj_00000_00001_00001_00001' order represents '0' with '-708'
c Encoding variable: adj_00000_00002_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00002_n00001_n00001' direct represents '0' with '-709'
c Var 'adj_00000_00002_n00001_n00001' direct represents '1' with '709'
c Var 'adj_00000_00002_n00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00002_n00001_n00001' order represents '0' with '-709'
709 -709 0
c Encoding variable: adj_00000_00002_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00002_n00001_00000' direct represents '0' with '-710'
c Var 'adj_00000_00002_n00001_00000' direct represents '1' with '710'
c Var 'adj_00000_00002_n00001_00000' order represents '1' with '1'
c Var 'adj_00000_00002_n00001_00000' order represents '0' with '-710'
710 -710 0
c Encoding variable: adj_00000_00002_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00002_n00001_00001' direct represents '0' with '-711'
c Var 'adj_00000_00002_n00001_00001' direct represents '1' with '711'
c Var 'adj_00000_00002_n00001_00001' order represents '1' with '1'
c Var 'adj_00000_00002_n00001_00001' order represents '0' with '-711'
711 -711 0
c Encoding variable: adj_00000_00002_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00002_00000_n00001' direct represents '0' with '-712'
c Var 'adj_00000_00002_00000_n00001' direct represents '1' with '712'
c Var 'adj_00000_00002_00000_n00001' order represents '1' with '1'
c Var 'adj_00000_00002_00000_n00001' order represents '0' with '-712'
c Encoding variable: adj_00000_00002_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00002_00000_00000' direct represents '0' with '-713'
c Var 'adj_00000_00002_00000_00000' direct represents '1' with '713'
c Var 'adj_00000_00002_00000_00000' order represents '1' with '1'
c Var 'adj_00000_00002_00000_00000' order represents '0' with '-713'
713 -713 0
c Encoding variable: adj_00000_00002_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00002_00000_00001' direct represents '0' with '-714'
c Var 'adj_00000_00002_00000_00001' direct represents '1' with '714'
c Var 'adj_00000_00002_00000_00001' order represents '1' with '1'
c Var 'adj_00000_00002_00000_00001' order represents '0' with '-714'
714 -714 0
c Encoding variable: adj_00000_00002_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00002_00001_n00001' direct represents '0' with '-715'
c Var 'adj_00000_00002_00001_n00001' direct represents '1' with '715'
c Var 'adj_00000_00002_00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00002_00001_n00001' order represents '0' with '-715'
715 -715 0
c Encoding variable: adj_00000_00002_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00002_00001_00000' direct represents '0' with '-716'
c Var 'adj_00000_00002_00001_00000' direct represents '1' with '716'
c Var 'adj_00000_00002_00001_00000' order represents '1' with '1'
c Var 'adj_00000_00002_00001_00000' order represents '0' with '-716'
c Encoding variable: adj_00000_00002_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00002_00001_00001' direct represents '0' with '-717'
c Var 'adj_00000_00002_00001_00001' direct represents '1' with '717'
c Var 'adj_00000_00002_00001_00001' order represents '1' with '1'
c Var 'adj_00000_00002_00001_00001' order represents '0' with '-717'
c Encoding variable: adj_00000_00003_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00003_n00001_n00001' direct represents '0' with '-718'
c Var 'adj_00000_00003_n00001_n00001' direct represents '1' with '718'
c Var 'adj_00000_00003_n00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00003_n00001_n00001' order represents '0' with '-718'
718 -718 0
c Encoding variable: adj_00000_00003_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00003_n00001_00000' direct represents '0' with '-719'
c Var 'adj_00000_00003_n00001_00000' direct represents '1' with '719'
c Var 'adj_00000_00003_n00001_00000' order represents '1' with '1'
c Var 'adj_00000_00003_n00001_00000' order represents '0' with '-719'
719 -719 0
c Encoding variable: adj_00000_00003_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00003_n00001_00001' direct represents '0' with '-720'
c Var 'adj_00000_00003_n00001_00001' direct represents '1' with '720'
c Var 'adj_00000_00003_n00001_00001' order represents '1' with '1'
c Var 'adj_00000_00003_n00001_00001' order represents '0' with '-720'
720 -720 0
c Encoding variable: adj_00000_00003_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00003_00000_n00001' direct represents '0' with '-721'
c Var 'adj_00000_00003_00000_n00001' direct represents '1' with '721'
c Var 'adj_00000_00003_00000_n00001' order represents '1' with '1'
c Var 'adj_00000_00003_00000_n00001' order represents '0' with '-721'
c Encoding variable: adj_00000_00003_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00003_00000_00000' direct represents '0' with '-722'
c Var 'adj_00000_00003_00000_00000' direct represents '1' with '722'
c Var 'adj_00000_00003_00000_00000' order represents '1' with '1'
c Var 'adj_00000_00003_00000_00000' order represents '0' with '-722'
722 -722 0
c Encoding variable: adj_00000_00003_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00003_00000_00001' direct represents '0' with '-723'
c Var 'adj_00000_00003_00000_00001' direct represents '1' with '723'
c Var 'adj_00000_00003_00000_00001' order represents '1' with '1'
c Var 'adj_00000_00003_00000_00001' order represents '0' with '-723'
723 -723 0
c Encoding variable: adj_00000_00003_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00003_00001_n00001' direct represents '0' with '-724'
c Var 'adj_00000_00003_00001_n00001' direct represents '1' with '724'
c Var 'adj_00000_00003_00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00003_00001_n00001' order represents '0' with '-724'
c Encoding variable: adj_00000_00003_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00003_00001_00000' direct represents '0' with '-725'
c Var 'adj_00000_00003_00001_00000' direct represents '1' with '725'
c Var 'adj_00000_00003_00001_00000' order represents '1' with '1'
c Var 'adj_00000_00003_00001_00000' order represents '0' with '-725'
c Encoding variable: adj_00000_00003_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00003_00001_00001' direct represents '0' with '-726'
c Var 'adj_00000_00003_00001_00001' direct represents '1' with '726'
c Var 'adj_00000_00003_00001_00001' order represents '1' with '1'
c Var 'adj_00000_00003_00001_00001' order represents '0' with '-726'
726 -726 0
c Encoding variable: adj_00000_00004_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00004_n00001_n00001' direct represents '0' with '-727'
c Var 'adj_00000_00004_n00001_n00001' direct represents '1' with '727'
c Var 'adj_00000_00004_n00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00004_n00001_n00001' order represents '0' with '-727'
727 -727 0
c Encoding variable: adj_00000_00004_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00004_n00001_00000' direct represents '0' with '-728'
c Var 'adj_00000_00004_n00001_00000' direct represents '1' with '728'
c Var 'adj_00000_00004_n00001_00000' order represents '1' with '1'
c Var 'adj_00000_00004_n00001_00000' order represents '0' with '-728'
728 -728 0
c Encoding variable: adj_00000_00004_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00004_n00001_00001' direct represents '0' with '-729'
c Var 'adj_00000_00004_n00001_00001' direct represents '1' with '729'
c Var 'adj_00000_00004_n00001_00001' order represents '1' with '1'
c Var 'adj_00000_00004_n00001_00001' order represents '0' with '-729'
729 -729 0
c Encoding variable: adj_00000_00004_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00004_00000_n00001' direct represents '0' with '-730'
c Var 'adj_00000_00004_00000_n00001' direct represents '1' with '730'
c Var 'adj_00000_00004_00000_n00001' order represents '1' with '1'
c Var 'adj_00000_00004_00000_n00001' order represents '0' with '-730'
c Encoding variable: adj_00000_00004_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00004_00000_00000' direct represents '0' with '-731'
c Var 'adj_00000_00004_00000_00000' direct represents '1' with '731'
c Var 'adj_00000_00004_00000_00000' order represents '1' with '1'
c Var 'adj_00000_00004_00000_00000' order represents '0' with '-731'
731 -731 0
c Encoding variable: adj_00000_00004_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00004_00000_00001' direct represents '0' with '-732'
c Var 'adj_00000_00004_00000_00001' direct represents '1' with '732'
c Var 'adj_00000_00004_00000_00001' order represents '1' with '1'
c Var 'adj_00000_00004_00000_00001' order represents '0' with '-732'
732 -732 0
c Encoding variable: adj_00000_00004_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00004_00001_n00001' direct represents '0' with '-733'
c Var 'adj_00000_00004_00001_n00001' direct represents '1' with '733'
c Var 'adj_00000_00004_00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00004_00001_n00001' order represents '0' with '-733'
c Encoding variable: adj_00000_00004_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00004_00001_00000' direct represents '0' with '-734'
c Var 'adj_00000_00004_00001_00000' direct represents '1' with '734'
c Var 'adj_00000_00004_00001_00000' order represents '1' with '1'
c Var 'adj_00000_00004_00001_00000' order represents '0' with '-734'
734 -734 0
c Encoding variable: adj_00000_00004_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00004_00001_00001' direct represents '0' with '-735'
c Var 'adj_00000_00004_00001_00001' direct represents '1' with '735'
c Var 'adj_00000_00004_00001_00001' order represents '1' with '1'
c Var 'adj_00000_00004_00001_00001' order represents '0' with '-735'
c Encoding variable: adj_00000_00005_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00005_n00001_n00001' direct represents '0' with '-736'
c Var 'adj_00000_00005_n00001_n00001' direct represents '1' with '736'
c Var 'adj_00000_00005_n00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00005_n00001_n00001' order represents '0' with '-736'
736 -736 0
c Encoding variable: adj_00000_00005_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00005_n00001_00000' direct represents '0' with '-737'
c Var 'adj_00000_00005_n00001_00000' direct represents '1' with '737'
c Var 'adj_00000_00005_n00001_00000' order represents '1' with '1'
c Var 'adj_00000_00005_n00001_00000' order represents '0' with '-737'
737 -737 0
c Encoding variable: adj_00000_00005_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00005_n00001_00001' direct represents '0' with '-738'
c Var 'adj_00000_00005_n00001_00001' direct represents '1' with '738'
c Var 'adj_00000_00005_n00001_00001' order represents '1' with '1'
c Var 'adj_00000_00005_n00001_00001' order represents '0' with '-738'
738 -738 0
c Encoding variable: adj_00000_00005_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00005_00000_n00001' direct represents '0' with '-739'
c Var 'adj_00000_00005_00000_n00001' direct represents '1' with '739'
c Var 'adj_00000_00005_00000_n00001' order represents '1' with '1'
c Var 'adj_00000_00005_00000_n00001' order represents '0' with '-739'
c Encoding variable: adj_00000_00005_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00005_00000_00000' direct represents '0' with '-740'
c Var 'adj_00000_00005_00000_00000' direct represents '1' with '740'
c Var 'adj_00000_00005_00000_00000' order represents '1' with '1'
c Var 'adj_00000_00005_00000_00000' order represents '0' with '-740'
740 -740 0
c Encoding variable: adj_00000_00005_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00005_00000_00001' direct represents '0' with '-741'
c Var 'adj_00000_00005_00000_00001' direct represents '1' with '741'
c Var 'adj_00000_00005_00000_00001' order represents '1' with '1'
c Var 'adj_00000_00005_00000_00001' order represents '0' with '-741'
741 -741 0
c Encoding variable: adj_00000_00005_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00005_00001_n00001' direct represents '0' with '-742'
c Var 'adj_00000_00005_00001_n00001' direct represents '1' with '742'
c Var 'adj_00000_00005_00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00005_00001_n00001' order represents '0' with '-742'
742 -742 0
c Encoding variable: adj_00000_00005_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00005_00001_00000' direct represents '0' with '-743'
c Var 'adj_00000_00005_00001_00000' direct represents '1' with '743'
c Var 'adj_00000_00005_00001_00000' order represents '1' with '1'
c Var 'adj_00000_00005_00001_00000' order represents '0' with '-743'
c Encoding variable: adj_00000_00005_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00005_00001_00001' direct represents '0' with '-744'
c Var 'adj_00000_00005_00001_00001' direct represents '1' with '744'
c Var 'adj_00000_00005_00001_00001' order represents '1' with '1'
c Var 'adj_00000_00005_00001_00001' order represents '0' with '-744'
744 -744 0
c Encoding variable: adj_00000_00006_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00006_n00001_n00001' direct represents '0' with '-745'
c Var 'adj_00000_00006_n00001_n00001' direct represents '1' with '745'
c Var 'adj_00000_00006_n00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00006_n00001_n00001' order represents '0' with '-745'
745 -745 0
c Encoding variable: adj_00000_00006_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00006_n00001_00000' direct represents '0' with '-746'
c Var 'adj_00000_00006_n00001_00000' direct represents '1' with '746'
c Var 'adj_00000_00006_n00001_00000' order represents '1' with '1'
c Var 'adj_00000_00006_n00001_00000' order represents '0' with '-746'
746 -746 0
c Encoding variable: adj_00000_00006_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00006_n00001_00001' direct represents '0' with '-747'
c Var 'adj_00000_00006_n00001_00001' direct represents '1' with '747'
c Var 'adj_00000_00006_n00001_00001' order represents '1' with '1'
c Var 'adj_00000_00006_n00001_00001' order represents '0' with '-747'
747 -747 0
c Encoding variable: adj_00000_00006_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00006_00000_n00001' direct represents '0' with '-748'
c Var 'adj_00000_00006_00000_n00001' direct represents '1' with '748'
c Var 'adj_00000_00006_00000_n00001' order represents '1' with '1'
c Var 'adj_00000_00006_00000_n00001' order represents '0' with '-748'
c Encoding variable: adj_00000_00006_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00006_00000_00000' direct represents '0' with '-749'
c Var 'adj_00000_00006_00000_00000' direct represents '1' with '749'
c Var 'adj_00000_00006_00000_00000' order represents '1' with '1'
c Var 'adj_00000_00006_00000_00000' order represents '0' with '-749'
749 -749 0
c Encoding variable: adj_00000_00006_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00006_00000_00001' direct represents '0' with '-750'
c Var 'adj_00000_00006_00000_00001' direct represents '1' with '750'
c Var 'adj_00000_00006_00000_00001' order represents '1' with '1'
c Var 'adj_00000_00006_00000_00001' order represents '0' with '-750'
750 -750 0
c Encoding variable: adj_00000_00006_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00000_00006_00001_n00001' direct represents '0' with '-751'
c Var 'adj_00000_00006_00001_n00001' direct represents '1' with '751'
c Var 'adj_00000_00006_00001_n00001' order represents '1' with '1'
c Var 'adj_00000_00006_00001_n00001' order represents '0' with '-751'
c Encoding variable: adj_00000_00006_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00000_00006_00001_00000' direct represents '0' with '-752'
c Var 'adj_00000_00006_00001_00000' direct represents '1' with '752'
c Var 'adj_00000_00006_00001_00000' order represents '1' with '1'
c Var 'adj_00000_00006_00001_00000' order represents '0' with '-752'
752 -752 0
c Encoding variable: adj_00000_00006_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00000_00006_00001_00001' direct represents '0' with '-753'
c Var 'adj_00000_00006_00001_00001' direct represents '1' with '753'
c Var 'adj_00000_00006_00001_00001' order represents '1' with '1'
c Var 'adj_00000_00006_00001_00001' order represents '0' with '-753'
753 -753 0
c Encoding variable: adj_00001_00000_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00000_n00001_n00001' direct represents '0' with '-754'
c Var 'adj_00001_00000_n00001_n00001' direct represents '1' with '754'
c Var 'adj_00001_00000_n00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00000_n00001_n00001' order represents '0' with '-754'
754 -754 0
c Encoding variable: adj_00001_00000_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00000_n00001_00000' direct represents '0' with '-755'
c Var 'adj_00001_00000_n00001_00000' direct represents '1' with '755'
c Var 'adj_00001_00000_n00001_00000' order represents '1' with '1'
c Var 'adj_00001_00000_n00001_00000' order represents '0' with '-755'
755 -755 0
c Encoding variable: adj_00001_00000_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00000_n00001_00001' direct represents '0' with '-756'
c Var 'adj_00001_00000_n00001_00001' direct represents '1' with '756'
c Var 'adj_00001_00000_n00001_00001' order represents '1' with '1'
c Var 'adj_00001_00000_n00001_00001' order represents '0' with '-756'
756 -756 0
c Encoding variable: adj_00001_00000_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00000_00000_n00001' direct represents '0' with '-757'
c Var 'adj_00001_00000_00000_n00001' direct represents '1' with '757'
c Var 'adj_00001_00000_00000_n00001' order represents '1' with '1'
c Var 'adj_00001_00000_00000_n00001' order represents '0' with '-757'
757 -757 0
c Encoding variable: adj_00001_00000_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00000_00000_00000' direct represents '0' with '-758'
c Var 'adj_00001_00000_00000_00000' direct represents '1' with '758'
c Var 'adj_00001_00000_00000_00000' order represents '1' with '1'
c Var 'adj_00001_00000_00000_00000' order represents '0' with '-758'
758 -758 0
c Encoding variable: adj_00001_00000_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00000_00000_00001' direct represents '0' with '-759'
c Var 'adj_00001_00000_00000_00001' direct represents '1' with '759'
c Var 'adj_00001_00000_00000_00001' order represents '1' with '1'
c Var 'adj_00001_00000_00000_00001' order represents '0' with '-759'
759 -759 0
c Encoding variable: adj_00001_00000_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00000_00001_n00001' direct represents '0' with '-760'
c Var 'adj_00001_00000_00001_n00001' direct represents '1' with '760'
c Var 'adj_00001_00000_00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00000_00001_n00001' order represents '0' with '-760'
760 -760 0
c Encoding variable: adj_00001_00000_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00000_00001_00000' direct represents '0' with '-761'
c Var 'adj_00001_00000_00001_00000' direct represents '1' with '761'
c Var 'adj_00001_00000_00001_00000' order represents '1' with '1'
c Var 'adj_00001_00000_00001_00000' order represents '0' with '-761'
c Encoding variable: adj_00001_00000_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00000_00001_00001' direct represents '0' with '-762'
c Var 'adj_00001_00000_00001_00001' direct represents '1' with '762'
c Var 'adj_00001_00000_00001_00001' order represents '1' with '1'
c Var 'adj_00001_00000_00001_00001' order represents '0' with '-762'
c Encoding variable: adj_00001_00001_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00001_n00001_n00001' direct represents '0' with '-763'
c Var 'adj_00001_00001_n00001_n00001' direct represents '1' with '763'
c Var 'adj_00001_00001_n00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00001_n00001_n00001' order represents '0' with '-763'
763 -763 0
c Encoding variable: adj_00001_00001_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00001_n00001_00000' direct represents '0' with '-764'
c Var 'adj_00001_00001_n00001_00000' direct represents '1' with '764'
c Var 'adj_00001_00001_n00001_00000' order represents '1' with '1'
c Var 'adj_00001_00001_n00001_00000' order represents '0' with '-764'
764 -764 0
c Encoding variable: adj_00001_00001_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00001_n00001_00001' direct represents '0' with '-765'
c Var 'adj_00001_00001_n00001_00001' direct represents '1' with '765'
c Var 'adj_00001_00001_n00001_00001' order represents '1' with '1'
c Var 'adj_00001_00001_n00001_00001' order represents '0' with '-765'
765 -765 0
c Encoding variable: adj_00001_00001_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00001_00000_n00001' direct represents '0' with '-766'
c Var 'adj_00001_00001_00000_n00001' direct represents '1' with '766'
c Var 'adj_00001_00001_00000_n00001' order represents '1' with '1'
c Var 'adj_00001_00001_00000_n00001' order represents '0' with '-766'
766 -766 0
c Encoding variable: adj_00001_00001_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00001_00000_00000' direct represents '0' with '-767'
c Var 'adj_00001_00001_00000_00000' direct represents '1' with '767'
c Var 'adj_00001_00001_00000_00000' order represents '1' with '1'
c Var 'adj_00001_00001_00000_00000' order represents '0' with '-767'
767 -767 0
c Encoding variable: adj_00001_00001_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00001_00000_00001' direct represents '0' with '-768'
c Var 'adj_00001_00001_00000_00001' direct represents '1' with '768'
c Var 'adj_00001_00001_00000_00001' order represents '1' with '1'
c Var 'adj_00001_00001_00000_00001' order represents '0' with '-768'
768 -768 0
c Encoding variable: adj_00001_00001_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00001_00001_n00001' direct represents '0' with '-769'
c Var 'adj_00001_00001_00001_n00001' direct represents '1' with '769'
c Var 'adj_00001_00001_00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00001_00001_n00001' order represents '0' with '-769'
769 -769 0
c Encoding variable: adj_00001_00001_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00001_00001_00000' direct represents '0' with '-770'
c Var 'adj_00001_00001_00001_00000' direct represents '1' with '770'
c Var 'adj_00001_00001_00001_00000' order represents '1' with '1'
c Var 'adj_00001_00001_00001_00000' order represents '0' with '-770'
770 -770 0
c Encoding variable: adj_00001_00001_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00001_00001_00001' direct represents '0' with '-771'
c Var 'adj_00001_00001_00001_00001' direct represents '1' with '771'
c Var 'adj_00001_00001_00001_00001' order represents '1' with '1'
c Var 'adj_00001_00001_00001_00001' order represents '0' with '-771'
771 -771 0
c Encoding variable: adj_00001_00002_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00002_n00001_n00001' direct represents '0' with '-772'
c Var 'adj_00001_00002_n00001_n00001' direct represents '1' with '772'
c Var 'adj_00001_00002_n00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00002_n00001_n00001' order represents '0' with '-772'
772 -772 0
c Encoding variable: adj_00001_00002_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00002_n00001_00000' direct represents '0' with '-773'
c Var 'adj_00001_00002_n00001_00000' direct represents '1' with '773'
c Var 'adj_00001_00002_n00001_00000' order represents '1' with '1'
c Var 'adj_00001_00002_n00001_00000' order represents '0' with '-773'
773 -773 0
c Encoding variable: adj_00001_00002_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00002_n00001_00001' direct represents '0' with '-774'
c Var 'adj_00001_00002_n00001_00001' direct represents '1' with '774'
c Var 'adj_00001_00002_n00001_00001' order represents '1' with '1'
c Var 'adj_00001_00002_n00001_00001' order represents '0' with '-774'
774 -774 0
c Encoding variable: adj_00001_00002_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00002_00000_n00001' direct represents '0' with '-775'
c Var 'adj_00001_00002_00000_n00001' direct represents '1' with '775'
c Var 'adj_00001_00002_00000_n00001' order represents '1' with '1'
c Var 'adj_00001_00002_00000_n00001' order represents '0' with '-775'
775 -775 0
c Encoding variable: adj_00001_00002_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00002_00000_00000' direct represents '0' with '-776'
c Var 'adj_00001_00002_00000_00000' direct represents '1' with '776'
c Var 'adj_00001_00002_00000_00000' order represents '1' with '1'
c Var 'adj_00001_00002_00000_00000' order represents '0' with '-776'
776 -776 0
c Encoding variable: adj_00001_00002_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00002_00000_00001' direct represents '0' with '-777'
c Var 'adj_00001_00002_00000_00001' direct represents '1' with '777'
c Var 'adj_00001_00002_00000_00001' order represents '1' with '1'
c Var 'adj_00001_00002_00000_00001' order represents '0' with '-777'
777 -777 0
c Encoding variable: adj_00001_00002_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00002_00001_n00001' direct represents '0' with '-778'
c Var 'adj_00001_00002_00001_n00001' direct represents '1' with '778'
c Var 'adj_00001_00002_00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00002_00001_n00001' order represents '0' with '-778'
c Encoding variable: adj_00001_00002_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00002_00001_00000' direct represents '0' with '-779'
c Var 'adj_00001_00002_00001_00000' direct represents '1' with '779'
c Var 'adj_00001_00002_00001_00000' order represents '1' with '1'
c Var 'adj_00001_00002_00001_00000' order represents '0' with '-779'
c Encoding variable: adj_00001_00002_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00002_00001_00001' direct represents '0' with '-780'
c Var 'adj_00001_00002_00001_00001' direct represents '1' with '780'
c Var 'adj_00001_00002_00001_00001' order represents '1' with '1'
c Var 'adj_00001_00002_00001_00001' order represents '0' with '-780'
c Encoding variable: adj_00001_00003_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00003_n00001_n00001' direct represents '0' with '-781'
c Var 'adj_00001_00003_n00001_n00001' direct represents '1' with '781'
c Var 'adj_00001_00003_n00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00003_n00001_n00001' order represents '0' with '-781'
781 -781 0
c Encoding variable: adj_00001_00003_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00003_n00001_00000' direct represents '0' with '-782'
c Var 'adj_00001_00003_n00001_00000' direct represents '1' with '782'
c Var 'adj_00001_00003_n00001_00000' order represents '1' with '1'
c Var 'adj_00001_00003_n00001_00000' order represents '0' with '-782'
782 -782 0
c Encoding variable: adj_00001_00003_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00003_n00001_00001' direct represents '0' with '-783'
c Var 'adj_00001_00003_n00001_00001' direct represents '1' with '783'
c Var 'adj_00001_00003_n00001_00001' order represents '1' with '1'
c Var 'adj_00001_00003_n00001_00001' order represents '0' with '-783'
783 -783 0
c Encoding variable: adj_00001_00003_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00003_00000_n00001' direct represents '0' with '-784'
c Var 'adj_00001_00003_00000_n00001' direct represents '1' with '784'
c Var 'adj_00001_00003_00000_n00001' order represents '1' with '1'
c Var 'adj_00001_00003_00000_n00001' order represents '0' with '-784'
c Encoding variable: adj_00001_00003_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00003_00000_00000' direct represents '0' with '-785'
c Var 'adj_00001_00003_00000_00000' direct represents '1' with '785'
c Var 'adj_00001_00003_00000_00000' order represents '1' with '1'
c Var 'adj_00001_00003_00000_00000' order represents '0' with '-785'
785 -785 0
c Encoding variable: adj_00001_00003_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00003_00000_00001' direct represents '0' with '-786'
c Var 'adj_00001_00003_00000_00001' direct represents '1' with '786'
c Var 'adj_00001_00003_00000_00001' order represents '1' with '1'
c Var 'adj_00001_00003_00000_00001' order represents '0' with '-786'
786 -786 0
c Encoding variable: adj_00001_00003_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00003_00001_n00001' direct represents '0' with '-787'
c Var 'adj_00001_00003_00001_n00001' direct represents '1' with '787'
c Var 'adj_00001_00003_00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00003_00001_n00001' order represents '0' with '-787'
c Encoding variable: adj_00001_00003_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00003_00001_00000' direct represents '0' with '-788'
c Var 'adj_00001_00003_00001_00000' direct represents '1' with '788'
c Var 'adj_00001_00003_00001_00000' order represents '1' with '1'
c Var 'adj_00001_00003_00001_00000' order represents '0' with '-788'
c Encoding variable: adj_00001_00003_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00003_00001_00001' direct represents '0' with '-789'
c Var 'adj_00001_00003_00001_00001' direct represents '1' with '789'
c Var 'adj_00001_00003_00001_00001' order represents '1' with '1'
c Var 'adj_00001_00003_00001_00001' order represents '0' with '-789'
c Encoding variable: adj_00001_00004_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00004_n00001_n00001' direct represents '0' with '-790'
c Var 'adj_00001_00004_n00001_n00001' direct represents '1' with '790'
c Var 'adj_00001_00004_n00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00004_n00001_n00001' order represents '0' with '-790'
790 -790 0
c Encoding variable: adj_00001_00004_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00004_n00001_00000' direct represents '0' with '-791'
c Var 'adj_00001_00004_n00001_00000' direct represents '1' with '791'
c Var 'adj_00001_00004_n00001_00000' order represents '1' with '1'
c Var 'adj_00001_00004_n00001_00000' order represents '0' with '-791'
791 -791 0
c Encoding variable: adj_00001_00004_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00004_n00001_00001' direct represents '0' with '-792'
c Var 'adj_00001_00004_n00001_00001' direct represents '1' with '792'
c Var 'adj_00001_00004_n00001_00001' order represents '1' with '1'
c Var 'adj_00001_00004_n00001_00001' order represents '0' with '-792'
792 -792 0
c Encoding variable: adj_00001_00004_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00004_00000_n00001' direct represents '0' with '-793'
c Var 'adj_00001_00004_00000_n00001' direct represents '1' with '793'
c Var 'adj_00001_00004_00000_n00001' order represents '1' with '1'
c Var 'adj_00001_00004_00000_n00001' order represents '0' with '-793'
793 -793 0
c Encoding variable: adj_00001_00004_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00004_00000_00000' direct represents '0' with '-794'
c Var 'adj_00001_00004_00000_00000' direct represents '1' with '794'
c Var 'adj_00001_00004_00000_00000' order represents '1' with '1'
c Var 'adj_00001_00004_00000_00000' order represents '0' with '-794'
794 -794 0
c Encoding variable: adj_00001_00004_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00004_00000_00001' direct represents '0' with '-795'
c Var 'adj_00001_00004_00000_00001' direct represents '1' with '795'
c Var 'adj_00001_00004_00000_00001' order represents '1' with '1'
c Var 'adj_00001_00004_00000_00001' order represents '0' with '-795'
795 -795 0
c Encoding variable: adj_00001_00004_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00004_00001_n00001' direct represents '0' with '-796'
c Var 'adj_00001_00004_00001_n00001' direct represents '1' with '796'
c Var 'adj_00001_00004_00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00004_00001_n00001' order represents '0' with '-796'
796 -796 0
c Encoding variable: adj_00001_00004_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00004_00001_00000' direct represents '0' with '-797'
c Var 'adj_00001_00004_00001_00000' direct represents '1' with '797'
c Var 'adj_00001_00004_00001_00000' order represents '1' with '1'
c Var 'adj_00001_00004_00001_00000' order represents '0' with '-797'
797 -797 0
c Encoding variable: adj_00001_00004_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00004_00001_00001' direct represents '0' with '-798'
c Var 'adj_00001_00004_00001_00001' direct represents '1' with '798'
c Var 'adj_00001_00004_00001_00001' order represents '1' with '1'
c Var 'adj_00001_00004_00001_00001' order represents '0' with '-798'
798 -798 0
c Encoding variable: adj_00001_00005_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00005_n00001_n00001' direct represents '0' with '-799'
c Var 'adj_00001_00005_n00001_n00001' direct represents '1' with '799'
c Var 'adj_00001_00005_n00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00005_n00001_n00001' order represents '0' with '-799'
799 -799 0
c Encoding variable: adj_00001_00005_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00005_n00001_00000' direct represents '0' with '-800'
c Var 'adj_00001_00005_n00001_00000' direct represents '1' with '800'
c Var 'adj_00001_00005_n00001_00000' order represents '1' with '1'
c Var 'adj_00001_00005_n00001_00000' order represents '0' with '-800'
800 -800 0
c Encoding variable: adj_00001_00005_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00005_n00001_00001' direct represents '0' with '-801'
c Var 'adj_00001_00005_n00001_00001' direct represents '1' with '801'
c Var 'adj_00001_00005_n00001_00001' order represents '1' with '1'
c Var 'adj_00001_00005_n00001_00001' order represents '0' with '-801'
801 -801 0
c Encoding variable: adj_00001_00005_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00005_00000_n00001' direct represents '0' with '-802'
c Var 'adj_00001_00005_00000_n00001' direct represents '1' with '802'
c Var 'adj_00001_00005_00000_n00001' order represents '1' with '1'
c Var 'adj_00001_00005_00000_n00001' order represents '0' with '-802'
802 -802 0
c Encoding variable: adj_00001_00005_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00005_00000_00000' direct represents '0' with '-803'
c Var 'adj_00001_00005_00000_00000' direct represents '1' with '803'
c Var 'adj_00001_00005_00000_00000' order represents '1' with '1'
c Var 'adj_00001_00005_00000_00000' order represents '0' with '-803'
803 -803 0
c Encoding variable: adj_00001_00005_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00005_00000_00001' direct represents '0' with '-804'
c Var 'adj_00001_00005_00000_00001' direct represents '1' with '804'
c Var 'adj_00001_00005_00000_00001' order represents '1' with '1'
c Var 'adj_00001_00005_00000_00001' order represents '0' with '-804'
804 -804 0
c Encoding variable: adj_00001_00005_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00005_00001_n00001' direct represents '0' with '-805'
c Var 'adj_00001_00005_00001_n00001' direct represents '1' with '805'
c Var 'adj_00001_00005_00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00005_00001_n00001' order represents '0' with '-805'
c Encoding variable: adj_00001_00005_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00005_00001_00000' direct represents '0' with '-806'
c Var 'adj_00001_00005_00001_00000' direct represents '1' with '806'
c Var 'adj_00001_00005_00001_00000' order represents '1' with '1'
c Var 'adj_00001_00005_00001_00000' order represents '0' with '-806'
c Encoding variable: adj_00001_00005_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00005_00001_00001' direct represents '0' with '-807'
c Var 'adj_00001_00005_00001_00001' direct represents '1' with '807'
c Var 'adj_00001_00005_00001_00001' order represents '1' with '1'
c Var 'adj_00001_00005_00001_00001' order represents '0' with '-807'
c Encoding variable: adj_00001_00006_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00006_n00001_n00001' direct represents '0' with '-808'
c Var 'adj_00001_00006_n00001_n00001' direct represents '1' with '808'
c Var 'adj_00001_00006_n00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00006_n00001_n00001' order represents '0' with '-808'
808 -808 0
c Encoding variable: adj_00001_00006_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00006_n00001_00000' direct represents '0' with '-809'
c Var 'adj_00001_00006_n00001_00000' direct represents '1' with '809'
c Var 'adj_00001_00006_n00001_00000' order represents '1' with '1'
c Var 'adj_00001_00006_n00001_00000' order represents '0' with '-809'
809 -809 0
c Encoding variable: adj_00001_00006_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00006_n00001_00001' direct represents '0' with '-810'
c Var 'adj_00001_00006_n00001_00001' direct represents '1' with '810'
c Var 'adj_00001_00006_n00001_00001' order represents '1' with '1'
c Var 'adj_00001_00006_n00001_00001' order represents '0' with '-810'
810 -810 0
c Encoding variable: adj_00001_00006_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00006_00000_n00001' direct represents '0' with '-811'
c Var 'adj_00001_00006_00000_n00001' direct represents '1' with '811'
c Var 'adj_00001_00006_00000_n00001' order represents '1' with '1'
c Var 'adj_00001_00006_00000_n00001' order represents '0' with '-811'
811 -811 0
c Encoding variable: adj_00001_00006_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00006_00000_00000' direct represents '0' with '-812'
c Var 'adj_00001_00006_00000_00000' direct represents '1' with '812'
c Var 'adj_00001_00006_00000_00000' order represents '1' with '1'
c Var 'adj_00001_00006_00000_00000' order represents '0' with '-812'
812 -812 0
c Encoding variable: adj_00001_00006_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00006_00000_00001' direct represents '0' with '-813'
c Var 'adj_00001_00006_00000_00001' direct represents '1' with '813'
c Var 'adj_00001_00006_00000_00001' order represents '1' with '1'
c Var 'adj_00001_00006_00000_00001' order represents '0' with '-813'
813 -813 0
c Encoding variable: adj_00001_00006_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00001_00006_00001_n00001' direct represents '0' with '-814'
c Var 'adj_00001_00006_00001_n00001' direct represents '1' with '814'
c Var 'adj_00001_00006_00001_n00001' order represents '1' with '1'
c Var 'adj_00001_00006_00001_n00001' order represents '0' with '-814'
814 -814 0
c Encoding variable: adj_00001_00006_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00001_00006_00001_00000' direct represents '0' with '-815'
c Var 'adj_00001_00006_00001_00000' direct represents '1' with '815'
c Var 'adj_00001_00006_00001_00000' order represents '1' with '1'
c Var 'adj_00001_00006_00001_00000' order represents '0' with '-815'
815 -815 0
c Encoding variable: adj_00001_00006_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00001_00006_00001_00001' direct represents '0' with '-816'
c Var 'adj_00001_00006_00001_00001' direct represents '1' with '816'
c Var 'adj_00001_00006_00001_00001' order represents '1' with '1'
c Var 'adj_00001_00006_00001_00001' order represents '0' with '-816'
816 -816 0
c Encoding variable: adj_00002_00000_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00000_n00001_n00001' direct represents '0' with '-817'
c Var 'adj_00002_00000_n00001_n00001' direct represents '1' with '817'
c Var 'adj_00002_00000_n00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00000_n00001_n00001' order represents '0' with '-817'
817 -817 0
c Encoding variable: adj_00002_00000_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00000_n00001_00000' direct represents '0' with '-818'
c Var 'adj_00002_00000_n00001_00000' direct represents '1' with '818'
c Var 'adj_00002_00000_n00001_00000' order represents '1' with '1'
c Var 'adj_00002_00000_n00001_00000' order represents '0' with '-818'
818 -818 0
c Encoding variable: adj_00002_00000_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00000_n00001_00001' direct represents '0' with '-819'
c Var 'adj_00002_00000_n00001_00001' direct represents '1' with '819'
c Var 'adj_00002_00000_n00001_00001' order represents '1' with '1'
c Var 'adj_00002_00000_n00001_00001' order represents '0' with '-819'
819 -819 0
c Encoding variable: adj_00002_00000_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00000_00000_n00001' direct represents '0' with '-820'
c Var 'adj_00002_00000_00000_n00001' direct represents '1' with '820'
c Var 'adj_00002_00000_00000_n00001' order represents '1' with '1'
c Var 'adj_00002_00000_00000_n00001' order represents '0' with '-820'
820 -820 0
c Encoding variable: adj_00002_00000_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00000_00000_00000' direct represents '0' with '-821'
c Var 'adj_00002_00000_00000_00000' direct represents '1' with '821'
c Var 'adj_00002_00000_00000_00000' order represents '1' with '1'
c Var 'adj_00002_00000_00000_00000' order represents '0' with '-821'
821 -821 0
c Encoding variable: adj_00002_00000_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00000_00000_00001' direct represents '0' with '-822'
c Var 'adj_00002_00000_00000_00001' direct represents '1' with '822'
c Var 'adj_00002_00000_00000_00001' order represents '1' with '1'
c Var 'adj_00002_00000_00000_00001' order represents '0' with '-822'
822 -822 0
c Encoding variable: adj_00002_00000_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00000_00001_n00001' direct represents '0' with '-823'
c Var 'adj_00002_00000_00001_n00001' direct represents '1' with '823'
c Var 'adj_00002_00000_00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00000_00001_n00001' order represents '0' with '-823'
823 -823 0
c Encoding variable: adj_00002_00000_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00000_00001_00000' direct represents '0' with '-824'
c Var 'adj_00002_00000_00001_00000' direct represents '1' with '824'
c Var 'adj_00002_00000_00001_00000' order represents '1' with '1'
c Var 'adj_00002_00000_00001_00000' order represents '0' with '-824'
c Encoding variable: adj_00002_00000_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00000_00001_00001' direct represents '0' with '-825'
c Var 'adj_00002_00000_00001_00001' direct represents '1' with '825'
c Var 'adj_00002_00000_00001_00001' order represents '1' with '1'
c Var 'adj_00002_00000_00001_00001' order represents '0' with '-825'
825 -825 0
c Encoding variable: adj_00002_00001_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00001_n00001_n00001' direct represents '0' with '-826'
c Var 'adj_00002_00001_n00001_n00001' direct represents '1' with '826'
c Var 'adj_00002_00001_n00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00001_n00001_n00001' order represents '0' with '-826'
826 -826 0
c Encoding variable: adj_00002_00001_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00001_n00001_00000' direct represents '0' with '-827'
c Var 'adj_00002_00001_n00001_00000' direct represents '1' with '827'
c Var 'adj_00002_00001_n00001_00000' order represents '1' with '1'
c Var 'adj_00002_00001_n00001_00000' order represents '0' with '-827'
827 -827 0
c Encoding variable: adj_00002_00001_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00001_n00001_00001' direct represents '0' with '-828'
c Var 'adj_00002_00001_n00001_00001' direct represents '1' with '828'
c Var 'adj_00002_00001_n00001_00001' order represents '1' with '1'
c Var 'adj_00002_00001_n00001_00001' order represents '0' with '-828'
828 -828 0
c Encoding variable: adj_00002_00001_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00001_00000_n00001' direct represents '0' with '-829'
c Var 'adj_00002_00001_00000_n00001' direct represents '1' with '829'
c Var 'adj_00002_00001_00000_n00001' order represents '1' with '1'
c Var 'adj_00002_00001_00000_n00001' order represents '0' with '-829'
c Encoding variable: adj_00002_00001_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00001_00000_00000' direct represents '0' with '-830'
c Var 'adj_00002_00001_00000_00000' direct represents '1' with '830'
c Var 'adj_00002_00001_00000_00000' order represents '1' with '1'
c Var 'adj_00002_00001_00000_00000' order represents '0' with '-830'
830 -830 0
c Encoding variable: adj_00002_00001_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00001_00000_00001' direct represents '0' with '-831'
c Var 'adj_00002_00001_00000_00001' direct represents '1' with '831'
c Var 'adj_00002_00001_00000_00001' order represents '1' with '1'
c Var 'adj_00002_00001_00000_00001' order represents '0' with '-831'
831 -831 0
c Encoding variable: adj_00002_00001_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00001_00001_n00001' direct represents '0' with '-832'
c Var 'adj_00002_00001_00001_n00001' direct represents '1' with '832'
c Var 'adj_00002_00001_00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00001_00001_n00001' order represents '0' with '-832'
c Encoding variable: adj_00002_00001_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00001_00001_00000' direct represents '0' with '-833'
c Var 'adj_00002_00001_00001_00000' direct represents '1' with '833'
c Var 'adj_00002_00001_00001_00000' order represents '1' with '1'
c Var 'adj_00002_00001_00001_00000' order represents '0' with '-833'
833 -833 0
c Encoding variable: adj_00002_00001_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00001_00001_00001' direct represents '0' with '-834'
c Var 'adj_00002_00001_00001_00001' direct represents '1' with '834'
c Var 'adj_00002_00001_00001_00001' order represents '1' with '1'
c Var 'adj_00002_00001_00001_00001' order represents '0' with '-834'
c Encoding variable: adj_00002_00002_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00002_n00001_n00001' direct represents '0' with '-835'
c Var 'adj_00002_00002_n00001_n00001' direct represents '1' with '835'
c Var 'adj_00002_00002_n00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00002_n00001_n00001' order represents '0' with '-835'
835 -835 0
c Encoding variable: adj_00002_00002_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00002_n00001_00000' direct represents '0' with '-836'
c Var 'adj_00002_00002_n00001_00000' direct represents '1' with '836'
c Var 'adj_00002_00002_n00001_00000' order represents '1' with '1'
c Var 'adj_00002_00002_n00001_00000' order represents '0' with '-836'
836 -836 0
c Encoding variable: adj_00002_00002_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00002_n00001_00001' direct represents '0' with '-837'
c Var 'adj_00002_00002_n00001_00001' direct represents '1' with '837'
c Var 'adj_00002_00002_n00001_00001' order represents '1' with '1'
c Var 'adj_00002_00002_n00001_00001' order represents '0' with '-837'
837 -837 0
c Encoding variable: adj_00002_00002_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00002_00000_n00001' direct represents '0' with '-838'
c Var 'adj_00002_00002_00000_n00001' direct represents '1' with '838'
c Var 'adj_00002_00002_00000_n00001' order represents '1' with '1'
c Var 'adj_00002_00002_00000_n00001' order represents '0' with '-838'
c Encoding variable: adj_00002_00002_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00002_00000_00000' direct represents '0' with '-839'
c Var 'adj_00002_00002_00000_00000' direct represents '1' with '839'
c Var 'adj_00002_00002_00000_00000' order represents '1' with '1'
c Var 'adj_00002_00002_00000_00000' order represents '0' with '-839'
839 -839 0
c Encoding variable: adj_00002_00002_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00002_00000_00001' direct represents '0' with '-840'
c Var 'adj_00002_00002_00000_00001' direct represents '1' with '840'
c Var 'adj_00002_00002_00000_00001' order represents '1' with '1'
c Var 'adj_00002_00002_00000_00001' order represents '0' with '-840'
840 -840 0
c Encoding variable: adj_00002_00002_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00002_00001_n00001' direct represents '0' with '-841'
c Var 'adj_00002_00002_00001_n00001' direct represents '1' with '841'
c Var 'adj_00002_00002_00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00002_00001_n00001' order represents '0' with '-841'
841 -841 0
c Encoding variable: adj_00002_00002_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00002_00001_00000' direct represents '0' with '-842'
c Var 'adj_00002_00002_00001_00000' direct represents '1' with '842'
c Var 'adj_00002_00002_00001_00000' order represents '1' with '1'
c Var 'adj_00002_00002_00001_00000' order represents '0' with '-842'
c Encoding variable: adj_00002_00002_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00002_00001_00001' direct represents '0' with '-843'
c Var 'adj_00002_00002_00001_00001' direct represents '1' with '843'
c Var 'adj_00002_00002_00001_00001' order represents '1' with '1'
c Var 'adj_00002_00002_00001_00001' order represents '0' with '-843'
c Encoding variable: adj_00002_00003_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00003_n00001_n00001' direct represents '0' with '-844'
c Var 'adj_00002_00003_n00001_n00001' direct represents '1' with '844'
c Var 'adj_00002_00003_n00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00003_n00001_n00001' order represents '0' with '-844'
844 -844 0
c Encoding variable: adj_00002_00003_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00003_n00001_00000' direct represents '0' with '-845'
c Var 'adj_00002_00003_n00001_00000' direct represents '1' with '845'
c Var 'adj_00002_00003_n00001_00000' order represents '1' with '1'
c Var 'adj_00002_00003_n00001_00000' order represents '0' with '-845'
845 -845 0
c Encoding variable: adj_00002_00003_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00003_n00001_00001' direct represents '0' with '-846'
c Var 'adj_00002_00003_n00001_00001' direct represents '1' with '846'
c Var 'adj_00002_00003_n00001_00001' order represents '1' with '1'
c Var 'adj_00002_00003_n00001_00001' order represents '0' with '-846'
846 -846 0
c Encoding variable: adj_00002_00003_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00003_00000_n00001' direct represents '0' with '-847'
c Var 'adj_00002_00003_00000_n00001' direct represents '1' with '847'
c Var 'adj_00002_00003_00000_n00001' order represents '1' with '1'
c Var 'adj_00002_00003_00000_n00001' order represents '0' with '-847'
c Encoding variable: adj_00002_00003_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00003_00000_00000' direct represents '0' with '-848'
c Var 'adj_00002_00003_00000_00000' direct represents '1' with '848'
c Var 'adj_00002_00003_00000_00000' order represents '1' with '1'
c Var 'adj_00002_00003_00000_00000' order represents '0' with '-848'
848 -848 0
c Encoding variable: adj_00002_00003_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00003_00000_00001' direct represents '0' with '-849'
c Var 'adj_00002_00003_00000_00001' direct represents '1' with '849'
c Var 'adj_00002_00003_00000_00001' order represents '1' with '1'
c Var 'adj_00002_00003_00000_00001' order represents '0' with '-849'
849 -849 0
c Encoding variable: adj_00002_00003_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00003_00001_n00001' direct represents '0' with '-850'
c Var 'adj_00002_00003_00001_n00001' direct represents '1' with '850'
c Var 'adj_00002_00003_00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00003_00001_n00001' order represents '0' with '-850'
c Encoding variable: adj_00002_00003_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00003_00001_00000' direct represents '0' with '-851'
c Var 'adj_00002_00003_00001_00000' direct represents '1' with '851'
c Var 'adj_00002_00003_00001_00000' order represents '1' with '1'
c Var 'adj_00002_00003_00001_00000' order represents '0' with '-851'
c Encoding variable: adj_00002_00003_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00003_00001_00001' direct represents '0' with '-852'
c Var 'adj_00002_00003_00001_00001' direct represents '1' with '852'
c Var 'adj_00002_00003_00001_00001' order represents '1' with '1'
c Var 'adj_00002_00003_00001_00001' order represents '0' with '-852'
c Encoding variable: adj_00002_00004_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00004_n00001_n00001' direct represents '0' with '-853'
c Var 'adj_00002_00004_n00001_n00001' direct represents '1' with '853'
c Var 'adj_00002_00004_n00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00004_n00001_n00001' order represents '0' with '-853'
853 -853 0
c Encoding variable: adj_00002_00004_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00004_n00001_00000' direct represents '0' with '-854'
c Var 'adj_00002_00004_n00001_00000' direct represents '1' with '854'
c Var 'adj_00002_00004_n00001_00000' order represents '1' with '1'
c Var 'adj_00002_00004_n00001_00000' order represents '0' with '-854'
854 -854 0
c Encoding variable: adj_00002_00004_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00004_n00001_00001' direct represents '0' with '-855'
c Var 'adj_00002_00004_n00001_00001' direct represents '1' with '855'
c Var 'adj_00002_00004_n00001_00001' order represents '1' with '1'
c Var 'adj_00002_00004_n00001_00001' order represents '0' with '-855'
855 -855 0
c Encoding variable: adj_00002_00004_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00004_00000_n00001' direct represents '0' with '-856'
c Var 'adj_00002_00004_00000_n00001' direct represents '1' with '856'
c Var 'adj_00002_00004_00000_n00001' order represents '1' with '1'
c Var 'adj_00002_00004_00000_n00001' order represents '0' with '-856'
c Encoding variable: adj_00002_00004_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00004_00000_00000' direct represents '0' with '-857'
c Var 'adj_00002_00004_00000_00000' direct represents '1' with '857'
c Var 'adj_00002_00004_00000_00000' order represents '1' with '1'
c Var 'adj_00002_00004_00000_00000' order represents '0' with '-857'
857 -857 0
c Encoding variable: adj_00002_00004_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00004_00000_00001' direct represents '0' with '-858'
c Var 'adj_00002_00004_00000_00001' direct represents '1' with '858'
c Var 'adj_00002_00004_00000_00001' order represents '1' with '1'
c Var 'adj_00002_00004_00000_00001' order represents '0' with '-858'
858 -858 0
c Encoding variable: adj_00002_00004_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00004_00001_n00001' direct represents '0' with '-859'
c Var 'adj_00002_00004_00001_n00001' direct represents '1' with '859'
c Var 'adj_00002_00004_00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00004_00001_n00001' order represents '0' with '-859'
c Encoding variable: adj_00002_00004_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00004_00001_00000' direct represents '0' with '-860'
c Var 'adj_00002_00004_00001_00000' direct represents '1' with '860'
c Var 'adj_00002_00004_00001_00000' order represents '1' with '1'
c Var 'adj_00002_00004_00001_00000' order represents '0' with '-860'
c Encoding variable: adj_00002_00004_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00004_00001_00001' direct represents '0' with '-861'
c Var 'adj_00002_00004_00001_00001' direct represents '1' with '861'
c Var 'adj_00002_00004_00001_00001' order represents '1' with '1'
c Var 'adj_00002_00004_00001_00001' order represents '0' with '-861'
c Encoding variable: adj_00002_00005_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00005_n00001_n00001' direct represents '0' with '-862'
c Var 'adj_00002_00005_n00001_n00001' direct represents '1' with '862'
c Var 'adj_00002_00005_n00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00005_n00001_n00001' order represents '0' with '-862'
862 -862 0
c Encoding variable: adj_00002_00005_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00005_n00001_00000' direct represents '0' with '-863'
c Var 'adj_00002_00005_n00001_00000' direct represents '1' with '863'
c Var 'adj_00002_00005_n00001_00000' order represents '1' with '1'
c Var 'adj_00002_00005_n00001_00000' order represents '0' with '-863'
863 -863 0
c Encoding variable: adj_00002_00005_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00005_n00001_00001' direct represents '0' with '-864'
c Var 'adj_00002_00005_n00001_00001' direct represents '1' with '864'
c Var 'adj_00002_00005_n00001_00001' order represents '1' with '1'
c Var 'adj_00002_00005_n00001_00001' order represents '0' with '-864'
864 -864 0
c Encoding variable: adj_00002_00005_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00005_00000_n00001' direct represents '0' with '-865'
c Var 'adj_00002_00005_00000_n00001' direct represents '1' with '865'
c Var 'adj_00002_00005_00000_n00001' order represents '1' with '1'
c Var 'adj_00002_00005_00000_n00001' order represents '0' with '-865'
c Encoding variable: adj_00002_00005_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00005_00000_00000' direct represents '0' with '-866'
c Var 'adj_00002_00005_00000_00000' direct represents '1' with '866'
c Var 'adj_00002_00005_00000_00000' order represents '1' with '1'
c Var 'adj_00002_00005_00000_00000' order represents '0' with '-866'
866 -866 0
c Encoding variable: adj_00002_00005_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00005_00000_00001' direct represents '0' with '-867'
c Var 'adj_00002_00005_00000_00001' direct represents '1' with '867'
c Var 'adj_00002_00005_00000_00001' order represents '1' with '1'
c Var 'adj_00002_00005_00000_00001' order represents '0' with '-867'
867 -867 0
c Encoding variable: adj_00002_00005_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00005_00001_n00001' direct represents '0' with '-868'
c Var 'adj_00002_00005_00001_n00001' direct represents '1' with '868'
c Var 'adj_00002_00005_00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00005_00001_n00001' order represents '0' with '-868'
c Encoding variable: adj_00002_00005_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00005_00001_00000' direct represents '0' with '-869'
c Var 'adj_00002_00005_00001_00000' direct represents '1' with '869'
c Var 'adj_00002_00005_00001_00000' order represents '1' with '1'
c Var 'adj_00002_00005_00001_00000' order represents '0' with '-869'
c Encoding variable: adj_00002_00005_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00005_00001_00001' direct represents '0' with '-870'
c Var 'adj_00002_00005_00001_00001' direct represents '1' with '870'
c Var 'adj_00002_00005_00001_00001' order represents '1' with '1'
c Var 'adj_00002_00005_00001_00001' order represents '0' with '-870'
870 -870 0
c Encoding variable: adj_00002_00006_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00006_n00001_n00001' direct represents '0' with '-871'
c Var 'adj_00002_00006_n00001_n00001' direct represents '1' with '871'
c Var 'adj_00002_00006_n00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00006_n00001_n00001' order represents '0' with '-871'
871 -871 0
c Encoding variable: adj_00002_00006_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00006_n00001_00000' direct represents '0' with '-872'
c Var 'adj_00002_00006_n00001_00000' direct represents '1' with '872'
c Var 'adj_00002_00006_n00001_00000' order represents '1' with '1'
c Var 'adj_00002_00006_n00001_00000' order represents '0' with '-872'
872 -872 0
c Encoding variable: adj_00002_00006_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00006_n00001_00001' direct represents '0' with '-873'
c Var 'adj_00002_00006_n00001_00001' direct represents '1' with '873'
c Var 'adj_00002_00006_n00001_00001' order represents '1' with '1'
c Var 'adj_00002_00006_n00001_00001' order represents '0' with '-873'
873 -873 0
c Encoding variable: adj_00002_00006_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00006_00000_n00001' direct represents '0' with '-874'
c Var 'adj_00002_00006_00000_n00001' direct represents '1' with '874'
c Var 'adj_00002_00006_00000_n00001' order represents '1' with '1'
c Var 'adj_00002_00006_00000_n00001' order represents '0' with '-874'
c Encoding variable: adj_00002_00006_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00006_00000_00000' direct represents '0' with '-875'
c Var 'adj_00002_00006_00000_00000' direct represents '1' with '875'
c Var 'adj_00002_00006_00000_00000' order represents '1' with '1'
c Var 'adj_00002_00006_00000_00000' order represents '0' with '-875'
875 -875 0
c Encoding variable: adj_00002_00006_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00006_00000_00001' direct represents '0' with '-876'
c Var 'adj_00002_00006_00000_00001' direct represents '1' with '876'
c Var 'adj_00002_00006_00000_00001' order represents '1' with '1'
c Var 'adj_00002_00006_00000_00001' order represents '0' with '-876'
876 -876 0
c Encoding variable: adj_00002_00006_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00002_00006_00001_n00001' direct represents '0' with '-877'
c Var 'adj_00002_00006_00001_n00001' direct represents '1' with '877'
c Var 'adj_00002_00006_00001_n00001' order represents '1' with '1'
c Var 'adj_00002_00006_00001_n00001' order represents '0' with '-877'
c Encoding variable: adj_00002_00006_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00002_00006_00001_00000' direct represents '0' with '-878'
c Var 'adj_00002_00006_00001_00000' direct represents '1' with '878'
c Var 'adj_00002_00006_00001_00000' order represents '1' with '1'
c Var 'adj_00002_00006_00001_00000' order represents '0' with '-878'
878 -878 0
c Encoding variable: adj_00002_00006_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00002_00006_00001_00001' direct represents '0' with '-879'
c Var 'adj_00002_00006_00001_00001' direct represents '1' with '879'
c Var 'adj_00002_00006_00001_00001' order represents '1' with '1'
c Var 'adj_00002_00006_00001_00001' order represents '0' with '-879'
879 -879 0
c Encoding variable: adj_00003_00000_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00000_n00001_n00001' direct represents '0' with '-880'
c Var 'adj_00003_00000_n00001_n00001' direct represents '1' with '880'
c Var 'adj_00003_00000_n00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00000_n00001_n00001' order represents '0' with '-880'
880 -880 0
c Encoding variable: adj_00003_00000_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00000_n00001_00000' direct represents '0' with '-881'
c Var 'adj_00003_00000_n00001_00000' direct represents '1' with '881'
c Var 'adj_00003_00000_n00001_00000' order represents '1' with '1'
c Var 'adj_00003_00000_n00001_00000' order represents '0' with '-881'
881 -881 0
c Encoding variable: adj_00003_00000_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00000_n00001_00001' direct represents '0' with '-882'
c Var 'adj_00003_00000_n00001_00001' direct represents '1' with '882'
c Var 'adj_00003_00000_n00001_00001' order represents '1' with '1'
c Var 'adj_00003_00000_n00001_00001' order represents '0' with '-882'
882 -882 0
c Encoding variable: adj_00003_00000_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00000_00000_n00001' direct represents '0' with '-883'
c Var 'adj_00003_00000_00000_n00001' direct represents '1' with '883'
c Var 'adj_00003_00000_00000_n00001' order represents '1' with '1'
c Var 'adj_00003_00000_00000_n00001' order represents '0' with '-883'
883 -883 0
c Encoding variable: adj_00003_00000_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00000_00000_00000' direct represents '0' with '-884'
c Var 'adj_00003_00000_00000_00000' direct represents '1' with '884'
c Var 'adj_00003_00000_00000_00000' order represents '1' with '1'
c Var 'adj_00003_00000_00000_00000' order represents '0' with '-884'
884 -884 0
c Encoding variable: adj_00003_00000_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00000_00000_00001' direct represents '0' with '-885'
c Var 'adj_00003_00000_00000_00001' direct represents '1' with '885'
c Var 'adj_00003_00000_00000_00001' order represents '1' with '1'
c Var 'adj_00003_00000_00000_00001' order represents '0' with '-885'
885 -885 0
c Encoding variable: adj_00003_00000_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00000_00001_n00001' direct represents '0' with '-886'
c Var 'adj_00003_00000_00001_n00001' direct represents '1' with '886'
c Var 'adj_00003_00000_00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00000_00001_n00001' order represents '0' with '-886'
886 -886 0
c Encoding variable: adj_00003_00000_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00000_00001_00000' direct represents '0' with '-887'
c Var 'adj_00003_00000_00001_00000' direct represents '1' with '887'
c Var 'adj_00003_00000_00001_00000' order represents '1' with '1'
c Var 'adj_00003_00000_00001_00000' order represents '0' with '-887'
c Encoding variable: adj_00003_00000_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00000_00001_00001' direct represents '0' with '-888'
c Var 'adj_00003_00000_00001_00001' direct represents '1' with '888'
c Var 'adj_00003_00000_00001_00001' order represents '1' with '1'
c Var 'adj_00003_00000_00001_00001' order represents '0' with '-888'
c Encoding variable: adj_00003_00001_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00001_n00001_n00001' direct represents '0' with '-889'
c Var 'adj_00003_00001_n00001_n00001' direct represents '1' with '889'
c Var 'adj_00003_00001_n00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00001_n00001_n00001' order represents '0' with '-889'
889 -889 0
c Encoding variable: adj_00003_00001_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00001_n00001_00000' direct represents '0' with '-890'
c Var 'adj_00003_00001_n00001_00000' direct represents '1' with '890'
c Var 'adj_00003_00001_n00001_00000' order represents '1' with '1'
c Var 'adj_00003_00001_n00001_00000' order represents '0' with '-890'
890 -890 0
c Encoding variable: adj_00003_00001_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00001_n00001_00001' direct represents '0' with '-891'
c Var 'adj_00003_00001_n00001_00001' direct represents '1' with '891'
c Var 'adj_00003_00001_n00001_00001' order represents '1' with '1'
c Var 'adj_00003_00001_n00001_00001' order represents '0' with '-891'
891 -891 0
c Encoding variable: adj_00003_00001_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00001_00000_n00001' direct represents '0' with '-892'
c Var 'adj_00003_00001_00000_n00001' direct represents '1' with '892'
c Var 'adj_00003_00001_00000_n00001' order represents '1' with '1'
c Var 'adj_00003_00001_00000_n00001' order represents '0' with '-892'
892 -892 0
c Encoding variable: adj_00003_00001_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00001_00000_00000' direct represents '0' with '-893'
c Var 'adj_00003_00001_00000_00000' direct represents '1' with '893'
c Var 'adj_00003_00001_00000_00000' order represents '1' with '1'
c Var 'adj_00003_00001_00000_00000' order represents '0' with '-893'
893 -893 0
c Encoding variable: adj_00003_00001_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00001_00000_00001' direct represents '0' with '-894'
c Var 'adj_00003_00001_00000_00001' direct represents '1' with '894'
c Var 'adj_00003_00001_00000_00001' order represents '1' with '1'
c Var 'adj_00003_00001_00000_00001' order represents '0' with '-894'
894 -894 0
c Encoding variable: adj_00003_00001_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00001_00001_n00001' direct represents '0' with '-895'
c Var 'adj_00003_00001_00001_n00001' direct represents '1' with '895'
c Var 'adj_00003_00001_00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00001_00001_n00001' order represents '0' with '-895'
895 -895 0
c Encoding variable: adj_00003_00001_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00001_00001_00000' direct represents '0' with '-896'
c Var 'adj_00003_00001_00001_00000' direct represents '1' with '896'
c Var 'adj_00003_00001_00001_00000' order represents '1' with '1'
c Var 'adj_00003_00001_00001_00000' order represents '0' with '-896'
896 -896 0
c Encoding variable: adj_00003_00001_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00001_00001_00001' direct represents '0' with '-897'
c Var 'adj_00003_00001_00001_00001' direct represents '1' with '897'
c Var 'adj_00003_00001_00001_00001' order represents '1' with '1'
c Var 'adj_00003_00001_00001_00001' order represents '0' with '-897'
897 -897 0
c Encoding variable: adj_00003_00002_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00002_n00001_n00001' direct represents '0' with '-898'
c Var 'adj_00003_00002_n00001_n00001' direct represents '1' with '898'
c Var 'adj_00003_00002_n00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00002_n00001_n00001' order represents '0' with '-898'
898 -898 0
c Encoding variable: adj_00003_00002_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00002_n00001_00000' direct represents '0' with '-899'
c Var 'adj_00003_00002_n00001_00000' direct represents '1' with '899'
c Var 'adj_00003_00002_n00001_00000' order represents '1' with '1'
c Var 'adj_00003_00002_n00001_00000' order represents '0' with '-899'
899 -899 0
c Encoding variable: adj_00003_00002_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00002_n00001_00001' direct represents '0' with '-900'
c Var 'adj_00003_00002_n00001_00001' direct represents '1' with '900'
c Var 'adj_00003_00002_n00001_00001' order represents '1' with '1'
c Var 'adj_00003_00002_n00001_00001' order represents '0' with '-900'
900 -900 0
c Encoding variable: adj_00003_00002_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00002_00000_n00001' direct represents '0' with '-901'
c Var 'adj_00003_00002_00000_n00001' direct represents '1' with '901'
c Var 'adj_00003_00002_00000_n00001' order represents '1' with '1'
c Var 'adj_00003_00002_00000_n00001' order represents '0' with '-901'
901 -901 0
c Encoding variable: adj_00003_00002_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00002_00000_00000' direct represents '0' with '-902'
c Var 'adj_00003_00002_00000_00000' direct represents '1' with '902'
c Var 'adj_00003_00002_00000_00000' order represents '1' with '1'
c Var 'adj_00003_00002_00000_00000' order represents '0' with '-902'
902 -902 0
c Encoding variable: adj_00003_00002_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00002_00000_00001' direct represents '0' with '-903'
c Var 'adj_00003_00002_00000_00001' direct represents '1' with '903'
c Var 'adj_00003_00002_00000_00001' order represents '1' with '1'
c Var 'adj_00003_00002_00000_00001' order represents '0' with '-903'
903 -903 0
c Encoding variable: adj_00003_00002_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00002_00001_n00001' direct represents '0' with '-904'
c Var 'adj_00003_00002_00001_n00001' direct represents '1' with '904'
c Var 'adj_00003_00002_00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00002_00001_n00001' order represents '0' with '-904'
c Encoding variable: adj_00003_00002_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00002_00001_00000' direct represents '0' with '-905'
c Var 'adj_00003_00002_00001_00000' direct represents '1' with '905'
c Var 'adj_00003_00002_00001_00000' order represents '1' with '1'
c Var 'adj_00003_00002_00001_00000' order represents '0' with '-905'
c Encoding variable: adj_00003_00002_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00002_00001_00001' direct represents '0' with '-906'
c Var 'adj_00003_00002_00001_00001' direct represents '1' with '906'
c Var 'adj_00003_00002_00001_00001' order represents '1' with '1'
c Var 'adj_00003_00002_00001_00001' order represents '0' with '-906'
c Encoding variable: adj_00003_00003_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00003_n00001_n00001' direct represents '0' with '-907'
c Var 'adj_00003_00003_n00001_n00001' direct represents '1' with '907'
c Var 'adj_00003_00003_n00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00003_n00001_n00001' order represents '0' with '-907'
907 -907 0
c Encoding variable: adj_00003_00003_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00003_n00001_00000' direct represents '0' with '-908'
c Var 'adj_00003_00003_n00001_00000' direct represents '1' with '908'
c Var 'adj_00003_00003_n00001_00000' order represents '1' with '1'
c Var 'adj_00003_00003_n00001_00000' order represents '0' with '-908'
908 -908 0
c Encoding variable: adj_00003_00003_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00003_n00001_00001' direct represents '0' with '-909'
c Var 'adj_00003_00003_n00001_00001' direct represents '1' with '909'
c Var 'adj_00003_00003_n00001_00001' order represents '1' with '1'
c Var 'adj_00003_00003_n00001_00001' order represents '0' with '-909'
909 -909 0
c Encoding variable: adj_00003_00003_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00003_00000_n00001' direct represents '0' with '-910'
c Var 'adj_00003_00003_00000_n00001' direct represents '1' with '910'
c Var 'adj_00003_00003_00000_n00001' order represents '1' with '1'
c Var 'adj_00003_00003_00000_n00001' order represents '0' with '-910'
c Encoding variable: adj_00003_00003_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00003_00000_00000' direct represents '0' with '-911'
c Var 'adj_00003_00003_00000_00000' direct represents '1' with '911'
c Var 'adj_00003_00003_00000_00000' order represents '1' with '1'
c Var 'adj_00003_00003_00000_00000' order represents '0' with '-911'
911 -911 0
c Encoding variable: adj_00003_00003_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00003_00000_00001' direct represents '0' with '-912'
c Var 'adj_00003_00003_00000_00001' direct represents '1' with '912'
c Var 'adj_00003_00003_00000_00001' order represents '1' with '1'
c Var 'adj_00003_00003_00000_00001' order represents '0' with '-912'
912 -912 0
c Encoding variable: adj_00003_00003_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00003_00001_n00001' direct represents '0' with '-913'
c Var 'adj_00003_00003_00001_n00001' direct represents '1' with '913'
c Var 'adj_00003_00003_00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00003_00001_n00001' order represents '0' with '-913'
c Encoding variable: adj_00003_00003_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00003_00001_00000' direct represents '0' with '-914'
c Var 'adj_00003_00003_00001_00000' direct represents '1' with '914'
c Var 'adj_00003_00003_00001_00000' order represents '1' with '1'
c Var 'adj_00003_00003_00001_00000' order represents '0' with '-914'
c Encoding variable: adj_00003_00003_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00003_00001_00001' direct represents '0' with '-915'
c Var 'adj_00003_00003_00001_00001' direct represents '1' with '915'
c Var 'adj_00003_00003_00001_00001' order represents '1' with '1'
c Var 'adj_00003_00003_00001_00001' order represents '0' with '-915'
c Encoding variable: adj_00003_00004_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00004_n00001_n00001' direct represents '0' with '-916'
c Var 'adj_00003_00004_n00001_n00001' direct represents '1' with '916'
c Var 'adj_00003_00004_n00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00004_n00001_n00001' order represents '0' with '-916'
916 -916 0
c Encoding variable: adj_00003_00004_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00004_n00001_00000' direct represents '0' with '-917'
c Var 'adj_00003_00004_n00001_00000' direct represents '1' with '917'
c Var 'adj_00003_00004_n00001_00000' order represents '1' with '1'
c Var 'adj_00003_00004_n00001_00000' order represents '0' with '-917'
917 -917 0
c Encoding variable: adj_00003_00004_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00004_n00001_00001' direct represents '0' with '-918'
c Var 'adj_00003_00004_n00001_00001' direct represents '1' with '918'
c Var 'adj_00003_00004_n00001_00001' order represents '1' with '1'
c Var 'adj_00003_00004_n00001_00001' order represents '0' with '-918'
918 -918 0
c Encoding variable: adj_00003_00004_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00004_00000_n00001' direct represents '0' with '-919'
c Var 'adj_00003_00004_00000_n00001' direct represents '1' with '919'
c Var 'adj_00003_00004_00000_n00001' order represents '1' with '1'
c Var 'adj_00003_00004_00000_n00001' order represents '0' with '-919'
c Encoding variable: adj_00003_00004_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00004_00000_00000' direct represents '0' with '-920'
c Var 'adj_00003_00004_00000_00000' direct represents '1' with '920'
c Var 'adj_00003_00004_00000_00000' order represents '1' with '1'
c Var 'adj_00003_00004_00000_00000' order represents '0' with '-920'
920 -920 0
c Encoding variable: adj_00003_00004_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00004_00000_00001' direct represents '0' with '-921'
c Var 'adj_00003_00004_00000_00001' direct represents '1' with '921'
c Var 'adj_00003_00004_00000_00001' order represents '1' with '1'
c Var 'adj_00003_00004_00000_00001' order represents '0' with '-921'
921 -921 0
c Encoding variable: adj_00003_00004_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00004_00001_n00001' direct represents '0' with '-922'
c Var 'adj_00003_00004_00001_n00001' direct represents '1' with '922'
c Var 'adj_00003_00004_00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00004_00001_n00001' order represents '0' with '-922'
c Encoding variable: adj_00003_00004_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00004_00001_00000' direct represents '0' with '-923'
c Var 'adj_00003_00004_00001_00000' direct represents '1' with '923'
c Var 'adj_00003_00004_00001_00000' order represents '1' with '1'
c Var 'adj_00003_00004_00001_00000' order represents '0' with '-923'
c Encoding variable: adj_00003_00004_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00004_00001_00001' direct represents '0' with '-924'
c Var 'adj_00003_00004_00001_00001' direct represents '1' with '924'
c Var 'adj_00003_00004_00001_00001' order represents '1' with '1'
c Var 'adj_00003_00004_00001_00001' order represents '0' with '-924'
c Encoding variable: adj_00003_00005_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00005_n00001_n00001' direct represents '0' with '-925'
c Var 'adj_00003_00005_n00001_n00001' direct represents '1' with '925'
c Var 'adj_00003_00005_n00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00005_n00001_n00001' order represents '0' with '-925'
925 -925 0
c Encoding variable: adj_00003_00005_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00005_n00001_00000' direct represents '0' with '-926'
c Var 'adj_00003_00005_n00001_00000' direct represents '1' with '926'
c Var 'adj_00003_00005_n00001_00000' order represents '1' with '1'
c Var 'adj_00003_00005_n00001_00000' order represents '0' with '-926'
926 -926 0
c Encoding variable: adj_00003_00005_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00005_n00001_00001' direct represents '0' with '-927'
c Var 'adj_00003_00005_n00001_00001' direct represents '1' with '927'
c Var 'adj_00003_00005_n00001_00001' order represents '1' with '1'
c Var 'adj_00003_00005_n00001_00001' order represents '0' with '-927'
927 -927 0
c Encoding variable: adj_00003_00005_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00005_00000_n00001' direct represents '0' with '-928'
c Var 'adj_00003_00005_00000_n00001' direct represents '1' with '928'
c Var 'adj_00003_00005_00000_n00001' order represents '1' with '1'
c Var 'adj_00003_00005_00000_n00001' order represents '0' with '-928'
c Encoding variable: adj_00003_00005_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00005_00000_00000' direct represents '0' with '-929'
c Var 'adj_00003_00005_00000_00000' direct represents '1' with '929'
c Var 'adj_00003_00005_00000_00000' order represents '1' with '1'
c Var 'adj_00003_00005_00000_00000' order represents '0' with '-929'
929 -929 0
c Encoding variable: adj_00003_00005_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00005_00000_00001' direct represents '0' with '-930'
c Var 'adj_00003_00005_00000_00001' direct represents '1' with '930'
c Var 'adj_00003_00005_00000_00001' order represents '1' with '1'
c Var 'adj_00003_00005_00000_00001' order represents '0' with '-930'
930 -930 0
c Encoding variable: adj_00003_00005_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00005_00001_n00001' direct represents '0' with '-931'
c Var 'adj_00003_00005_00001_n00001' direct represents '1' with '931'
c Var 'adj_00003_00005_00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00005_00001_n00001' order represents '0' with '-931'
c Encoding variable: adj_00003_00005_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00005_00001_00000' direct represents '0' with '-932'
c Var 'adj_00003_00005_00001_00000' direct represents '1' with '932'
c Var 'adj_00003_00005_00001_00000' order represents '1' with '1'
c Var 'adj_00003_00005_00001_00000' order represents '0' with '-932'
c Encoding variable: adj_00003_00005_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00005_00001_00001' direct represents '0' with '-933'
c Var 'adj_00003_00005_00001_00001' direct represents '1' with '933'
c Var 'adj_00003_00005_00001_00001' order represents '1' with '1'
c Var 'adj_00003_00005_00001_00001' order represents '0' with '-933'
c Encoding variable: adj_00003_00006_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00006_n00001_n00001' direct represents '0' with '-934'
c Var 'adj_00003_00006_n00001_n00001' direct represents '1' with '934'
c Var 'adj_00003_00006_n00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00006_n00001_n00001' order represents '0' with '-934'
934 -934 0
c Encoding variable: adj_00003_00006_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00006_n00001_00000' direct represents '0' with '-935'
c Var 'adj_00003_00006_n00001_00000' direct represents '1' with '935'
c Var 'adj_00003_00006_n00001_00000' order represents '1' with '1'
c Var 'adj_00003_00006_n00001_00000' order represents '0' with '-935'
935 -935 0
c Encoding variable: adj_00003_00006_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00006_n00001_00001' direct represents '0' with '-936'
c Var 'adj_00003_00006_n00001_00001' direct represents '1' with '936'
c Var 'adj_00003_00006_n00001_00001' order represents '1' with '1'
c Var 'adj_00003_00006_n00001_00001' order represents '0' with '-936'
936 -936 0
c Encoding variable: adj_00003_00006_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00006_00000_n00001' direct represents '0' with '-937'
c Var 'adj_00003_00006_00000_n00001' direct represents '1' with '937'
c Var 'adj_00003_00006_00000_n00001' order represents '1' with '1'
c Var 'adj_00003_00006_00000_n00001' order represents '0' with '-937'
937 -937 0
c Encoding variable: adj_00003_00006_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00006_00000_00000' direct represents '0' with '-938'
c Var 'adj_00003_00006_00000_00000' direct represents '1' with '938'
c Var 'adj_00003_00006_00000_00000' order represents '1' with '1'
c Var 'adj_00003_00006_00000_00000' order represents '0' with '-938'
938 -938 0
c Encoding variable: adj_00003_00006_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00006_00000_00001' direct represents '0' with '-939'
c Var 'adj_00003_00006_00000_00001' direct represents '1' with '939'
c Var 'adj_00003_00006_00000_00001' order represents '1' with '1'
c Var 'adj_00003_00006_00000_00001' order represents '0' with '-939'
939 -939 0
c Encoding variable: adj_00003_00006_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00003_00006_00001_n00001' direct represents '0' with '-940'
c Var 'adj_00003_00006_00001_n00001' direct represents '1' with '940'
c Var 'adj_00003_00006_00001_n00001' order represents '1' with '1'
c Var 'adj_00003_00006_00001_n00001' order represents '0' with '-940'
940 -940 0
c Encoding variable: adj_00003_00006_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00003_00006_00001_00000' direct represents '0' with '-941'
c Var 'adj_00003_00006_00001_00000' direct represents '1' with '941'
c Var 'adj_00003_00006_00001_00000' order represents '1' with '1'
c Var 'adj_00003_00006_00001_00000' order represents '0' with '-941'
941 -941 0
c Encoding variable: adj_00003_00006_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00003_00006_00001_00001' direct represents '0' with '-942'
c Var 'adj_00003_00006_00001_00001' direct represents '1' with '942'
c Var 'adj_00003_00006_00001_00001' order represents '1' with '1'
c Var 'adj_00003_00006_00001_00001' order represents '0' with '-942'
942 -942 0
c Encoding variable: adj_00004_00000_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00000_n00001_n00001' direct represents '0' with '-943'
c Var 'adj_00004_00000_n00001_n00001' direct represents '1' with '943'
c Var 'adj_00004_00000_n00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00000_n00001_n00001' order represents '0' with '-943'
943 -943 0
c Encoding variable: adj_00004_00000_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00000_n00001_00000' direct represents '0' with '-944'
c Var 'adj_00004_00000_n00001_00000' direct represents '1' with '944'
c Var 'adj_00004_00000_n00001_00000' order represents '1' with '1'
c Var 'adj_00004_00000_n00001_00000' order represents '0' with '-944'
944 -944 0
c Encoding variable: adj_00004_00000_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00000_n00001_00001' direct represents '0' with '-945'
c Var 'adj_00004_00000_n00001_00001' direct represents '1' with '945'
c Var 'adj_00004_00000_n00001_00001' order represents '1' with '1'
c Var 'adj_00004_00000_n00001_00001' order represents '0' with '-945'
945 -945 0
c Encoding variable: adj_00004_00000_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00000_00000_n00001' direct represents '0' with '-946'
c Var 'adj_00004_00000_00000_n00001' direct represents '1' with '946'
c Var 'adj_00004_00000_00000_n00001' order represents '1' with '1'
c Var 'adj_00004_00000_00000_n00001' order represents '0' with '-946'
946 -946 0
c Encoding variable: adj_00004_00000_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00000_00000_00000' direct represents '0' with '-947'
c Var 'adj_00004_00000_00000_00000' direct represents '1' with '947'
c Var 'adj_00004_00000_00000_00000' order represents '1' with '1'
c Var 'adj_00004_00000_00000_00000' order represents '0' with '-947'
947 -947 0
c Encoding variable: adj_00004_00000_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00000_00000_00001' direct represents '0' with '-948'
c Var 'adj_00004_00000_00000_00001' direct represents '1' with '948'
c Var 'adj_00004_00000_00000_00001' order represents '1' with '1'
c Var 'adj_00004_00000_00000_00001' order represents '0' with '-948'
948 -948 0
c Encoding variable: adj_00004_00000_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00000_00001_n00001' direct represents '0' with '-949'
c Var 'adj_00004_00000_00001_n00001' direct represents '1' with '949'
c Var 'adj_00004_00000_00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00000_00001_n00001' order represents '0' with '-949'
949 -949 0
c Encoding variable: adj_00004_00000_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00000_00001_00000' direct represents '0' with '-950'
c Var 'adj_00004_00000_00001_00000' direct represents '1' with '950'
c Var 'adj_00004_00000_00001_00000' order represents '1' with '1'
c Var 'adj_00004_00000_00001_00000' order represents '0' with '-950'
c Encoding variable: adj_00004_00000_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00000_00001_00001' direct represents '0' with '-951'
c Var 'adj_00004_00000_00001_00001' direct represents '1' with '951'
c Var 'adj_00004_00000_00001_00001' order represents '1' with '1'
c Var 'adj_00004_00000_00001_00001' order represents '0' with '-951'
951 -951 0
c Encoding variable: adj_00004_00001_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00001_n00001_n00001' direct represents '0' with '-952'
c Var 'adj_00004_00001_n00001_n00001' direct represents '1' with '952'
c Var 'adj_00004_00001_n00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00001_n00001_n00001' order represents '0' with '-952'
952 -952 0
c Encoding variable: adj_00004_00001_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00001_n00001_00000' direct represents '0' with '-953'
c Var 'adj_00004_00001_n00001_00000' direct represents '1' with '953'
c Var 'adj_00004_00001_n00001_00000' order represents '1' with '1'
c Var 'adj_00004_00001_n00001_00000' order represents '0' with '-953'
953 -953 0
c Encoding variable: adj_00004_00001_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00001_n00001_00001' direct represents '0' with '-954'
c Var 'adj_00004_00001_n00001_00001' direct represents '1' with '954'
c Var 'adj_00004_00001_n00001_00001' order represents '1' with '1'
c Var 'adj_00004_00001_n00001_00001' order represents '0' with '-954'
954 -954 0
c Encoding variable: adj_00004_00001_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00001_00000_n00001' direct represents '0' with '-955'
c Var 'adj_00004_00001_00000_n00001' direct represents '1' with '955'
c Var 'adj_00004_00001_00000_n00001' order represents '1' with '1'
c Var 'adj_00004_00001_00000_n00001' order represents '0' with '-955'
c Encoding variable: adj_00004_00001_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00001_00000_00000' direct represents '0' with '-956'
c Var 'adj_00004_00001_00000_00000' direct represents '1' with '956'
c Var 'adj_00004_00001_00000_00000' order represents '1' with '1'
c Var 'adj_00004_00001_00000_00000' order represents '0' with '-956'
956 -956 0
c Encoding variable: adj_00004_00001_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00001_00000_00001' direct represents '0' with '-957'
c Var 'adj_00004_00001_00000_00001' direct represents '1' with '957'
c Var 'adj_00004_00001_00000_00001' order represents '1' with '1'
c Var 'adj_00004_00001_00000_00001' order represents '0' with '-957'
957 -957 0
c Encoding variable: adj_00004_00001_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00001_00001_n00001' direct represents '0' with '-958'
c Var 'adj_00004_00001_00001_n00001' direct represents '1' with '958'
c Var 'adj_00004_00001_00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00001_00001_n00001' order represents '0' with '-958'
c Encoding variable: adj_00004_00001_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00001_00001_00000' direct represents '0' with '-959'
c Var 'adj_00004_00001_00001_00000' direct represents '1' with '959'
c Var 'adj_00004_00001_00001_00000' order represents '1' with '1'
c Var 'adj_00004_00001_00001_00000' order represents '0' with '-959'
959 -959 0
c Encoding variable: adj_00004_00001_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00001_00001_00001' direct represents '0' with '-960'
c Var 'adj_00004_00001_00001_00001' direct represents '1' with '960'
c Var 'adj_00004_00001_00001_00001' order represents '1' with '1'
c Var 'adj_00004_00001_00001_00001' order represents '0' with '-960'
c Encoding variable: adj_00004_00002_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00002_n00001_n00001' direct represents '0' with '-961'
c Var 'adj_00004_00002_n00001_n00001' direct represents '1' with '961'
c Var 'adj_00004_00002_n00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00002_n00001_n00001' order represents '0' with '-961'
961 -961 0
c Encoding variable: adj_00004_00002_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00002_n00001_00000' direct represents '0' with '-962'
c Var 'adj_00004_00002_n00001_00000' direct represents '1' with '962'
c Var 'adj_00004_00002_n00001_00000' order represents '1' with '1'
c Var 'adj_00004_00002_n00001_00000' order represents '0' with '-962'
962 -962 0
c Encoding variable: adj_00004_00002_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00002_n00001_00001' direct represents '0' with '-963'
c Var 'adj_00004_00002_n00001_00001' direct represents '1' with '963'
c Var 'adj_00004_00002_n00001_00001' order represents '1' with '1'
c Var 'adj_00004_00002_n00001_00001' order represents '0' with '-963'
963 -963 0
c Encoding variable: adj_00004_00002_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00002_00000_n00001' direct represents '0' with '-964'
c Var 'adj_00004_00002_00000_n00001' direct represents '1' with '964'
c Var 'adj_00004_00002_00000_n00001' order represents '1' with '1'
c Var 'adj_00004_00002_00000_n00001' order represents '0' with '-964'
c Encoding variable: adj_00004_00002_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00002_00000_00000' direct represents '0' with '-965'
c Var 'adj_00004_00002_00000_00000' direct represents '1' with '965'
c Var 'adj_00004_00002_00000_00000' order represents '1' with '1'
c Var 'adj_00004_00002_00000_00000' order represents '0' with '-965'
965 -965 0
c Encoding variable: adj_00004_00002_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00002_00000_00001' direct represents '0' with '-966'
c Var 'adj_00004_00002_00000_00001' direct represents '1' with '966'
c Var 'adj_00004_00002_00000_00001' order represents '1' with '1'
c Var 'adj_00004_00002_00000_00001' order represents '0' with '-966'
966 -966 0
c Encoding variable: adj_00004_00002_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00002_00001_n00001' direct represents '0' with '-967'
c Var 'adj_00004_00002_00001_n00001' direct represents '1' with '967'
c Var 'adj_00004_00002_00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00002_00001_n00001' order represents '0' with '-967'
967 -967 0
c Encoding variable: adj_00004_00002_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00002_00001_00000' direct represents '0' with '-968'
c Var 'adj_00004_00002_00001_00000' direct represents '1' with '968'
c Var 'adj_00004_00002_00001_00000' order represents '1' with '1'
c Var 'adj_00004_00002_00001_00000' order represents '0' with '-968'
c Encoding variable: adj_00004_00002_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00002_00001_00001' direct represents '0' with '-969'
c Var 'adj_00004_00002_00001_00001' direct represents '1' with '969'
c Var 'adj_00004_00002_00001_00001' order represents '1' with '1'
c Var 'adj_00004_00002_00001_00001' order represents '0' with '-969'
c Encoding variable: adj_00004_00003_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00003_n00001_n00001' direct represents '0' with '-970'
c Var 'adj_00004_00003_n00001_n00001' direct represents '1' with '970'
c Var 'adj_00004_00003_n00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00003_n00001_n00001' order represents '0' with '-970'
970 -970 0
c Encoding variable: adj_00004_00003_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00003_n00001_00000' direct represents '0' with '-971'
c Var 'adj_00004_00003_n00001_00000' direct represents '1' with '971'
c Var 'adj_00004_00003_n00001_00000' order represents '1' with '1'
c Var 'adj_00004_00003_n00001_00000' order represents '0' with '-971'
971 -971 0
c Encoding variable: adj_00004_00003_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00003_n00001_00001' direct represents '0' with '-972'
c Var 'adj_00004_00003_n00001_00001' direct represents '1' with '972'
c Var 'adj_00004_00003_n00001_00001' order represents '1' with '1'
c Var 'adj_00004_00003_n00001_00001' order represents '0' with '-972'
972 -972 0
c Encoding variable: adj_00004_00003_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00003_00000_n00001' direct represents '0' with '-973'
c Var 'adj_00004_00003_00000_n00001' direct represents '1' with '973'
c Var 'adj_00004_00003_00000_n00001' order represents '1' with '1'
c Var 'adj_00004_00003_00000_n00001' order represents '0' with '-973'
c Encoding variable: adj_00004_00003_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00003_00000_00000' direct represents '0' with '-974'
c Var 'adj_00004_00003_00000_00000' direct represents '1' with '974'
c Var 'adj_00004_00003_00000_00000' order represents '1' with '1'
c Var 'adj_00004_00003_00000_00000' order represents '0' with '-974'
974 -974 0
c Encoding variable: adj_00004_00003_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00003_00000_00001' direct represents '0' with '-975'
c Var 'adj_00004_00003_00000_00001' direct represents '1' with '975'
c Var 'adj_00004_00003_00000_00001' order represents '1' with '1'
c Var 'adj_00004_00003_00000_00001' order represents '0' with '-975'
975 -975 0
c Encoding variable: adj_00004_00003_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00003_00001_n00001' direct represents '0' with '-976'
c Var 'adj_00004_00003_00001_n00001' direct represents '1' with '976'
c Var 'adj_00004_00003_00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00003_00001_n00001' order represents '0' with '-976'
c Encoding variable: adj_00004_00003_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00003_00001_00000' direct represents '0' with '-977'
c Var 'adj_00004_00003_00001_00000' direct represents '1' with '977'
c Var 'adj_00004_00003_00001_00000' order represents '1' with '1'
c Var 'adj_00004_00003_00001_00000' order represents '0' with '-977'
c Encoding variable: adj_00004_00003_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00003_00001_00001' direct represents '0' with '-978'
c Var 'adj_00004_00003_00001_00001' direct represents '1' with '978'
c Var 'adj_00004_00003_00001_00001' order represents '1' with '1'
c Var 'adj_00004_00003_00001_00001' order represents '0' with '-978'
978 -978 0
c Encoding variable: adj_00004_00004_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00004_n00001_n00001' direct represents '0' with '-979'
c Var 'adj_00004_00004_n00001_n00001' direct represents '1' with '979'
c Var 'adj_00004_00004_n00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00004_n00001_n00001' order represents '0' with '-979'
979 -979 0
c Encoding variable: adj_00004_00004_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00004_n00001_00000' direct represents '0' with '-980'
c Var 'adj_00004_00004_n00001_00000' direct represents '1' with '980'
c Var 'adj_00004_00004_n00001_00000' order represents '1' with '1'
c Var 'adj_00004_00004_n00001_00000' order represents '0' with '-980'
980 -980 0
c Encoding variable: adj_00004_00004_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00004_n00001_00001' direct represents '0' with '-981'
c Var 'adj_00004_00004_n00001_00001' direct represents '1' with '981'
c Var 'adj_00004_00004_n00001_00001' order represents '1' with '1'
c Var 'adj_00004_00004_n00001_00001' order represents '0' with '-981'
981 -981 0
c Encoding variable: adj_00004_00004_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00004_00000_n00001' direct represents '0' with '-982'
c Var 'adj_00004_00004_00000_n00001' direct represents '1' with '982'
c Var 'adj_00004_00004_00000_n00001' order represents '1' with '1'
c Var 'adj_00004_00004_00000_n00001' order represents '0' with '-982'
c Encoding variable: adj_00004_00004_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00004_00000_00000' direct represents '0' with '-983'
c Var 'adj_00004_00004_00000_00000' direct represents '1' with '983'
c Var 'adj_00004_00004_00000_00000' order represents '1' with '1'
c Var 'adj_00004_00004_00000_00000' order represents '0' with '-983'
983 -983 0
c Encoding variable: adj_00004_00004_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00004_00000_00001' direct represents '0' with '-984'
c Var 'adj_00004_00004_00000_00001' direct represents '1' with '984'
c Var 'adj_00004_00004_00000_00001' order represents '1' with '1'
c Var 'adj_00004_00004_00000_00001' order represents '0' with '-984'
984 -984 0
c Encoding variable: adj_00004_00004_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00004_00001_n00001' direct represents '0' with '-985'
c Var 'adj_00004_00004_00001_n00001' direct represents '1' with '985'
c Var 'adj_00004_00004_00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00004_00001_n00001' order represents '0' with '-985'
c Encoding variable: adj_00004_00004_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00004_00001_00000' direct represents '0' with '-986'
c Var 'adj_00004_00004_00001_00000' direct represents '1' with '986'
c Var 'adj_00004_00004_00001_00000' order represents '1' with '1'
c Var 'adj_00004_00004_00001_00000' order represents '0' with '-986'
986 -986 0
c Encoding variable: adj_00004_00004_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00004_00001_00001' direct represents '0' with '-987'
c Var 'adj_00004_00004_00001_00001' direct represents '1' with '987'
c Var 'adj_00004_00004_00001_00001' order represents '1' with '1'
c Var 'adj_00004_00004_00001_00001' order represents '0' with '-987'
c Encoding variable: adj_00004_00005_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00005_n00001_n00001' direct represents '0' with '-988'
c Var 'adj_00004_00005_n00001_n00001' direct represents '1' with '988'
c Var 'adj_00004_00005_n00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00005_n00001_n00001' order represents '0' with '-988'
988 -988 0
c Encoding variable: adj_00004_00005_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00005_n00001_00000' direct represents '0' with '-989'
c Var 'adj_00004_00005_n00001_00000' direct represents '1' with '989'
c Var 'adj_00004_00005_n00001_00000' order represents '1' with '1'
c Var 'adj_00004_00005_n00001_00000' order represents '0' with '-989'
989 -989 0
c Encoding variable: adj_00004_00005_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00005_n00001_00001' direct represents '0' with '-990'
c Var 'adj_00004_00005_n00001_00001' direct represents '1' with '990'
c Var 'adj_00004_00005_n00001_00001' order represents '1' with '1'
c Var 'adj_00004_00005_n00001_00001' order represents '0' with '-990'
990 -990 0
c Encoding variable: adj_00004_00005_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00005_00000_n00001' direct represents '0' with '-991'
c Var 'adj_00004_00005_00000_n00001' direct represents '1' with '991'
c Var 'adj_00004_00005_00000_n00001' order represents '1' with '1'
c Var 'adj_00004_00005_00000_n00001' order represents '0' with '-991'
c Encoding variable: adj_00004_00005_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00005_00000_00000' direct represents '0' with '-992'
c Var 'adj_00004_00005_00000_00000' direct represents '1' with '992'
c Var 'adj_00004_00005_00000_00000' order represents '1' with '1'
c Var 'adj_00004_00005_00000_00000' order represents '0' with '-992'
992 -992 0
c Encoding variable: adj_00004_00005_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00005_00000_00001' direct represents '0' with '-993'
c Var 'adj_00004_00005_00000_00001' direct represents '1' with '993'
c Var 'adj_00004_00005_00000_00001' order represents '1' with '1'
c Var 'adj_00004_00005_00000_00001' order represents '0' with '-993'
993 -993 0
c Encoding variable: adj_00004_00005_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00005_00001_n00001' direct represents '0' with '-994'
c Var 'adj_00004_00005_00001_n00001' direct represents '1' with '994'
c Var 'adj_00004_00005_00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00005_00001_n00001' order represents '0' with '-994'
994 -994 0
c Encoding variable: adj_00004_00005_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00005_00001_00000' direct represents '0' with '-995'
c Var 'adj_00004_00005_00001_00000' direct represents '1' with '995'
c Var 'adj_00004_00005_00001_00000' order represents '1' with '1'
c Var 'adj_00004_00005_00001_00000' order represents '0' with '-995'
c Encoding variable: adj_00004_00005_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00005_00001_00001' direct represents '0' with '-996'
c Var 'adj_00004_00005_00001_00001' direct represents '1' with '996'
c Var 'adj_00004_00005_00001_00001' order represents '1' with '1'
c Var 'adj_00004_00005_00001_00001' order represents '0' with '-996'
996 -996 0
c Encoding variable: adj_00004_00006_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00006_n00001_n00001' direct represents '0' with '-997'
c Var 'adj_00004_00006_n00001_n00001' direct represents '1' with '997'
c Var 'adj_00004_00006_n00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00006_n00001_n00001' order represents '0' with '-997'
997 -997 0
c Encoding variable: adj_00004_00006_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00006_n00001_00000' direct represents '0' with '-998'
c Var 'adj_00004_00006_n00001_00000' direct represents '1' with '998'
c Var 'adj_00004_00006_n00001_00000' order represents '1' with '1'
c Var 'adj_00004_00006_n00001_00000' order represents '0' with '-998'
998 -998 0
c Encoding variable: adj_00004_00006_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00006_n00001_00001' direct represents '0' with '-999'
c Var 'adj_00004_00006_n00001_00001' direct represents '1' with '999'
c Var 'adj_00004_00006_n00001_00001' order represents '1' with '1'
c Var 'adj_00004_00006_n00001_00001' order represents '0' with '-999'
999 -999 0
c Encoding variable: adj_00004_00006_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00006_00000_n00001' direct represents '0' with '-1000'
c Var 'adj_00004_00006_00000_n00001' direct represents '1' with '1000'
c Var 'adj_00004_00006_00000_n00001' order represents '1' with '1'
c Var 'adj_00004_00006_00000_n00001' order represents '0' with '-1000'
c Encoding variable: adj_00004_00006_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00006_00000_00000' direct represents '0' with '-1001'
c Var 'adj_00004_00006_00000_00000' direct represents '1' with '1001'
c Var 'adj_00004_00006_00000_00000' order represents '1' with '1'
c Var 'adj_00004_00006_00000_00000' order represents '0' with '-1001'
1001 -1001 0
c Encoding variable: adj_00004_00006_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00006_00000_00001' direct represents '0' with '-1002'
c Var 'adj_00004_00006_00000_00001' direct represents '1' with '1002'
c Var 'adj_00004_00006_00000_00001' order represents '1' with '1'
c Var 'adj_00004_00006_00000_00001' order represents '0' with '-1002'
1002 -1002 0
c Encoding variable: adj_00004_00006_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00004_00006_00001_n00001' direct represents '0' with '-1003'
c Var 'adj_00004_00006_00001_n00001' direct represents '1' with '1003'
c Var 'adj_00004_00006_00001_n00001' order represents '1' with '1'
c Var 'adj_00004_00006_00001_n00001' order represents '0' with '-1003'
c Encoding variable: adj_00004_00006_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00004_00006_00001_00000' direct represents '0' with '-1004'
c Var 'adj_00004_00006_00001_00000' direct represents '1' with '1004'
c Var 'adj_00004_00006_00001_00000' order represents '1' with '1'
c Var 'adj_00004_00006_00001_00000' order represents '0' with '-1004'
1004 -1004 0
c Encoding variable: adj_00004_00006_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00004_00006_00001_00001' direct represents '0' with '-1005'
c Var 'adj_00004_00006_00001_00001' direct represents '1' with '1005'
c Var 'adj_00004_00006_00001_00001' order represents '1' with '1'
c Var 'adj_00004_00006_00001_00001' order represents '0' with '-1005'
1005 -1005 0
c Encoding variable: adj_00005_00000_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00000_n00001_n00001' direct represents '0' with '-1006'
c Var 'adj_00005_00000_n00001_n00001' direct represents '1' with '1006'
c Var 'adj_00005_00000_n00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00000_n00001_n00001' order represents '0' with '-1006'
1006 -1006 0
c Encoding variable: adj_00005_00000_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00000_n00001_00000' direct represents '0' with '-1007'
c Var 'adj_00005_00000_n00001_00000' direct represents '1' with '1007'
c Var 'adj_00005_00000_n00001_00000' order represents '1' with '1'
c Var 'adj_00005_00000_n00001_00000' order represents '0' with '-1007'
1007 -1007 0
c Encoding variable: adj_00005_00000_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00000_n00001_00001' direct represents '0' with '-1008'
c Var 'adj_00005_00000_n00001_00001' direct represents '1' with '1008'
c Var 'adj_00005_00000_n00001_00001' order represents '1' with '1'
c Var 'adj_00005_00000_n00001_00001' order represents '0' with '-1008'
1008 -1008 0
c Encoding variable: adj_00005_00000_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00000_00000_n00001' direct represents '0' with '-1009'
c Var 'adj_00005_00000_00000_n00001' direct represents '1' with '1009'
c Var 'adj_00005_00000_00000_n00001' order represents '1' with '1'
c Var 'adj_00005_00000_00000_n00001' order represents '0' with '-1009'
1009 -1009 0
c Encoding variable: adj_00005_00000_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00000_00000_00000' direct represents '0' with '-1010'
c Var 'adj_00005_00000_00000_00000' direct represents '1' with '1010'
c Var 'adj_00005_00000_00000_00000' order represents '1' with '1'
c Var 'adj_00005_00000_00000_00000' order represents '0' with '-1010'
1010 -1010 0
c Encoding variable: adj_00005_00000_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00000_00000_00001' direct represents '0' with '-1011'
c Var 'adj_00005_00000_00000_00001' direct represents '1' with '1011'
c Var 'adj_00005_00000_00000_00001' order represents '1' with '1'
c Var 'adj_00005_00000_00000_00001' order represents '0' with '-1011'
1011 -1011 0
c Encoding variable: adj_00005_00000_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00000_00001_n00001' direct represents '0' with '-1012'
c Var 'adj_00005_00000_00001_n00001' direct represents '1' with '1012'
c Var 'adj_00005_00000_00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00000_00001_n00001' order represents '0' with '-1012'
1012 -1012 0
c Encoding variable: adj_00005_00000_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00000_00001_00000' direct represents '0' with '-1013'
c Var 'adj_00005_00000_00001_00000' direct represents '1' with '1013'
c Var 'adj_00005_00000_00001_00000' order represents '1' with '1'
c Var 'adj_00005_00000_00001_00000' order represents '0' with '-1013'
c Encoding variable: adj_00005_00000_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00000_00001_00001' direct represents '0' with '-1014'
c Var 'adj_00005_00000_00001_00001' direct represents '1' with '1014'
c Var 'adj_00005_00000_00001_00001' order represents '1' with '1'
c Var 'adj_00005_00000_00001_00001' order represents '0' with '-1014'
c Encoding variable: adj_00005_00001_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00001_n00001_n00001' direct represents '0' with '-1015'
c Var 'adj_00005_00001_n00001_n00001' direct represents '1' with '1015'
c Var 'adj_00005_00001_n00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00001_n00001_n00001' order represents '0' with '-1015'
1015 -1015 0
c Encoding variable: adj_00005_00001_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00001_n00001_00000' direct represents '0' with '-1016'
c Var 'adj_00005_00001_n00001_00000' direct represents '1' with '1016'
c Var 'adj_00005_00001_n00001_00000' order represents '1' with '1'
c Var 'adj_00005_00001_n00001_00000' order represents '0' with '-1016'
1016 -1016 0
c Encoding variable: adj_00005_00001_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00001_n00001_00001' direct represents '0' with '-1017'
c Var 'adj_00005_00001_n00001_00001' direct represents '1' with '1017'
c Var 'adj_00005_00001_n00001_00001' order represents '1' with '1'
c Var 'adj_00005_00001_n00001_00001' order represents '0' with '-1017'
1017 -1017 0
c Encoding variable: adj_00005_00001_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00001_00000_n00001' direct represents '0' with '-1018'
c Var 'adj_00005_00001_00000_n00001' direct represents '1' with '1018'
c Var 'adj_00005_00001_00000_n00001' order represents '1' with '1'
c Var 'adj_00005_00001_00000_n00001' order represents '0' with '-1018'
1018 -1018 0
c Encoding variable: adj_00005_00001_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00001_00000_00000' direct represents '0' with '-1019'
c Var 'adj_00005_00001_00000_00000' direct represents '1' with '1019'
c Var 'adj_00005_00001_00000_00000' order represents '1' with '1'
c Var 'adj_00005_00001_00000_00000' order represents '0' with '-1019'
1019 -1019 0
c Encoding variable: adj_00005_00001_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00001_00000_00001' direct represents '0' with '-1020'
c Var 'adj_00005_00001_00000_00001' direct represents '1' with '1020'
c Var 'adj_00005_00001_00000_00001' order represents '1' with '1'
c Var 'adj_00005_00001_00000_00001' order represents '0' with '-1020'
1020 -1020 0
c Encoding variable: adj_00005_00001_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00001_00001_n00001' direct represents '0' with '-1021'
c Var 'adj_00005_00001_00001_n00001' direct represents '1' with '1021'
c Var 'adj_00005_00001_00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00001_00001_n00001' order represents '0' with '-1021'
1021 -1021 0
c Encoding variable: adj_00005_00001_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00001_00001_00000' direct represents '0' with '-1022'
c Var 'adj_00005_00001_00001_00000' direct represents '1' with '1022'
c Var 'adj_00005_00001_00001_00000' order represents '1' with '1'
c Var 'adj_00005_00001_00001_00000' order represents '0' with '-1022'
1022 -1022 0
c Encoding variable: adj_00005_00001_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00001_00001_00001' direct represents '0' with '-1023'
c Var 'adj_00005_00001_00001_00001' direct represents '1' with '1023'
c Var 'adj_00005_00001_00001_00001' order represents '1' with '1'
c Var 'adj_00005_00001_00001_00001' order represents '0' with '-1023'
1023 -1023 0
c Encoding variable: adj_00005_00002_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00002_n00001_n00001' direct represents '0' with '-1024'
c Var 'adj_00005_00002_n00001_n00001' direct represents '1' with '1024'
c Var 'adj_00005_00002_n00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00002_n00001_n00001' order represents '0' with '-1024'
1024 -1024 0
c Encoding variable: adj_00005_00002_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00002_n00001_00000' direct represents '0' with '-1025'
c Var 'adj_00005_00002_n00001_00000' direct represents '1' with '1025'
c Var 'adj_00005_00002_n00001_00000' order represents '1' with '1'
c Var 'adj_00005_00002_n00001_00000' order represents '0' with '-1025'
1025 -1025 0
c Encoding variable: adj_00005_00002_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00002_n00001_00001' direct represents '0' with '-1026'
c Var 'adj_00005_00002_n00001_00001' direct represents '1' with '1026'
c Var 'adj_00005_00002_n00001_00001' order represents '1' with '1'
c Var 'adj_00005_00002_n00001_00001' order represents '0' with '-1026'
1026 -1026 0
c Encoding variable: adj_00005_00002_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00002_00000_n00001' direct represents '0' with '-1027'
c Var 'adj_00005_00002_00000_n00001' direct represents '1' with '1027'
c Var 'adj_00005_00002_00000_n00001' order represents '1' with '1'
c Var 'adj_00005_00002_00000_n00001' order represents '0' with '-1027'
1027 -1027 0
c Encoding variable: adj_00005_00002_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00002_00000_00000' direct represents '0' with '-1028'
c Var 'adj_00005_00002_00000_00000' direct represents '1' with '1028'
c Var 'adj_00005_00002_00000_00000' order represents '1' with '1'
c Var 'adj_00005_00002_00000_00000' order represents '0' with '-1028'
1028 -1028 0
c Encoding variable: adj_00005_00002_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00002_00000_00001' direct represents '0' with '-1029'
c Var 'adj_00005_00002_00000_00001' direct represents '1' with '1029'
c Var 'adj_00005_00002_00000_00001' order represents '1' with '1'
c Var 'adj_00005_00002_00000_00001' order represents '0' with '-1029'
1029 -1029 0
c Encoding variable: adj_00005_00002_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00002_00001_n00001' direct represents '0' with '-1030'
c Var 'adj_00005_00002_00001_n00001' direct represents '1' with '1030'
c Var 'adj_00005_00002_00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00002_00001_n00001' order represents '0' with '-1030'
c Encoding variable: adj_00005_00002_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00002_00001_00000' direct represents '0' with '-1031'
c Var 'adj_00005_00002_00001_00000' direct represents '1' with '1031'
c Var 'adj_00005_00002_00001_00000' order represents '1' with '1'
c Var 'adj_00005_00002_00001_00000' order represents '0' with '-1031'
c Encoding variable: adj_00005_00002_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00002_00001_00001' direct represents '0' with '-1032'
c Var 'adj_00005_00002_00001_00001' direct represents '1' with '1032'
c Var 'adj_00005_00002_00001_00001' order represents '1' with '1'
c Var 'adj_00005_00002_00001_00001' order represents '0' with '-1032'
c Encoding variable: adj_00005_00003_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00003_n00001_n00001' direct represents '0' with '-1033'
c Var 'adj_00005_00003_n00001_n00001' direct represents '1' with '1033'
c Var 'adj_00005_00003_n00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00003_n00001_n00001' order represents '0' with '-1033'
1033 -1033 0
c Encoding variable: adj_00005_00003_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00003_n00001_00000' direct represents '0' with '-1034'
c Var 'adj_00005_00003_n00001_00000' direct represents '1' with '1034'
c Var 'adj_00005_00003_n00001_00000' order represents '1' with '1'
c Var 'adj_00005_00003_n00001_00000' order represents '0' with '-1034'
1034 -1034 0
c Encoding variable: adj_00005_00003_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00003_n00001_00001' direct represents '0' with '-1035'
c Var 'adj_00005_00003_n00001_00001' direct represents '1' with '1035'
c Var 'adj_00005_00003_n00001_00001' order represents '1' with '1'
c Var 'adj_00005_00003_n00001_00001' order represents '0' with '-1035'
1035 -1035 0
c Encoding variable: adj_00005_00003_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00003_00000_n00001' direct represents '0' with '-1036'
c Var 'adj_00005_00003_00000_n00001' direct represents '1' with '1036'
c Var 'adj_00005_00003_00000_n00001' order represents '1' with '1'
c Var 'adj_00005_00003_00000_n00001' order represents '0' with '-1036'
c Encoding variable: adj_00005_00003_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00003_00000_00000' direct represents '0' with '-1037'
c Var 'adj_00005_00003_00000_00000' direct represents '1' with '1037'
c Var 'adj_00005_00003_00000_00000' order represents '1' with '1'
c Var 'adj_00005_00003_00000_00000' order represents '0' with '-1037'
1037 -1037 0
c Encoding variable: adj_00005_00003_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00003_00000_00001' direct represents '0' with '-1038'
c Var 'adj_00005_00003_00000_00001' direct represents '1' with '1038'
c Var 'adj_00005_00003_00000_00001' order represents '1' with '1'
c Var 'adj_00005_00003_00000_00001' order represents '0' with '-1038'
1038 -1038 0
c Encoding variable: adj_00005_00003_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00003_00001_n00001' direct represents '0' with '-1039'
c Var 'adj_00005_00003_00001_n00001' direct represents '1' with '1039'
c Var 'adj_00005_00003_00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00003_00001_n00001' order represents '0' with '-1039'
c Encoding variable: adj_00005_00003_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00003_00001_00000' direct represents '0' with '-1040'
c Var 'adj_00005_00003_00001_00000' direct represents '1' with '1040'
c Var 'adj_00005_00003_00001_00000' order represents '1' with '1'
c Var 'adj_00005_00003_00001_00000' order represents '0' with '-1040'
c Encoding variable: adj_00005_00003_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00003_00001_00001' direct represents '0' with '-1041'
c Var 'adj_00005_00003_00001_00001' direct represents '1' with '1041'
c Var 'adj_00005_00003_00001_00001' order represents '1' with '1'
c Var 'adj_00005_00003_00001_00001' order represents '0' with '-1041'
c Encoding variable: adj_00005_00004_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00004_n00001_n00001' direct represents '0' with '-1042'
c Var 'adj_00005_00004_n00001_n00001' direct represents '1' with '1042'
c Var 'adj_00005_00004_n00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00004_n00001_n00001' order represents '0' with '-1042'
1042 -1042 0
c Encoding variable: adj_00005_00004_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00004_n00001_00000' direct represents '0' with '-1043'
c Var 'adj_00005_00004_n00001_00000' direct represents '1' with '1043'
c Var 'adj_00005_00004_n00001_00000' order represents '1' with '1'
c Var 'adj_00005_00004_n00001_00000' order represents '0' with '-1043'
1043 -1043 0
c Encoding variable: adj_00005_00004_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00004_n00001_00001' direct represents '0' with '-1044'
c Var 'adj_00005_00004_n00001_00001' direct represents '1' with '1044'
c Var 'adj_00005_00004_n00001_00001' order represents '1' with '1'
c Var 'adj_00005_00004_n00001_00001' order represents '0' with '-1044'
1044 -1044 0
c Encoding variable: adj_00005_00004_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00004_00000_n00001' direct represents '0' with '-1045'
c Var 'adj_00005_00004_00000_n00001' direct represents '1' with '1045'
c Var 'adj_00005_00004_00000_n00001' order represents '1' with '1'
c Var 'adj_00005_00004_00000_n00001' order represents '0' with '-1045'
1045 -1045 0
c Encoding variable: adj_00005_00004_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00004_00000_00000' direct represents '0' with '-1046'
c Var 'adj_00005_00004_00000_00000' direct represents '1' with '1046'
c Var 'adj_00005_00004_00000_00000' order represents '1' with '1'
c Var 'adj_00005_00004_00000_00000' order represents '0' with '-1046'
1046 -1046 0
c Encoding variable: adj_00005_00004_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00004_00000_00001' direct represents '0' with '-1047'
c Var 'adj_00005_00004_00000_00001' direct represents '1' with '1047'
c Var 'adj_00005_00004_00000_00001' order represents '1' with '1'
c Var 'adj_00005_00004_00000_00001' order represents '0' with '-1047'
1047 -1047 0
c Encoding variable: adj_00005_00004_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00004_00001_n00001' direct represents '0' with '-1048'
c Var 'adj_00005_00004_00001_n00001' direct represents '1' with '1048'
c Var 'adj_00005_00004_00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00004_00001_n00001' order represents '0' with '-1048'
1048 -1048 0
c Encoding variable: adj_00005_00004_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00004_00001_00000' direct represents '0' with '-1049'
c Var 'adj_00005_00004_00001_00000' direct represents '1' with '1049'
c Var 'adj_00005_00004_00001_00000' order represents '1' with '1'
c Var 'adj_00005_00004_00001_00000' order represents '0' with '-1049'
1049 -1049 0
c Encoding variable: adj_00005_00004_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00004_00001_00001' direct represents '0' with '-1050'
c Var 'adj_00005_00004_00001_00001' direct represents '1' with '1050'
c Var 'adj_00005_00004_00001_00001' order represents '1' with '1'
c Var 'adj_00005_00004_00001_00001' order represents '0' with '-1050'
1050 -1050 0
c Encoding variable: adj_00005_00005_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00005_n00001_n00001' direct represents '0' with '-1051'
c Var 'adj_00005_00005_n00001_n00001' direct represents '1' with '1051'
c Var 'adj_00005_00005_n00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00005_n00001_n00001' order represents '0' with '-1051'
1051 -1051 0
c Encoding variable: adj_00005_00005_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00005_n00001_00000' direct represents '0' with '-1052'
c Var 'adj_00005_00005_n00001_00000' direct represents '1' with '1052'
c Var 'adj_00005_00005_n00001_00000' order represents '1' with '1'
c Var 'adj_00005_00005_n00001_00000' order represents '0' with '-1052'
1052 -1052 0
c Encoding variable: adj_00005_00005_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00005_n00001_00001' direct represents '0' with '-1053'
c Var 'adj_00005_00005_n00001_00001' direct represents '1' with '1053'
c Var 'adj_00005_00005_n00001_00001' order represents '1' with '1'
c Var 'adj_00005_00005_n00001_00001' order represents '0' with '-1053'
1053 -1053 0
c Encoding variable: adj_00005_00005_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00005_00000_n00001' direct represents '0' with '-1054'
c Var 'adj_00005_00005_00000_n00001' direct represents '1' with '1054'
c Var 'adj_00005_00005_00000_n00001' order represents '1' with '1'
c Var 'adj_00005_00005_00000_n00001' order represents '0' with '-1054'
1054 -1054 0
c Encoding variable: adj_00005_00005_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00005_00000_00000' direct represents '0' with '-1055'
c Var 'adj_00005_00005_00000_00000' direct represents '1' with '1055'
c Var 'adj_00005_00005_00000_00000' order represents '1' with '1'
c Var 'adj_00005_00005_00000_00000' order represents '0' with '-1055'
1055 -1055 0
c Encoding variable: adj_00005_00005_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00005_00000_00001' direct represents '0' with '-1056'
c Var 'adj_00005_00005_00000_00001' direct represents '1' with '1056'
c Var 'adj_00005_00005_00000_00001' order represents '1' with '1'
c Var 'adj_00005_00005_00000_00001' order represents '0' with '-1056'
1056 -1056 0
c Encoding variable: adj_00005_00005_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00005_00001_n00001' direct represents '0' with '-1057'
c Var 'adj_00005_00005_00001_n00001' direct represents '1' with '1057'
c Var 'adj_00005_00005_00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00005_00001_n00001' order represents '0' with '-1057'
c Encoding variable: adj_00005_00005_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00005_00001_00000' direct represents '0' with '-1058'
c Var 'adj_00005_00005_00001_00000' direct represents '1' with '1058'
c Var 'adj_00005_00005_00001_00000' order represents '1' with '1'
c Var 'adj_00005_00005_00001_00000' order represents '0' with '-1058'
c Encoding variable: adj_00005_00005_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00005_00001_00001' direct represents '0' with '-1059'
c Var 'adj_00005_00005_00001_00001' direct represents '1' with '1059'
c Var 'adj_00005_00005_00001_00001' order represents '1' with '1'
c Var 'adj_00005_00005_00001_00001' order represents '0' with '-1059'
c Encoding variable: adj_00005_00006_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00006_n00001_n00001' direct represents '0' with '-1060'
c Var 'adj_00005_00006_n00001_n00001' direct represents '1' with '1060'
c Var 'adj_00005_00006_n00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00006_n00001_n00001' order represents '0' with '-1060'
1060 -1060 0
c Encoding variable: adj_00005_00006_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00006_n00001_00000' direct represents '0' with '-1061'
c Var 'adj_00005_00006_n00001_00000' direct represents '1' with '1061'
c Var 'adj_00005_00006_n00001_00000' order represents '1' with '1'
c Var 'adj_00005_00006_n00001_00000' order represents '0' with '-1061'
1061 -1061 0
c Encoding variable: adj_00005_00006_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00006_n00001_00001' direct represents '0' with '-1062'
c Var 'adj_00005_00006_n00001_00001' direct represents '1' with '1062'
c Var 'adj_00005_00006_n00001_00001' order represents '1' with '1'
c Var 'adj_00005_00006_n00001_00001' order represents '0' with '-1062'
1062 -1062 0
c Encoding variable: adj_00005_00006_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00006_00000_n00001' direct represents '0' with '-1063'
c Var 'adj_00005_00006_00000_n00001' direct represents '1' with '1063'
c Var 'adj_00005_00006_00000_n00001' order represents '1' with '1'
c Var 'adj_00005_00006_00000_n00001' order represents '0' with '-1063'
1063 -1063 0
c Encoding variable: adj_00005_00006_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00006_00000_00000' direct represents '0' with '-1064'
c Var 'adj_00005_00006_00000_00000' direct represents '1' with '1064'
c Var 'adj_00005_00006_00000_00000' order represents '1' with '1'
c Var 'adj_00005_00006_00000_00000' order represents '0' with '-1064'
1064 -1064 0
c Encoding variable: adj_00005_00006_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00006_00000_00001' direct represents '0' with '-1065'
c Var 'adj_00005_00006_00000_00001' direct represents '1' with '1065'
c Var 'adj_00005_00006_00000_00001' order represents '1' with '1'
c Var 'adj_00005_00006_00000_00001' order represents '0' with '-1065'
1065 -1065 0
c Encoding variable: adj_00005_00006_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00005_00006_00001_n00001' direct represents '0' with '-1066'
c Var 'adj_00005_00006_00001_n00001' direct represents '1' with '1066'
c Var 'adj_00005_00006_00001_n00001' order represents '1' with '1'
c Var 'adj_00005_00006_00001_n00001' order represents '0' with '-1066'
1066 -1066 0
c Encoding variable: adj_00005_00006_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00005_00006_00001_00000' direct represents '0' with '-1067'
c Var 'adj_00005_00006_00001_00000' direct represents '1' with '1067'
c Var 'adj_00005_00006_00001_00000' order represents '1' with '1'
c Var 'adj_00005_00006_00001_00000' order represents '0' with '-1067'
1067 -1067 0
c Encoding variable: adj_00005_00006_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00005_00006_00001_00001' direct represents '0' with '-1068'
c Var 'adj_00005_00006_00001_00001' direct represents '1' with '1068'
c Var 'adj_00005_00006_00001_00001' order represents '1' with '1'
c Var 'adj_00005_00006_00001_00001' order represents '0' with '-1068'
1068 -1068 0
c Encoding variable: adj_00006_00000_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00000_n00001_n00001' direct represents '0' with '-1069'
c Var 'adj_00006_00000_n00001_n00001' direct represents '1' with '1069'
c Var 'adj_00006_00000_n00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00000_n00001_n00001' order represents '0' with '-1069'
1069 -1069 0
c Encoding variable: adj_00006_00000_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00000_n00001_00000' direct represents '0' with '-1070'
c Var 'adj_00006_00000_n00001_00000' direct represents '1' with '1070'
c Var 'adj_00006_00000_n00001_00000' order represents '1' with '1'
c Var 'adj_00006_00000_n00001_00000' order represents '0' with '-1070'
1070 -1070 0
c Encoding variable: adj_00006_00000_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00000_n00001_00001' direct represents '0' with '-1071'
c Var 'adj_00006_00000_n00001_00001' direct represents '1' with '1071'
c Var 'adj_00006_00000_n00001_00001' order represents '1' with '1'
c Var 'adj_00006_00000_n00001_00001' order represents '0' with '-1071'
1071 -1071 0
c Encoding variable: adj_00006_00000_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00000_00000_n00001' direct represents '0' with '-1072'
c Var 'adj_00006_00000_00000_n00001' direct represents '1' with '1072'
c Var 'adj_00006_00000_00000_n00001' order represents '1' with '1'
c Var 'adj_00006_00000_00000_n00001' order represents '0' with '-1072'
1072 -1072 0
c Encoding variable: adj_00006_00000_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00000_00000_00000' direct represents '0' with '-1073'
c Var 'adj_00006_00000_00000_00000' direct represents '1' with '1073'
c Var 'adj_00006_00000_00000_00000' order represents '1' with '1'
c Var 'adj_00006_00000_00000_00000' order represents '0' with '-1073'
1073 -1073 0
c Encoding variable: adj_00006_00000_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00000_00000_00001' direct represents '0' with '-1074'
c Var 'adj_00006_00000_00000_00001' direct represents '1' with '1074'
c Var 'adj_00006_00000_00000_00001' order represents '1' with '1'
c Var 'adj_00006_00000_00000_00001' order represents '0' with '-1074'
1074 -1074 0
c Encoding variable: adj_00006_00000_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00000_00001_n00001' direct represents '0' with '-1075'
c Var 'adj_00006_00000_00001_n00001' direct represents '1' with '1075'
c Var 'adj_00006_00000_00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00000_00001_n00001' order represents '0' with '-1075'
1075 -1075 0
c Encoding variable: adj_00006_00000_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00000_00001_00000' direct represents '0' with '-1076'
c Var 'adj_00006_00000_00001_00000' direct represents '1' with '1076'
c Var 'adj_00006_00000_00001_00000' order represents '1' with '1'
c Var 'adj_00006_00000_00001_00000' order represents '0' with '-1076'
1076 -1076 0
c Encoding variable: adj_00006_00000_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00000_00001_00001' direct represents '0' with '-1077'
c Var 'adj_00006_00000_00001_00001' direct represents '1' with '1077'
c Var 'adj_00006_00000_00001_00001' order represents '1' with '1'
c Var 'adj_00006_00000_00001_00001' order represents '0' with '-1077'
1077 -1077 0
c Encoding variable: adj_00006_00001_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00001_n00001_n00001' direct represents '0' with '-1078'
c Var 'adj_00006_00001_n00001_n00001' direct represents '1' with '1078'
c Var 'adj_00006_00001_n00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00001_n00001_n00001' order represents '0' with '-1078'
1078 -1078 0
c Encoding variable: adj_00006_00001_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00001_n00001_00000' direct represents '0' with '-1079'
c Var 'adj_00006_00001_n00001_00000' direct represents '1' with '1079'
c Var 'adj_00006_00001_n00001_00000' order represents '1' with '1'
c Var 'adj_00006_00001_n00001_00000' order represents '0' with '-1079'
1079 -1079 0
c Encoding variable: adj_00006_00001_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00001_n00001_00001' direct represents '0' with '-1080'
c Var 'adj_00006_00001_n00001_00001' direct represents '1' with '1080'
c Var 'adj_00006_00001_n00001_00001' order represents '1' with '1'
c Var 'adj_00006_00001_n00001_00001' order represents '0' with '-1080'
1080 -1080 0
c Encoding variable: adj_00006_00001_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00001_00000_n00001' direct represents '0' with '-1081'
c Var 'adj_00006_00001_00000_n00001' direct represents '1' with '1081'
c Var 'adj_00006_00001_00000_n00001' order represents '1' with '1'
c Var 'adj_00006_00001_00000_n00001' order represents '0' with '-1081'
c Encoding variable: adj_00006_00001_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00001_00000_00000' direct represents '0' with '-1082'
c Var 'adj_00006_00001_00000_00000' direct represents '1' with '1082'
c Var 'adj_00006_00001_00000_00000' order represents '1' with '1'
c Var 'adj_00006_00001_00000_00000' order represents '0' with '-1082'
1082 -1082 0
c Encoding variable: adj_00006_00001_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00001_00000_00001' direct represents '0' with '-1083'
c Var 'adj_00006_00001_00000_00001' direct represents '1' with '1083'
c Var 'adj_00006_00001_00000_00001' order represents '1' with '1'
c Var 'adj_00006_00001_00000_00001' order represents '0' with '-1083'
1083 -1083 0
c Encoding variable: adj_00006_00001_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00001_00001_n00001' direct represents '0' with '-1084'
c Var 'adj_00006_00001_00001_n00001' direct represents '1' with '1084'
c Var 'adj_00006_00001_00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00001_00001_n00001' order represents '0' with '-1084'
1084 -1084 0
c Encoding variable: adj_00006_00001_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00001_00001_00000' direct represents '0' with '-1085'
c Var 'adj_00006_00001_00001_00000' direct represents '1' with '1085'
c Var 'adj_00006_00001_00001_00000' order represents '1' with '1'
c Var 'adj_00006_00001_00001_00000' order represents '0' with '-1085'
1085 -1085 0
c Encoding variable: adj_00006_00001_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00001_00001_00001' direct represents '0' with '-1086'
c Var 'adj_00006_00001_00001_00001' direct represents '1' with '1086'
c Var 'adj_00006_00001_00001_00001' order represents '1' with '1'
c Var 'adj_00006_00001_00001_00001' order represents '0' with '-1086'
1086 -1086 0
c Encoding variable: adj_00006_00002_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00002_n00001_n00001' direct represents '0' with '-1087'
c Var 'adj_00006_00002_n00001_n00001' direct represents '1' with '1087'
c Var 'adj_00006_00002_n00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00002_n00001_n00001' order represents '0' with '-1087'
1087 -1087 0
c Encoding variable: adj_00006_00002_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00002_n00001_00000' direct represents '0' with '-1088'
c Var 'adj_00006_00002_n00001_00000' direct represents '1' with '1088'
c Var 'adj_00006_00002_n00001_00000' order represents '1' with '1'
c Var 'adj_00006_00002_n00001_00000' order represents '0' with '-1088'
1088 -1088 0
c Encoding variable: adj_00006_00002_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00002_n00001_00001' direct represents '0' with '-1089'
c Var 'adj_00006_00002_n00001_00001' direct represents '1' with '1089'
c Var 'adj_00006_00002_n00001_00001' order represents '1' with '1'
c Var 'adj_00006_00002_n00001_00001' order represents '0' with '-1089'
1089 -1089 0
c Encoding variable: adj_00006_00002_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00002_00000_n00001' direct represents '0' with '-1090'
c Var 'adj_00006_00002_00000_n00001' direct represents '1' with '1090'
c Var 'adj_00006_00002_00000_n00001' order represents '1' with '1'
c Var 'adj_00006_00002_00000_n00001' order represents '0' with '-1090'
c Encoding variable: adj_00006_00002_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00002_00000_00000' direct represents '0' with '-1091'
c Var 'adj_00006_00002_00000_00000' direct represents '1' with '1091'
c Var 'adj_00006_00002_00000_00000' order represents '1' with '1'
c Var 'adj_00006_00002_00000_00000' order represents '0' with '-1091'
1091 -1091 0
c Encoding variable: adj_00006_00002_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00002_00000_00001' direct represents '0' with '-1092'
c Var 'adj_00006_00002_00000_00001' direct represents '1' with '1092'
c Var 'adj_00006_00002_00000_00001' order represents '1' with '1'
c Var 'adj_00006_00002_00000_00001' order represents '0' with '-1092'
1092 -1092 0
c Encoding variable: adj_00006_00002_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00002_00001_n00001' direct represents '0' with '-1093'
c Var 'adj_00006_00002_00001_n00001' direct represents '1' with '1093'
c Var 'adj_00006_00002_00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00002_00001_n00001' order represents '0' with '-1093'
1093 -1093 0
c Encoding variable: adj_00006_00002_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00002_00001_00000' direct represents '0' with '-1094'
c Var 'adj_00006_00002_00001_00000' direct represents '1' with '1094'
c Var 'adj_00006_00002_00001_00000' order represents '1' with '1'
c Var 'adj_00006_00002_00001_00000' order represents '0' with '-1094'
1094 -1094 0
c Encoding variable: adj_00006_00002_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00002_00001_00001' direct represents '0' with '-1095'
c Var 'adj_00006_00002_00001_00001' direct represents '1' with '1095'
c Var 'adj_00006_00002_00001_00001' order represents '1' with '1'
c Var 'adj_00006_00002_00001_00001' order represents '0' with '-1095'
1095 -1095 0
c Encoding variable: adj_00006_00003_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00003_n00001_n00001' direct represents '0' with '-1096'
c Var 'adj_00006_00003_n00001_n00001' direct represents '1' with '1096'
c Var 'adj_00006_00003_n00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00003_n00001_n00001' order represents '0' with '-1096'
1096 -1096 0
c Encoding variable: adj_00006_00003_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00003_n00001_00000' direct represents '0' with '-1097'
c Var 'adj_00006_00003_n00001_00000' direct represents '1' with '1097'
c Var 'adj_00006_00003_n00001_00000' order represents '1' with '1'
c Var 'adj_00006_00003_n00001_00000' order represents '0' with '-1097'
1097 -1097 0
c Encoding variable: adj_00006_00003_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00003_n00001_00001' direct represents '0' with '-1098'
c Var 'adj_00006_00003_n00001_00001' direct represents '1' with '1098'
c Var 'adj_00006_00003_n00001_00001' order represents '1' with '1'
c Var 'adj_00006_00003_n00001_00001' order represents '0' with '-1098'
1098 -1098 0
c Encoding variable: adj_00006_00003_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00003_00000_n00001' direct represents '0' with '-1099'
c Var 'adj_00006_00003_00000_n00001' direct represents '1' with '1099'
c Var 'adj_00006_00003_00000_n00001' order represents '1' with '1'
c Var 'adj_00006_00003_00000_n00001' order represents '0' with '-1099'
c Encoding variable: adj_00006_00003_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00003_00000_00000' direct represents '0' with '-1100'
c Var 'adj_00006_00003_00000_00000' direct represents '1' with '1100'
c Var 'adj_00006_00003_00000_00000' order represents '1' with '1'
c Var 'adj_00006_00003_00000_00000' order represents '0' with '-1100'
1100 -1100 0
c Encoding variable: adj_00006_00003_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00003_00000_00001' direct represents '0' with '-1101'
c Var 'adj_00006_00003_00000_00001' direct represents '1' with '1101'
c Var 'adj_00006_00003_00000_00001' order represents '1' with '1'
c Var 'adj_00006_00003_00000_00001' order represents '0' with '-1101'
1101 -1101 0
c Encoding variable: adj_00006_00003_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00003_00001_n00001' direct represents '0' with '-1102'
c Var 'adj_00006_00003_00001_n00001' direct represents '1' with '1102'
c Var 'adj_00006_00003_00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00003_00001_n00001' order represents '0' with '-1102'
1102 -1102 0
c Encoding variable: adj_00006_00003_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00003_00001_00000' direct represents '0' with '-1103'
c Var 'adj_00006_00003_00001_00000' direct represents '1' with '1103'
c Var 'adj_00006_00003_00001_00000' order represents '1' with '1'
c Var 'adj_00006_00003_00001_00000' order represents '0' with '-1103'
1103 -1103 0
c Encoding variable: adj_00006_00003_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00003_00001_00001' direct represents '0' with '-1104'
c Var 'adj_00006_00003_00001_00001' direct represents '1' with '1104'
c Var 'adj_00006_00003_00001_00001' order represents '1' with '1'
c Var 'adj_00006_00003_00001_00001' order represents '0' with '-1104'
1104 -1104 0
c Encoding variable: adj_00006_00004_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00004_n00001_n00001' direct represents '0' with '-1105'
c Var 'adj_00006_00004_n00001_n00001' direct represents '1' with '1105'
c Var 'adj_00006_00004_n00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00004_n00001_n00001' order represents '0' with '-1105'
1105 -1105 0
c Encoding variable: adj_00006_00004_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00004_n00001_00000' direct represents '0' with '-1106'
c Var 'adj_00006_00004_n00001_00000' direct represents '1' with '1106'
c Var 'adj_00006_00004_n00001_00000' order represents '1' with '1'
c Var 'adj_00006_00004_n00001_00000' order represents '0' with '-1106'
1106 -1106 0
c Encoding variable: adj_00006_00004_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00004_n00001_00001' direct represents '0' with '-1107'
c Var 'adj_00006_00004_n00001_00001' direct represents '1' with '1107'
c Var 'adj_00006_00004_n00001_00001' order represents '1' with '1'
c Var 'adj_00006_00004_n00001_00001' order represents '0' with '-1107'
1107 -1107 0
c Encoding variable: adj_00006_00004_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00004_00000_n00001' direct represents '0' with '-1108'
c Var 'adj_00006_00004_00000_n00001' direct represents '1' with '1108'
c Var 'adj_00006_00004_00000_n00001' order represents '1' with '1'
c Var 'adj_00006_00004_00000_n00001' order represents '0' with '-1108'
c Encoding variable: adj_00006_00004_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00004_00000_00000' direct represents '0' with '-1109'
c Var 'adj_00006_00004_00000_00000' direct represents '1' with '1109'
c Var 'adj_00006_00004_00000_00000' order represents '1' with '1'
c Var 'adj_00006_00004_00000_00000' order represents '0' with '-1109'
1109 -1109 0
c Encoding variable: adj_00006_00004_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00004_00000_00001' direct represents '0' with '-1110'
c Var 'adj_00006_00004_00000_00001' direct represents '1' with '1110'
c Var 'adj_00006_00004_00000_00001' order represents '1' with '1'
c Var 'adj_00006_00004_00000_00001' order represents '0' with '-1110'
1110 -1110 0
c Encoding variable: adj_00006_00004_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00004_00001_n00001' direct represents '0' with '-1111'
c Var 'adj_00006_00004_00001_n00001' direct represents '1' with '1111'
c Var 'adj_00006_00004_00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00004_00001_n00001' order represents '0' with '-1111'
1111 -1111 0
c Encoding variable: adj_00006_00004_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00004_00001_00000' direct represents '0' with '-1112'
c Var 'adj_00006_00004_00001_00000' direct represents '1' with '1112'
c Var 'adj_00006_00004_00001_00000' order represents '1' with '1'
c Var 'adj_00006_00004_00001_00000' order represents '0' with '-1112'
1112 -1112 0
c Encoding variable: adj_00006_00004_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00004_00001_00001' direct represents '0' with '-1113'
c Var 'adj_00006_00004_00001_00001' direct represents '1' with '1113'
c Var 'adj_00006_00004_00001_00001' order represents '1' with '1'
c Var 'adj_00006_00004_00001_00001' order represents '0' with '-1113'
1113 -1113 0
c Encoding variable: adj_00006_00005_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00005_n00001_n00001' direct represents '0' with '-1114'
c Var 'adj_00006_00005_n00001_n00001' direct represents '1' with '1114'
c Var 'adj_00006_00005_n00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00005_n00001_n00001' order represents '0' with '-1114'
1114 -1114 0
c Encoding variable: adj_00006_00005_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00005_n00001_00000' direct represents '0' with '-1115'
c Var 'adj_00006_00005_n00001_00000' direct represents '1' with '1115'
c Var 'adj_00006_00005_n00001_00000' order represents '1' with '1'
c Var 'adj_00006_00005_n00001_00000' order represents '0' with '-1115'
1115 -1115 0
c Encoding variable: adj_00006_00005_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00005_n00001_00001' direct represents '0' with '-1116'
c Var 'adj_00006_00005_n00001_00001' direct represents '1' with '1116'
c Var 'adj_00006_00005_n00001_00001' order represents '1' with '1'
c Var 'adj_00006_00005_n00001_00001' order represents '0' with '-1116'
1116 -1116 0
c Encoding variable: adj_00006_00005_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00005_00000_n00001' direct represents '0' with '-1117'
c Var 'adj_00006_00005_00000_n00001' direct represents '1' with '1117'
c Var 'adj_00006_00005_00000_n00001' order represents '1' with '1'
c Var 'adj_00006_00005_00000_n00001' order represents '0' with '-1117'
c Encoding variable: adj_00006_00005_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00005_00000_00000' direct represents '0' with '-1118'
c Var 'adj_00006_00005_00000_00000' direct represents '1' with '1118'
c Var 'adj_00006_00005_00000_00000' order represents '1' with '1'
c Var 'adj_00006_00005_00000_00000' order represents '0' with '-1118'
1118 -1118 0
c Encoding variable: adj_00006_00005_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00005_00000_00001' direct represents '0' with '-1119'
c Var 'adj_00006_00005_00000_00001' direct represents '1' with '1119'
c Var 'adj_00006_00005_00000_00001' order represents '1' with '1'
c Var 'adj_00006_00005_00000_00001' order represents '0' with '-1119'
1119 -1119 0
c Encoding variable: adj_00006_00005_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00005_00001_n00001' direct represents '0' with '-1120'
c Var 'adj_00006_00005_00001_n00001' direct represents '1' with '1120'
c Var 'adj_00006_00005_00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00005_00001_n00001' order represents '0' with '-1120'
1120 -1120 0
c Encoding variable: adj_00006_00005_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00005_00001_00000' direct represents '0' with '-1121'
c Var 'adj_00006_00005_00001_00000' direct represents '1' with '1121'
c Var 'adj_00006_00005_00001_00000' order represents '1' with '1'
c Var 'adj_00006_00005_00001_00000' order represents '0' with '-1121'
1121 -1121 0
c Encoding variable: adj_00006_00005_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00005_00001_00001' direct represents '0' with '-1122'
c Var 'adj_00006_00005_00001_00001' direct represents '1' with '1122'
c Var 'adj_00006_00005_00001_00001' order represents '1' with '1'
c Var 'adj_00006_00005_00001_00001' order represents '0' with '-1122'
1122 -1122 0
c Encoding variable: adj_00006_00006_n00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00006_n00001_n00001' direct represents '0' with '-1123'
c Var 'adj_00006_00006_n00001_n00001' direct represents '1' with '1123'
c Var 'adj_00006_00006_n00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00006_n00001_n00001' order represents '0' with '-1123'
1123 -1123 0
c Encoding variable: adj_00006_00006_n00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00006_n00001_00000' direct represents '0' with '-1124'
c Var 'adj_00006_00006_n00001_00000' direct represents '1' with '1124'
c Var 'adj_00006_00006_n00001_00000' order represents '1' with '1'
c Var 'adj_00006_00006_n00001_00000' order represents '0' with '-1124'
1124 -1124 0
c Encoding variable: adj_00006_00006_n00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00006_n00001_00001' direct represents '0' with '-1125'
c Var 'adj_00006_00006_n00001_00001' direct represents '1' with '1125'
c Var 'adj_00006_00006_n00001_00001' order represents '1' with '1'
c Var 'adj_00006_00006_n00001_00001' order represents '0' with '-1125'
1125 -1125 0
c Encoding variable: adj_00006_00006_00000_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00006_00000_n00001' direct represents '0' with '-1126'
c Var 'adj_00006_00006_00000_n00001' direct represents '1' with '1126'
c Var 'adj_00006_00006_00000_n00001' order represents '1' with '1'
c Var 'adj_00006_00006_00000_n00001' order represents '0' with '-1126'
c Encoding variable: adj_00006_00006_00000_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00006_00000_00000' direct represents '0' with '-1127'
c Var 'adj_00006_00006_00000_00000' direct represents '1' with '1127'
c Var 'adj_00006_00006_00000_00000' order represents '1' with '1'
c Var 'adj_00006_00006_00000_00000' order represents '0' with '-1127'
1127 -1127 0
c Encoding variable: adj_00006_00006_00000_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00006_00000_00001' direct represents '0' with '-1128'
c Var 'adj_00006_00006_00000_00001' direct represents '1' with '1128'
c Var 'adj_00006_00006_00000_00001' order represents '1' with '1'
c Var 'adj_00006_00006_00000_00001' order represents '0' with '-1128'
1128 -1128 0
c Encoding variable: adj_00006_00006_00001_n00001 with domain: bool (representing constraint )
c Var 'adj_00006_00006_00001_n00001' direct represents '0' with '-1129'
c Var 'adj_00006_00006_00001_n00001' direct represents '1' with '1129'
c Var 'adj_00006_00006_00001_n00001' order represents '1' with '1'
c Var 'adj_00006_00006_00001_n00001' order represents '0' with '-1129'
1129 -1129 0
c Encoding variable: adj_00006_00006_00001_00000 with domain: bool (representing constraint )
c Var 'adj_00006_00006_00001_00000' direct represents '0' with '-1130'
c Var 'adj_00006_00006_00001_00000' direct represents '1' with '1130'
c Var 'adj_00006_00006_00001_00000' order represents '1' with '1'
c Var 'adj_00006_00006_00001_00000' order represents '0' with '-1130'
1130 -1130 0
c Encoding variable: adj_00006_00006_00001_00001 with domain: bool (representing constraint )
c Var 'adj_00006_00006_00001_00001' direct represents '0' with '-1131'
c Var 'adj_00006_00006_00001_00001' direct represents '1' with '1131'
c Var 'adj_00006_00006_00001_00001' order represents '1' with '1'
c Var 'adj_00006_00006_00001_00001' order represents '0' with '-1131'
1131 -1131 0
c Encoding variable: rowup_00000 with domain: bool (representing constraint )
c Var 'rowup_00000' direct represents '0' with '-1132'
c Var 'rowup_00000' direct represents '1' with '1132'
c Var 'rowup_00000' order represents '1' with '1'
c Var 'rowup_00000' order represents '0' with '-1132'
c Encoding variable: rowup_00001 with domain: bool (representing constraint )
c Var 'rowup_00001' direct represents '0' with '-1133'
c Var 'rowup_00001' direct represents '1' with '1133'
c Var 'rowup_00001' order represents '1' with '1'
c Var 'rowup_00001' order represents '0' with '-1133'
c Encoding variable: rowup_00002 with domain: bool (representing constraint )
c Var 'rowup_00002' direct represents '0' with '-1134'
c Var 'rowup_00002' direct represents '1' with '1134'
c Var 'rowup_00002' order represents '1' with '1'
c Var 'rowup_00002' order represents '0' with '-1134'
c Encoding variable: rowup_00003 with domain: bool (representing constraint )
c Var 'rowup_00003' direct represents '0' with '-1135'
c Var 'rowup_00003' direct represents '1' with '1135'
c Var 'rowup_00003' order represents '1' with '1'
c Var 'rowup_00003' order represents '0' with '-1135'
1135 -1135 0
c Encoding variable: rowup_00004 with domain: bool (representing constraint )
c Var 'rowup_00004' direct represents '0' with '-1136'
c Var 'rowup_00004' direct represents '1' with '1136'
c Var 'rowup_00004' order represents '1' with '1'
c Var 'rowup_00004' order represents '0' with '-1136'
c Encoding variable: rowup_00005 with domain: bool (representing constraint )
c Var 'rowup_00005' direct represents '0' with '-1137'
c Var 'rowup_00005' direct represents '1' with '1137'
c Var 'rowup_00005' order represents '1' with '1'
c Var 'rowup_00005' order represents '0' with '-1137'
c Encoding variable: rowup_00006 with domain: bool (representing constraint )
c Var 'rowup_00006' direct represents '0' with '-1138'
c Var 'rowup_00006' direct represents '1' with '1138'
c Var 'rowup_00006' order represents '1' with '1'
c Var 'rowup_00006' order represents '0' with '-1138'
c Encoding variable: rowdown_00000 with domain: bool (representing constraint )
c Var 'rowdown_00000' direct represents '0' with '-1139'
c Var 'rowdown_00000' direct represents '1' with '1139'
c Var 'rowdown_00000' order represents '1' with '1'
c Var 'rowdown_00000' order represents '0' with '-1139'
c Encoding variable: rowdown_00001 with domain: bool (representing constraint )
c Var 'rowdown_00001' direct represents '0' with '-1140'
c Var 'rowdown_00001' direct represents '1' with '1140'
c Var 'rowdown_00001' order represents '1' with '1'
c Var 'rowdown_00001' order represents '0' with '-1140'
c Encoding variable: rowdown_00002 with domain: bool (representing constraint )
c Var 'rowdown_00002' direct represents '0' with '-1141'
c Var 'rowdown_00002' direct represents '1' with '1141'
c Var 'rowdown_00002' order represents '1' with '1'
c Var 'rowdown_00002' order represents '0' with '-1141'
c Encoding variable: rowdown_00003 with domain: bool (representing constraint )
c Var 'rowdown_00003' direct represents '0' with '-1142'
c Var 'rowdown_00003' direct represents '1' with '1142'
c Var 'rowdown_00003' order represents '1' with '1'
c Var 'rowdown_00003' order represents '0' with '-1142'
c Encoding variable: rowdown_00004 with domain: bool (representing constraint )
c Var 'rowdown_00004' direct represents '0' with '-1143'
c Var 'rowdown_00004' direct represents '1' with '1143'
c Var 'rowdown_00004' order represents '1' with '1'
c Var 'rowdown_00004' order represents '0' with '-1143'
c Encoding variable: rowdown_00005 with domain: bool (representing constraint )
c Var 'rowdown_00005' direct represents '0' with '-1144'
c Var 'rowdown_00005' direct represents '1' with '1144'
c Var 'rowdown_00005' order represents '1' with '1'
c Var 'rowdown_00005' order represents '0' with '-1144'
c Encoding variable: rowdown_00006 with domain: bool (representing constraint )
c Var 'rowdown_00006' direct represents '0' with '-1145'
c Var 'rowdown_00006' direct represents '1' with '1145'
c Var 'rowdown_00006' order represents '1' with '1'
c Var 'rowdown_00006' order represents '0' with '-1145'
c Encoding variable: colup_00000 with domain: bool (representing constraint )
c Var 'colup_00000' direct represents '0' with '-1146'
c Var 'colup_00000' direct represents '1' with '1146'
c Var 'colup_00000' order represents '1' with '1'
c Var 'colup_00000' order represents '0' with '-1146'
c Encoding variable: colup_00001 with domain: bool (representing constraint )
c Var 'colup_00001' direct represents '0' with '-1147'
c Var 'colup_00001' direct represents '1' with '1147'
c Var 'colup_00001' order represents '1' with '1'
c Var 'colup_00001' order represents '0' with '-1147'
c Encoding variable: colup_00002 with domain: bool (representing constraint )
c Var 'colup_00002' direct represents '0' with '-1148'
c Var 'colup_00002' direct represents '1' with '1148'
c Var 'colup_00002' order represents '1' with '1'
c Var 'colup_00002' order represents '0' with '-1148'
c Encoding variable: colup_00003 with domain: bool (representing constraint )
c Var 'colup_00003' direct represents '0' with '-1149'
c Var 'colup_00003' direct represents '1' with '1149'
c Var 'colup_00003' order represents '1' with '1'
c Var 'colup_00003' order represents '0' with '-1149'
c Encoding variable: colup_00004 with domain: bool (representing constraint )
c Var 'colup_00004' direct represents '0' with '-1150'
c Var 'colup_00004' direct represents '1' with '1150'
c Var 'colup_00004' order represents '1' with '1'
c Var 'colup_00004' order represents '0' with '-1150'
c Encoding variable: colup_00005 with domain: bool (representing constraint )
c Var 'colup_00005' direct represents '0' with '-1151'
c Var 'colup_00005' direct represents '1' with '1151'
c Var 'colup_00005' order represents '1' with '1'
c Var 'colup_00005' order represents '0' with '-1151'
c Encoding variable: colup_00006 with domain: bool (representing constraint )
c Var 'colup_00006' direct represents '0' with '-1152'
c Var 'colup_00006' direct represents '1' with '1152'
c Var 'colup_00006' order represents '1' with '1'
c Var 'colup_00006' order represents '0' with '-1152'
c Encoding variable: coldown_00000 with domain: bool (representing constraint )
c Var 'coldown_00000' direct represents '0' with '-1153'
c Var 'coldown_00000' direct represents '1' with '1153'
c Var 'coldown_00000' order represents '1' with '1'
c Var 'coldown_00000' order represents '0' with '-1153'
c Encoding variable: coldown_00001 with domain: bool (representing constraint )
c Var 'coldown_00001' direct represents '0' with '-1154'
c Var 'coldown_00001' direct represents '1' with '1154'
c Var 'coldown_00001' order represents '1' with '1'
c Var 'coldown_00001' order represents '0' with '-1154'
c Encoding variable: coldown_00002 with domain: bool (representing constraint )
c Var 'coldown_00002' direct represents '0' with '-1155'
c Var 'coldown_00002' direct represents '1' with '1155'
c Var 'coldown_00002' order represents '1' with '1'
c Var 'coldown_00002' order represents '0' with '-1155'
c Encoding variable: coldown_00003 with domain: bool (representing constraint )
c Var 'coldown_00003' direct represents '0' with '-1156'
c Var 'coldown_00003' direct represents '1' with '1156'
c Var 'coldown_00003' order represents '1' with '1'
c Var 'coldown_00003' order represents '0' with '-1156'
c Encoding variable: coldown_00004 with domain: bool (representing constraint )
c Var 'coldown_00004' direct represents '0' with '-1157'
c Var 'coldown_00004' direct represents '1' with '1157'
c Var 'coldown_00004' order represents '1' with '1'
c Var 'coldown_00004' order represents '0' with '-1157'
c Encoding variable: coldown_00005 with domain: bool (representing constraint )
c Var 'coldown_00005' direct represents '0' with '-1158'
c Var 'coldown_00005' direct represents '1' with '1158'
c Var 'coldown_00005' order represents '1' with '1'
c Var 'coldown_00005' order represents '0' with '-1158'
c Encoding variable: coldown_00006 with domain: bool (representing constraint )
c Var 'coldown_00006' direct represents '0' with '-1159'
c Var 'coldown_00006' direct represents '1' with '1159'
c Var 'coldown_00006' order represents '1' with '1'
c Var 'coldown_00006' order represents '0' with '-1159'
c Encoding variable: treetentup_00001 with domain: bool (representing constraint )
c Var 'treetentup_00001' direct represents '0' with '-1160'
c Var 'treetentup_00001' direct represents '1' with '1160'
c Var 'treetentup_00001' order represents '1' with '1'
c Var 'treetentup_00001' order represents '0' with '-1160'
c Encoding variable: treetentup_00002 with domain: bool (representing constraint )
c Var 'treetentup_00002' direct represents '0' with '-1161'
c Var 'treetentup_00002' direct represents '1' with '1161'
c Var 'treetentup_00002' order represents '1' with '1'
c Var 'treetentup_00002' order represents '0' with '-1161'
c Encoding variable: treetentup_00003 with domain: bool (representing constraint )
c Var 'treetentup_00003' direct represents '0' with '-1162'
c Var 'treetentup_00003' direct represents '1' with '1162'
c Var 'treetentup_00003' order represents '1' with '1'
c Var 'treetentup_00003' order represents '0' with '-1162'
c Encoding variable: treetentup_00004 with domain: bool (representing constraint )
c Var 'treetentup_00004' direct represents '0' with '-1163'
c Var 'treetentup_00004' direct represents '1' with '1163'
c Var 'treetentup_00004' order represents '1' with '1'
c Var 'treetentup_00004' order represents '0' with '-1163'
c Encoding variable: treetentup_00005 with domain: bool (representing constraint )
c Var 'treetentup_00005' direct represents '0' with '-1164'
c Var 'treetentup_00005' direct represents '1' with '1164'
c Var 'treetentup_00005' order represents '1' with '1'
c Var 'treetentup_00005' order represents '0' with '-1164'
c Encoding variable: treetentup_00006 with domain: bool (representing constraint )
c Var 'treetentup_00006' direct represents '0' with '-1165'
c Var 'treetentup_00006' direct represents '1' with '1165'
c Var 'treetentup_00006' order represents '1' with '1'
c Var 'treetentup_00006' order represents '0' with '-1165'
c Encoding variable: treetentup_00007 with domain: bool (representing constraint )
c Var 'treetentup_00007' direct represents '0' with '-1166'
c Var 'treetentup_00007' direct represents '1' with '1166'
c Var 'treetentup_00007' order represents '1' with '1'
c Var 'treetentup_00007' order represents '0' with '-1166'
c Encoding variable: treetentup_00008 with domain: bool (representing constraint )
c Var 'treetentup_00008' direct represents '0' with '-1167'
c Var 'treetentup_00008' direct represents '1' with '1167'
c Var 'treetentup_00008' order represents '1' with '1'
c Var 'treetentup_00008' order represents '0' with '-1167'
c Encoding variable: treetentup_00009 with domain: bool (representing constraint )
c Var 'treetentup_00009' direct represents '0' with '-1168'
c Var 'treetentup_00009' direct represents '1' with '1168'
c Var 'treetentup_00009' order represents '1' with '1'
c Var 'treetentup_00009' order represents '0' with '-1168'
c Encoding variable: treetentdown_00001 with domain: bool (representing constraint )
c Var 'treetentdown_00001' direct represents '0' with '-1169'
c Var 'treetentdown_00001' direct represents '1' with '1169'
c Var 'treetentdown_00001' order represents '1' with '1'
c Var 'treetentdown_00001' order represents '0' with '-1169'
c Encoding variable: treetentdown_00002 with domain: bool (representing constraint )
c Var 'treetentdown_00002' direct represents '0' with '-1170'
c Var 'treetentdown_00002' direct represents '1' with '1170'
c Var 'treetentdown_00002' order represents '1' with '1'
c Var 'treetentdown_00002' order represents '0' with '-1170'
c Encoding variable: treetentdown_00003 with domain: bool (representing constraint )
c Var 'treetentdown_00003' direct represents '0' with '-1171'
c Var 'treetentdown_00003' direct represents '1' with '1171'
c Var 'treetentdown_00003' order represents '1' with '1'
c Var 'treetentdown_00003' order represents '0' with '-1171'
c Encoding variable: treetentdown_00004 with domain: bool (representing constraint )
c Var 'treetentdown_00004' direct represents '0' with '-1172'
c Var 'treetentdown_00004' direct represents '1' with '1172'
c Var 'treetentdown_00004' order represents '1' with '1'
c Var 'treetentdown_00004' order represents '0' with '-1172'
c Encoding variable: treetentdown_00005 with domain: bool (representing constraint )
c Var 'treetentdown_00005' direct represents '0' with '-1173'
c Var 'treetentdown_00005' direct represents '1' with '1173'
c Var 'treetentdown_00005' order represents '1' with '1'
c Var 'treetentdown_00005' order represents '0' with '-1173'
c Encoding variable: treetentdown_00006 with domain: bool (representing constraint )
c Var 'treetentdown_00006' direct represents '0' with '-1174'
c Var 'treetentdown_00006' direct represents '1' with '1174'
c Var 'treetentdown_00006' order represents '1' with '1'
c Var 'treetentdown_00006' order represents '0' with '-1174'
c Encoding variable: treetentdown_00007 with domain: bool (representing constraint )
c Var 'treetentdown_00007' direct represents '0' with '-1175'
c Var 'treetentdown_00007' direct represents '1' with '1175'
c Var 'treetentdown_00007' order represents '1' with '1'
c Var 'treetentdown_00007' order represents '0' with '-1175'
c Encoding variable: treetentdown_00008 with domain: bool (representing constraint )
c Var 'treetentdown_00008' direct represents '0' with '-1176'
c Var 'treetentdown_00008' direct represents '1' with '1176'
c Var 'treetentdown_00008' order represents '1' with '1'
c Var 'treetentdown_00008' order represents '0' with '-1176'
c Encoding variable: treetentdown_00009 with domain: bool (representing constraint )
c Var 'treetentdown_00009' direct represents '0' with '-1177'
c Var 'treetentdown_00009' direct represents '1' with '1177'
c Var 'treetentdown_00009' order represents '1' with '1'
c Var 'treetentdown_00009' order represents '0' with '-1177'
c Encoding variable: tentneartree_00001 with domain: bool (representing constraint )
c Var 'tentneartree_00001' direct represents '0' with '-1178'
c Var 'tentneartree_00001' direct represents '1' with '1178'
c Var 'tentneartree_00001' order represents '1' with '1'
c Var 'tentneartree_00001' order represents '0' with '-1178'
c Encoding variable: tentneartree_00002 with domain: bool (representing constraint )
c Var 'tentneartree_00002' direct represents '0' with '-1179'
c Var 'tentneartree_00002' direct represents '1' with '1179'
c Var 'tentneartree_00002' order represents '1' with '1'
c Var 'tentneartree_00002' order represents '0' with '-1179'
c Encoding variable: tentneartree_00003 with domain: bool (representing constraint )
c Var 'tentneartree_00003' direct represents '0' with '-1180'
c Var 'tentneartree_00003' direct represents '1' with '1180'
c Var 'tentneartree_00003' order represents '1' with '1'
c Var 'tentneartree_00003' order represents '0' with '-1180'
c Encoding variable: tentneartree_00004 with domain: bool (representing constraint )
c Var 'tentneartree_00004' direct represents '0' with '-1181'
c Var 'tentneartree_00004' direct represents '1' with '1181'
c Var 'tentneartree_00004' order represents '1' with '1'
c Var 'tentneartree_00004' order represents '0' with '-1181'
c Encoding variable: tentneartree_00005 with domain: bool (representing constraint )
c Var 'tentneartree_00005' direct represents '0' with '-1182'
c Var 'tentneartree_00005' direct represents '1' with '1182'
c Var 'tentneartree_00005' order represents '1' with '1'
c Var 'tentneartree_00005' order represents '0' with '-1182'
c Encoding variable: tentneartree_00006 with domain: bool (representing constraint )
c Var 'tentneartree_00006' direct represents '0' with '-1183'
c Var 'tentneartree_00006' direct represents '1' with '1183'
c Var 'tentneartree_00006' order represents '1' with '1'
c Var 'tentneartree_00006' order represents '0' with '-1183'
c Encoding variable: tentneartree_00007 with domain: bool (representing constraint )
c Var 'tentneartree_00007' direct represents '0' with '-1184'
c Var 'tentneartree_00007' direct represents '1' with '1184'
c Var 'tentneartree_00007' order represents '1' with '1'
c Var 'tentneartree_00007' order represents '0' with '-1184'
c Encoding variable: tentneartree_00008 with domain: bool (representing constraint )
c Var 'tentneartree_00008' direct represents '0' with '-1185'
c Var 'tentneartree_00008' direct represents '1' with '1185'
c Var 'tentneartree_00008' order represents '1' with '1'
c Var 'tentneartree_00008' order represents '0' with '-1185'
c Encoding variable: tentneartree_00009 with domain: bool (representing constraint )
c Var 'tentneartree_00009' direct represents '0' with '-1186'
c Var 'tentneartree_00009' direct represents '1' with '1186'
c Var 'tentneartree_00009' order represents '1' with '1'
c Var 'tentneartree_00009' order represents '0' with '-1186'
c Encoding variable: aux0 with domain: bool (representing constraint (1<=((1=grid_00005_00000) + (1=grid_00005_00002) + (1=grid_00005_00003) + (1=grid_00005_00005) + (grid_00003_00000=1) + (grid_00003_00002=1) + (grid_00003_00003=1) + (grid_00003_00004=1) + (grid_00003_00005=1) + (1=grid_00001_00000) + (1=grid_00001_00002) + (1=grid_00001_00003) + (1=grid_00001_00005) + (1=grid_00006_00000) + (1=grid_00006_00001) + (1=grid_00006_00002) + (1=grid_00006_00003) + (1=grid_00006_00004) + (1=grid_00006_00005) + (1=grid_00006_00006) + (1=grid_00002_00000) + (1=grid_00002_00001) + (1=grid_00002_00002) + (1=grid_00002_00003) + (1=grid_00002_00004) + (1=grid_00002_00005) + (1=grid_00002_00006) + (grid_00004_00000=1) + (grid_00004_00001=1) + (grid_00004_00002=1) + (grid_00004_00003=1) + (grid_00004_00004=1) + (grid_00004_00005=1) + (grid_00004_00006=1) + (grid_00000_00001=1) + (grid_00000_00002=1) + (grid_00000_00003=1) + (grid_00000_00004=1) + (grid_00000_00005=1) + (grid_00000_00006=1))))
c Var 'aux0' direct represents '0' with '-1187'
c Var 'aux0' direct represents '1' with '1187'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1187'
c Encoding variable: aux1 with domain: bool (representing constraint (1<=((2=grid_00005_00000) + (2=grid_00005_00002) + (2=grid_00005_00003) + (2=grid_00005_00005) + (grid_00003_00000=2) + (grid_00003_00002=2) + (grid_00003_00003=2) + (grid_00003_00004=2) + (grid_00003_00005=2) + (2=grid_00001_00000) + (2=grid_00001_00002) + (2=grid_00001_00003) + (2=grid_00001_00005) + (2=grid_00006_00000) + (2=grid_00006_00001) + (2=grid_00006_00002) + (2=grid_00006_00003) + (2=grid_00006_00004) + (2=grid_00006_00005) + (2=grid_00006_00006) + (2=grid_00002_00000) + (2=grid_00002_00001) + (2=grid_00002_00002) + (2=grid_00002_00003) + (2=grid_00002_00004) + (2=grid_00002_00005) + (2=grid_00002_00006) + (grid_00004_00000=2) + (grid_00004_00001=2) + (grid_00004_00002=2) + (grid_00004_00003=2) + (grid_00004_00004=2) + (grid_00004_00005=2) + (grid_00004_00006=2) + (grid_00000_00001=2) + (grid_00000_00002=2) + (grid_00000_00003=2) + (grid_00000_00004=2) + (grid_00000_00005=2) + (grid_00000_00006=2))))
c Var 'aux1' direct represents '0' with '-1188'
c Var 'aux1' direct represents '1' with '1188'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1188'
c Encoding variable: aux2 with domain: bool (representing constraint (1<=((3=grid_00005_00000) + (3=grid_00005_00002) + (3=grid_00005_00003) + (3=grid_00005_00005) + (grid_00003_00000=3) + (grid_00003_00002=3) + (grid_00003_00003=3) + (grid_00003_00004=3) + (grid_00003_00005=3) + (3=grid_00001_00000) + (3=grid_00001_00002) + (3=grid_00001_00003) + (3=grid_00001_00005) + (3=grid_00006_00000) + (3=grid_00006_00001) + (3=grid_00006_00002) + (3=grid_00006_00003) + (3=grid_00006_00004) + (3=grid_00006_00005) + (3=grid_00006_00006) + (3=grid_00002_00000) + (3=grid_00002_00001) + (3=grid_00002_00002) + (3=grid_00002_00003) + (3=grid_00002_00004) + (3=grid_00002_00005) + (3=grid_00002_00006) + (grid_00004_00000=3) + (grid_00004_00001=3) + (grid_00004_00002=3) + (grid_00004_00003=3) + (grid_00004_00004=3) + (grid_00004_00005=3) + (grid_00004_00006=3) + (grid_00000_00001=3) + (grid_00000_00002=3) + (grid_00000_00003=3) + (grid_00000_00004=3) + (grid_00000_00005=3) + (grid_00000_00006=3))))
c Var 'aux2' direct represents '0' with '-1189'
c Var 'aux2' direct represents '1' with '1189'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1189'
c Encoding variable: aux3 with domain: bool (representing constraint (1<=((4=grid_00005_00000) + (4=grid_00005_00002) + (4=grid_00005_00003) + (4=grid_00005_00005) + (grid_00003_00000=4) + (grid_00003_00002=4) + (grid_00003_00003=4) + (grid_00003_00004=4) + (grid_00003_00005=4) + (4=grid_00001_00000) + (4=grid_00001_00002) + (4=grid_00001_00003) + (4=grid_00001_00005) + (4=grid_00006_00000) + (4=grid_00006_00001) + (4=grid_00006_00002) + (4=grid_00006_00003) + (4=grid_00006_00004) + (4=grid_00006_00005) + (4=grid_00006_00006) + (4=grid_00002_00000) + (4=grid_00002_00001) + (4=grid_00002_00002) + (4=grid_00002_00003) + (4=grid_00002_00004) + (4=grid_00002_00005) + (4=grid_00002_00006) + (grid_00004_00000=4) + (grid_00004_00001=4) + (grid_00004_00002=4) + (grid_00004_00003=4) + (grid_00004_00004=4) + (grid_00004_00005=4) + (grid_00004_00006=4) + (grid_00000_00001=4) + (grid_00000_00002=4) + (grid_00000_00003=4) + (grid_00000_00004=4) + (grid_00000_00005=4) + (grid_00000_00006=4))))
c Var 'aux3' direct represents '0' with '-1190'
c Var 'aux3' direct represents '1' with '1190'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1190'
c Encoding variable: aux4 with domain: bool (representing constraint (1<=((5=grid_00005_00000) + (5=grid_00005_00002) + (5=grid_00005_00003) + (5=grid_00005_00005) + (grid_00003_00000=5) + (grid_00003_00002=5) + (grid_00003_00003=5) + (grid_00003_00004=5) + (grid_00003_00005=5) + (5=grid_00001_00000) + (5=grid_00001_00002) + (5=grid_00001_00003) + (5=grid_00001_00005) + (5=grid_00006_00000) + (5=grid_00006_00001) + (5=grid_00006_00002) + (5=grid_00006_00003) + (5=grid_00006_00004) + (5=grid_00006_00005) + (5=grid_00006_00006) + (5=grid_00002_00000) + (5=grid_00002_00001) + (5=grid_00002_00002) + (5=grid_00002_00003) + (5=grid_00002_00004) + (5=grid_00002_00005) + (5=grid_00002_00006) + (grid_00004_00000=5) + (grid_00004_00001=5) + (grid_00004_00002=5) + (grid_00004_00003=5) + (grid_00004_00004=5) + (grid_00004_00005=5) + (grid_00004_00006=5) + (grid_00000_00001=5) + (grid_00000_00002=5) + (grid_00000_00003=5) + (grid_00000_00004=5) + (grid_00000_00005=5) + (grid_00000_00006=5))))
c Var 'aux4' direct represents '0' with '-1191'
c Var 'aux4' direct represents '1' with '1191'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1191'
c Encoding variable: aux5 with domain: bool (representing constraint (1<=((6=grid_00005_00000) + (6=grid_00005_00002) + (6=grid_00005_00003) + (6=grid_00005_00005) + (grid_00003_00000=6) + (grid_00003_00002=6) + (grid_00003_00003=6) + (grid_00003_00004=6) + (grid_00003_00005=6) + (6=grid_00001_00000) + (6=grid_00001_00002) + (6=grid_00001_00003) + (6=grid_00001_00005) + (6=grid_00006_00000) + (6=grid_00006_00001) + (6=grid_00006_00002) + (6=grid_00006_00003) + (6=grid_00006_00004) + (6=grid_00006_00005) + (6=grid_00006_00006) + (6=grid_00002_00000) + (6=grid_00002_00001) + (6=grid_00002_00002) + (6=grid_00002_00003) + (6=grid_00002_00004) + (6=grid_00002_00005) + (6=grid_00002_00006) + (grid_00004_00000=6) + (grid_00004_00001=6) + (grid_00004_00002=6) + (grid_00004_00003=6) + (grid_00004_00004=6) + (grid_00004_00005=6) + (grid_00004_00006=6) + (grid_00000_00001=6) + (grid_00000_00002=6) + (grid_00000_00003=6) + (grid_00000_00004=6) + (grid_00000_00005=6) + (grid_00000_00006=6))))
c Var 'aux5' direct represents '0' with '-1192'
c Var 'aux5' direct represents '1' with '1192'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1192'
c Encoding variable: aux6 with domain: bool (representing constraint (1<=((7=grid_00005_00000) + (7=grid_00005_00002) + (7=grid_00005_00003) + (7=grid_00005_00005) + (grid_00003_00000=7) + (grid_00003_00002=7) + (grid_00003_00003=7) + (grid_00003_00004=7) + (grid_00003_00005=7) + (7=grid_00001_00000) + (7=grid_00001_00002) + (7=grid_00001_00003) + (7=grid_00001_00005) + (7=grid_00006_00000) + (7=grid_00006_00001) + (7=grid_00006_00002) + (7=grid_00006_00003) + (7=grid_00006_00004) + (7=grid_00006_00005) + (7=grid_00006_00006) + (7=grid_00002_00000) + (7=grid_00002_00001) + (7=grid_00002_00002) + (7=grid_00002_00003) + (7=grid_00002_00004) + (7=grid_00002_00005) + (7=grid_00002_00006) + (grid_00004_00000=7) + (grid_00004_00001=7) + (grid_00004_00002=7) + (grid_00004_00003=7) + (grid_00004_00004=7) + (grid_00004_00005=7) + (grid_00004_00006=7) + (grid_00000_00001=7) + (grid_00000_00002=7) + (grid_00000_00003=7) + (grid_00000_00004=7) + (grid_00000_00005=7) + (grid_00000_00006=7))))
c Var 'aux6' direct represents '0' with '-1193'
c Var 'aux6' direct represents '1' with '1193'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1193'
c Encoding variable: aux7 with domain: bool (representing constraint (1<=((8=grid_00005_00000) + (8=grid_00005_00002) + (8=grid_00005_00003) + (8=grid_00005_00005) + (grid_00003_00000=8) + (grid_00003_00002=8) + (grid_00003_00003=8) + (grid_00003_00004=8) + (grid_00003_00005=8) + (8=grid_00001_00000) + (8=grid_00001_00002) + (8=grid_00001_00003) + (8=grid_00001_00005) + (8=grid_00006_00000) + (8=grid_00006_00001) + (8=grid_00006_00002) + (8=grid_00006_00003) + (8=grid_00006_00004) + (8=grid_00006_00005) + (8=grid_00006_00006) + (8=grid_00002_00000) + (8=grid_00002_00001) + (8=grid_00002_00002) + (8=grid_00002_00003) + (8=grid_00002_00004) + (8=grid_00002_00005) + (8=grid_00002_00006) + (grid_00004_00000=8) + (grid_00004_00001=8) + (grid_00004_00002=8) + (grid_00004_00003=8) + (grid_00004_00004=8) + (grid_00004_00005=8) + (grid_00004_00006=8) + (grid_00000_00001=8) + (grid_00000_00002=8) + (grid_00000_00003=8) + (grid_00000_00004=8) + (grid_00000_00005=8) + (grid_00000_00006=8))))
c Var 'aux7' direct represents '0' with '-1194'
c Var 'aux7' direct represents '1' with '1194'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1194'
c Encoding variable: aux8 with domain: bool (representing constraint (1<=((9=grid_00005_00000) + (9=grid_00005_00002) + (9=grid_00005_00003) + (9=grid_00005_00005) + (grid_00003_00000=9) + (grid_00003_00002=9) + (grid_00003_00003=9) + (grid_00003_00004=9) + (grid_00003_00005=9) + (9=grid_00001_00000) + (9=grid_00001_00002) + (9=grid_00001_00003) + (9=grid_00001_00005) + (9=grid_00006_00000) + (9=grid_00006_00001) + (9=grid_00006_00002) + (9=grid_00006_00003) + (9=grid_00006_00004) + (9=grid_00006_00005) + (9=grid_00006_00006) + (9=grid_00002_00000) + (9=grid_00002_00001) + (9=grid_00002_00002) + (9=grid_00002_00003) + (9=grid_00002_00004) + (9=grid_00002_00005) + (9=grid_00002_00006) + (grid_00004_00000=9) + (grid_00004_00001=9) + (grid_00004_00002=9) + (grid_00004_00003=9) + (grid_00004_00004=9) + (grid_00004_00005=9) + (grid_00004_00006=9) + (grid_00000_00001=9) + (grid_00000_00002=9) + (grid_00000_00003=9) + (grid_00000_00004=9) + (grid_00000_00005=9) + (grid_00000_00006=9))))
c Var 'aux8' direct represents '0' with '-1195'
c Var 'aux8' direct represents '1' with '1195'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1195'
c Encoding variable: aux9 with domain: bool (representing constraint (((1=grid_00005_00000) + (1=grid_00005_00002) + (1=grid_00005_00003) + (1=grid_00005_00005) + (grid_00003_00000=1) + (grid_00003_00002=1) + (grid_00003_00003=1) + (grid_00003_00004=1) + (grid_00003_00005=1) + (1=grid_00001_00000) + (1=grid_00001_00002) + (1=grid_00001_00003) + (1=grid_00001_00005) + (1=grid_00006_00000) + (1=grid_00006_00001) + (1=grid_00006_00002) + (1=grid_00006_00003) + (1=grid_00006_00004) + (1=grid_00006_00005) + (1=grid_00006_00006) + (1=grid_00002_00000) + (1=grid_00002_00001) + (1=grid_00002_00002) + (1=grid_00002_00003) + (1=grid_00002_00004) + (1=grid_00002_00005) + (1=grid_00002_00006) + (grid_00004_00000=1) + (grid_00004_00001=1) + (grid_00004_00002=1) + (grid_00004_00003=1) + (grid_00004_00004=1) + (grid_00004_00005=1) + (grid_00004_00006=1) + (grid_00000_00001=1) + (grid_00000_00002=1) + (grid_00000_00003=1) + (grid_00000_00004=1) + (grid_00000_00005=1) + (grid_00000_00006=1))<=1))
c Var 'aux9' direct represents '0' with '-1196'
c Var 'aux9' direct represents '1' with '1196'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1196'
c Encoding variable: aux10 with domain: bool (representing constraint (((2=grid_00005_00000) + (2=grid_00005_00002) + (2=grid_00005_00003) + (2=grid_00005_00005) + (grid_00003_00000=2) + (grid_00003_00002=2) + (grid_00003_00003=2) + (grid_00003_00004=2) + (grid_00003_00005=2) + (2=grid_00001_00000) + (2=grid_00001_00002) + (2=grid_00001_00003) + (2=grid_00001_00005) + (2=grid_00006_00000) + (2=grid_00006_00001) + (2=grid_00006_00002) + (2=grid_00006_00003) + (2=grid_00006_00004) + (2=grid_00006_00005) + (2=grid_00006_00006) + (2=grid_00002_00000) + (2=grid_00002_00001) + (2=grid_00002_00002) + (2=grid_00002_00003) + (2=grid_00002_00004) + (2=grid_00002_00005) + (2=grid_00002_00006) + (grid_00004_00000=2) + (grid_00004_00001=2) + (grid_00004_00002=2) + (grid_00004_00003=2) + (grid_00004_00004=2) + (grid_00004_00005=2) + (grid_00004_00006=2) + (grid_00000_00001=2) + (grid_00000_00002=2) + (grid_00000_00003=2) + (grid_00000_00004=2) + (grid_00000_00005=2) + (grid_00000_00006=2))<=1))
c Var 'aux10' direct represents '0' with '-1197'
c Var 'aux10' direct represents '1' with '1197'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1197'
c Encoding variable: aux11 with domain: bool (representing constraint (((3=grid_00005_00000) + (3=grid_00005_00002) + (3=grid_00005_00003) + (3=grid_00005_00005) + (grid_00003_00000=3) + (grid_00003_00002=3) + (grid_00003_00003=3) + (grid_00003_00004=3) + (grid_00003_00005=3) + (3=grid_00001_00000) + (3=grid_00001_00002) + (3=grid_00001_00003) + (3=grid_00001_00005) + (3=grid_00006_00000) + (3=grid_00006_00001) + (3=grid_00006_00002) + (3=grid_00006_00003) + (3=grid_00006_00004) + (3=grid_00006_00005) + (3=grid_00006_00006) + (3=grid_00002_00000) + (3=grid_00002_00001) + (3=grid_00002_00002) + (3=grid_00002_00003) + (3=grid_00002_00004) + (3=grid_00002_00005) + (3=grid_00002_00006) + (grid_00004_00000=3) + (grid_00004_00001=3) + (grid_00004_00002=3) + (grid_00004_00003=3) + (grid_00004_00004=3) + (grid_00004_00005=3) + (grid_00004_00006=3) + (grid_00000_00001=3) + (grid_00000_00002=3) + (grid_00000_00003=3) + (grid_00000_00004=3) + (grid_00000_00005=3) + (grid_00000_00006=3))<=1))
c Var 'aux11' direct represents '0' with '-1198'
c Var 'aux11' direct represents '1' with '1198'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1198'
c Encoding variable: aux12 with domain: bool (representing constraint (((4=grid_00005_00000) + (4=grid_00005_00002) + (4=grid_00005_00003) + (4=grid_00005_00005) + (grid_00003_00000=4) + (grid_00003_00002=4) + (grid_00003_00003=4) + (grid_00003_00004=4) + (grid_00003_00005=4) + (4=grid_00001_00000) + (4=grid_00001_00002) + (4=grid_00001_00003) + (4=grid_00001_00005) + (4=grid_00006_00000) + (4=grid_00006_00001) + (4=grid_00006_00002) + (4=grid_00006_00003) + (4=grid_00006_00004) + (4=grid_00006_00005) + (4=grid_00006_00006) + (4=grid_00002_00000) + (4=grid_00002_00001) + (4=grid_00002_00002) + (4=grid_00002_00003) + (4=grid_00002_00004) + (4=grid_00002_00005) + (4=grid_00002_00006) + (grid_00004_00000=4) + (grid_00004_00001=4) + (grid_00004_00002=4) + (grid_00004_00003=4) + (grid_00004_00004=4) + (grid_00004_00005=4) + (grid_00004_00006=4) + (grid_00000_00001=4) + (grid_00000_00002=4) + (grid_00000_00003=4) + (grid_00000_00004=4) + (grid_00000_00005=4) + (grid_00000_00006=4))<=1))
c Var 'aux12' direct represents '0' with '-1199'
c Var 'aux12' direct represents '1' with '1199'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1199'
c Encoding variable: aux13 with domain: bool (representing constraint (((5=grid_00005_00000) + (5=grid_00005_00002) + (5=grid_00005_00003) + (5=grid_00005_00005) + (grid_00003_00000=5) + (grid_00003_00002=5) + (grid_00003_00003=5) + (grid_00003_00004=5) + (grid_00003_00005=5) + (5=grid_00001_00000) + (5=grid_00001_00002) + (5=grid_00001_00003) + (5=grid_00001_00005) + (5=grid_00006_00000) + (5=grid_00006_00001) + (5=grid_00006_00002) + (5=grid_00006_00003) + (5=grid_00006_00004) + (5=grid_00006_00005) + (5=grid_00006_00006) + (5=grid_00002_00000) + (5=grid_00002_00001) + (5=grid_00002_00002) + (5=grid_00002_00003) + (5=grid_00002_00004) + (5=grid_00002_00005) + (5=grid_00002_00006) + (grid_00004_00000=5) + (grid_00004_00001=5) + (grid_00004_00002=5) + (grid_00004_00003=5) + (grid_00004_00004=5) + (grid_00004_00005=5) + (grid_00004_00006=5) + (grid_00000_00001=5) + (grid_00000_00002=5) + (grid_00000_00003=5) + (grid_00000_00004=5) + (grid_00000_00005=5) + (grid_00000_00006=5))<=1))
c Var 'aux13' direct represents '0' with '-1200'
c Var 'aux13' direct represents '1' with '1200'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1200'
c Encoding variable: aux14 with domain: bool (representing constraint (((6=grid_00005_00000) + (6=grid_00005_00002) + (6=grid_00005_00003) + (6=grid_00005_00005) + (grid_00003_00000=6) + (grid_00003_00002=6) + (grid_00003_00003=6) + (grid_00003_00004=6) + (grid_00003_00005=6) + (6=grid_00001_00000) + (6=grid_00001_00002) + (6=grid_00001_00003) + (6=grid_00001_00005) + (6=grid_00006_00000) + (6=grid_00006_00001) + (6=grid_00006_00002) + (6=grid_00006_00003) + (6=grid_00006_00004) + (6=grid_00006_00005) + (6=grid_00006_00006) + (6=grid_00002_00000) + (6=grid_00002_00001) + (6=grid_00002_00002) + (6=grid_00002_00003) + (6=grid_00002_00004) + (6=grid_00002_00005) + (6=grid_00002_00006) + (grid_00004_00000=6) + (grid_00004_00001=6) + (grid_00004_00002=6) + (grid_00004_00003=6) + (grid_00004_00004=6) + (grid_00004_00005=6) + (grid_00004_00006=6) + (grid_00000_00001=6) + (grid_00000_00002=6) + (grid_00000_00003=6) + (grid_00000_00004=6) + (grid_00000_00005=6) + (grid_00000_00006=6))<=1))
c Var 'aux14' direct represents '0' with '-1201'
c Var 'aux14' direct represents '1' with '1201'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1201'
c Encoding variable: aux15 with domain: bool (representing constraint (((7=grid_00005_00000) + (7=grid_00005_00002) + (7=grid_00005_00003) + (7=grid_00005_00005) + (grid_00003_00000=7) + (grid_00003_00002=7) + (grid_00003_00003=7) + (grid_00003_00004=7) + (grid_00003_00005=7) + (7=grid_00001_00000) + (7=grid_00001_00002) + (7=grid_00001_00003) + (7=grid_00001_00005) + (7=grid_00006_00000) + (7=grid_00006_00001) + (7=grid_00006_00002) + (7=grid_00006_00003) + (7=grid_00006_00004) + (7=grid_00006_00005) + (7=grid_00006_00006) + (7=grid_00002_00000) + (7=grid_00002_00001) + (7=grid_00002_00002) + (7=grid_00002_00003) + (7=grid_00002_00004) + (7=grid_00002_00005) + (7=grid_00002_00006) + (grid_00004_00000=7) + (grid_00004_00001=7) + (grid_00004_00002=7) + (grid_00004_00003=7) + (grid_00004_00004=7) + (grid_00004_00005=7) + (grid_00004_00006=7) + (grid_00000_00001=7) + (grid_00000_00002=7) + (grid_00000_00003=7) + (grid_00000_00004=7) + (grid_00000_00005=7) + (grid_00000_00006=7))<=1))
c Var 'aux15' direct represents '0' with '-1202'
c Var 'aux15' direct represents '1' with '1202'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1202'
c Encoding variable: aux16 with domain: bool (representing constraint (((8=grid_00005_00000) + (8=grid_00005_00002) + (8=grid_00005_00003) + (8=grid_00005_00005) + (grid_00003_00000=8) + (grid_00003_00002=8) + (grid_00003_00003=8) + (grid_00003_00004=8) + (grid_00003_00005=8) + (8=grid_00001_00000) + (8=grid_00001_00002) + (8=grid_00001_00003) + (8=grid_00001_00005) + (8=grid_00006_00000) + (8=grid_00006_00001) + (8=grid_00006_00002) + (8=grid_00006_00003) + (8=grid_00006_00004) + (8=grid_00006_00005) + (8=grid_00006_00006) + (8=grid_00002_00000) + (8=grid_00002_00001) + (8=grid_00002_00002) + (8=grid_00002_00003) + (8=grid_00002_00004) + (8=grid_00002_00005) + (8=grid_00002_00006) + (grid_00004_00000=8) + (grid_00004_00001=8) + (grid_00004_00002=8) + (grid_00004_00003=8) + (grid_00004_00004=8) + (grid_00004_00005=8) + (grid_00004_00006=8) + (grid_00000_00001=8) + (grid_00000_00002=8) + (grid_00000_00003=8) + (grid_00000_00004=8) + (grid_00000_00005=8) + (grid_00000_00006=8))<=1))
c Var 'aux16' direct represents '0' with '-1203'
c Var 'aux16' direct represents '1' with '1203'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1203'
c Encoding variable: aux17 with domain: bool (representing constraint (((9=grid_00005_00000) + (9=grid_00005_00002) + (9=grid_00005_00003) + (9=grid_00005_00005) + (grid_00003_00000=9) + (grid_00003_00002=9) + (grid_00003_00003=9) + (grid_00003_00004=9) + (grid_00003_00005=9) + (9=grid_00001_00000) + (9=grid_00001_00002) + (9=grid_00001_00003) + (9=grid_00001_00005) + (9=grid_00006_00000) + (9=grid_00006_00001) + (9=grid_00006_00002) + (9=grid_00006_00003) + (9=grid_00006_00004) + (9=grid_00006_00005) + (9=grid_00006_00006) + (9=grid_00002_00000) + (9=grid_00002_00001) + (9=grid_00002_00002) + (9=grid_00002_00003) + (9=grid_00002_00004) + (9=grid_00002_00005) + (9=grid_00002_00006) + (grid_00004_00000=9) + (grid_00004_00001=9) + (grid_00004_00002=9) + (grid_00004_00003=9) + (grid_00004_00004=9) + (grid_00004_00005=9) + (grid_00004_00006=9) + (grid_00000_00001=9) + (grid_00000_00002=9) + (grid_00000_00003=9) + (grid_00000_00004=9) + (grid_00000_00005=9) + (grid_00000_00006=9))<=1))
c Var 'aux17' direct represents '0' with '-1204'
c Var 'aux17' direct represents '1' with '1204'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1204'
c Encoding variable: aux18 with domain: bool (representing constraint (1<=((0<grid_00000_00001) + (0<grid_00000_00002) + (0<grid_00000_00003) + (0<grid_00000_00004) + (0<grid_00000_00005) + (0<grid_00000_00006))))
c Var 'aux18' direct represents '0' with '-1205'
c Var 'aux18' direct represents '1' with '1205'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1205'
c Encoding variable: aux19 with domain: bool (representing constraint (2<=((0<grid_00001_00000) + (0<grid_00001_00002) + (0<grid_00001_00003) + (0<grid_00001_00005))))
c Var 'aux19' direct represents '0' with '-1206'
c Var 'aux19' direct represents '1' with '1206'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1206'
c Encoding variable: aux20 with domain: bool (representing constraint (2<=((0<grid_00002_00000) + (0<grid_00002_00001) + (0<grid_00002_00002) + (0<grid_00002_00003) + (0<grid_00002_00004) + (0<grid_00002_00005) + (0<grid_00002_00006))))
c Var 'aux20' direct represents '0' with '-1207'
c Var 'aux20' direct represents '1' with '1207'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1207'
c Encoding variable: aux21 with domain: bool (representing constraint (1<=((0<grid_00004_00000) + (0<grid_00004_00001) + (0<grid_00004_00002) + (0<grid_00004_00003) + (0<grid_00004_00004) + (0<grid_00004_00005) + (0<grid_00004_00006))))
c Var 'aux21' direct represents '0' with '-1208'
c Var 'aux21' direct represents '1' with '1208'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1208'
c Encoding variable: aux22 with domain: bool (representing constraint (2<=((0<grid_00005_00000) + (0<grid_00005_00002) + (0<grid_00005_00003) + (0<grid_00005_00005))))
c Var 'aux22' direct represents '0' with '-1209'
c Var 'aux22' direct represents '1' with '1209'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1209'
c Encoding variable: aux23 with domain: bool (representing constraint (1<=((0<grid_00006_00000) + (0<grid_00006_00001) + (0<grid_00006_00002) + (0<grid_00006_00003) + (0<grid_00006_00004) + (0<grid_00006_00005) + (0<grid_00006_00006))))
c Var 'aux23' direct represents '0' with '-1210'
c Var 'aux23' direct represents '1' with '1210'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1210'
c Encoding variable: aux24 with domain: bool (representing constraint (((0<grid_00000_00001) + (0<grid_00000_00002) + (0<grid_00000_00003) + (0<grid_00000_00004) + (0<grid_00000_00005) + (0<grid_00000_00006))<=1))
c Var 'aux24' direct represents '0' with '-1211'
c Var 'aux24' direct represents '1' with '1211'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1211'
c Encoding variable: aux25 with domain: bool (representing constraint (((0<grid_00001_00000) + (0<grid_00001_00002) + (0<grid_00001_00003) + (0<grid_00001_00005))<=2))
c Var 'aux25' direct represents '0' with '-1212'
c Var 'aux25' direct represents '1' with '1212'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1212'
c Encoding variable: aux26 with domain: bool (representing constraint (((0<grid_00002_00000) + (0<grid_00002_00001) + (0<grid_00002_00002) + (0<grid_00002_00003) + (0<grid_00002_00004) + (0<grid_00002_00005) + (0<grid_00002_00006))<=2))
c Var 'aux26' direct represents '0' with '-1213'
c Var 'aux26' direct represents '1' with '1213'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1213'
c Encoding variable: aux27 with domain: bool (representing constraint (((0<grid_00003_00000) + (0<grid_00003_00002) + (0<grid_00003_00003) + (0<grid_00003_00004) + (0<grid_00003_00005))<=0))
c Var 'aux27' direct represents '0' with '-1214'
c Var 'aux27' direct represents '1' with '1214'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1214'
c Encoding variable: aux28 with domain: bool (representing constraint (((0<grid_00004_00000) + (0<grid_00004_00001) + (0<grid_00004_00002) + (0<grid_00004_00003) + (0<grid_00004_00004) + (0<grid_00004_00005) + (0<grid_00004_00006))<=1))
c Var 'aux28' direct represents '0' with '-1215'
c Var 'aux28' direct represents '1' with '1215'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1215'
c Encoding variable: aux29 with domain: bool (representing constraint (((0<grid_00005_00000) + (0<grid_00005_00002) + (0<grid_00005_00003) + (0<grid_00005_00005))<=2))
c Var 'aux29' direct represents '0' with '-1216'
c Var 'aux29' direct represents '1' with '1216'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1216'
c Encoding variable: aux30 with domain: bool (representing constraint (((0<grid_00006_00000) + (0<grid_00006_00001) + (0<grid_00006_00002) + (0<grid_00006_00003) + (0<grid_00006_00004) + (0<grid_00006_00005) + (0<grid_00006_00006))<=1))
c Var 'aux30' direct represents '0' with '-1217'
c Var 'aux30' direct represents '1' with '1217'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1217'
c Encoding variable: aux31 with domain: bool (representing constraint (1<=((0<grid_00002_00000) + (0<grid_00003_00000) + (0<grid_00004_00000) + (0<grid_00005_00000) + (0<grid_00001_00000) + (0<grid_00006_00000))))
c Var 'aux31' direct represents '0' with '-1218'
c Var 'aux31' direct represents '1' with '1218'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1218'
c Encoding variable: aux32 with domain: bool (representing constraint (2<=((0<grid_00002_00001) + (0<grid_00004_00001) + (0<grid_00000_00001) + (0<grid_00006_00001))))
c Var 'aux32' direct represents '0' with '-1219'
c Var 'aux32' direct represents '1' with '1219'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1219'
c Encoding variable: aux33 with domain: bool (representing constraint (1<=((0<grid_00002_00002) + (0<grid_00003_00002) + (0<grid_00004_00002) + (0<grid_00000_00002) + (0<grid_00005_00002) + (0<grid_00001_00002) + (0<grid_00006_00002))))
c Var 'aux33' direct represents '0' with '-1220'
c Var 'aux33' direct represents '1' with '1220'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1220'
c Encoding variable: aux34 with domain: bool (representing constraint (1<=((0<grid_00002_00003) + (0<grid_00003_00003) + (0<grid_00004_00003) + (0<grid_00000_00003) + (0<grid_00005_00003) + (0<grid_00001_00003) + (0<grid_00006_00003))))
c Var 'aux34' direct represents '0' with '-1221'
c Var 'aux34' direct represents '1' with '1221'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1221'
c Encoding variable: aux35 with domain: bool (representing constraint (1<=((0<grid_00002_00004) + (0<grid_00003_00004) + (0<grid_00004_00004) + (0<grid_00000_00004) + (0<grid_00006_00004))))
c Var 'aux35' direct represents '0' with '-1222'
c Var 'aux35' direct represents '1' with '1222'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1222'
c Encoding variable: aux36 with domain: bool (representing constraint (1<=((0<grid_00002_00005) + (0<grid_00003_00005) + (0<grid_00004_00005) + (0<grid_00000_00005) + (0<grid_00005_00005) + (0<grid_00001_00005) + (0<grid_00006_00005))))
c Var 'aux36' direct represents '0' with '-1223'
c Var 'aux36' direct represents '1' with '1223'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1223'
c Encoding variable: aux37 with domain: bool (representing constraint (2<=((0<grid_00002_00006) + (0<grid_00004_00006) + (0<grid_00000_00006) + (0<grid_00006_00006))))
c Var 'aux37' direct represents '0' with '-1224'
c Var 'aux37' direct represents '1' with '1224'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1224'
c Encoding variable: aux38 with domain: bool (representing constraint (((0<grid_00002_00000) + (0<grid_00003_00000) + (0<grid_00004_00000) + (0<grid_00005_00000) + (0<grid_00001_00000) + (0<grid_00006_00000))<=1))
c Var 'aux38' direct represents '0' with '-1225'
c Var 'aux38' direct represents '1' with '1225'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1225'
c Encoding variable: aux39 with domain: bool (representing constraint (((0<grid_00002_00001) + (0<grid_00004_00001) + (0<grid_00000_00001) + (0<grid_00006_00001))<=2))
c Var 'aux39' direct represents '0' with '-1226'
c Var 'aux39' direct represents '1' with '1226'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1226'
c Encoding variable: aux40 with domain: bool (representing constraint (((0<grid_00002_00002) + (0<grid_00003_00002) + (0<grid_00004_00002) + (0<grid_00000_00002) + (0<grid_00005_00002) + (0<grid_00001_00002) + (0<grid_00006_00002))<=1))
c Var 'aux40' direct represents '0' with '-1227'
c Var 'aux40' direct represents '1' with '1227'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1227'
c Encoding variable: aux41 with domain: bool (representing constraint (((0<grid_00002_00003) + (0<grid_00003_00003) + (0<grid_00004_00003) + (0<grid_00000_00003) + (0<grid_00005_00003) + (0<grid_00001_00003) + (0<grid_00006_00003))<=1))
c Var 'aux41' direct represents '0' with '-1228'
c Var 'aux41' direct represents '1' with '1228'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1228'
c Encoding variable: aux42 with domain: bool (representing constraint (((0<grid_00002_00004) + (0<grid_00003_00004) + (0<grid_00004_00004) + (0<grid_00000_00004) + (0<grid_00006_00004))<=1))
c Var 'aux42' direct represents '0' with '-1229'
c Var 'aux42' direct represents '1' with '1229'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1229'
c Encoding variable: aux43 with domain: bool (representing constraint (((0<grid_00002_00005) + (0<grid_00003_00005) + (0<grid_00004_00005) + (0<grid_00000_00005) + (0<grid_00005_00005) + (0<grid_00001_00005) + (0<grid_00006_00005))<=1))
c Var 'aux43' direct represents '0' with '-1230'
c Var 'aux43' direct represents '1' with '1230'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1230'
c Encoding variable: aux44 with domain: bool (representing constraint (((0<grid_00002_00006) + (0<grid_00004_00006) + (0<grid_00000_00006) + (0<grid_00006_00006))<=2))
c Var 'aux44' direct represents '0' with '-1231'
c Var 'aux44' direct represents '1' with '1231'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1231'
c Encoding variable: aux45 with domain: int(0..2) (representing constraint ((1=grid_00005_00000) + (grid_00000_00006=1)))
c Both direct and order encoding.
c Var 'aux45' order represents '0' with '1232'
c Var 'aux45' direct represents '0' with '1232'
c Var 'aux45' order represents '1' with '1233'
-1232 1233 0
c Var 'aux45' direct represents '1' with '1234'
1232 -1233 1234 0
-1234 1233 0
-1234 -1232 0
c Var 'aux45' direct represents '2' with '-1233'
1232 1234 -1233 0
c Encoding variable: aux46 with domain: int(0..2) (representing constraint ((grid_00000_00005=1) + (1=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux46' order represents '0' with '1235'
c Var 'aux46' direct represents '0' with '1235'
c Var 'aux46' order represents '1' with '1236'
-1235 1236 0
c Var 'aux46' direct represents '1' with '1237'
1235 -1236 1237 0
-1237 1236 0
-1237 -1235 0
c Var 'aux46' direct represents '2' with '-1236'
1235 1237 -1236 0
c Encoding variable: aux47 with domain: int(0..2) (representing constraint ((grid_00000_00004=1) + (1=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux47' order represents '0' with '1238'
c Var 'aux47' direct represents '0' with '1238'
c Var 'aux47' order represents '1' with '1239'
-1238 1239 0
c Var 'aux47' direct represents '1' with '1240'
1238 -1239 1240 0
-1240 1239 0
-1240 -1238 0
c Var 'aux47' direct represents '2' with '-1239'
1238 1240 -1239 0
c Encoding variable: aux48 with domain: int(0..2) (representing constraint ((grid_00000_00003=1) + (grid_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux48' order represents '0' with '1241'
c Var 'aux48' direct represents '0' with '1241'
c Var 'aux48' order represents '1' with '1242'
-1241 1242 0
c Var 'aux48' direct represents '1' with '1243'
1241 -1242 1243 0
-1243 1242 0
-1243 -1241 0
c Var 'aux48' direct represents '2' with '-1242'
1241 1243 -1242 0
c Encoding variable: aux49 with domain: int(0..2) (representing constraint ((grid_00000_00002=1) + (1=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux49' order represents '0' with '1244'
c Var 'aux49' direct represents '0' with '1244'
c Var 'aux49' order represents '1' with '1245'
-1244 1245 0
c Var 'aux49' direct represents '1' with '1246'
1244 -1245 1246 0
-1246 1245 0
-1246 -1244 0
c Var 'aux49' direct represents '2' with '-1245'
1244 1246 -1245 0
c Encoding variable: aux50 with domain: int(0..2) (representing constraint ((grid_00000_00001=1) + (grid_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux50' order represents '0' with '1247'
c Var 'aux50' direct represents '0' with '1247'
c Var 'aux50' order represents '1' with '1248'
-1247 1248 0
c Var 'aux50' direct represents '1' with '1249'
1247 -1248 1249 0
-1249 1248 0
-1249 -1247 0
c Var 'aux50' direct represents '2' with '-1248'
1247 1249 -1248 0
c Encoding variable: aux51 with domain: int(0..2) (representing constraint ((grid_00004_00005=1) + (1=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux51' order represents '0' with '1250'
c Var 'aux51' direct represents '0' with '1250'
c Var 'aux51' order represents '1' with '1251'
-1250 1251 0
c Var 'aux51' direct represents '1' with '1252'
1250 -1251 1252 0
-1252 1251 0
-1252 -1250 0
c Var 'aux51' direct represents '2' with '-1251'
1250 1252 -1251 0
c Encoding variable: aux52 with domain: int(0..2) (representing constraint ((grid_00004_00006=1) + (grid_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux52' order represents '0' with '1253'
c Var 'aux52' direct represents '0' with '1253'
c Var 'aux52' order represents '1' with '1254'
-1253 1254 0
c Var 'aux52' direct represents '1' with '1255'
1253 -1254 1255 0
-1255 1254 0
-1255 -1253 0
c Var 'aux52' direct represents '2' with '-1254'
1253 1255 -1254 0
c Encoding variable: aux53 with domain: int(0..2) (representing constraint ((1=grid_00006_00004) + (1=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux53' order represents '0' with '1256'
c Var 'aux53' direct represents '0' with '1256'
c Var 'aux53' order represents '1' with '1257'
-1256 1257 0
c Var 'aux53' direct represents '1' with '1258'
1256 -1257 1258 0
-1258 1257 0
-1258 -1256 0
c Var 'aux53' direct represents '2' with '-1257'
1256 1258 -1257 0
c Encoding variable: aux54 with domain: int(0..2) (representing constraint ((grid_00004_00003=1) + (grid_00003_00000=1)))
c Both direct and order encoding.
c Var 'aux54' order represents '0' with '1259'
c Var 'aux54' direct represents '0' with '1259'
c Var 'aux54' order represents '1' with '1260'
-1259 1260 0
c Var 'aux54' direct represents '1' with '1261'
1259 -1260 1261 0
-1261 1260 0
-1261 -1259 0
c Var 'aux54' direct represents '2' with '-1260'
1259 1261 -1260 0
c Encoding variable: aux55 with domain: int(0..2) (representing constraint ((grid_00004_00002=1) + (1=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux55' order represents '0' with '1262'
c Var 'aux55' direct represents '0' with '1262'
c Var 'aux55' order represents '1' with '1263'
-1262 1263 0
c Var 'aux55' direct represents '1' with '1264'
1262 -1263 1264 0
-1264 1263 0
-1264 -1262 0
c Var 'aux55' direct represents '2' with '-1263'
1262 1264 -1263 0
c Encoding variable: aux56 with domain: int(0..2) (representing constraint ((grid_00004_00001=1) + (1=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux56' order represents '0' with '1265'
c Var 'aux56' direct represents '0' with '1265'
c Var 'aux56' order represents '1' with '1266'
-1265 1266 0
c Var 'aux56' direct represents '1' with '1267'
1265 -1266 1267 0
-1267 1266 0
-1267 -1265 0
c Var 'aux56' direct represents '2' with '-1266'
1265 1267 -1266 0
c Encoding variable: aux57 with domain: int(0..2) (representing constraint ((grid_00004_00000=1) + (1=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux57' order represents '0' with '1268'
c Var 'aux57' direct represents '0' with '1268'
c Var 'aux57' order represents '1' with '1269'
-1268 1269 0
c Var 'aux57' direct represents '1' with '1270'
1268 -1269 1270 0
-1270 1269 0
-1270 -1268 0
c Var 'aux57' direct represents '2' with '-1269'
1268 1270 -1269 0
c Encoding variable: aux58 with domain: int(0..2) (representing constraint ((1=grid_00002_00006) + (1=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux58' order represents '0' with '1271'
c Var 'aux58' direct represents '0' with '1271'
c Var 'aux58' order represents '1' with '1272'
-1271 1272 0
c Var 'aux58' direct represents '1' with '1273'
1271 -1272 1273 0
-1273 1272 0
-1273 -1271 0
c Var 'aux58' direct represents '2' with '-1272'
1271 1273 -1272 0
c Encoding variable: aux59 with domain: int(0..2) (representing constraint ((1=grid_00002_00005) + (1=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux59' order represents '0' with '1274'
c Var 'aux59' direct represents '0' with '1274'
c Var 'aux59' order represents '1' with '1275'
-1274 1275 0
c Var 'aux59' direct represents '1' with '1276'
1274 -1275 1276 0
-1276 1275 0
-1276 -1274 0
c Var 'aux59' direct represents '2' with '-1275'
1274 1276 -1275 0
c Encoding variable: aux60 with domain: int(0..2) (representing constraint ((1=grid_00002_00004) + (1=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux60' order represents '0' with '1277'
c Var 'aux60' direct represents '0' with '1277'
c Var 'aux60' order represents '1' with '1278'
-1277 1278 0
c Var 'aux60' direct represents '1' with '1279'
1277 -1278 1279 0
-1279 1278 0
-1279 -1277 0
c Var 'aux60' direct represents '2' with '-1278'
1277 1279 -1278 0
c Encoding variable: aux61 with domain: int(0..2) (representing constraint ((1=grid_00002_00003) + (1=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux61' order represents '0' with '1280'
c Var 'aux61' direct represents '0' with '1280'
c Var 'aux61' order represents '1' with '1281'
-1280 1281 0
c Var 'aux61' direct represents '1' with '1282'
1280 -1281 1282 0
-1282 1281 0
-1282 -1280 0
c Var 'aux61' direct represents '2' with '-1281'
1280 1282 -1281 0
c Encoding variable: aux62 with domain: int(0..2) (representing constraint ((grid_00003_00002=1) + (1=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux62' order represents '0' with '1283'
c Var 'aux62' direct represents '0' with '1283'
c Var 'aux62' order represents '1' with '1284'
-1283 1284 0
c Var 'aux62' direct represents '1' with '1285'
1283 -1284 1285 0
-1285 1284 0
-1285 -1283 0
c Var 'aux62' direct represents '2' with '-1284'
1283 1285 -1284 0
c Encoding variable: aux63 with domain: int(0..2) (representing constraint ((1=grid_00001_00005) + (grid_00003_00003=1)))
c Both direct and order encoding.
c Var 'aux63' order represents '0' with '1286'
c Var 'aux63' direct represents '0' with '1286'
c Var 'aux63' order represents '1' with '1287'
-1286 1287 0
c Var 'aux63' direct represents '1' with '1288'
1286 -1287 1288 0
-1288 1287 0
-1288 -1286 0
c Var 'aux63' direct represents '2' with '-1287'
1286 1288 -1287 0
c Encoding variable: aux64 with domain: int(0..2) (representing constraint ((1=grid_00006_00000) + (1=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux64' order represents '0' with '1289'
c Var 'aux64' direct represents '0' with '1289'
c Var 'aux64' order represents '1' with '1290'
-1289 1290 0
c Var 'aux64' direct represents '1' with '1291'
1289 -1290 1291 0
-1291 1290 0
-1291 -1289 0
c Var 'aux64' direct represents '2' with '-1290'
1289 1291 -1290 0
c Encoding variable: aux65 with domain: int(0..4) (representing constraint (aux52 + aux64))
c Both direct and order encoding.
c Var 'aux65' order represents '0' with '1292'
c Var 'aux65' direct represents '0' with '1292'
c Var 'aux65' order represents '1' with '1293'
-1292 1293 0
c Var 'aux65' direct represents '1' with '1294'
1292 -1293 1294 0
-1294 1293 0
-1294 -1292 0
c Var 'aux65' order represents '2' with '1295'
-1293 1295 0
c Var 'aux65' direct represents '2' with '1296'
1293 -1295 1296 0
-1296 1295 0
-1296 -1293 0
c Var 'aux65' order represents '3' with '1297'
-1295 1297 0
c Var 'aux65' direct represents '3' with '1298'
1295 -1297 1298 0
-1298 1297 0
-1298 -1295 0
c Var 'aux65' direct represents '4' with '-1297'
1292 1294 1296 1298 -1297 0
c Encoding variable: aux66 with domain: int(0..4) (representing constraint (aux46 + aux59))
c Both direct and order encoding.
c Var 'aux66' order represents '0' with '1299'
c Var 'aux66' direct represents '0' with '1299'
c Var 'aux66' order represents '1' with '1300'
-1299 1300 0
c Var 'aux66' direct represents '1' with '1301'
1299 -1300 1301 0
-1301 1300 0
-1301 -1299 0
c Var 'aux66' order represents '2' with '1302'
-1300 1302 0
c Var 'aux66' direct represents '2' with '1303'
1300 -1302 1303 0
-1303 1302 0
-1303 -1300 0
c Var 'aux66' order represents '3' with '1304'
-1302 1304 0
c Var 'aux66' direct represents '3' with '1305'
1302 -1304 1305 0
-1305 1304 0
-1305 -1302 0
c Var 'aux66' direct represents '4' with '-1304'
1299 1301 1303 1305 -1304 0
c Encoding variable: aux67 with domain: int(0..4) (representing constraint (aux50 + aux45))
c Both direct and order encoding.
c Var 'aux67' order represents '0' with '1306'
c Var 'aux67' direct represents '0' with '1306'
c Var 'aux67' order represents '1' with '1307'
-1306 1307 0
c Var 'aux67' direct represents '1' with '1308'
1306 -1307 1308 0
-1308 1307 0
-1308 -1306 0
c Var 'aux67' order represents '2' with '1309'
-1307 1309 0
c Var 'aux67' direct represents '2' with '1310'
1307 -1309 1310 0
-1310 1309 0
-1310 -1307 0
c Var 'aux67' order represents '3' with '1311'
-1309 1311 0
c Var 'aux67' direct represents '3' with '1312'
1309 -1311 1312 0
-1312 1311 0
-1312 -1309 0
c Var 'aux67' direct represents '4' with '-1311'
1306 1308 1310 1312 -1311 0
c Encoding variable: aux68 with domain: int(0..4) (representing constraint (aux48 + aux47))
c Both direct and order encoding.
c Var 'aux68' order represents '0' with '1313'
c Var 'aux68' direct represents '0' with '1313'
c Var 'aux68' order represents '1' with '1314'
-1313 1314 0
c Var 'aux68' direct represents '1' with '1315'
1313 -1314 1315 0
-1315 1314 0
-1315 -1313 0
c Var 'aux68' order represents '2' with '1316'
-1314 1316 0
c Var 'aux68' direct represents '2' with '1317'
1314 -1316 1317 0
-1317 1316 0
-1317 -1314 0
c Var 'aux68' order represents '3' with '1318'
-1316 1318 0
c Var 'aux68' direct represents '3' with '1319'
1316 -1318 1319 0
-1319 1318 0
-1319 -1316 0
c Var 'aux68' direct represents '4' with '-1318'
1313 1315 1317 1319 -1318 0
c Encoding variable: aux69 with domain: int(0..4) (representing constraint (aux49 + aux51))
c Both direct and order encoding.
c Var 'aux69' order represents '0' with '1320'
c Var 'aux69' direct represents '0' with '1320'
c Var 'aux69' order represents '1' with '1321'
-1320 1321 0
c Var 'aux69' direct represents '1' with '1322'
1320 -1321 1322 0
-1322 1321 0
-1322 -1320 0
c Var 'aux69' order represents '2' with '1323'
-1321 1323 0
c Var 'aux69' direct represents '2' with '1324'
1321 -1323 1324 0
-1324 1323 0
-1324 -1321 0
c Var 'aux69' order represents '3' with '1325'
-1323 1325 0
c Var 'aux69' direct represents '3' with '1326'
1323 -1325 1326 0
-1326 1325 0
-1326 -1323 0
c Var 'aux69' direct represents '4' with '-1325'
1320 1322 1324 1326 -1325 0
c Encoding variable: aux70 with domain: int(0..4) (representing constraint (aux62 + aux58))
c Both direct and order encoding.
c Var 'aux70' order represents '0' with '1327'
c Var 'aux70' direct represents '0' with '1327'
c Var 'aux70' order represents '1' with '1328'
-1327 1328 0
c Var 'aux70' direct represents '1' with '1329'
1327 -1328 1329 0
-1329 1328 0
-1329 -1327 0
c Var 'aux70' order represents '2' with '1330'
-1328 1330 0
c Var 'aux70' direct represents '2' with '1331'
1328 -1330 1331 0
-1331 1330 0
-1331 -1328 0
c Var 'aux70' order represents '3' with '1332'
-1330 1332 0
c Var 'aux70' direct represents '3' with '1333'
1330 -1332 1333 0
-1333 1332 0
-1333 -1330 0
c Var 'aux70' direct represents '4' with '-1332'
1327 1329 1331 1333 -1332 0
c Encoding variable: aux71 with domain: int(0..4) (representing constraint (aux55 + aux54))
c Both direct and order encoding.
c Var 'aux71' order represents '0' with '1334'
c Var 'aux71' direct represents '0' with '1334'
c Var 'aux71' order represents '1' with '1335'
-1334 1335 0
c Var 'aux71' direct represents '1' with '1336'
1334 -1335 1336 0
-1336 1335 0
-1336 -1334 0
c Var 'aux71' order represents '2' with '1337'
-1335 1337 0
c Var 'aux71' direct represents '2' with '1338'
1335 -1337 1338 0
-1338 1337 0
-1338 -1335 0
c Var 'aux71' order represents '3' with '1339'
-1337 1339 0
c Var 'aux71' direct represents '3' with '1340'
1337 -1339 1340 0
-1340 1339 0
-1340 -1337 0
c Var 'aux71' direct represents '4' with '-1339'
1334 1336 1338 1340 -1339 0
c Encoding variable: aux72 with domain: int(0..4) (representing constraint (aux56 + aux57))
c Both direct and order encoding.
c Var 'aux72' order represents '0' with '1341'
c Var 'aux72' direct represents '0' with '1341'
c Var 'aux72' order represents '1' with '1342'
-1341 1342 0
c Var 'aux72' direct represents '1' with '1343'
1341 -1342 1343 0
-1343 1342 0
-1343 -1341 0
c Var 'aux72' order represents '2' with '1344'
-1342 1344 0
c Var 'aux72' direct represents '2' with '1345'
1342 -1344 1345 0
-1345 1344 0
-1345 -1342 0
c Var 'aux72' order represents '3' with '1346'
-1344 1346 0
c Var 'aux72' direct represents '3' with '1347'
1344 -1346 1347 0
-1347 1346 0
-1347 -1344 0
c Var 'aux72' direct represents '4' with '-1346'
1341 1343 1345 1347 -1346 0
c Encoding variable: aux73 with domain: int(0..4) (representing constraint (aux60 + aux63))
c Both direct and order encoding.
c Var 'aux73' order represents '0' with '1348'
c Var 'aux73' direct represents '0' with '1348'
c Var 'aux73' order represents '1' with '1349'
-1348 1349 0
c Var 'aux73' direct represents '1' with '1350'
1348 -1349 1350 0
-1350 1349 0
-1350 -1348 0
c Var 'aux73' order represents '2' with '1351'
-1349 1351 0
c Var 'aux73' direct represents '2' with '1352'
1349 -1351 1352 0
-1352 1351 0
-1352 -1349 0
c Var 'aux73' order represents '3' with '1353'
-1351 1353 0
c Var 'aux73' direct represents '3' with '1354'
1351 -1353 1354 0
-1354 1353 0
-1354 -1351 0
c Var 'aux73' direct represents '4' with '-1353'
1348 1350 1352 1354 -1353 0
c Encoding variable: aux74 with domain: int(0..4) (representing constraint (aux61 + aux53))
c Both direct and order encoding.
c Var 'aux74' order represents '0' with '1355'
c Var 'aux74' direct represents '0' with '1355'
c Var 'aux74' order represents '1' with '1356'
-1355 1356 0
c Var 'aux74' direct represents '1' with '1357'
1355 -1356 1357 0
-1357 1356 0
-1357 -1355 0
c Var 'aux74' order represents '2' with '1358'
-1356 1358 0
c Var 'aux74' direct represents '2' with '1359'
1356 -1358 1359 0
-1359 1358 0
-1359 -1356 0
c Var 'aux74' order represents '3' with '1360'
-1358 1360 0
c Var 'aux74' direct represents '3' with '1361'
1358 -1360 1361 0
-1361 1360 0
-1361 -1358 0
c Var 'aux74' direct represents '4' with '-1360'
1355 1357 1359 1361 -1360 0
c Encoding variable: aux75 with domain: int(0..8) (representing constraint (aux68 + aux74))
c Both direct and order encoding.
c Var 'aux75' order represents '0' with '1362'
c Var 'aux75' direct represents '0' with '1362'
c Var 'aux75' order represents '1' with '1363'
-1362 1363 0
c Var 'aux75' direct represents '1' with '1364'
1362 -1363 1364 0
-1364 1363 0
-1364 -1362 0
c Var 'aux75' order represents '2' with '1365'
-1363 1365 0
c Var 'aux75' direct represents '2' with '1366'
1363 -1365 1366 0
-1366 1365 0
-1366 -1363 0
c Var 'aux75' order represents '3' with '1367'
-1365 1367 0
c Var 'aux75' direct represents '3' with '1368'
1365 -1367 1368 0
-1368 1367 0
-1368 -1365 0
c Var 'aux75' order represents '4' with '1369'
-1367 1369 0
c Var 'aux75' direct represents '4' with '1370'
1367 -1369 1370 0
-1370 1369 0
-1370 -1367 0
c Var 'aux75' order represents '5' with '1371'
-1369 1371 0
c Var 'aux75' direct represents '5' with '1372'
1369 -1371 1372 0
-1372 1371 0
-1372 -1369 0
c Var 'aux75' order represents '6' with '1373'
-1371 1373 0
c Var 'aux75' direct represents '6' with '1374'
1371 -1373 1374 0
-1374 1373 0
-1374 -1371 0
c Var 'aux75' order represents '7' with '1375'
-1373 1375 0
c Var 'aux75' direct represents '7' with '1376'
1373 -1375 1376 0
-1376 1375 0
-1376 -1373 0
c Var 'aux75' direct represents '8' with '-1375'
1362 1364 1366 1368 1370 1372 1374 1376 -1375 0
c Encoding variable: aux76 with domain: int(0..8) (representing constraint (aux67 + aux71))
c Both direct and order encoding.
c Var 'aux76' order represents '0' with '1377'
c Var 'aux76' direct represents '0' with '1377'
c Var 'aux76' order represents '1' with '1378'
-1377 1378 0
c Var 'aux76' direct represents '1' with '1379'
1377 -1378 1379 0
-1379 1378 0
-1379 -1377 0
c Var 'aux76' order represents '2' with '1380'
-1378 1380 0
c Var 'aux76' direct represents '2' with '1381'
1378 -1380 1381 0
-1381 1380 0
-1381 -1378 0
c Var 'aux76' order represents '3' with '1382'
-1380 1382 0
c Var 'aux76' direct represents '3' with '1383'
1380 -1382 1383 0
-1383 1382 0
-1383 -1380 0
c Var 'aux76' order represents '4' with '1384'
-1382 1384 0
c Var 'aux76' direct represents '4' with '1385'
1382 -1384 1385 0
-1385 1384 0
-1385 -1382 0
c Var 'aux76' order represents '5' with '1386'
-1384 1386 0
c Var 'aux76' direct represents '5' with '1387'
1384 -1386 1387 0
-1387 1386 0
-1387 -1384 0
c Var 'aux76' order represents '6' with '1388'
-1386 1388 0
c Var 'aux76' direct represents '6' with '1389'
1386 -1388 1389 0
-1389 1388 0
-1389 -1386 0
c Var 'aux76' order represents '7' with '1390'
-1388 1390 0
c Var 'aux76' direct represents '7' with '1391'
1388 -1390 1391 0
-1391 1390 0
-1391 -1388 0
c Var 'aux76' direct represents '8' with '-1390'
1377 1379 1381 1383 1385 1387 1389 1391 -1390 0
c Encoding variable: aux77 with domain: int(0..8) (representing constraint (aux65 + aux66))
c Both direct and order encoding.
c Var 'aux77' order represents '0' with '1392'
c Var 'aux77' direct represents '0' with '1392'
c Var 'aux77' order represents '1' with '1393'
-1392 1393 0
c Var 'aux77' direct represents '1' with '1394'
1392 -1393 1394 0
-1394 1393 0
-1394 -1392 0
c Var 'aux77' order represents '2' with '1395'
-1393 1395 0
c Var 'aux77' direct represents '2' with '1396'
1393 -1395 1396 0
-1396 1395 0
-1396 -1393 0
c Var 'aux77' order represents '3' with '1397'
-1395 1397 0
c Var 'aux77' direct represents '3' with '1398'
1395 -1397 1398 0
-1398 1397 0
-1398 -1395 0
c Var 'aux77' order represents '4' with '1399'
-1397 1399 0
c Var 'aux77' direct represents '4' with '1400'
1397 -1399 1400 0
-1400 1399 0
-1400 -1397 0
c Var 'aux77' order represents '5' with '1401'
-1399 1401 0
c Var 'aux77' direct represents '5' with '1402'
1399 -1401 1402 0
-1402 1401 0
-1402 -1399 0
c Var 'aux77' order represents '6' with '1403'
-1401 1403 0
c Var 'aux77' direct represents '6' with '1404'
1401 -1403 1404 0
-1404 1403 0
-1404 -1401 0
c Var 'aux77' order represents '7' with '1405'
-1403 1405 0
c Var 'aux77' direct represents '7' with '1406'
1403 -1405 1406 0
-1406 1405 0
-1406 -1403 0
c Var 'aux77' direct represents '8' with '-1405'
1392 1394 1396 1398 1400 1402 1404 1406 -1405 0
c Encoding variable: aux78 with domain: int(0..8) (representing constraint (aux69 + aux70))
c Both direct and order encoding.
c Var 'aux78' order represents '0' with '1407'
c Var 'aux78' direct represents '0' with '1407'
c Var 'aux78' order represents '1' with '1408'
-1407 1408 0
c Var 'aux78' direct represents '1' with '1409'
1407 -1408 1409 0
-1409 1408 0
-1409 -1407 0
c Var 'aux78' order represents '2' with '1410'
-1408 1410 0
c Var 'aux78' direct represents '2' with '1411'
1408 -1410 1411 0
-1411 1410 0
-1411 -1408 0
c Var 'aux78' order represents '3' with '1412'
-1410 1412 0
c Var 'aux78' direct represents '3' with '1413'
1410 -1412 1413 0
-1413 1412 0
-1413 -1410 0
c Var 'aux78' order represents '4' with '1414'
-1412 1414 0
c Var 'aux78' direct represents '4' with '1415'
1412 -1414 1415 0
-1415 1414 0
-1415 -1412 0
c Var 'aux78' order represents '5' with '1416'
-1414 1416 0
c Var 'aux78' direct represents '5' with '1417'
1414 -1416 1417 0
-1417 1416 0
-1417 -1414 0
c Var 'aux78' order represents '6' with '1418'
-1416 1418 0
c Var 'aux78' direct represents '6' with '1419'
1416 -1418 1419 0
-1419 1418 0
-1419 -1416 0
c Var 'aux78' order represents '7' with '1420'
-1418 1420 0
c Var 'aux78' direct represents '7' with '1421'
1418 -1420 1421 0
-1421 1420 0
-1421 -1418 0
c Var 'aux78' direct represents '8' with '-1420'
1407 1409 1411 1413 1415 1417 1419 1421 -1420 0
c Encoding variable: aux79 with domain: int(0..8) (representing constraint (aux72 + aux73))
c Both direct and order encoding.
c Var 'aux79' order represents '0' with '1422'
c Var 'aux79' direct represents '0' with '1422'
c Var 'aux79' order represents '1' with '1423'
-1422 1423 0
c Var 'aux79' direct represents '1' with '1424'
1422 -1423 1424 0
-1424 1423 0
-1424 -1422 0
c Var 'aux79' order represents '2' with '1425'
-1423 1425 0
c Var 'aux79' direct represents '2' with '1426'
1423 -1425 1426 0
-1426 1425 0
-1426 -1423 0
c Var 'aux79' order represents '3' with '1427'
-1425 1427 0
c Var 'aux79' direct represents '3' with '1428'
1425 -1427 1428 0
-1428 1427 0
-1428 -1425 0
c Var 'aux79' order represents '4' with '1429'
-1427 1429 0
c Var 'aux79' direct represents '4' with '1430'
1427 -1429 1430 0
-1430 1429 0
-1430 -1427 0
c Var 'aux79' order represents '5' with '1431'
-1429 1431 0
c Var 'aux79' direct represents '5' with '1432'
1429 -1431 1432 0
-1432 1431 0
-1432 -1429 0
c Var 'aux79' order represents '6' with '1433'
-1431 1433 0
c Var 'aux79' direct represents '6' with '1434'
1431 -1433 1434 0
-1434 1433 0
-1434 -1431 0
c Var 'aux79' order represents '7' with '1435'
-1433 1435 0
c Var 'aux79' direct represents '7' with '1436'
1433 -1435 1436 0
-1436 1435 0
-1436 -1433 0
c Var 'aux79' direct represents '8' with '-1435'
1422 1424 1426 1428 1430 1432 1434 1436 -1435 0
c Encoding variable: aux80 with domain: int(0..16) (representing constraint (aux76 + aux79))
c Both direct and order encoding.
c Var 'aux80' order represents '0' with '1437'
c Var 'aux80' direct represents '0' with '1437'
c Var 'aux80' order represents '1' with '1438'
-1437 1438 0
c Var 'aux80' direct represents '1' with '1439'
1437 -1438 1439 0
-1439 1438 0
-1439 -1437 0
c Var 'aux80' order represents '2' with '1440'
-1438 1440 0
c Var 'aux80' direct represents '2' with '1441'
1438 -1440 1441 0
-1441 1440 0
-1441 -1438 0
c Var 'aux80' order represents '3' with '1442'
-1440 1442 0
c Var 'aux80' direct represents '3' with '1443'
1440 -1442 1443 0
-1443 1442 0
-1443 -1440 0
c Var 'aux80' order represents '4' with '1444'
-1442 1444 0
c Var 'aux80' direct represents '4' with '1445'
1442 -1444 1445 0
-1445 1444 0
-1445 -1442 0
c Var 'aux80' order represents '5' with '1446'
-1444 1446 0
c Var 'aux80' direct represents '5' with '1447'
1444 -1446 1447 0
-1447 1446 0
-1447 -1444 0
c Var 'aux80' order represents '6' with '1448'
-1446 1448 0
c Var 'aux80' direct represents '6' with '1449'
1446 -1448 1449 0
-1449 1448 0
-1449 -1446 0
c Var 'aux80' order represents '7' with '1450'
-1448 1450 0
c Var 'aux80' direct represents '7' with '1451'
1448 -1450 1451 0
-1451 1450 0
-1451 -1448 0
c Var 'aux80' order represents '8' with '1452'
-1450 1452 0
c Var 'aux80' direct represents '8' with '1453'
1450 -1452 1453 0
-1453 1452 0
-1453 -1450 0
c Var 'aux80' order represents '9' with '1454'
-1452 1454 0
c Var 'aux80' direct represents '9' with '1455'
1452 -1454 1455 0
-1455 1454 0
-1455 -1452 0
c Var 'aux80' order represents '10' with '1456'
-1454 1456 0
c Var 'aux80' direct represents '10' with '1457'
1454 -1456 1457 0
-1457 1456 0
-1457 -1454 0
c Var 'aux80' order represents '11' with '1458'
-1456 1458 0
c Var 'aux80' direct represents '11' with '1459'
1456 -1458 1459 0
-1459 1458 0
-1459 -1456 0
c Var 'aux80' order represents '12' with '1460'
-1458 1460 0
c Var 'aux80' direct represents '12' with '1461'
1458 -1460 1461 0
-1461 1460 0
-1461 -1458 0
c Var 'aux80' order represents '13' with '1462'
-1460 1462 0
c Var 'aux80' direct represents '13' with '1463'
1460 -1462 1463 0
-1463 1462 0
-1463 -1460 0
c Var 'aux80' order represents '14' with '1464'
-1462 1464 0
c Var 'aux80' direct represents '14' with '1465'
1462 -1464 1465 0
-1465 1464 0
-1465 -1462 0
c Var 'aux80' order represents '15' with '1466'
-1464 1466 0
c Var 'aux80' direct represents '15' with '1467'
1464 -1466 1467 0
-1467 1466 0
-1467 -1464 0
c Var 'aux80' direct represents '16' with '-1466'
1437 1439 1441 1443 1445 1447 1449 1451 1453 1455 1457 1459 1461 1463 1465 1467 -1466 0
c Encoding variable: aux81 with domain: int(0..16) (representing constraint (aux75 + aux77))
c Both direct and order encoding.
c Var 'aux81' order represents '0' with '1468'
c Var 'aux81' direct represents '0' with '1468'
c Var 'aux81' order represents '1' with '1469'
-1468 1469 0
c Var 'aux81' direct represents '1' with '1470'
1468 -1469 1470 0
-1470 1469 0
-1470 -1468 0
c Var 'aux81' order represents '2' with '1471'
-1469 1471 0
c Var 'aux81' direct represents '2' with '1472'
1469 -1471 1472 0
-1472 1471 0
-1472 -1469 0
c Var 'aux81' order represents '3' with '1473'
-1471 1473 0
c Var 'aux81' direct represents '3' with '1474'
1471 -1473 1474 0
-1474 1473 0
-1474 -1471 0
c Var 'aux81' order represents '4' with '1475'
-1473 1475 0
c Var 'aux81' direct represents '4' with '1476'
1473 -1475 1476 0
-1476 1475 0
-1476 -1473 0
c Var 'aux81' order represents '5' with '1477'
-1475 1477 0
c Var 'aux81' direct represents '5' with '1478'
1475 -1477 1478 0
-1478 1477 0
-1478 -1475 0
c Var 'aux81' order represents '6' with '1479'
-1477 1479 0
c Var 'aux81' direct represents '6' with '1480'
1477 -1479 1480 0
-1480 1479 0
-1480 -1477 0
c Var 'aux81' order represents '7' with '1481'
-1479 1481 0
c Var 'aux81' direct represents '7' with '1482'
1479 -1481 1482 0
-1482 1481 0
-1482 -1479 0
c Var 'aux81' order represents '8' with '1483'
-1481 1483 0
c Var 'aux81' direct represents '8' with '1484'
1481 -1483 1484 0
-1484 1483 0
-1484 -1481 0
c Var 'aux81' order represents '9' with '1485'
-1483 1485 0
c Var 'aux81' direct represents '9' with '1486'
1483 -1485 1486 0
-1486 1485 0
-1486 -1483 0
c Var 'aux81' order represents '10' with '1487'
-1485 1487 0
c Var 'aux81' direct represents '10' with '1488'
1485 -1487 1488 0
-1488 1487 0
-1488 -1485 0
c Var 'aux81' order represents '11' with '1489'
-1487 1489 0
c Var 'aux81' direct represents '11' with '1490'
1487 -1489 1490 0
-1490 1489 0
-1490 -1487 0
c Var 'aux81' order represents '12' with '1491'
-1489 1491 0
c Var 'aux81' direct represents '12' with '1492'
1489 -1491 1492 0
-1492 1491 0
-1492 -1489 0
c Var 'aux81' order represents '13' with '1493'
-1491 1493 0
c Var 'aux81' direct represents '13' with '1494'
1491 -1493 1494 0
-1494 1493 0
-1494 -1491 0
c Var 'aux81' order represents '14' with '1495'
-1493 1495 0
c Var 'aux81' direct represents '14' with '1496'
1493 -1495 1496 0
-1496 1495 0
-1496 -1493 0
c Var 'aux81' order represents '15' with '1497'
-1495 1497 0
c Var 'aux81' direct represents '15' with '1498'
1495 -1497 1498 0
-1498 1497 0
-1498 -1495 0
c Var 'aux81' direct represents '16' with '-1497'
1468 1470 1472 1474 1476 1478 1480 1482 1484 1486 1488 1490 1492 1494 1496 1498 -1497 0
c Encoding variable: aux82 with domain: int(0..2) (representing constraint ((2=grid_00005_00000) + (grid_00000_00006=2)))
c Both direct and order encoding.
c Var 'aux82' order represents '0' with '1499'
c Var 'aux82' direct represents '0' with '1499'
c Var 'aux82' order represents '1' with '1500'
-1499 1500 0
c Var 'aux82' direct represents '1' with '1501'
1499 -1500 1501 0
-1501 1500 0
-1501 -1499 0
c Var 'aux82' direct represents '2' with '-1500'
1499 1501 -1500 0
c Encoding variable: aux83 with domain: int(0..2) (representing constraint ((grid_00000_00005=2) + (2=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux83' order represents '0' with '1502'
c Var 'aux83' direct represents '0' with '1502'
c Var 'aux83' order represents '1' with '1503'
-1502 1503 0
c Var 'aux83' direct represents '1' with '1504'
1502 -1503 1504 0
-1504 1503 0
-1504 -1502 0
c Var 'aux83' direct represents '2' with '-1503'
1502 1504 -1503 0
c Encoding variable: aux84 with domain: int(0..2) (representing constraint ((grid_00000_00004=2) + (2=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux84' order represents '0' with '1505'
c Var 'aux84' direct represents '0' with '1505'
c Var 'aux84' order represents '1' with '1506'
-1505 1506 0
c Var 'aux84' direct represents '1' with '1507'
1505 -1506 1507 0
-1507 1506 0
-1507 -1505 0
c Var 'aux84' direct represents '2' with '-1506'
1505 1507 -1506 0
c Encoding variable: aux85 with domain: int(0..2) (representing constraint ((grid_00000_00003=2) + (grid_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux85' order represents '0' with '1508'
c Var 'aux85' direct represents '0' with '1508'
c Var 'aux85' order represents '1' with '1509'
-1508 1509 0
c Var 'aux85' direct represents '1' with '1510'
1508 -1509 1510 0
-1510 1509 0
-1510 -1508 0
c Var 'aux85' direct represents '2' with '-1509'
1508 1510 -1509 0
c Encoding variable: aux86 with domain: int(0..2) (representing constraint ((grid_00000_00002=2) + (2=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux86' order represents '0' with '1511'
c Var 'aux86' direct represents '0' with '1511'
c Var 'aux86' order represents '1' with '1512'
-1511 1512 0
c Var 'aux86' direct represents '1' with '1513'
1511 -1512 1513 0
-1513 1512 0
-1513 -1511 0
c Var 'aux86' direct represents '2' with '-1512'
1511 1513 -1512 0
c Encoding variable: aux87 with domain: int(0..2) (representing constraint ((grid_00000_00001=2) + (grid_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux87' order represents '0' with '1514'
c Var 'aux87' direct represents '0' with '1514'
c Var 'aux87' order represents '1' with '1515'
-1514 1515 0
c Var 'aux87' direct represents '1' with '1516'
1514 -1515 1516 0
-1516 1515 0
-1516 -1514 0
c Var 'aux87' direct represents '2' with '-1515'
1514 1516 -1515 0
c Encoding variable: aux88 with domain: int(0..2) (representing constraint ((grid_00004_00005=2) + (2=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux88' order represents '0' with '1517'
c Var 'aux88' direct represents '0' with '1517'
c Var 'aux88' order represents '1' with '1518'
-1517 1518 0
c Var 'aux88' direct represents '1' with '1519'
1517 -1518 1519 0
-1519 1518 0
-1519 -1517 0
c Var 'aux88' direct represents '2' with '-1518'
1517 1519 -1518 0
c Encoding variable: aux89 with domain: int(0..2) (representing constraint ((grid_00004_00006=2) + (grid_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux89' order represents '0' with '1520'
c Var 'aux89' direct represents '0' with '1520'
c Var 'aux89' order represents '1' with '1521'
-1520 1521 0
c Var 'aux89' direct represents '1' with '1522'
1520 -1521 1522 0
-1522 1521 0
-1522 -1520 0
c Var 'aux89' direct represents '2' with '-1521'
1520 1522 -1521 0
c Encoding variable: aux90 with domain: int(0..2) (representing constraint ((2=grid_00006_00004) + (2=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux90' order represents '0' with '1523'
c Var 'aux90' direct represents '0' with '1523'
c Var 'aux90' order represents '1' with '1524'
-1523 1524 0
c Var 'aux90' direct represents '1' with '1525'
1523 -1524 1525 0
-1525 1524 0
-1525 -1523 0
c Var 'aux90' direct represents '2' with '-1524'
1523 1525 -1524 0
c Encoding variable: aux91 with domain: int(0..2) (representing constraint ((grid_00004_00003=2) + (grid_00003_00000=2)))
c Both direct and order encoding.
c Var 'aux91' order represents '0' with '1526'
c Var 'aux91' direct represents '0' with '1526'
c Var 'aux91' order represents '1' with '1527'
-1526 1527 0
c Var 'aux91' direct represents '1' with '1528'
1526 -1527 1528 0
-1528 1527 0
-1528 -1526 0
c Var 'aux91' direct represents '2' with '-1527'
1526 1528 -1527 0
c Encoding variable: aux92 with domain: int(0..2) (representing constraint ((grid_00004_00002=2) + (2=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux92' order represents '0' with '1529'
c Var 'aux92' direct represents '0' with '1529'
c Var 'aux92' order represents '1' with '1530'
-1529 1530 0
c Var 'aux92' direct represents '1' with '1531'
1529 -1530 1531 0
-1531 1530 0
-1531 -1529 0
c Var 'aux92' direct represents '2' with '-1530'
1529 1531 -1530 0
c Encoding variable: aux93 with domain: int(0..2) (representing constraint ((grid_00004_00001=2) + (2=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux93' order represents '0' with '1532'
c Var 'aux93' direct represents '0' with '1532'
c Var 'aux93' order represents '1' with '1533'
-1532 1533 0
c Var 'aux93' direct represents '1' with '1534'
1532 -1533 1534 0
-1534 1533 0
-1534 -1532 0
c Var 'aux93' direct represents '2' with '-1533'
1532 1534 -1533 0
c Encoding variable: aux94 with domain: int(0..2) (representing constraint ((grid_00004_00000=2) + (2=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux94' order represents '0' with '1535'
c Var 'aux94' direct represents '0' with '1535'
c Var 'aux94' order represents '1' with '1536'
-1535 1536 0
c Var 'aux94' direct represents '1' with '1537'
1535 -1536 1537 0
-1537 1536 0
-1537 -1535 0
c Var 'aux94' direct represents '2' with '-1536'
1535 1537 -1536 0
c Encoding variable: aux95 with domain: int(0..2) (representing constraint ((2=grid_00002_00006) + (2=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux95' order represents '0' with '1538'
c Var 'aux95' direct represents '0' with '1538'
c Var 'aux95' order represents '1' with '1539'
-1538 1539 0
c Var 'aux95' direct represents '1' with '1540'
1538 -1539 1540 0
-1540 1539 0
-1540 -1538 0
c Var 'aux95' direct represents '2' with '-1539'
1538 1540 -1539 0
c Encoding variable: aux96 with domain: int(0..2) (representing constraint ((2=grid_00002_00005) + (2=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux96' order represents '0' with '1541'
c Var 'aux96' direct represents '0' with '1541'
c Var 'aux96' order represents '1' with '1542'
-1541 1542 0
c Var 'aux96' direct represents '1' with '1543'
1541 -1542 1543 0
-1543 1542 0
-1543 -1541 0
c Var 'aux96' direct represents '2' with '-1542'
1541 1543 -1542 0
c Encoding variable: aux97 with domain: int(0..2) (representing constraint ((2=grid_00002_00004) + (2=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux97' order represents '0' with '1544'
c Var 'aux97' direct represents '0' with '1544'
c Var 'aux97' order represents '1' with '1545'
-1544 1545 0
c Var 'aux97' direct represents '1' with '1546'
1544 -1545 1546 0
-1546 1545 0
-1546 -1544 0
c Var 'aux97' direct represents '2' with '-1545'
1544 1546 -1545 0
c Encoding variable: aux98 with domain: int(0..2) (representing constraint ((2=grid_00002_00003) + (2=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux98' order represents '0' with '1547'
c Var 'aux98' direct represents '0' with '1547'
c Var 'aux98' order represents '1' with '1548'
-1547 1548 0
c Var 'aux98' direct represents '1' with '1549'
1547 -1548 1549 0
-1549 1548 0
-1549 -1547 0
c Var 'aux98' direct represents '2' with '-1548'
1547 1549 -1548 0
c Encoding variable: aux99 with domain: int(0..2) (representing constraint ((grid_00003_00002=2) + (2=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux99' order represents '0' with '1550'
c Var 'aux99' direct represents '0' with '1550'
c Var 'aux99' order represents '1' with '1551'
-1550 1551 0
c Var 'aux99' direct represents '1' with '1552'
1550 -1551 1552 0
-1552 1551 0
-1552 -1550 0
c Var 'aux99' direct represents '2' with '-1551'
1550 1552 -1551 0
c Encoding variable: aux100 with domain: int(0..2) (representing constraint ((2=grid_00001_00005) + (grid_00003_00003=2)))
c Both direct and order encoding.
c Var 'aux100' order represents '0' with '1553'
c Var 'aux100' direct represents '0' with '1553'
c Var 'aux100' order represents '1' with '1554'
-1553 1554 0
c Var 'aux100' direct represents '1' with '1555'
1553 -1554 1555 0
-1555 1554 0
-1555 -1553 0
c Var 'aux100' direct represents '2' with '-1554'
1553 1555 -1554 0
c Encoding variable: aux101 with domain: int(0..2) (representing constraint ((2=grid_00006_00000) + (2=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux101' order represents '0' with '1556'
c Var 'aux101' direct represents '0' with '1556'
c Var 'aux101' order represents '1' with '1557'
-1556 1557 0
c Var 'aux101' direct represents '1' with '1558'
1556 -1557 1558 0
-1558 1557 0
-1558 -1556 0
c Var 'aux101' direct represents '2' with '-1557'
1556 1558 -1557 0
c Encoding variable: aux102 with domain: int(0..4) (representing constraint (aux89 + aux101))
c Both direct and order encoding.
c Var 'aux102' order represents '0' with '1559'
c Var 'aux102' direct represents '0' with '1559'
c Var 'aux102' order represents '1' with '1560'
-1559 1560 0
c Var 'aux102' direct represents '1' with '1561'
1559 -1560 1561 0
-1561 1560 0
-1561 -1559 0
c Var 'aux102' order represents '2' with '1562'
-1560 1562 0
c Var 'aux102' direct represents '2' with '1563'
1560 -1562 1563 0
-1563 1562 0
-1563 -1560 0
c Var 'aux102' order represents '3' with '1564'
-1562 1564 0
c Var 'aux102' direct represents '3' with '1565'
1562 -1564 1565 0
-1565 1564 0
-1565 -1562 0
c Var 'aux102' direct represents '4' with '-1564'
1559 1561 1563 1565 -1564 0
c Encoding variable: aux103 with domain: int(0..4) (representing constraint (aux83 + aux96))
c Both direct and order encoding.
c Var 'aux103' order represents '0' with '1566'
c Var 'aux103' direct represents '0' with '1566'
c Var 'aux103' order represents '1' with '1567'
-1566 1567 0
c Var 'aux103' direct represents '1' with '1568'
1566 -1567 1568 0
-1568 1567 0
-1568 -1566 0
c Var 'aux103' order represents '2' with '1569'
-1567 1569 0
c Var 'aux103' direct represents '2' with '1570'
1567 -1569 1570 0
-1570 1569 0
-1570 -1567 0
c Var 'aux103' order represents '3' with '1571'
-1569 1571 0
c Var 'aux103' direct represents '3' with '1572'
1569 -1571 1572 0
-1572 1571 0
-1572 -1569 0
c Var 'aux103' direct represents '4' with '-1571'
1566 1568 1570 1572 -1571 0
c Encoding variable: aux104 with domain: int(0..4) (representing constraint (aux87 + aux82))
c Both direct and order encoding.
c Var 'aux104' order represents '0' with '1573'
c Var 'aux104' direct represents '0' with '1573'
c Var 'aux104' order represents '1' with '1574'
-1573 1574 0
c Var 'aux104' direct represents '1' with '1575'
1573 -1574 1575 0
-1575 1574 0
-1575 -1573 0
c Var 'aux104' order represents '2' with '1576'
-1574 1576 0
c Var 'aux104' direct represents '2' with '1577'
1574 -1576 1577 0
-1577 1576 0
-1577 -1574 0
c Var 'aux104' order represents '3' with '1578'
-1576 1578 0
c Var 'aux104' direct represents '3' with '1579'
1576 -1578 1579 0
-1579 1578 0
-1579 -1576 0
c Var 'aux104' direct represents '4' with '-1578'
1573 1575 1577 1579 -1578 0
c Encoding variable: aux105 with domain: int(0..4) (representing constraint (aux85 + aux84))
c Both direct and order encoding.
c Var 'aux105' order represents '0' with '1580'
c Var 'aux105' direct represents '0' with '1580'
c Var 'aux105' order represents '1' with '1581'
-1580 1581 0
c Var 'aux105' direct represents '1' with '1582'
1580 -1581 1582 0
-1582 1581 0
-1582 -1580 0
c Var 'aux105' order represents '2' with '1583'
-1581 1583 0
c Var 'aux105' direct represents '2' with '1584'
1581 -1583 1584 0
-1584 1583 0
-1584 -1581 0
c Var 'aux105' order represents '3' with '1585'
-1583 1585 0
c Var 'aux105' direct represents '3' with '1586'
1583 -1585 1586 0
-1586 1585 0
-1586 -1583 0
c Var 'aux105' direct represents '4' with '-1585'
1580 1582 1584 1586 -1585 0
c Encoding variable: aux106 with domain: int(0..4) (representing constraint (aux86 + aux88))
c Both direct and order encoding.
c Var 'aux106' order represents '0' with '1587'
c Var 'aux106' direct represents '0' with '1587'
c Var 'aux106' order represents '1' with '1588'
-1587 1588 0
c Var 'aux106' direct represents '1' with '1589'
1587 -1588 1589 0
-1589 1588 0
-1589 -1587 0
c Var 'aux106' order represents '2' with '1590'
-1588 1590 0
c Var 'aux106' direct represents '2' with '1591'
1588 -1590 1591 0
-1591 1590 0
-1591 -1588 0
c Var 'aux106' order represents '3' with '1592'
-1590 1592 0
c Var 'aux106' direct represents '3' with '1593'
1590 -1592 1593 0
-1593 1592 0
-1593 -1590 0
c Var 'aux106' direct represents '4' with '-1592'
1587 1589 1591 1593 -1592 0
c Encoding variable: aux107 with domain: int(0..4) (representing constraint (aux99 + aux95))
c Both direct and order encoding.
c Var 'aux107' order represents '0' with '1594'
c Var 'aux107' direct represents '0' with '1594'
c Var 'aux107' order represents '1' with '1595'
-1594 1595 0
c Var 'aux107' direct represents '1' with '1596'
1594 -1595 1596 0
-1596 1595 0
-1596 -1594 0
c Var 'aux107' order represents '2' with '1597'
-1595 1597 0
c Var 'aux107' direct represents '2' with '1598'
1595 -1597 1598 0
-1598 1597 0
-1598 -1595 0
c Var 'aux107' order represents '3' with '1599'
-1597 1599 0
c Var 'aux107' direct represents '3' with '1600'
1597 -1599 1600 0
-1600 1599 0
-1600 -1597 0
c Var 'aux107' direct represents '4' with '-1599'
1594 1596 1598 1600 -1599 0
c Encoding variable: aux108 with domain: int(0..4) (representing constraint (aux92 + aux91))
c Both direct and order encoding.
c Var 'aux108' order represents '0' with '1601'
c Var 'aux108' direct represents '0' with '1601'
c Var 'aux108' order represents '1' with '1602'
-1601 1602 0
c Var 'aux108' direct represents '1' with '1603'
1601 -1602 1603 0
-1603 1602 0
-1603 -1601 0
c Var 'aux108' order represents '2' with '1604'
-1602 1604 0
c Var 'aux108' direct represents '2' with '1605'
1602 -1604 1605 0
-1605 1604 0
-1605 -1602 0
c Var 'aux108' order represents '3' with '1606'
-1604 1606 0
c Var 'aux108' direct represents '3' with '1607'
1604 -1606 1607 0
-1607 1606 0
-1607 -1604 0
c Var 'aux108' direct represents '4' with '-1606'
1601 1603 1605 1607 -1606 0
c Encoding variable: aux109 with domain: int(0..4) (representing constraint (aux93 + aux94))
c Both direct and order encoding.
c Var 'aux109' order represents '0' with '1608'
c Var 'aux109' direct represents '0' with '1608'
c Var 'aux109' order represents '1' with '1609'
-1608 1609 0
c Var 'aux109' direct represents '1' with '1610'
1608 -1609 1610 0
-1610 1609 0
-1610 -1608 0
c Var 'aux109' order represents '2' with '1611'
-1609 1611 0
c Var 'aux109' direct represents '2' with '1612'
1609 -1611 1612 0
-1612 1611 0
-1612 -1609 0
c Var 'aux109' order represents '3' with '1613'
-1611 1613 0
c Var 'aux109' direct represents '3' with '1614'
1611 -1613 1614 0
-1614 1613 0
-1614 -1611 0
c Var 'aux109' direct represents '4' with '-1613'
1608 1610 1612 1614 -1613 0
c Encoding variable: aux110 with domain: int(0..4) (representing constraint (aux97 + aux100))
c Both direct and order encoding.
c Var 'aux110' order represents '0' with '1615'
c Var 'aux110' direct represents '0' with '1615'
c Var 'aux110' order represents '1' with '1616'
-1615 1616 0
c Var 'aux110' direct represents '1' with '1617'
1615 -1616 1617 0
-1617 1616 0
-1617 -1615 0
c Var 'aux110' order represents '2' with '1618'
-1616 1618 0
c Var 'aux110' direct represents '2' with '1619'
1616 -1618 1619 0
-1619 1618 0
-1619 -1616 0
c Var 'aux110' order represents '3' with '1620'
-1618 1620 0
c Var 'aux110' direct represents '3' with '1621'
1618 -1620 1621 0
-1621 1620 0
-1621 -1618 0
c Var 'aux110' direct represents '4' with '-1620'
1615 1617 1619 1621 -1620 0
c Encoding variable: aux111 with domain: int(0..4) (representing constraint (aux98 + aux90))
c Both direct and order encoding.
c Var 'aux111' order represents '0' with '1622'
c Var 'aux111' direct represents '0' with '1622'
c Var 'aux111' order represents '1' with '1623'
-1622 1623 0
c Var 'aux111' direct represents '1' with '1624'
1622 -1623 1624 0
-1624 1623 0
-1624 -1622 0
c Var 'aux111' order represents '2' with '1625'
-1623 1625 0
c Var 'aux111' direct represents '2' with '1626'
1623 -1625 1626 0
-1626 1625 0
-1626 -1623 0
c Var 'aux111' order represents '3' with '1627'
-1625 1627 0
c Var 'aux111' direct represents '3' with '1628'
1625 -1627 1628 0
-1628 1627 0
-1628 -1625 0
c Var 'aux111' direct represents '4' with '-1627'
1622 1624 1626 1628 -1627 0
c Encoding variable: aux112 with domain: int(0..8) (representing constraint (aux105 + aux111))
c Both direct and order encoding.
c Var 'aux112' order represents '0' with '1629'
c Var 'aux112' direct represents '0' with '1629'
c Var 'aux112' order represents '1' with '1630'
-1629 1630 0
c Var 'aux112' direct represents '1' with '1631'
1629 -1630 1631 0
-1631 1630 0
-1631 -1629 0
c Var 'aux112' order represents '2' with '1632'
-1630 1632 0
c Var 'aux112' direct represents '2' with '1633'
1630 -1632 1633 0
-1633 1632 0
-1633 -1630 0
c Var 'aux112' order represents '3' with '1634'
-1632 1634 0
c Var 'aux112' direct represents '3' with '1635'
1632 -1634 1635 0
-1635 1634 0
-1635 -1632 0
c Var 'aux112' order represents '4' with '1636'
-1634 1636 0
c Var 'aux112' direct represents '4' with '1637'
1634 -1636 1637 0
-1637 1636 0
-1637 -1634 0
c Var 'aux112' order represents '5' with '1638'
-1636 1638 0
c Var 'aux112' direct represents '5' with '1639'
1636 -1638 1639 0
-1639 1638 0
-1639 -1636 0
c Var 'aux112' order represents '6' with '1640'
-1638 1640 0
c Var 'aux112' direct represents '6' with '1641'
1638 -1640 1641 0
-1641 1640 0
-1641 -1638 0
c Var 'aux112' order represents '7' with '1642'
-1640 1642 0
c Var 'aux112' direct represents '7' with '1643'
1640 -1642 1643 0
-1643 1642 0
-1643 -1640 0
c Var 'aux112' direct represents '8' with '-1642'
1629 1631 1633 1635 1637 1639 1641 1643 -1642 0
c Encoding variable: aux113 with domain: int(0..8) (representing constraint (aux104 + aux108))
c Both direct and order encoding.
c Var 'aux113' order represents '0' with '1644'
c Var 'aux113' direct represents '0' with '1644'
c Var 'aux113' order represents '1' with '1645'
-1644 1645 0
c Var 'aux113' direct represents '1' with '1646'
1644 -1645 1646 0
-1646 1645 0
-1646 -1644 0
c Var 'aux113' order represents '2' with '1647'
-1645 1647 0
c Var 'aux113' direct represents '2' with '1648'
1645 -1647 1648 0
-1648 1647 0
-1648 -1645 0
c Var 'aux113' order represents '3' with '1649'
-1647 1649 0
c Var 'aux113' direct represents '3' with '1650'
1647 -1649 1650 0
-1650 1649 0
-1650 -1647 0
c Var 'aux113' order represents '4' with '1651'
-1649 1651 0
c Var 'aux113' direct represents '4' with '1652'
1649 -1651 1652 0
-1652 1651 0
-1652 -1649 0
c Var 'aux113' order represents '5' with '1653'
-1651 1653 0
c Var 'aux113' direct represents '5' with '1654'
1651 -1653 1654 0
-1654 1653 0
-1654 -1651 0
c Var 'aux113' order represents '6' with '1655'
-1653 1655 0
c Var 'aux113' direct represents '6' with '1656'
1653 -1655 1656 0
-1656 1655 0
-1656 -1653 0
c Var 'aux113' order represents '7' with '1657'
-1655 1657 0
c Var 'aux113' direct represents '7' with '1658'
1655 -1657 1658 0
-1658 1657 0
-1658 -1655 0
c Var 'aux113' direct represents '8' with '-1657'
1644 1646 1648 1650 1652 1654 1656 1658 -1657 0
c Encoding variable: aux114 with domain: int(0..8) (representing constraint (aux102 + aux103))
c Both direct and order encoding.
c Var 'aux114' order represents '0' with '1659'
c Var 'aux114' direct represents '0' with '1659'
c Var 'aux114' order represents '1' with '1660'
-1659 1660 0
c Var 'aux114' direct represents '1' with '1661'
1659 -1660 1661 0
-1661 1660 0
-1661 -1659 0
c Var 'aux114' order represents '2' with '1662'
-1660 1662 0
c Var 'aux114' direct represents '2' with '1663'
1660 -1662 1663 0
-1663 1662 0
-1663 -1660 0
c Var 'aux114' order represents '3' with '1664'
-1662 1664 0
c Var 'aux114' direct represents '3' with '1665'
1662 -1664 1665 0
-1665 1664 0
-1665 -1662 0
c Var 'aux114' order represents '4' with '1666'
-1664 1666 0
c Var 'aux114' direct represents '4' with '1667'
1664 -1666 1667 0
-1667 1666 0
-1667 -1664 0
c Var 'aux114' order represents '5' with '1668'
-1666 1668 0
c Var 'aux114' direct represents '5' with '1669'
1666 -1668 1669 0
-1669 1668 0
-1669 -1666 0
c Var 'aux114' order represents '6' with '1670'
-1668 1670 0
c Var 'aux114' direct represents '6' with '1671'
1668 -1670 1671 0
-1671 1670 0
-1671 -1668 0
c Var 'aux114' order represents '7' with '1672'
-1670 1672 0
c Var 'aux114' direct represents '7' with '1673'
1670 -1672 1673 0
-1673 1672 0
-1673 -1670 0
c Var 'aux114' direct represents '8' with '-1672'
1659 1661 1663 1665 1667 1669 1671 1673 -1672 0
c Encoding variable: aux115 with domain: int(0..8) (representing constraint (aux106 + aux107))
c Both direct and order encoding.
c Var 'aux115' order represents '0' with '1674'
c Var 'aux115' direct represents '0' with '1674'
c Var 'aux115' order represents '1' with '1675'
-1674 1675 0
c Var 'aux115' direct represents '1' with '1676'
1674 -1675 1676 0
-1676 1675 0
-1676 -1674 0
c Var 'aux115' order represents '2' with '1677'
-1675 1677 0
c Var 'aux115' direct represents '2' with '1678'
1675 -1677 1678 0
-1678 1677 0
-1678 -1675 0
c Var 'aux115' order represents '3' with '1679'
-1677 1679 0
c Var 'aux115' direct represents '3' with '1680'
1677 -1679 1680 0
-1680 1679 0
-1680 -1677 0
c Var 'aux115' order represents '4' with '1681'
-1679 1681 0
c Var 'aux115' direct represents '4' with '1682'
1679 -1681 1682 0
-1682 1681 0
-1682 -1679 0
c Var 'aux115' order represents '5' with '1683'
-1681 1683 0
c Var 'aux115' direct represents '5' with '1684'
1681 -1683 1684 0
-1684 1683 0
-1684 -1681 0
c Var 'aux115' order represents '6' with '1685'
-1683 1685 0
c Var 'aux115' direct represents '6' with '1686'
1683 -1685 1686 0
-1686 1685 0
-1686 -1683 0
c Var 'aux115' order represents '7' with '1687'
-1685 1687 0
c Var 'aux115' direct represents '7' with '1688'
1685 -1687 1688 0
-1688 1687 0
-1688 -1685 0
c Var 'aux115' direct represents '8' with '-1687'
1674 1676 1678 1680 1682 1684 1686 1688 -1687 0
c Encoding variable: aux116 with domain: int(0..8) (representing constraint (aux109 + aux110))
c Both direct and order encoding.
c Var 'aux116' order represents '0' with '1689'
c Var 'aux116' direct represents '0' with '1689'
c Var 'aux116' order represents '1' with '1690'
-1689 1690 0
c Var 'aux116' direct represents '1' with '1691'
1689 -1690 1691 0
-1691 1690 0
-1691 -1689 0
c Var 'aux116' order represents '2' with '1692'
-1690 1692 0
c Var 'aux116' direct represents '2' with '1693'
1690 -1692 1693 0
-1693 1692 0
-1693 -1690 0
c Var 'aux116' order represents '3' with '1694'
-1692 1694 0
c Var 'aux116' direct represents '3' with '1695'
1692 -1694 1695 0
-1695 1694 0
-1695 -1692 0
c Var 'aux116' order represents '4' with '1696'
-1694 1696 0
c Var 'aux116' direct represents '4' with '1697'
1694 -1696 1697 0
-1697 1696 0
-1697 -1694 0
c Var 'aux116' order represents '5' with '1698'
-1696 1698 0
c Var 'aux116' direct represents '5' with '1699'
1696 -1698 1699 0
-1699 1698 0
-1699 -1696 0
c Var 'aux116' order represents '6' with '1700'
-1698 1700 0
c Var 'aux116' direct represents '6' with '1701'
1698 -1700 1701 0
-1701 1700 0
-1701 -1698 0
c Var 'aux116' order represents '7' with '1702'
-1700 1702 0
c Var 'aux116' direct represents '7' with '1703'
1700 -1702 1703 0
-1703 1702 0
-1703 -1700 0
c Var 'aux116' direct represents '8' with '-1702'
1689 1691 1693 1695 1697 1699 1701 1703 -1702 0
c Encoding variable: aux117 with domain: int(0..16) (representing constraint (aux113 + aux116))
c Both direct and order encoding.
c Var 'aux117' order represents '0' with '1704'
c Var 'aux117' direct represents '0' with '1704'
c Var 'aux117' order represents '1' with '1705'
-1704 1705 0
c Var 'aux117' direct represents '1' with '1706'
1704 -1705 1706 0
-1706 1705 0
-1706 -1704 0
c Var 'aux117' order represents '2' with '1707'
-1705 1707 0
c Var 'aux117' direct represents '2' with '1708'
1705 -1707 1708 0
-1708 1707 0
-1708 -1705 0
c Var 'aux117' order represents '3' with '1709'
-1707 1709 0
c Var 'aux117' direct represents '3' with '1710'
1707 -1709 1710 0
-1710 1709 0
-1710 -1707 0
c Var 'aux117' order represents '4' with '1711'
-1709 1711 0
c Var 'aux117' direct represents '4' with '1712'
1709 -1711 1712 0
-1712 1711 0
-1712 -1709 0
c Var 'aux117' order represents '5' with '1713'
-1711 1713 0
c Var 'aux117' direct represents '5' with '1714'
1711 -1713 1714 0
-1714 1713 0
-1714 -1711 0
c Var 'aux117' order represents '6' with '1715'
-1713 1715 0
c Var 'aux117' direct represents '6' with '1716'
1713 -1715 1716 0
-1716 1715 0
-1716 -1713 0
c Var 'aux117' order represents '7' with '1717'
-1715 1717 0
c Var 'aux117' direct represents '7' with '1718'
1715 -1717 1718 0
-1718 1717 0
-1718 -1715 0
c Var 'aux117' order represents '8' with '1719'
-1717 1719 0
c Var 'aux117' direct represents '8' with '1720'
1717 -1719 1720 0
-1720 1719 0
-1720 -1717 0
c Var 'aux117' order represents '9' with '1721'
-1719 1721 0
c Var 'aux117' direct represents '9' with '1722'
1719 -1721 1722 0
-1722 1721 0
-1722 -1719 0
c Var 'aux117' order represents '10' with '1723'
-1721 1723 0
c Var 'aux117' direct represents '10' with '1724'
1721 -1723 1724 0
-1724 1723 0
-1724 -1721 0
c Var 'aux117' order represents '11' with '1725'
-1723 1725 0
c Var 'aux117' direct represents '11' with '1726'
1723 -1725 1726 0
-1726 1725 0
-1726 -1723 0
c Var 'aux117' order represents '12' with '1727'
-1725 1727 0
c Var 'aux117' direct represents '12' with '1728'
1725 -1727 1728 0
-1728 1727 0
-1728 -1725 0
c Var 'aux117' order represents '13' with '1729'
-1727 1729 0
c Var 'aux117' direct represents '13' with '1730'
1727 -1729 1730 0
-1730 1729 0
-1730 -1727 0
c Var 'aux117' order represents '14' with '1731'
-1729 1731 0
c Var 'aux117' direct represents '14' with '1732'
1729 -1731 1732 0
-1732 1731 0
-1732 -1729 0
c Var 'aux117' order represents '15' with '1733'
-1731 1733 0
c Var 'aux117' direct represents '15' with '1734'
1731 -1733 1734 0
-1734 1733 0
-1734 -1731 0
c Var 'aux117' direct represents '16' with '-1733'
1704 1706 1708 1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 -1733 0
c Encoding variable: aux118 with domain: int(0..16) (representing constraint (aux112 + aux114))
c Both direct and order encoding.
c Var 'aux118' order represents '0' with '1735'
c Var 'aux118' direct represents '0' with '1735'
c Var 'aux118' order represents '1' with '1736'
-1735 1736 0
c Var 'aux118' direct represents '1' with '1737'
1735 -1736 1737 0
-1737 1736 0
-1737 -1735 0
c Var 'aux118' order represents '2' with '1738'
-1736 1738 0
c Var 'aux118' direct represents '2' with '1739'
1736 -1738 1739 0
-1739 1738 0
-1739 -1736 0
c Var 'aux118' order represents '3' with '1740'
-1738 1740 0
c Var 'aux118' direct represents '3' with '1741'
1738 -1740 1741 0
-1741 1740 0
-1741 -1738 0
c Var 'aux118' order represents '4' with '1742'
-1740 1742 0
c Var 'aux118' direct represents '4' with '1743'
1740 -1742 1743 0
-1743 1742 0
-1743 -1740 0
c Var 'aux118' order represents '5' with '1744'
-1742 1744 0
c Var 'aux118' direct represents '5' with '1745'
1742 -1744 1745 0
-1745 1744 0
-1745 -1742 0
c Var 'aux118' order represents '6' with '1746'
-1744 1746 0
c Var 'aux118' direct represents '6' with '1747'
1744 -1746 1747 0
-1747 1746 0
-1747 -1744 0
c Var 'aux118' order represents '7' with '1748'
-1746 1748 0
c Var 'aux118' direct represents '7' with '1749'
1746 -1748 1749 0
-1749 1748 0
-1749 -1746 0
c Var 'aux118' order represents '8' with '1750'
-1748 1750 0
c Var 'aux118' direct represents '8' with '1751'
1748 -1750 1751 0
-1751 1750 0
-1751 -1748 0
c Var 'aux118' order represents '9' with '1752'
-1750 1752 0
c Var 'aux118' direct represents '9' with '1753'
1750 -1752 1753 0
-1753 1752 0
-1753 -1750 0
c Var 'aux118' order represents '10' with '1754'
-1752 1754 0
c Var 'aux118' direct represents '10' with '1755'
1752 -1754 1755 0
-1755 1754 0
-1755 -1752 0
c Var 'aux118' order represents '11' with '1756'
-1754 1756 0
c Var 'aux118' direct represents '11' with '1757'
1754 -1756 1757 0
-1757 1756 0
-1757 -1754 0
c Var 'aux118' order represents '12' with '1758'
-1756 1758 0
c Var 'aux118' direct represents '12' with '1759'
1756 -1758 1759 0
-1759 1758 0
-1759 -1756 0
c Var 'aux118' order represents '13' with '1760'
-1758 1760 0
c Var 'aux118' direct represents '13' with '1761'
1758 -1760 1761 0
-1761 1760 0
-1761 -1758 0
c Var 'aux118' order represents '14' with '1762'
-1760 1762 0
c Var 'aux118' direct represents '14' with '1763'
1760 -1762 1763 0
-1763 1762 0
-1763 -1760 0
c Var 'aux118' order represents '15' with '1764'
-1762 1764 0
c Var 'aux118' direct represents '15' with '1765'
1762 -1764 1765 0
-1765 1764 0
-1765 -1762 0
c Var 'aux118' direct represents '16' with '-1764'
1735 1737 1739 1741 1743 1745 1747 1749 1751 1753 1755 1757 1759 1761 1763 1765 -1764 0
c Encoding variable: aux119 with domain: int(0..2) (representing constraint ((3=grid_00005_00000) + (grid_00000_00006=3)))
c Both direct and order encoding.
c Var 'aux119' order represents '0' with '1766'
c Var 'aux119' direct represents '0' with '1766'
c Var 'aux119' order represents '1' with '1767'
-1766 1767 0
c Var 'aux119' direct represents '1' with '1768'
1766 -1767 1768 0
-1768 1767 0
-1768 -1766 0
c Var 'aux119' direct represents '2' with '-1767'
1766 1768 -1767 0
c Encoding variable: aux120 with domain: int(0..2) (representing constraint ((grid_00000_00005=3) + (3=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux120' order represents '0' with '1769'
c Var 'aux120' direct represents '0' with '1769'
c Var 'aux120' order represents '1' with '1770'
-1769 1770 0
c Var 'aux120' direct represents '1' with '1771'
1769 -1770 1771 0
-1771 1770 0
-1771 -1769 0
c Var 'aux120' direct represents '2' with '-1770'
1769 1771 -1770 0
c Encoding variable: aux121 with domain: int(0..2) (representing constraint ((grid_00000_00004=3) + (3=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux121' order represents '0' with '1772'
c Var 'aux121' direct represents '0' with '1772'
c Var 'aux121' order represents '1' with '1773'
-1772 1773 0
c Var 'aux121' direct represents '1' with '1774'
1772 -1773 1774 0
-1774 1773 0
-1774 -1772 0
c Var 'aux121' direct represents '2' with '-1773'
1772 1774 -1773 0
c Encoding variable: aux122 with domain: int(0..2) (representing constraint ((grid_00000_00003=3) + (grid_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux122' order represents '0' with '1775'
c Var 'aux122' direct represents '0' with '1775'
c Var 'aux122' order represents '1' with '1776'
-1775 1776 0
c Var 'aux122' direct represents '1' with '1777'
1775 -1776 1777 0
-1777 1776 0
-1777 -1775 0
c Var 'aux122' direct represents '2' with '-1776'
1775 1777 -1776 0
c Encoding variable: aux123 with domain: int(0..2) (representing constraint ((grid_00000_00002=3) + (3=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux123' order represents '0' with '1778'
c Var 'aux123' direct represents '0' with '1778'
c Var 'aux123' order represents '1' with '1779'
-1778 1779 0
c Var 'aux123' direct represents '1' with '1780'
1778 -1779 1780 0
-1780 1779 0
-1780 -1778 0
c Var 'aux123' direct represents '2' with '-1779'
1778 1780 -1779 0
c Encoding variable: aux124 with domain: int(0..2) (representing constraint ((grid_00000_00001=3) + (grid_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux124' order represents '0' with '1781'
c Var 'aux124' direct represents '0' with '1781'
c Var 'aux124' order represents '1' with '1782'
-1781 1782 0
c Var 'aux124' direct represents '1' with '1783'
1781 -1782 1783 0
-1783 1782 0
-1783 -1781 0
c Var 'aux124' direct represents '2' with '-1782'
1781 1783 -1782 0
c Encoding variable: aux125 with domain: int(0..2) (representing constraint ((grid_00004_00005=3) + (3=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux125' order represents '0' with '1784'
c Var 'aux125' direct represents '0' with '1784'
c Var 'aux125' order represents '1' with '1785'
-1784 1785 0
c Var 'aux125' direct represents '1' with '1786'
1784 -1785 1786 0
-1786 1785 0
-1786 -1784 0
c Var 'aux125' direct represents '2' with '-1785'
1784 1786 -1785 0
c Encoding variable: aux126 with domain: int(0..2) (representing constraint ((grid_00004_00006=3) + (grid_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux126' order represents '0' with '1787'
c Var 'aux126' direct represents '0' with '1787'
c Var 'aux126' order represents '1' with '1788'
-1787 1788 0
c Var 'aux126' direct represents '1' with '1789'
1787 -1788 1789 0
-1789 1788 0
-1789 -1787 0
c Var 'aux126' direct represents '2' with '-1788'
1787 1789 -1788 0
c Encoding variable: aux127 with domain: int(0..2) (representing constraint ((3=grid_00006_00004) + (3=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux127' order represents '0' with '1790'
c Var 'aux127' direct represents '0' with '1790'
c Var 'aux127' order represents '1' with '1791'
-1790 1791 0
c Var 'aux127' direct represents '1' with '1792'
1790 -1791 1792 0
-1792 1791 0
-1792 -1790 0
c Var 'aux127' direct represents '2' with '-1791'
1790 1792 -1791 0
c Encoding variable: aux128 with domain: int(0..2) (representing constraint ((grid_00004_00003=3) + (grid_00003_00000=3)))
c Both direct and order encoding.
c Var 'aux128' order represents '0' with '1793'
c Var 'aux128' direct represents '0' with '1793'
c Var 'aux128' order represents '1' with '1794'
-1793 1794 0
c Var 'aux128' direct represents '1' with '1795'
1793 -1794 1795 0
-1795 1794 0
-1795 -1793 0
c Var 'aux128' direct represents '2' with '-1794'
1793 1795 -1794 0
c Encoding variable: aux129 with domain: int(0..2) (representing constraint ((grid_00004_00002=3) + (3=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux129' order represents '0' with '1796'
c Var 'aux129' direct represents '0' with '1796'
c Var 'aux129' order represents '1' with '1797'
-1796 1797 0
c Var 'aux129' direct represents '1' with '1798'
1796 -1797 1798 0
-1798 1797 0
-1798 -1796 0
c Var 'aux129' direct represents '2' with '-1797'
1796 1798 -1797 0
c Encoding variable: aux130 with domain: int(0..2) (representing constraint ((grid_00004_00001=3) + (3=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux130' order represents '0' with '1799'
c Var 'aux130' direct represents '0' with '1799'
c Var 'aux130' order represents '1' with '1800'
-1799 1800 0
c Var 'aux130' direct represents '1' with '1801'
1799 -1800 1801 0
-1801 1800 0
-1801 -1799 0
c Var 'aux130' direct represents '2' with '-1800'
1799 1801 -1800 0
c Encoding variable: aux131 with domain: int(0..2) (representing constraint ((grid_00004_00000=3) + (3=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux131' order represents '0' with '1802'
c Var 'aux131' direct represents '0' with '1802'
c Var 'aux131' order represents '1' with '1803'
-1802 1803 0
c Var 'aux131' direct represents '1' with '1804'
1802 -1803 1804 0
-1804 1803 0
-1804 -1802 0
c Var 'aux131' direct represents '2' with '-1803'
1802 1804 -1803 0
c Encoding variable: aux132 with domain: int(0..2) (representing constraint ((3=grid_00002_00006) + (3=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux132' order represents '0' with '1805'
c Var 'aux132' direct represents '0' with '1805'
c Var 'aux132' order represents '1' with '1806'
-1805 1806 0
c Var 'aux132' direct represents '1' with '1807'
1805 -1806 1807 0
-1807 1806 0
-1807 -1805 0
c Var 'aux132' direct represents '2' with '-1806'
1805 1807 -1806 0
c Encoding variable: aux133 with domain: int(0..2) (representing constraint ((3=grid_00002_00005) + (3=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux133' order represents '0' with '1808'
c Var 'aux133' direct represents '0' with '1808'
c Var 'aux133' order represents '1' with '1809'
-1808 1809 0
c Var 'aux133' direct represents '1' with '1810'
1808 -1809 1810 0
-1810 1809 0
-1810 -1808 0
c Var 'aux133' direct represents '2' with '-1809'
1808 1810 -1809 0
c Encoding variable: aux134 with domain: int(0..2) (representing constraint ((3=grid_00002_00004) + (3=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux134' order represents '0' with '1811'
c Var 'aux134' direct represents '0' with '1811'
c Var 'aux134' order represents '1' with '1812'
-1811 1812 0
c Var 'aux134' direct represents '1' with '1813'
1811 -1812 1813 0
-1813 1812 0
-1813 -1811 0
c Var 'aux134' direct represents '2' with '-1812'
1811 1813 -1812 0
c Encoding variable: aux135 with domain: int(0..2) (representing constraint ((3=grid_00002_00003) + (3=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux135' order represents '0' with '1814'
c Var 'aux135' direct represents '0' with '1814'
c Var 'aux135' order represents '1' with '1815'
-1814 1815 0
c Var 'aux135' direct represents '1' with '1816'
1814 -1815 1816 0
-1816 1815 0
-1816 -1814 0
c Var 'aux135' direct represents '2' with '-1815'
1814 1816 -1815 0
c Encoding variable: aux136 with domain: int(0..2) (representing constraint ((grid_00003_00002=3) + (3=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux136' order represents '0' with '1817'
c Var 'aux136' direct represents '0' with '1817'
c Var 'aux136' order represents '1' with '1818'
-1817 1818 0
c Var 'aux136' direct represents '1' with '1819'
1817 -1818 1819 0
-1819 1818 0
-1819 -1817 0
c Var 'aux136' direct represents '2' with '-1818'
1817 1819 -1818 0
c Encoding variable: aux137 with domain: int(0..2) (representing constraint ((3=grid_00001_00005) + (grid_00003_00003=3)))
c Both direct and order encoding.
c Var 'aux137' order represents '0' with '1820'
c Var 'aux137' direct represents '0' with '1820'
c Var 'aux137' order represents '1' with '1821'
-1820 1821 0
c Var 'aux137' direct represents '1' with '1822'
1820 -1821 1822 0
-1822 1821 0
-1822 -1820 0
c Var 'aux137' direct represents '2' with '-1821'
1820 1822 -1821 0
c Encoding variable: aux138 with domain: int(0..2) (representing constraint ((3=grid_00006_00000) + (3=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux138' order represents '0' with '1823'
c Var 'aux138' direct represents '0' with '1823'
c Var 'aux138' order represents '1' with '1824'
-1823 1824 0
c Var 'aux138' direct represents '1' with '1825'
1823 -1824 1825 0
-1825 1824 0
-1825 -1823 0
c Var 'aux138' direct represents '2' with '-1824'
1823 1825 -1824 0
c Encoding variable: aux139 with domain: int(0..4) (representing constraint (aux126 + aux138))
c Both direct and order encoding.
c Var 'aux139' order represents '0' with '1826'
c Var 'aux139' direct represents '0' with '1826'
c Var 'aux139' order represents '1' with '1827'
-1826 1827 0
c Var 'aux139' direct represents '1' with '1828'
1826 -1827 1828 0
-1828 1827 0
-1828 -1826 0
c Var 'aux139' order represents '2' with '1829'
-1827 1829 0
c Var 'aux139' direct represents '2' with '1830'
1827 -1829 1830 0
-1830 1829 0
-1830 -1827 0
c Var 'aux139' order represents '3' with '1831'
-1829 1831 0
c Var 'aux139' direct represents '3' with '1832'
1829 -1831 1832 0
-1832 1831 0
-1832 -1829 0
c Var 'aux139' direct represents '4' with '-1831'
1826 1828 1830 1832 -1831 0
c Encoding variable: aux140 with domain: int(0..4) (representing constraint (aux120 + aux133))
c Both direct and order encoding.
c Var 'aux140' order represents '0' with '1833'
c Var 'aux140' direct represents '0' with '1833'
c Var 'aux140' order represents '1' with '1834'
-1833 1834 0
c Var 'aux140' direct represents '1' with '1835'
1833 -1834 1835 0
-1835 1834 0
-1835 -1833 0
c Var 'aux140' order represents '2' with '1836'
-1834 1836 0
c Var 'aux140' direct represents '2' with '1837'
1834 -1836 1837 0
-1837 1836 0
-1837 -1834 0
c Var 'aux140' order represents '3' with '1838'
-1836 1838 0
c Var 'aux140' direct represents '3' with '1839'
1836 -1838 1839 0
-1839 1838 0
-1839 -1836 0
c Var 'aux140' direct represents '4' with '-1838'
1833 1835 1837 1839 -1838 0
c Encoding variable: aux141 with domain: int(0..4) (representing constraint (aux124 + aux119))
c Both direct and order encoding.
c Var 'aux141' order represents '0' with '1840'
c Var 'aux141' direct represents '0' with '1840'
c Var 'aux141' order represents '1' with '1841'
-1840 1841 0
c Var 'aux141' direct represents '1' with '1842'
1840 -1841 1842 0
-1842 1841 0
-1842 -1840 0
c Var 'aux141' order represents '2' with '1843'
-1841 1843 0
c Var 'aux141' direct represents '2' with '1844'
1841 -1843 1844 0
-1844 1843 0
-1844 -1841 0
c Var 'aux141' order represents '3' with '1845'
-1843 1845 0
c Var 'aux141' direct represents '3' with '1846'
1843 -1845 1846 0
-1846 1845 0
-1846 -1843 0
c Var 'aux141' direct represents '4' with '-1845'
1840 1842 1844 1846 -1845 0
c Encoding variable: aux142 with domain: int(0..4) (representing constraint (aux122 + aux121))
c Both direct and order encoding.
c Var 'aux142' order represents '0' with '1847'
c Var 'aux142' direct represents '0' with '1847'
c Var 'aux142' order represents '1' with '1848'
-1847 1848 0
c Var 'aux142' direct represents '1' with '1849'
1847 -1848 1849 0
-1849 1848 0
-1849 -1847 0
c Var 'aux142' order represents '2' with '1850'
-1848 1850 0
c Var 'aux142' direct represents '2' with '1851'
1848 -1850 1851 0
-1851 1850 0
-1851 -1848 0
c Var 'aux142' order represents '3' with '1852'
-1850 1852 0
c Var 'aux142' direct represents '3' with '1853'
1850 -1852 1853 0
-1853 1852 0
-1853 -1850 0
c Var 'aux142' direct represents '4' with '-1852'
1847 1849 1851 1853 -1852 0
c Encoding variable: aux143 with domain: int(0..4) (representing constraint (aux123 + aux125))
c Both direct and order encoding.
c Var 'aux143' order represents '0' with '1854'
c Var 'aux143' direct represents '0' with '1854'
c Var 'aux143' order represents '1' with '1855'
-1854 1855 0
c Var 'aux143' direct represents '1' with '1856'
1854 -1855 1856 0
-1856 1855 0
-1856 -1854 0
c Var 'aux143' order represents '2' with '1857'
-1855 1857 0
c Var 'aux143' direct represents '2' with '1858'
1855 -1857 1858 0
-1858 1857 0
-1858 -1855 0
c Var 'aux143' order represents '3' with '1859'
-1857 1859 0
c Var 'aux143' direct represents '3' with '1860'
1857 -1859 1860 0
-1860 1859 0
-1860 -1857 0
c Var 'aux143' direct represents '4' with '-1859'
1854 1856 1858 1860 -1859 0
c Encoding variable: aux144 with domain: int(0..4) (representing constraint (aux136 + aux132))
c Both direct and order encoding.
c Var 'aux144' order represents '0' with '1861'
c Var 'aux144' direct represents '0' with '1861'
c Var 'aux144' order represents '1' with '1862'
-1861 1862 0
c Var 'aux144' direct represents '1' with '1863'
1861 -1862 1863 0
-1863 1862 0
-1863 -1861 0
c Var 'aux144' order represents '2' with '1864'
-1862 1864 0
c Var 'aux144' direct represents '2' with '1865'
1862 -1864 1865 0
-1865 1864 0
-1865 -1862 0
c Var 'aux144' order represents '3' with '1866'
-1864 1866 0
c Var 'aux144' direct represents '3' with '1867'
1864 -1866 1867 0
-1867 1866 0
-1867 -1864 0
c Var 'aux144' direct represents '4' with '-1866'
1861 1863 1865 1867 -1866 0
c Encoding variable: aux145 with domain: int(0..4) (representing constraint (aux129 + aux128))
c Both direct and order encoding.
c Var 'aux145' order represents '0' with '1868'
c Var 'aux145' direct represents '0' with '1868'
c Var 'aux145' order represents '1' with '1869'
-1868 1869 0
c Var 'aux145' direct represents '1' with '1870'
1868 -1869 1870 0
-1870 1869 0
-1870 -1868 0
c Var 'aux145' order represents '2' with '1871'
-1869 1871 0
c Var 'aux145' direct represents '2' with '1872'
1869 -1871 1872 0
-1872 1871 0
-1872 -1869 0
c Var 'aux145' order represents '3' with '1873'
-1871 1873 0
c Var 'aux145' direct represents '3' with '1874'
1871 -1873 1874 0
-1874 1873 0
-1874 -1871 0
c Var 'aux145' direct represents '4' with '-1873'
1868 1870 1872 1874 -1873 0
c Encoding variable: aux146 with domain: int(0..4) (representing constraint (aux130 + aux131))
c Both direct and order encoding.
c Var 'aux146' order represents '0' with '1875'
c Var 'aux146' direct represents '0' with '1875'
c Var 'aux146' order represents '1' with '1876'
-1875 1876 0
c Var 'aux146' direct represents '1' with '1877'
1875 -1876 1877 0
-1877 1876 0
-1877 -1875 0
c Var 'aux146' order represents '2' with '1878'
-1876 1878 0
c Var 'aux146' direct represents '2' with '1879'
1876 -1878 1879 0
-1879 1878 0
-1879 -1876 0
c Var 'aux146' order represents '3' with '1880'
-1878 1880 0
c Var 'aux146' direct represents '3' with '1881'
1878 -1880 1881 0
-1881 1880 0
-1881 -1878 0
c Var 'aux146' direct represents '4' with '-1880'
1875 1877 1879 1881 -1880 0
c Encoding variable: aux147 with domain: int(0..4) (representing constraint (aux134 + aux137))
c Both direct and order encoding.
c Var 'aux147' order represents '0' with '1882'
c Var 'aux147' direct represents '0' with '1882'
c Var 'aux147' order represents '1' with '1883'
-1882 1883 0
c Var 'aux147' direct represents '1' with '1884'
1882 -1883 1884 0
-1884 1883 0
-1884 -1882 0
c Var 'aux147' order represents '2' with '1885'
-1883 1885 0
c Var 'aux147' direct represents '2' with '1886'
1883 -1885 1886 0
-1886 1885 0
-1886 -1883 0
c Var 'aux147' order represents '3' with '1887'
-1885 1887 0
c Var 'aux147' direct represents '3' with '1888'
1885 -1887 1888 0
-1888 1887 0
-1888 -1885 0
c Var 'aux147' direct represents '4' with '-1887'
1882 1884 1886 1888 -1887 0
c Encoding variable: aux148 with domain: int(0..4) (representing constraint (aux135 + aux127))
c Both direct and order encoding.
c Var 'aux148' order represents '0' with '1889'
c Var 'aux148' direct represents '0' with '1889'
c Var 'aux148' order represents '1' with '1890'
-1889 1890 0
c Var 'aux148' direct represents '1' with '1891'
1889 -1890 1891 0
-1891 1890 0
-1891 -1889 0
c Var 'aux148' order represents '2' with '1892'
-1890 1892 0
c Var 'aux148' direct represents '2' with '1893'
1890 -1892 1893 0
-1893 1892 0
-1893 -1890 0
c Var 'aux148' order represents '3' with '1894'
-1892 1894 0
c Var 'aux148' direct represents '3' with '1895'
1892 -1894 1895 0
-1895 1894 0
-1895 -1892 0
c Var 'aux148' direct represents '4' with '-1894'
1889 1891 1893 1895 -1894 0
c Encoding variable: aux149 with domain: int(0..8) (representing constraint (aux142 + aux148))
c Both direct and order encoding.
c Var 'aux149' order represents '0' with '1896'
c Var 'aux149' direct represents '0' with '1896'
c Var 'aux149' order represents '1' with '1897'
-1896 1897 0
c Var 'aux149' direct represents '1' with '1898'
1896 -1897 1898 0
-1898 1897 0
-1898 -1896 0
c Var 'aux149' order represents '2' with '1899'
-1897 1899 0
c Var 'aux149' direct represents '2' with '1900'
1897 -1899 1900 0
-1900 1899 0
-1900 -1897 0
c Var 'aux149' order represents '3' with '1901'
-1899 1901 0
c Var 'aux149' direct represents '3' with '1902'
1899 -1901 1902 0
-1902 1901 0
-1902 -1899 0
c Var 'aux149' order represents '4' with '1903'
-1901 1903 0
c Var 'aux149' direct represents '4' with '1904'
1901 -1903 1904 0
-1904 1903 0
-1904 -1901 0
c Var 'aux149' order represents '5' with '1905'
-1903 1905 0
c Var 'aux149' direct represents '5' with '1906'
1903 -1905 1906 0
-1906 1905 0
-1906 -1903 0
c Var 'aux149' order represents '6' with '1907'
-1905 1907 0
c Var 'aux149' direct represents '6' with '1908'
1905 -1907 1908 0
-1908 1907 0
-1908 -1905 0
c Var 'aux149' order represents '7' with '1909'
-1907 1909 0
c Var 'aux149' direct represents '7' with '1910'
1907 -1909 1910 0
-1910 1909 0
-1910 -1907 0
c Var 'aux149' direct represents '8' with '-1909'
1896 1898 1900 1902 1904 1906 1908 1910 -1909 0
c Encoding variable: aux150 with domain: int(0..8) (representing constraint (aux141 + aux145))
c Both direct and order encoding.
c Var 'aux150' order represents '0' with '1911'
c Var 'aux150' direct represents '0' with '1911'
c Var 'aux150' order represents '1' with '1912'
-1911 1912 0
c Var 'aux150' direct represents '1' with '1913'
1911 -1912 1913 0
-1913 1912 0
-1913 -1911 0
c Var 'aux150' order represents '2' with '1914'
-1912 1914 0
c Var 'aux150' direct represents '2' with '1915'
1912 -1914 1915 0
-1915 1914 0
-1915 -1912 0
c Var 'aux150' order represents '3' with '1916'
-1914 1916 0
c Var 'aux150' direct represents '3' with '1917'
1914 -1916 1917 0
-1917 1916 0
-1917 -1914 0
c Var 'aux150' order represents '4' with '1918'
-1916 1918 0
c Var 'aux150' direct represents '4' with '1919'
1916 -1918 1919 0
-1919 1918 0
-1919 -1916 0
c Var 'aux150' order represents '5' with '1920'
-1918 1920 0
c Var 'aux150' direct represents '5' with '1921'
1918 -1920 1921 0
-1921 1920 0
-1921 -1918 0
c Var 'aux150' order represents '6' with '1922'
-1920 1922 0
c Var 'aux150' direct represents '6' with '1923'
1920 -1922 1923 0
-1923 1922 0
-1923 -1920 0
c Var 'aux150' order represents '7' with '1924'
-1922 1924 0
c Var 'aux150' direct represents '7' with '1925'
1922 -1924 1925 0
-1925 1924 0
-1925 -1922 0
c Var 'aux150' direct represents '8' with '-1924'
1911 1913 1915 1917 1919 1921 1923 1925 -1924 0
c Encoding variable: aux151 with domain: int(0..8) (representing constraint (aux139 + aux140))
c Both direct and order encoding.
c Var 'aux151' order represents '0' with '1926'
c Var 'aux151' direct represents '0' with '1926'
c Var 'aux151' order represents '1' with '1927'
-1926 1927 0
c Var 'aux151' direct represents '1' with '1928'
1926 -1927 1928 0
-1928 1927 0
-1928 -1926 0
c Var 'aux151' order represents '2' with '1929'
-1927 1929 0
c Var 'aux151' direct represents '2' with '1930'
1927 -1929 1930 0
-1930 1929 0
-1930 -1927 0
c Var 'aux151' order represents '3' with '1931'
-1929 1931 0
c Var 'aux151' direct represents '3' with '1932'
1929 -1931 1932 0
-1932 1931 0
-1932 -1929 0
c Var 'aux151' order represents '4' with '1933'
-1931 1933 0
c Var 'aux151' direct represents '4' with '1934'
1931 -1933 1934 0
-1934 1933 0
-1934 -1931 0
c Var 'aux151' order represents '5' with '1935'
-1933 1935 0
c Var 'aux151' direct represents '5' with '1936'
1933 -1935 1936 0
-1936 1935 0
-1936 -1933 0
c Var 'aux151' order represents '6' with '1937'
-1935 1937 0
c Var 'aux151' direct represents '6' with '1938'
1935 -1937 1938 0
-1938 1937 0
-1938 -1935 0
c Var 'aux151' order represents '7' with '1939'
-1937 1939 0
c Var 'aux151' direct represents '7' with '1940'
1937 -1939 1940 0
-1940 1939 0
-1940 -1937 0
c Var 'aux151' direct represents '8' with '-1939'
1926 1928 1930 1932 1934 1936 1938 1940 -1939 0
c Encoding variable: aux152 with domain: int(0..8) (representing constraint (aux143 + aux144))
c Both direct and order encoding.
c Var 'aux152' order represents '0' with '1941'
c Var 'aux152' direct represents '0' with '1941'
c Var 'aux152' order represents '1' with '1942'
-1941 1942 0
c Var 'aux152' direct represents '1' with '1943'
1941 -1942 1943 0
-1943 1942 0
-1943 -1941 0
c Var 'aux152' order represents '2' with '1944'
-1942 1944 0
c Var 'aux152' direct represents '2' with '1945'
1942 -1944 1945 0
-1945 1944 0
-1945 -1942 0
c Var 'aux152' order represents '3' with '1946'
-1944 1946 0
c Var 'aux152' direct represents '3' with '1947'
1944 -1946 1947 0
-1947 1946 0
-1947 -1944 0
c Var 'aux152' order represents '4' with '1948'
-1946 1948 0
c Var 'aux152' direct represents '4' with '1949'
1946 -1948 1949 0
-1949 1948 0
-1949 -1946 0
c Var 'aux152' order represents '5' with '1950'
-1948 1950 0
c Var 'aux152' direct represents '5' with '1951'
1948 -1950 1951 0
-1951 1950 0
-1951 -1948 0
c Var 'aux152' order represents '6' with '1952'
-1950 1952 0
c Var 'aux152' direct represents '6' with '1953'
1950 -1952 1953 0
-1953 1952 0
-1953 -1950 0
c Var 'aux152' order represents '7' with '1954'
-1952 1954 0
c Var 'aux152' direct represents '7' with '1955'
1952 -1954 1955 0
-1955 1954 0
-1955 -1952 0
c Var 'aux152' direct represents '8' with '-1954'
1941 1943 1945 1947 1949 1951 1953 1955 -1954 0
c Encoding variable: aux153 with domain: int(0..8) (representing constraint (aux146 + aux147))
c Both direct and order encoding.
c Var 'aux153' order represents '0' with '1956'
c Var 'aux153' direct represents '0' with '1956'
c Var 'aux153' order represents '1' with '1957'
-1956 1957 0
c Var 'aux153' direct represents '1' with '1958'
1956 -1957 1958 0
-1958 1957 0
-1958 -1956 0
c Var 'aux153' order represents '2' with '1959'
-1957 1959 0
c Var 'aux153' direct represents '2' with '1960'
1957 -1959 1960 0
-1960 1959 0
-1960 -1957 0
c Var 'aux153' order represents '3' with '1961'
-1959 1961 0
c Var 'aux153' direct represents '3' with '1962'
1959 -1961 1962 0
-1962 1961 0
-1962 -1959 0
c Var 'aux153' order represents '4' with '1963'
-1961 1963 0
c Var 'aux153' direct represents '4' with '1964'
1961 -1963 1964 0
-1964 1963 0
-1964 -1961 0
c Var 'aux153' order represents '5' with '1965'
-1963 1965 0
c Var 'aux153' direct represents '5' with '1966'
1963 -1965 1966 0
-1966 1965 0
-1966 -1963 0
c Var 'aux153' order represents '6' with '1967'
-1965 1967 0
c Var 'aux153' direct represents '6' with '1968'
1965 -1967 1968 0
-1968 1967 0
-1968 -1965 0
c Var 'aux153' order represents '7' with '1969'
-1967 1969 0
c Var 'aux153' direct represents '7' with '1970'
1967 -1969 1970 0
-1970 1969 0
-1970 -1967 0
c Var 'aux153' direct represents '8' with '-1969'
1956 1958 1960 1962 1964 1966 1968 1970 -1969 0
c Encoding variable: aux154 with domain: int(0..16) (representing constraint (aux150 + aux153))
c Both direct and order encoding.
c Var 'aux154' order represents '0' with '1971'
c Var 'aux154' direct represents '0' with '1971'
c Var 'aux154' order represents '1' with '1972'
-1971 1972 0
c Var 'aux154' direct represents '1' with '1973'
1971 -1972 1973 0
-1973 1972 0
-1973 -1971 0
c Var 'aux154' order represents '2' with '1974'
-1972 1974 0
c Var 'aux154' direct represents '2' with '1975'
1972 -1974 1975 0
-1975 1974 0
-1975 -1972 0
c Var 'aux154' order represents '3' with '1976'
-1974 1976 0
c Var 'aux154' direct represents '3' with '1977'
1974 -1976 1977 0
-1977 1976 0
-1977 -1974 0
c Var 'aux154' order represents '4' with '1978'
-1976 1978 0
c Var 'aux154' direct represents '4' with '1979'
1976 -1978 1979 0
-1979 1978 0
-1979 -1976 0
c Var 'aux154' order represents '5' with '1980'
-1978 1980 0
c Var 'aux154' direct represents '5' with '1981'
1978 -1980 1981 0
-1981 1980 0
-1981 -1978 0
c Var 'aux154' order represents '6' with '1982'
-1980 1982 0
c Var 'aux154' direct represents '6' with '1983'
1980 -1982 1983 0
-1983 1982 0
-1983 -1980 0
c Var 'aux154' order represents '7' with '1984'
-1982 1984 0
c Var 'aux154' direct represents '7' with '1985'
1982 -1984 1985 0
-1985 1984 0
-1985 -1982 0
c Var 'aux154' order represents '8' with '1986'
-1984 1986 0
c Var 'aux154' direct represents '8' with '1987'
1984 -1986 1987 0
-1987 1986 0
-1987 -1984 0
c Var 'aux154' order represents '9' with '1988'
-1986 1988 0
c Var 'aux154' direct represents '9' with '1989'
1986 -1988 1989 0
-1989 1988 0
-1989 -1986 0
c Var 'aux154' order represents '10' with '1990'
-1988 1990 0
c Var 'aux154' direct represents '10' with '1991'
1988 -1990 1991 0
-1991 1990 0
-1991 -1988 0
c Var 'aux154' order represents '11' with '1992'
-1990 1992 0
c Var 'aux154' direct represents '11' with '1993'
1990 -1992 1993 0
-1993 1992 0
-1993 -1990 0
c Var 'aux154' order represents '12' with '1994'
-1992 1994 0
c Var 'aux154' direct represents '12' with '1995'
1992 -1994 1995 0
-1995 1994 0
-1995 -1992 0
c Var 'aux154' order represents '13' with '1996'
-1994 1996 0
c Var 'aux154' direct represents '13' with '1997'
1994 -1996 1997 0
-1997 1996 0
-1997 -1994 0
c Var 'aux154' order represents '14' with '1998'
-1996 1998 0
c Var 'aux154' direct represents '14' with '1999'
1996 -1998 1999 0
-1999 1998 0
-1999 -1996 0
c Var 'aux154' order represents '15' with '2000'
-1998 2000 0
c Var 'aux154' direct represents '15' with '2001'
1998 -2000 2001 0
-2001 2000 0
-2001 -1998 0
c Var 'aux154' direct represents '16' with '-2000'
1971 1973 1975 1977 1979 1981 1983 1985 1987 1989 1991 1993 1995 1997 1999 2001 -2000 0
c Encoding variable: aux155 with domain: int(0..16) (representing constraint (aux149 + aux151))
c Both direct and order encoding.
c Var 'aux155' order represents '0' with '2002'
c Var 'aux155' direct represents '0' with '2002'
c Var 'aux155' order represents '1' with '2003'
-2002 2003 0
c Var 'aux155' direct represents '1' with '2004'
2002 -2003 2004 0
-2004 2003 0
-2004 -2002 0
c Var 'aux155' order represents '2' with '2005'
-2003 2005 0
c Var 'aux155' direct represents '2' with '2006'
2003 -2005 2006 0
-2006 2005 0
-2006 -2003 0
c Var 'aux155' order represents '3' with '2007'
-2005 2007 0
c Var 'aux155' direct represents '3' with '2008'
2005 -2007 2008 0
-2008 2007 0
-2008 -2005 0
c Var 'aux155' order represents '4' with '2009'
-2007 2009 0
c Var 'aux155' direct represents '4' with '2010'
2007 -2009 2010 0
-2010 2009 0
-2010 -2007 0
c Var 'aux155' order represents '5' with '2011'
-2009 2011 0
c Var 'aux155' direct represents '5' with '2012'
2009 -2011 2012 0
-2012 2011 0
-2012 -2009 0
c Var 'aux155' order represents '6' with '2013'
-2011 2013 0
c Var 'aux155' direct represents '6' with '2014'
2011 -2013 2014 0
-2014 2013 0
-2014 -2011 0
c Var 'aux155' order represents '7' with '2015'
-2013 2015 0
c Var 'aux155' direct represents '7' with '2016'
2013 -2015 2016 0
-2016 2015 0
-2016 -2013 0
c Var 'aux155' order represents '8' with '2017'
-2015 2017 0
c Var 'aux155' direct represents '8' with '2018'
2015 -2017 2018 0
-2018 2017 0
-2018 -2015 0
c Var 'aux155' order represents '9' with '2019'
-2017 2019 0
c Var 'aux155' direct represents '9' with '2020'
2017 -2019 2020 0
-2020 2019 0
-2020 -2017 0
c Var 'aux155' order represents '10' with '2021'
-2019 2021 0
c Var 'aux155' direct represents '10' with '2022'
2019 -2021 2022 0
-2022 2021 0
-2022 -2019 0
c Var 'aux155' order represents '11' with '2023'
-2021 2023 0
c Var 'aux155' direct represents '11' with '2024'
2021 -2023 2024 0
-2024 2023 0
-2024 -2021 0
c Var 'aux155' order represents '12' with '2025'
-2023 2025 0
c Var 'aux155' direct represents '12' with '2026'
2023 -2025 2026 0
-2026 2025 0
-2026 -2023 0
c Var 'aux155' order represents '13' with '2027'
-2025 2027 0
c Var 'aux155' direct represents '13' with '2028'
2025 -2027 2028 0
-2028 2027 0
-2028 -2025 0
c Var 'aux155' order represents '14' with '2029'
-2027 2029 0
c Var 'aux155' direct represents '14' with '2030'
2027 -2029 2030 0
-2030 2029 0
-2030 -2027 0
c Var 'aux155' order represents '15' with '2031'
-2029 2031 0
c Var 'aux155' direct represents '15' with '2032'
2029 -2031 2032 0
-2032 2031 0
-2032 -2029 0
c Var 'aux155' direct represents '16' with '-2031'
2002 2004 2006 2008 2010 2012 2014 2016 2018 2020 2022 2024 2026 2028 2030 2032 -2031 0
c Encoding variable: aux156 with domain: int(0..2) (representing constraint ((4=grid_00005_00000) + (grid_00000_00006=4)))
c Both direct and order encoding.
c Var 'aux156' order represents '0' with '2033'
c Var 'aux156' direct represents '0' with '2033'
c Var 'aux156' order represents '1' with '2034'
-2033 2034 0
c Var 'aux156' direct represents '1' with '2035'
2033 -2034 2035 0
-2035 2034 0
-2035 -2033 0
c Var 'aux156' direct represents '2' with '-2034'
2033 2035 -2034 0
c Encoding variable: aux157 with domain: int(0..2) (representing constraint ((grid_00000_00005=4) + (4=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux157' order represents '0' with '2036'
c Var 'aux157' direct represents '0' with '2036'
c Var 'aux157' order represents '1' with '2037'
-2036 2037 0
c Var 'aux157' direct represents '1' with '2038'
2036 -2037 2038 0
-2038 2037 0
-2038 -2036 0
c Var 'aux157' direct represents '2' with '-2037'
2036 2038 -2037 0
c Encoding variable: aux158 with domain: int(0..2) (representing constraint ((grid_00000_00004=4) + (4=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux158' order represents '0' with '2039'
c Var 'aux158' direct represents '0' with '2039'
c Var 'aux158' order represents '1' with '2040'
-2039 2040 0
c Var 'aux158' direct represents '1' with '2041'
2039 -2040 2041 0
-2041 2040 0
-2041 -2039 0
c Var 'aux158' direct represents '2' with '-2040'
2039 2041 -2040 0
c Encoding variable: aux159 with domain: int(0..2) (representing constraint ((grid_00000_00003=4) + (grid_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux159' order represents '0' with '2042'
c Var 'aux159' direct represents '0' with '2042'
c Var 'aux159' order represents '1' with '2043'
-2042 2043 0
c Var 'aux159' direct represents '1' with '2044'
2042 -2043 2044 0
-2044 2043 0
-2044 -2042 0
c Var 'aux159' direct represents '2' with '-2043'
2042 2044 -2043 0
c Encoding variable: aux160 with domain: int(0..2) (representing constraint ((grid_00000_00002=4) + (4=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux160' order represents '0' with '2045'
c Var 'aux160' direct represents '0' with '2045'
c Var 'aux160' order represents '1' with '2046'
-2045 2046 0
c Var 'aux160' direct represents '1' with '2047'
2045 -2046 2047 0
-2047 2046 0
-2047 -2045 0
c Var 'aux160' direct represents '2' with '-2046'
2045 2047 -2046 0
c Encoding variable: aux161 with domain: int(0..2) (representing constraint ((grid_00000_00001=4) + (grid_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux161' order represents '0' with '2048'
c Var 'aux161' direct represents '0' with '2048'
c Var 'aux161' order represents '1' with '2049'
-2048 2049 0
c Var 'aux161' direct represents '1' with '2050'
2048 -2049 2050 0
-2050 2049 0
-2050 -2048 0
c Var 'aux161' direct represents '2' with '-2049'
2048 2050 -2049 0
c Encoding variable: aux162 with domain: int(0..2) (representing constraint ((grid_00004_00005=4) + (4=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux162' order represents '0' with '2051'
c Var 'aux162' direct represents '0' with '2051'
c Var 'aux162' order represents '1' with '2052'
-2051 2052 0
c Var 'aux162' direct represents '1' with '2053'
2051 -2052 2053 0
-2053 2052 0
-2053 -2051 0
c Var 'aux162' direct represents '2' with '-2052'
2051 2053 -2052 0
c Encoding variable: aux163 with domain: int(0..2) (representing constraint ((grid_00004_00006=4) + (grid_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux163' order represents '0' with '2054'
c Var 'aux163' direct represents '0' with '2054'
c Var 'aux163' order represents '1' with '2055'
-2054 2055 0
c Var 'aux163' direct represents '1' with '2056'
2054 -2055 2056 0
-2056 2055 0
-2056 -2054 0
c Var 'aux163' direct represents '2' with '-2055'
2054 2056 -2055 0
c Encoding variable: aux164 with domain: int(0..2) (representing constraint ((4=grid_00006_00004) + (4=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux164' order represents '0' with '2057'
c Var 'aux164' direct represents '0' with '2057'
c Var 'aux164' order represents '1' with '2058'
-2057 2058 0
c Var 'aux164' direct represents '1' with '2059'
2057 -2058 2059 0
-2059 2058 0
-2059 -2057 0
c Var 'aux164' direct represents '2' with '-2058'
2057 2059 -2058 0
c Encoding variable: aux165 with domain: int(0..2) (representing constraint ((grid_00004_00003=4) + (grid_00003_00000=4)))
c Both direct and order encoding.
c Var 'aux165' order represents '0' with '2060'
c Var 'aux165' direct represents '0' with '2060'
c Var 'aux165' order represents '1' with '2061'
-2060 2061 0
c Var 'aux165' direct represents '1' with '2062'
2060 -2061 2062 0
-2062 2061 0
-2062 -2060 0
c Var 'aux165' direct represents '2' with '-2061'
2060 2062 -2061 0
c Encoding variable: aux166 with domain: int(0..2) (representing constraint ((grid_00004_00002=4) + (4=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux166' order represents '0' with '2063'
c Var 'aux166' direct represents '0' with '2063'
c Var 'aux166' order represents '1' with '2064'
-2063 2064 0
c Var 'aux166' direct represents '1' with '2065'
2063 -2064 2065 0
-2065 2064 0
-2065 -2063 0
c Var 'aux166' direct represents '2' with '-2064'
2063 2065 -2064 0
c Encoding variable: aux167 with domain: int(0..2) (representing constraint ((grid_00004_00001=4) + (4=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux167' order represents '0' with '2066'
c Var 'aux167' direct represents '0' with '2066'
c Var 'aux167' order represents '1' with '2067'
-2066 2067 0
c Var 'aux167' direct represents '1' with '2068'
2066 -2067 2068 0
-2068 2067 0
-2068 -2066 0
c Var 'aux167' direct represents '2' with '-2067'
2066 2068 -2067 0
c Encoding variable: aux168 with domain: int(0..2) (representing constraint ((grid_00004_00000=4) + (4=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux168' order represents '0' with '2069'
c Var 'aux168' direct represents '0' with '2069'
c Var 'aux168' order represents '1' with '2070'
-2069 2070 0
c Var 'aux168' direct represents '1' with '2071'
2069 -2070 2071 0
-2071 2070 0
-2071 -2069 0
c Var 'aux168' direct represents '2' with '-2070'
2069 2071 -2070 0
c Encoding variable: aux169 with domain: int(0..2) (representing constraint ((4=grid_00002_00006) + (4=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux169' order represents '0' with '2072'
c Var 'aux169' direct represents '0' with '2072'
c Var 'aux169' order represents '1' with '2073'
-2072 2073 0
c Var 'aux169' direct represents '1' with '2074'
2072 -2073 2074 0
-2074 2073 0
-2074 -2072 0
c Var 'aux169' direct represents '2' with '-2073'
2072 2074 -2073 0
c Encoding variable: aux170 with domain: int(0..2) (representing constraint ((4=grid_00002_00005) + (4=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux170' order represents '0' with '2075'
c Var 'aux170' direct represents '0' with '2075'
c Var 'aux170' order represents '1' with '2076'
-2075 2076 0
c Var 'aux170' direct represents '1' with '2077'
2075 -2076 2077 0
-2077 2076 0
-2077 -2075 0
c Var 'aux170' direct represents '2' with '-2076'
2075 2077 -2076 0
c Encoding variable: aux171 with domain: int(0..2) (representing constraint ((4=grid_00002_00004) + (4=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux171' order represents '0' with '2078'
c Var 'aux171' direct represents '0' with '2078'
c Var 'aux171' order represents '1' with '2079'
-2078 2079 0
c Var 'aux171' direct represents '1' with '2080'
2078 -2079 2080 0
-2080 2079 0
-2080 -2078 0
c Var 'aux171' direct represents '2' with '-2079'
2078 2080 -2079 0
c Encoding variable: aux172 with domain: int(0..2) (representing constraint ((4=grid_00002_00003) + (4=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux172' order represents '0' with '2081'
c Var 'aux172' direct represents '0' with '2081'
c Var 'aux172' order represents '1' with '2082'
-2081 2082 0
c Var 'aux172' direct represents '1' with '2083'
2081 -2082 2083 0
-2083 2082 0
-2083 -2081 0
c Var 'aux172' direct represents '2' with '-2082'
2081 2083 -2082 0
c Encoding variable: aux173 with domain: int(0..2) (representing constraint ((grid_00003_00002=4) + (4=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux173' order represents '0' with '2084'
c Var 'aux173' direct represents '0' with '2084'
c Var 'aux173' order represents '1' with '2085'
-2084 2085 0
c Var 'aux173' direct represents '1' with '2086'
2084 -2085 2086 0
-2086 2085 0
-2086 -2084 0
c Var 'aux173' direct represents '2' with '-2085'
2084 2086 -2085 0
c Encoding variable: aux174 with domain: int(0..2) (representing constraint ((4=grid_00001_00005) + (grid_00003_00003=4)))
c Both direct and order encoding.
c Var 'aux174' order represents '0' with '2087'
c Var 'aux174' direct represents '0' with '2087'
c Var 'aux174' order represents '1' with '2088'
-2087 2088 0
c Var 'aux174' direct represents '1' with '2089'
2087 -2088 2089 0
-2089 2088 0
-2089 -2087 0
c Var 'aux174' direct represents '2' with '-2088'
2087 2089 -2088 0
c Encoding variable: aux175 with domain: int(0..2) (representing constraint ((4=grid_00006_00000) + (4=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux175' order represents '0' with '2090'
c Var 'aux175' direct represents '0' with '2090'
c Var 'aux175' order represents '1' with '2091'
-2090 2091 0
c Var 'aux175' direct represents '1' with '2092'
2090 -2091 2092 0
-2092 2091 0
-2092 -2090 0
c Var 'aux175' direct represents '2' with '-2091'
2090 2092 -2091 0
c Encoding variable: aux176 with domain: int(0..4) (representing constraint (aux163 + aux175))
c Both direct and order encoding.
c Var 'aux176' order represents '0' with '2093'
c Var 'aux176' direct represents '0' with '2093'
c Var 'aux176' order represents '1' with '2094'
-2093 2094 0
c Var 'aux176' direct represents '1' with '2095'
2093 -2094 2095 0
-2095 2094 0
-2095 -2093 0
c Var 'aux176' order represents '2' with '2096'
-2094 2096 0
c Var 'aux176' direct represents '2' with '2097'
2094 -2096 2097 0
-2097 2096 0
-2097 -2094 0
c Var 'aux176' order represents '3' with '2098'
-2096 2098 0
c Var 'aux176' direct represents '3' with '2099'
2096 -2098 2099 0
-2099 2098 0
-2099 -2096 0
c Var 'aux176' direct represents '4' with '-2098'
2093 2095 2097 2099 -2098 0
c Encoding variable: aux177 with domain: int(0..4) (representing constraint (aux157 + aux170))
c Both direct and order encoding.
c Var 'aux177' order represents '0' with '2100'
c Var 'aux177' direct represents '0' with '2100'
c Var 'aux177' order represents '1' with '2101'
-2100 2101 0
c Var 'aux177' direct represents '1' with '2102'
2100 -2101 2102 0
-2102 2101 0
-2102 -2100 0
c Var 'aux177' order represents '2' with '2103'
-2101 2103 0
c Var 'aux177' direct represents '2' with '2104'
2101 -2103 2104 0
-2104 2103 0
-2104 -2101 0
c Var 'aux177' order represents '3' with '2105'
-2103 2105 0
c Var 'aux177' direct represents '3' with '2106'
2103 -2105 2106 0
-2106 2105 0
-2106 -2103 0
c Var 'aux177' direct represents '4' with '-2105'
2100 2102 2104 2106 -2105 0
c Encoding variable: aux178 with domain: int(0..4) (representing constraint (aux161 + aux156))
c Both direct and order encoding.
c Var 'aux178' order represents '0' with '2107'
c Var 'aux178' direct represents '0' with '2107'
c Var 'aux178' order represents '1' with '2108'
-2107 2108 0
c Var 'aux178' direct represents '1' with '2109'
2107 -2108 2109 0
-2109 2108 0
-2109 -2107 0
c Var 'aux178' order represents '2' with '2110'
-2108 2110 0
c Var 'aux178' direct represents '2' with '2111'
2108 -2110 2111 0
-2111 2110 0
-2111 -2108 0
c Var 'aux178' order represents '3' with '2112'
-2110 2112 0
c Var 'aux178' direct represents '3' with '2113'
2110 -2112 2113 0
-2113 2112 0
-2113 -2110 0
c Var 'aux178' direct represents '4' with '-2112'
2107 2109 2111 2113 -2112 0
c Encoding variable: aux179 with domain: int(0..4) (representing constraint (aux159 + aux158))
c Both direct and order encoding.
c Var 'aux179' order represents '0' with '2114'
c Var 'aux179' direct represents '0' with '2114'
c Var 'aux179' order represents '1' with '2115'
-2114 2115 0
c Var 'aux179' direct represents '1' with '2116'
2114 -2115 2116 0
-2116 2115 0
-2116 -2114 0
c Var 'aux179' order represents '2' with '2117'
-2115 2117 0
c Var 'aux179' direct represents '2' with '2118'
2115 -2117 2118 0
-2118 2117 0
-2118 -2115 0
c Var 'aux179' order represents '3' with '2119'
-2117 2119 0
c Var 'aux179' direct represents '3' with '2120'
2117 -2119 2120 0
-2120 2119 0
-2120 -2117 0
c Var 'aux179' direct represents '4' with '-2119'
2114 2116 2118 2120 -2119 0
c Encoding variable: aux180 with domain: int(0..4) (representing constraint (aux160 + aux162))
c Both direct and order encoding.
c Var 'aux180' order represents '0' with '2121'
c Var 'aux180' direct represents '0' with '2121'
c Var 'aux180' order represents '1' with '2122'
-2121 2122 0
c Var 'aux180' direct represents '1' with '2123'
2121 -2122 2123 0
-2123 2122 0
-2123 -2121 0
c Var 'aux180' order represents '2' with '2124'
-2122 2124 0
c Var 'aux180' direct represents '2' with '2125'
2122 -2124 2125 0
-2125 2124 0
-2125 -2122 0
c Var 'aux180' order represents '3' with '2126'
-2124 2126 0
c Var 'aux180' direct represents '3' with '2127'
2124 -2126 2127 0
-2127 2126 0
-2127 -2124 0
c Var 'aux180' direct represents '4' with '-2126'
2121 2123 2125 2127 -2126 0
c Encoding variable: aux181 with domain: int(0..4) (representing constraint (aux173 + aux169))
c Both direct and order encoding.
c Var 'aux181' order represents '0' with '2128'
c Var 'aux181' direct represents '0' with '2128'
c Var 'aux181' order represents '1' with '2129'
-2128 2129 0
c Var 'aux181' direct represents '1' with '2130'
2128 -2129 2130 0
-2130 2129 0
-2130 -2128 0
c Var 'aux181' order represents '2' with '2131'
-2129 2131 0
c Var 'aux181' direct represents '2' with '2132'
2129 -2131 2132 0
-2132 2131 0
-2132 -2129 0
c Var 'aux181' order represents '3' with '2133'
-2131 2133 0
c Var 'aux181' direct represents '3' with '2134'
2131 -2133 2134 0
-2134 2133 0
-2134 -2131 0
c Var 'aux181' direct represents '4' with '-2133'
2128 2130 2132 2134 -2133 0
c Encoding variable: aux182 with domain: int(0..4) (representing constraint (aux166 + aux165))
c Both direct and order encoding.
c Var 'aux182' order represents '0' with '2135'
c Var 'aux182' direct represents '0' with '2135'
c Var 'aux182' order represents '1' with '2136'
-2135 2136 0
c Var 'aux182' direct represents '1' with '2137'
2135 -2136 2137 0
-2137 2136 0
-2137 -2135 0
c Var 'aux182' order represents '2' with '2138'
-2136 2138 0
c Var 'aux182' direct represents '2' with '2139'
2136 -2138 2139 0
-2139 2138 0
-2139 -2136 0
c Var 'aux182' order represents '3' with '2140'
-2138 2140 0
c Var 'aux182' direct represents '3' with '2141'
2138 -2140 2141 0
-2141 2140 0
-2141 -2138 0
c Var 'aux182' direct represents '4' with '-2140'
2135 2137 2139 2141 -2140 0
c Encoding variable: aux183 with domain: int(0..4) (representing constraint (aux167 + aux168))
c Both direct and order encoding.
c Var 'aux183' order represents '0' with '2142'
c Var 'aux183' direct represents '0' with '2142'
c Var 'aux183' order represents '1' with '2143'
-2142 2143 0
c Var 'aux183' direct represents '1' with '2144'
2142 -2143 2144 0
-2144 2143 0
-2144 -2142 0
c Var 'aux183' order represents '2' with '2145'
-2143 2145 0
c Var 'aux183' direct represents '2' with '2146'
2143 -2145 2146 0
-2146 2145 0
-2146 -2143 0
c Var 'aux183' order represents '3' with '2147'
-2145 2147 0
c Var 'aux183' direct represents '3' with '2148'
2145 -2147 2148 0
-2148 2147 0
-2148 -2145 0
c Var 'aux183' direct represents '4' with '-2147'
2142 2144 2146 2148 -2147 0
c Encoding variable: aux184 with domain: int(0..4) (representing constraint (aux171 + aux174))
c Both direct and order encoding.
c Var 'aux184' order represents '0' with '2149'
c Var 'aux184' direct represents '0' with '2149'
c Var 'aux184' order represents '1' with '2150'
-2149 2150 0
c Var 'aux184' direct represents '1' with '2151'
2149 -2150 2151 0
-2151 2150 0
-2151 -2149 0
c Var 'aux184' order represents '2' with '2152'
-2150 2152 0
c Var 'aux184' direct represents '2' with '2153'
2150 -2152 2153 0
-2153 2152 0
-2153 -2150 0
c Var 'aux184' order represents '3' with '2154'
-2152 2154 0
c Var 'aux184' direct represents '3' with '2155'
2152 -2154 2155 0
-2155 2154 0
-2155 -2152 0
c Var 'aux184' direct represents '4' with '-2154'
2149 2151 2153 2155 -2154 0
c Encoding variable: aux185 with domain: int(0..4) (representing constraint (aux172 + aux164))
c Both direct and order encoding.
c Var 'aux185' order represents '0' with '2156'
c Var 'aux185' direct represents '0' with '2156'
c Var 'aux185' order represents '1' with '2157'
-2156 2157 0
c Var 'aux185' direct represents '1' with '2158'
2156 -2157 2158 0
-2158 2157 0
-2158 -2156 0
c Var 'aux185' order represents '2' with '2159'
-2157 2159 0
c Var 'aux185' direct represents '2' with '2160'
2157 -2159 2160 0
-2160 2159 0
-2160 -2157 0
c Var 'aux185' order represents '3' with '2161'
-2159 2161 0
c Var 'aux185' direct represents '3' with '2162'
2159 -2161 2162 0
-2162 2161 0
-2162 -2159 0
c Var 'aux185' direct represents '4' with '-2161'
2156 2158 2160 2162 -2161 0
c Encoding variable: aux186 with domain: int(0..8) (representing constraint (aux179 + aux185))
c Both direct and order encoding.
c Var 'aux186' order represents '0' with '2163'
c Var 'aux186' direct represents '0' with '2163'
c Var 'aux186' order represents '1' with '2164'
-2163 2164 0
c Var 'aux186' direct represents '1' with '2165'
2163 -2164 2165 0
-2165 2164 0
-2165 -2163 0
c Var 'aux186' order represents '2' with '2166'
-2164 2166 0
c Var 'aux186' direct represents '2' with '2167'
2164 -2166 2167 0
-2167 2166 0
-2167 -2164 0
c Var 'aux186' order represents '3' with '2168'
-2166 2168 0
c Var 'aux186' direct represents '3' with '2169'
2166 -2168 2169 0
-2169 2168 0
-2169 -2166 0
c Var 'aux186' order represents '4' with '2170'
-2168 2170 0
c Var 'aux186' direct represents '4' with '2171'
2168 -2170 2171 0
-2171 2170 0
-2171 -2168 0
c Var 'aux186' order represents '5' with '2172'
-2170 2172 0
c Var 'aux186' direct represents '5' with '2173'
2170 -2172 2173 0
-2173 2172 0
-2173 -2170 0
c Var 'aux186' order represents '6' with '2174'
-2172 2174 0
c Var 'aux186' direct represents '6' with '2175'
2172 -2174 2175 0
-2175 2174 0
-2175 -2172 0
c Var 'aux186' order represents '7' with '2176'
-2174 2176 0
c Var 'aux186' direct represents '7' with '2177'
2174 -2176 2177 0
-2177 2176 0
-2177 -2174 0
c Var 'aux186' direct represents '8' with '-2176'
2163 2165 2167 2169 2171 2173 2175 2177 -2176 0
c Encoding variable: aux187 with domain: int(0..8) (representing constraint (aux178 + aux182))
c Both direct and order encoding.
c Var 'aux187' order represents '0' with '2178'
c Var 'aux187' direct represents '0' with '2178'
c Var 'aux187' order represents '1' with '2179'
-2178 2179 0
c Var 'aux187' direct represents '1' with '2180'
2178 -2179 2180 0
-2180 2179 0
-2180 -2178 0
c Var 'aux187' order represents '2' with '2181'
-2179 2181 0
c Var 'aux187' direct represents '2' with '2182'
2179 -2181 2182 0
-2182 2181 0
-2182 -2179 0
c Var 'aux187' order represents '3' with '2183'
-2181 2183 0
c Var 'aux187' direct represents '3' with '2184'
2181 -2183 2184 0
-2184 2183 0
-2184 -2181 0
c Var 'aux187' order represents '4' with '2185'
-2183 2185 0
c Var 'aux187' direct represents '4' with '2186'
2183 -2185 2186 0
-2186 2185 0
-2186 -2183 0
c Var 'aux187' order represents '5' with '2187'
-2185 2187 0
c Var 'aux187' direct represents '5' with '2188'
2185 -2187 2188 0
-2188 2187 0
-2188 -2185 0
c Var 'aux187' order represents '6' with '2189'
-2187 2189 0
c Var 'aux187' direct represents '6' with '2190'
2187 -2189 2190 0
-2190 2189 0
-2190 -2187 0
c Var 'aux187' order represents '7' with '2191'
-2189 2191 0
c Var 'aux187' direct represents '7' with '2192'
2189 -2191 2192 0
-2192 2191 0
-2192 -2189 0
c Var 'aux187' direct represents '8' with '-2191'
2178 2180 2182 2184 2186 2188 2190 2192 -2191 0
c Encoding variable: aux188 with domain: int(0..8) (representing constraint (aux176 + aux177))
c Both direct and order encoding.
c Var 'aux188' order represents '0' with '2193'
c Var 'aux188' direct represents '0' with '2193'
c Var 'aux188' order represents '1' with '2194'
-2193 2194 0
c Var 'aux188' direct represents '1' with '2195'
2193 -2194 2195 0
-2195 2194 0
-2195 -2193 0
c Var 'aux188' order represents '2' with '2196'
-2194 2196 0
c Var 'aux188' direct represents '2' with '2197'
2194 -2196 2197 0
-2197 2196 0
-2197 -2194 0
c Var 'aux188' order represents '3' with '2198'
-2196 2198 0
c Var 'aux188' direct represents '3' with '2199'
2196 -2198 2199 0
-2199 2198 0
-2199 -2196 0
c Var 'aux188' order represents '4' with '2200'
-2198 2200 0
c Var 'aux188' direct represents '4' with '2201'
2198 -2200 2201 0
-2201 2200 0
-2201 -2198 0
c Var 'aux188' order represents '5' with '2202'
-2200 2202 0
c Var 'aux188' direct represents '5' with '2203'
2200 -2202 2203 0
-2203 2202 0
-2203 -2200 0
c Var 'aux188' order represents '6' with '2204'
-2202 2204 0
c Var 'aux188' direct represents '6' with '2205'
2202 -2204 2205 0
-2205 2204 0
-2205 -2202 0
c Var 'aux188' order represents '7' with '2206'
-2204 2206 0
c Var 'aux188' direct represents '7' with '2207'
2204 -2206 2207 0
-2207 2206 0
-2207 -2204 0
c Var 'aux188' direct represents '8' with '-2206'
2193 2195 2197 2199 2201 2203 2205 2207 -2206 0
c Encoding variable: aux189 with domain: int(0..8) (representing constraint (aux180 + aux181))
c Both direct and order encoding.
c Var 'aux189' order represents '0' with '2208'
c Var 'aux189' direct represents '0' with '2208'
c Var 'aux189' order represents '1' with '2209'
-2208 2209 0
c Var 'aux189' direct represents '1' with '2210'
2208 -2209 2210 0
-2210 2209 0
-2210 -2208 0
c Var 'aux189' order represents '2' with '2211'
-2209 2211 0
c Var 'aux189' direct represents '2' with '2212'
2209 -2211 2212 0
-2212 2211 0
-2212 -2209 0
c Var 'aux189' order represents '3' with '2213'
-2211 2213 0
c Var 'aux189' direct represents '3' with '2214'
2211 -2213 2214 0
-2214 2213 0
-2214 -2211 0
c Var 'aux189' order represents '4' with '2215'
-2213 2215 0
c Var 'aux189' direct represents '4' with '2216'
2213 -2215 2216 0
-2216 2215 0
-2216 -2213 0
c Var 'aux189' order represents '5' with '2217'
-2215 2217 0
c Var 'aux189' direct represents '5' with '2218'
2215 -2217 2218 0
-2218 2217 0
-2218 -2215 0
c Var 'aux189' order represents '6' with '2219'
-2217 2219 0
c Var 'aux189' direct represents '6' with '2220'
2217 -2219 2220 0
-2220 2219 0
-2220 -2217 0
c Var 'aux189' order represents '7' with '2221'
-2219 2221 0
c Var 'aux189' direct represents '7' with '2222'
2219 -2221 2222 0
-2222 2221 0
-2222 -2219 0
c Var 'aux189' direct represents '8' with '-2221'
2208 2210 2212 2214 2216 2218 2220 2222 -2221 0
c Encoding variable: aux190 with domain: int(0..8) (representing constraint (aux183 + aux184))
c Both direct and order encoding.
c Var 'aux190' order represents '0' with '2223'
c Var 'aux190' direct represents '0' with '2223'
c Var 'aux190' order represents '1' with '2224'
-2223 2224 0
c Var 'aux190' direct represents '1' with '2225'
2223 -2224 2225 0
-2225 2224 0
-2225 -2223 0
c Var 'aux190' order represents '2' with '2226'
-2224 2226 0
c Var 'aux190' direct represents '2' with '2227'
2224 -2226 2227 0
-2227 2226 0
-2227 -2224 0
c Var 'aux190' order represents '3' with '2228'
-2226 2228 0
c Var 'aux190' direct represents '3' with '2229'
2226 -2228 2229 0
-2229 2228 0
-2229 -2226 0
c Var 'aux190' order represents '4' with '2230'
-2228 2230 0
c Var 'aux190' direct represents '4' with '2231'
2228 -2230 2231 0
-2231 2230 0
-2231 -2228 0
c Var 'aux190' order represents '5' with '2232'
-2230 2232 0
c Var 'aux190' direct represents '5' with '2233'
2230 -2232 2233 0
-2233 2232 0
-2233 -2230 0
c Var 'aux190' order represents '6' with '2234'
-2232 2234 0
c Var 'aux190' direct represents '6' with '2235'
2232 -2234 2235 0
-2235 2234 0
-2235 -2232 0
c Var 'aux190' order represents '7' with '2236'
-2234 2236 0
c Var 'aux190' direct represents '7' with '2237'
2234 -2236 2237 0
-2237 2236 0
-2237 -2234 0
c Var 'aux190' direct represents '8' with '-2236'
2223 2225 2227 2229 2231 2233 2235 2237 -2236 0
c Encoding variable: aux191 with domain: int(0..16) (representing constraint (aux187 + aux190))
c Both direct and order encoding.
c Var 'aux191' order represents '0' with '2238'
c Var 'aux191' direct represents '0' with '2238'
c Var 'aux191' order represents '1' with '2239'
-2238 2239 0
c Var 'aux191' direct represents '1' with '2240'
2238 -2239 2240 0
-2240 2239 0
-2240 -2238 0
c Var 'aux191' order represents '2' with '2241'
-2239 2241 0
c Var 'aux191' direct represents '2' with '2242'
2239 -2241 2242 0
-2242 2241 0
-2242 -2239 0
c Var 'aux191' order represents '3' with '2243'
-2241 2243 0
c Var 'aux191' direct represents '3' with '2244'
2241 -2243 2244 0
-2244 2243 0
-2244 -2241 0
c Var 'aux191' order represents '4' with '2245'
-2243 2245 0
c Var 'aux191' direct represents '4' with '2246'
2243 -2245 2246 0
-2246 2245 0
-2246 -2243 0
c Var 'aux191' order represents '5' with '2247'
-2245 2247 0
c Var 'aux191' direct represents '5' with '2248'
2245 -2247 2248 0
-2248 2247 0
-2248 -2245 0
c Var 'aux191' order represents '6' with '2249'
-2247 2249 0
c Var 'aux191' direct represents '6' with '2250'
2247 -2249 2250 0
-2250 2249 0
-2250 -2247 0
c Var 'aux191' order represents '7' with '2251'
-2249 2251 0
c Var 'aux191' direct represents '7' with '2252'
2249 -2251 2252 0
-2252 2251 0
-2252 -2249 0
c Var 'aux191' order represents '8' with '2253'
-2251 2253 0
c Var 'aux191' direct represents '8' with '2254'
2251 -2253 2254 0
-2254 2253 0
-2254 -2251 0
c Var 'aux191' order represents '9' with '2255'
-2253 2255 0
c Var 'aux191' direct represents '9' with '2256'
2253 -2255 2256 0
-2256 2255 0
-2256 -2253 0
c Var 'aux191' order represents '10' with '2257'
-2255 2257 0
c Var 'aux191' direct represents '10' with '2258'
2255 -2257 2258 0
-2258 2257 0
-2258 -2255 0
c Var 'aux191' order represents '11' with '2259'
-2257 2259 0
c Var 'aux191' direct represents '11' with '2260'
2257 -2259 2260 0
-2260 2259 0
-2260 -2257 0
c Var 'aux191' order represents '12' with '2261'
-2259 2261 0
c Var 'aux191' direct represents '12' with '2262'
2259 -2261 2262 0
-2262 2261 0
-2262 -2259 0
c Var 'aux191' order represents '13' with '2263'
-2261 2263 0
c Var 'aux191' direct represents '13' with '2264'
2261 -2263 2264 0
-2264 2263 0
-2264 -2261 0
c Var 'aux191' order represents '14' with '2265'
-2263 2265 0
c Var 'aux191' direct represents '14' with '2266'
2263 -2265 2266 0
-2266 2265 0
-2266 -2263 0
c Var 'aux191' order represents '15' with '2267'
-2265 2267 0
c Var 'aux191' direct represents '15' with '2268'
2265 -2267 2268 0
-2268 2267 0
-2268 -2265 0
c Var 'aux191' direct represents '16' with '-2267'
2238 2240 2242 2244 2246 2248 2250 2252 2254 2256 2258 2260 2262 2264 2266 2268 -2267 0
c Encoding variable: aux192 with domain: int(0..16) (representing constraint (aux186 + aux188))
c Both direct and order encoding.
c Var 'aux192' order represents '0' with '2269'
c Var 'aux192' direct represents '0' with '2269'
c Var 'aux192' order represents '1' with '2270'
-2269 2270 0
c Var 'aux192' direct represents '1' with '2271'
2269 -2270 2271 0
-2271 2270 0
-2271 -2269 0
c Var 'aux192' order represents '2' with '2272'
-2270 2272 0
c Var 'aux192' direct represents '2' with '2273'
2270 -2272 2273 0
-2273 2272 0
-2273 -2270 0
c Var 'aux192' order represents '3' with '2274'
-2272 2274 0
c Var 'aux192' direct represents '3' with '2275'
2272 -2274 2275 0
-2275 2274 0
-2275 -2272 0
c Var 'aux192' order represents '4' with '2276'
-2274 2276 0
c Var 'aux192' direct represents '4' with '2277'
2274 -2276 2277 0
-2277 2276 0
-2277 -2274 0
c Var 'aux192' order represents '5' with '2278'
-2276 2278 0
c Var 'aux192' direct represents '5' with '2279'
2276 -2278 2279 0
-2279 2278 0
-2279 -2276 0
c Var 'aux192' order represents '6' with '2280'
-2278 2280 0
c Var 'aux192' direct represents '6' with '2281'
2278 -2280 2281 0
-2281 2280 0
-2281 -2278 0
c Var 'aux192' order represents '7' with '2282'
-2280 2282 0
c Var 'aux192' direct represents '7' with '2283'
2280 -2282 2283 0
-2283 2282 0
-2283 -2280 0
c Var 'aux192' order represents '8' with '2284'
-2282 2284 0
c Var 'aux192' direct represents '8' with '2285'
2282 -2284 2285 0
-2285 2284 0
-2285 -2282 0
c Var 'aux192' order represents '9' with '2286'
-2284 2286 0
c Var 'aux192' direct represents '9' with '2287'
2284 -2286 2287 0
-2287 2286 0
-2287 -2284 0
c Var 'aux192' order represents '10' with '2288'
-2286 2288 0
c Var 'aux192' direct represents '10' with '2289'
2286 -2288 2289 0
-2289 2288 0
-2289 -2286 0
c Var 'aux192' order represents '11' with '2290'
-2288 2290 0
c Var 'aux192' direct represents '11' with '2291'
2288 -2290 2291 0
-2291 2290 0
-2291 -2288 0
c Var 'aux192' order represents '12' with '2292'
-2290 2292 0
c Var 'aux192' direct represents '12' with '2293'
2290 -2292 2293 0
-2293 2292 0
-2293 -2290 0
c Var 'aux192' order represents '13' with '2294'
-2292 2294 0
c Var 'aux192' direct represents '13' with '2295'
2292 -2294 2295 0
-2295 2294 0
-2295 -2292 0
c Var 'aux192' order represents '14' with '2296'
-2294 2296 0
c Var 'aux192' direct represents '14' with '2297'
2294 -2296 2297 0
-2297 2296 0
-2297 -2294 0
c Var 'aux192' order represents '15' with '2298'
-2296 2298 0
c Var 'aux192' direct represents '15' with '2299'
2296 -2298 2299 0
-2299 2298 0
-2299 -2296 0
c Var 'aux192' direct represents '16' with '-2298'
2269 2271 2273 2275 2277 2279 2281 2283 2285 2287 2289 2291 2293 2295 2297 2299 -2298 0
c Encoding variable: aux193 with domain: int(0..2) (representing constraint ((5=grid_00005_00000) + (grid_00000_00006=5)))
c Both direct and order encoding.
c Var 'aux193' order represents '0' with '2300'
c Var 'aux193' direct represents '0' with '2300'
c Var 'aux193' order represents '1' with '2301'
-2300 2301 0
c Var 'aux193' direct represents '1' with '2302'
2300 -2301 2302 0
-2302 2301 0
-2302 -2300 0
c Var 'aux193' direct represents '2' with '-2301'
2300 2302 -2301 0
c Encoding variable: aux194 with domain: int(0..2) (representing constraint ((grid_00000_00005=5) + (5=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux194' order represents '0' with '2303'
c Var 'aux194' direct represents '0' with '2303'
c Var 'aux194' order represents '1' with '2304'
-2303 2304 0
c Var 'aux194' direct represents '1' with '2305'
2303 -2304 2305 0
-2305 2304 0
-2305 -2303 0
c Var 'aux194' direct represents '2' with '-2304'
2303 2305 -2304 0
c Encoding variable: aux195 with domain: int(0..2) (representing constraint ((grid_00000_00004=5) + (5=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux195' order represents '0' with '2306'
c Var 'aux195' direct represents '0' with '2306'
c Var 'aux195' order represents '1' with '2307'
-2306 2307 0
c Var 'aux195' direct represents '1' with '2308'
2306 -2307 2308 0
-2308 2307 0
-2308 -2306 0
c Var 'aux195' direct represents '2' with '-2307'
2306 2308 -2307 0
c Encoding variable: aux196 with domain: int(0..2) (representing constraint ((grid_00000_00003=5) + (grid_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux196' order represents '0' with '2309'
c Var 'aux196' direct represents '0' with '2309'
c Var 'aux196' order represents '1' with '2310'
-2309 2310 0
c Var 'aux196' direct represents '1' with '2311'
2309 -2310 2311 0
-2311 2310 0
-2311 -2309 0
c Var 'aux196' direct represents '2' with '-2310'
2309 2311 -2310 0
c Encoding variable: aux197 with domain: int(0..2) (representing constraint ((grid_00000_00002=5) + (5=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux197' order represents '0' with '2312'
c Var 'aux197' direct represents '0' with '2312'
c Var 'aux197' order represents '1' with '2313'
-2312 2313 0
c Var 'aux197' direct represents '1' with '2314'
2312 -2313 2314 0
-2314 2313 0
-2314 -2312 0
c Var 'aux197' direct represents '2' with '-2313'
2312 2314 -2313 0
c Encoding variable: aux198 with domain: int(0..2) (representing constraint ((grid_00000_00001=5) + (grid_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux198' order represents '0' with '2315'
c Var 'aux198' direct represents '0' with '2315'
c Var 'aux198' order represents '1' with '2316'
-2315 2316 0
c Var 'aux198' direct represents '1' with '2317'
2315 -2316 2317 0
-2317 2316 0
-2317 -2315 0
c Var 'aux198' direct represents '2' with '-2316'
2315 2317 -2316 0
c Encoding variable: aux199 with domain: int(0..2) (representing constraint ((grid_00004_00005=5) + (5=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux199' order represents '0' with '2318'
c Var 'aux199' direct represents '0' with '2318'
c Var 'aux199' order represents '1' with '2319'
-2318 2319 0
c Var 'aux199' direct represents '1' with '2320'
2318 -2319 2320 0
-2320 2319 0
-2320 -2318 0
c Var 'aux199' direct represents '2' with '-2319'
2318 2320 -2319 0
c Encoding variable: aux200 with domain: int(0..2) (representing constraint ((grid_00004_00006=5) + (grid_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux200' order represents '0' with '2321'
c Var 'aux200' direct represents '0' with '2321'
c Var 'aux200' order represents '1' with '2322'
-2321 2322 0
c Var 'aux200' direct represents '1' with '2323'
2321 -2322 2323 0
-2323 2322 0
-2323 -2321 0
c Var 'aux200' direct represents '2' with '-2322'
2321 2323 -2322 0
c Encoding variable: aux201 with domain: int(0..2) (representing constraint ((5=grid_00006_00004) + (5=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux201' order represents '0' with '2324'
c Var 'aux201' direct represents '0' with '2324'
c Var 'aux201' order represents '1' with '2325'
-2324 2325 0
c Var 'aux201' direct represents '1' with '2326'
2324 -2325 2326 0
-2326 2325 0
-2326 -2324 0
c Var 'aux201' direct represents '2' with '-2325'
2324 2326 -2325 0
c Encoding variable: aux202 with domain: int(0..2) (representing constraint ((grid_00004_00003=5) + (grid_00003_00000=5)))
c Both direct and order encoding.
c Var 'aux202' order represents '0' with '2327'
c Var 'aux202' direct represents '0' with '2327'
c Var 'aux202' order represents '1' with '2328'
-2327 2328 0
c Var 'aux202' direct represents '1' with '2329'
2327 -2328 2329 0
-2329 2328 0
-2329 -2327 0
c Var 'aux202' direct represents '2' with '-2328'
2327 2329 -2328 0
c Encoding variable: aux203 with domain: int(0..2) (representing constraint ((grid_00004_00002=5) + (5=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux203' order represents '0' with '2330'
c Var 'aux203' direct represents '0' with '2330'
c Var 'aux203' order represents '1' with '2331'
-2330 2331 0
c Var 'aux203' direct represents '1' with '2332'
2330 -2331 2332 0
-2332 2331 0
-2332 -2330 0
c Var 'aux203' direct represents '2' with '-2331'
2330 2332 -2331 0
c Encoding variable: aux204 with domain: int(0..2) (representing constraint ((grid_00004_00001=5) + (5=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux204' order represents '0' with '2333'
c Var 'aux204' direct represents '0' with '2333'
c Var 'aux204' order represents '1' with '2334'
-2333 2334 0
c Var 'aux204' direct represents '1' with '2335'
2333 -2334 2335 0
-2335 2334 0
-2335 -2333 0
c Var 'aux204' direct represents '2' with '-2334'
2333 2335 -2334 0
c Encoding variable: aux205 with domain: int(0..2) (representing constraint ((grid_00004_00000=5) + (5=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux205' order represents '0' with '2336'
c Var 'aux205' direct represents '0' with '2336'
c Var 'aux205' order represents '1' with '2337'
-2336 2337 0
c Var 'aux205' direct represents '1' with '2338'
2336 -2337 2338 0
-2338 2337 0
-2338 -2336 0
c Var 'aux205' direct represents '2' with '-2337'
2336 2338 -2337 0
c Encoding variable: aux206 with domain: int(0..2) (representing constraint ((5=grid_00002_00006) + (5=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux206' order represents '0' with '2339'
c Var 'aux206' direct represents '0' with '2339'
c Var 'aux206' order represents '1' with '2340'
-2339 2340 0
c Var 'aux206' direct represents '1' with '2341'
2339 -2340 2341 0
-2341 2340 0
-2341 -2339 0
c Var 'aux206' direct represents '2' with '-2340'
2339 2341 -2340 0
c Encoding variable: aux207 with domain: int(0..2) (representing constraint ((5=grid_00002_00005) + (5=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux207' order represents '0' with '2342'
c Var 'aux207' direct represents '0' with '2342'
c Var 'aux207' order represents '1' with '2343'
-2342 2343 0
c Var 'aux207' direct represents '1' with '2344'
2342 -2343 2344 0
-2344 2343 0
-2344 -2342 0
c Var 'aux207' direct represents '2' with '-2343'
2342 2344 -2343 0
c Encoding variable: aux208 with domain: int(0..2) (representing constraint ((5=grid_00002_00004) + (5=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux208' order represents '0' with '2345'
c Var 'aux208' direct represents '0' with '2345'
c Var 'aux208' order represents '1' with '2346'
-2345 2346 0
c Var 'aux208' direct represents '1' with '2347'
2345 -2346 2347 0
-2347 2346 0
-2347 -2345 0
c Var 'aux208' direct represents '2' with '-2346'
2345 2347 -2346 0
c Encoding variable: aux209 with domain: int(0..2) (representing constraint ((5=grid_00002_00003) + (5=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux209' order represents '0' with '2348'
c Var 'aux209' direct represents '0' with '2348'
c Var 'aux209' order represents '1' with '2349'
-2348 2349 0
c Var 'aux209' direct represents '1' with '2350'
2348 -2349 2350 0
-2350 2349 0
-2350 -2348 0
c Var 'aux209' direct represents '2' with '-2349'
2348 2350 -2349 0
c Encoding variable: aux210 with domain: int(0..2) (representing constraint ((grid_00003_00002=5) + (5=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux210' order represents '0' with '2351'
c Var 'aux210' direct represents '0' with '2351'
c Var 'aux210' order represents '1' with '2352'
-2351 2352 0
c Var 'aux210' direct represents '1' with '2353'
2351 -2352 2353 0
-2353 2352 0
-2353 -2351 0
c Var 'aux210' direct represents '2' with '-2352'
2351 2353 -2352 0
c Encoding variable: aux211 with domain: int(0..2) (representing constraint ((5=grid_00001_00005) + (grid_00003_00003=5)))
c Both direct and order encoding.
c Var 'aux211' order represents '0' with '2354'
c Var 'aux211' direct represents '0' with '2354'
c Var 'aux211' order represents '1' with '2355'
-2354 2355 0
c Var 'aux211' direct represents '1' with '2356'
2354 -2355 2356 0
-2356 2355 0
-2356 -2354 0
c Var 'aux211' direct represents '2' with '-2355'
2354 2356 -2355 0
c Encoding variable: aux212 with domain: int(0..2) (representing constraint ((5=grid_00006_00000) + (5=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux212' order represents '0' with '2357'
c Var 'aux212' direct represents '0' with '2357'
c Var 'aux212' order represents '1' with '2358'
-2357 2358 0
c Var 'aux212' direct represents '1' with '2359'
2357 -2358 2359 0
-2359 2358 0
-2359 -2357 0
c Var 'aux212' direct represents '2' with '-2358'
2357 2359 -2358 0
c Encoding variable: aux213 with domain: int(0..4) (representing constraint (aux200 + aux212))
c Both direct and order encoding.
c Var 'aux213' order represents '0' with '2360'
c Var 'aux213' direct represents '0' with '2360'
c Var 'aux213' order represents '1' with '2361'
-2360 2361 0
c Var 'aux213' direct represents '1' with '2362'
2360 -2361 2362 0
-2362 2361 0
-2362 -2360 0
c Var 'aux213' order represents '2' with '2363'
-2361 2363 0
c Var 'aux213' direct represents '2' with '2364'
2361 -2363 2364 0
-2364 2363 0
-2364 -2361 0
c Var 'aux213' order represents '3' with '2365'
-2363 2365 0
c Var 'aux213' direct represents '3' with '2366'
2363 -2365 2366 0
-2366 2365 0
-2366 -2363 0
c Var 'aux213' direct represents '4' with '-2365'
2360 2362 2364 2366 -2365 0
c Encoding variable: aux214 with domain: int(0..4) (representing constraint (aux194 + aux207))
c Both direct and order encoding.
c Var 'aux214' order represents '0' with '2367'
c Var 'aux214' direct represents '0' with '2367'
c Var 'aux214' order represents '1' with '2368'
-2367 2368 0
c Var 'aux214' direct represents '1' with '2369'
2367 -2368 2369 0
-2369 2368 0
-2369 -2367 0
c Var 'aux214' order represents '2' with '2370'
-2368 2370 0
c Var 'aux214' direct represents '2' with '2371'
2368 -2370 2371 0
-2371 2370 0
-2371 -2368 0
c Var 'aux214' order represents '3' with '2372'
-2370 2372 0
c Var 'aux214' direct represents '3' with '2373'
2370 -2372 2373 0
-2373 2372 0
-2373 -2370 0
c Var 'aux214' direct represents '4' with '-2372'
2367 2369 2371 2373 -2372 0
c Encoding variable: aux215 with domain: int(0..4) (representing constraint (aux198 + aux193))
c Both direct and order encoding.
c Var 'aux215' order represents '0' with '2374'
c Var 'aux215' direct represents '0' with '2374'
c Var 'aux215' order represents '1' with '2375'
-2374 2375 0
c Var 'aux215' direct represents '1' with '2376'
2374 -2375 2376 0
-2376 2375 0
-2376 -2374 0
c Var 'aux215' order represents '2' with '2377'
-2375 2377 0
c Var 'aux215' direct represents '2' with '2378'
2375 -2377 2378 0
-2378 2377 0
-2378 -2375 0
c Var 'aux215' order represents '3' with '2379'
-2377 2379 0
c Var 'aux215' direct represents '3' with '2380'
2377 -2379 2380 0
-2380 2379 0
-2380 -2377 0
c Var 'aux215' direct represents '4' with '-2379'
2374 2376 2378 2380 -2379 0
c Encoding variable: aux216 with domain: int(0..4) (representing constraint (aux196 + aux195))
c Both direct and order encoding.
c Var 'aux216' order represents '0' with '2381'
c Var 'aux216' direct represents '0' with '2381'
c Var 'aux216' order represents '1' with '2382'
-2381 2382 0
c Var 'aux216' direct represents '1' with '2383'
2381 -2382 2383 0
-2383 2382 0
-2383 -2381 0
c Var 'aux216' order represents '2' with '2384'
-2382 2384 0
c Var 'aux216' direct represents '2' with '2385'
2382 -2384 2385 0
-2385 2384 0
-2385 -2382 0
c Var 'aux216' order represents '3' with '2386'
-2384 2386 0
c Var 'aux216' direct represents '3' with '2387'
2384 -2386 2387 0
-2387 2386 0
-2387 -2384 0
c Var 'aux216' direct represents '4' with '-2386'
2381 2383 2385 2387 -2386 0
c Encoding variable: aux217 with domain: int(0..4) (representing constraint (aux197 + aux199))
c Both direct and order encoding.
c Var 'aux217' order represents '0' with '2388'
c Var 'aux217' direct represents '0' with '2388'
c Var 'aux217' order represents '1' with '2389'
-2388 2389 0
c Var 'aux217' direct represents '1' with '2390'
2388 -2389 2390 0
-2390 2389 0
-2390 -2388 0
c Var 'aux217' order represents '2' with '2391'
-2389 2391 0
c Var 'aux217' direct represents '2' with '2392'
2389 -2391 2392 0
-2392 2391 0
-2392 -2389 0
c Var 'aux217' order represents '3' with '2393'
-2391 2393 0
c Var 'aux217' direct represents '3' with '2394'
2391 -2393 2394 0
-2394 2393 0
-2394 -2391 0
c Var 'aux217' direct represents '4' with '-2393'
2388 2390 2392 2394 -2393 0
c Encoding variable: aux218 with domain: int(0..4) (representing constraint (aux210 + aux206))
c Both direct and order encoding.
c Var 'aux218' order represents '0' with '2395'
c Var 'aux218' direct represents '0' with '2395'
c Var 'aux218' order represents '1' with '2396'
-2395 2396 0
c Var 'aux218' direct represents '1' with '2397'
2395 -2396 2397 0
-2397 2396 0
-2397 -2395 0
c Var 'aux218' order represents '2' with '2398'
-2396 2398 0
c Var 'aux218' direct represents '2' with '2399'
2396 -2398 2399 0
-2399 2398 0
-2399 -2396 0
c Var 'aux218' order represents '3' with '2400'
-2398 2400 0
c Var 'aux218' direct represents '3' with '2401'
2398 -2400 2401 0
-2401 2400 0
-2401 -2398 0
c Var 'aux218' direct represents '4' with '-2400'
2395 2397 2399 2401 -2400 0
c Encoding variable: aux219 with domain: int(0..4) (representing constraint (aux203 + aux202))
c Both direct and order encoding.
c Var 'aux219' order represents '0' with '2402'
c Var 'aux219' direct represents '0' with '2402'
c Var 'aux219' order represents '1' with '2403'
-2402 2403 0
c Var 'aux219' direct represents '1' with '2404'
2402 -2403 2404 0
-2404 2403 0
-2404 -2402 0
c Var 'aux219' order represents '2' with '2405'
-2403 2405 0
c Var 'aux219' direct represents '2' with '2406'
2403 -2405 2406 0
-2406 2405 0
-2406 -2403 0
c Var 'aux219' order represents '3' with '2407'
-2405 2407 0
c Var 'aux219' direct represents '3' with '2408'
2405 -2407 2408 0
-2408 2407 0
-2408 -2405 0
c Var 'aux219' direct represents '4' with '-2407'
2402 2404 2406 2408 -2407 0
c Encoding variable: aux220 with domain: int(0..4) (representing constraint (aux204 + aux205))
c Both direct and order encoding.
c Var 'aux220' order represents '0' with '2409'
c Var 'aux220' direct represents '0' with '2409'
c Var 'aux220' order represents '1' with '2410'
-2409 2410 0
c Var 'aux220' direct represents '1' with '2411'
2409 -2410 2411 0
-2411 2410 0
-2411 -2409 0
c Var 'aux220' order represents '2' with '2412'
-2410 2412 0
c Var 'aux220' direct represents '2' with '2413'
2410 -2412 2413 0
-2413 2412 0
-2413 -2410 0
c Var 'aux220' order represents '3' with '2414'
-2412 2414 0
c Var 'aux220' direct represents '3' with '2415'
2412 -2414 2415 0
-2415 2414 0
-2415 -2412 0
c Var 'aux220' direct represents '4' with '-2414'
2409 2411 2413 2415 -2414 0
c Encoding variable: aux221 with domain: int(0..4) (representing constraint (aux208 + aux211))
c Both direct and order encoding.
c Var 'aux221' order represents '0' with '2416'
c Var 'aux221' direct represents '0' with '2416'
c Var 'aux221' order represents '1' with '2417'
-2416 2417 0
c Var 'aux221' direct represents '1' with '2418'
2416 -2417 2418 0
-2418 2417 0
-2418 -2416 0
c Var 'aux221' order represents '2' with '2419'
-2417 2419 0
c Var 'aux221' direct represents '2' with '2420'
2417 -2419 2420 0
-2420 2419 0
-2420 -2417 0
c Var 'aux221' order represents '3' with '2421'
-2419 2421 0
c Var 'aux221' direct represents '3' with '2422'
2419 -2421 2422 0
-2422 2421 0
-2422 -2419 0
c Var 'aux221' direct represents '4' with '-2421'
2416 2418 2420 2422 -2421 0
c Encoding variable: aux222 with domain: int(0..4) (representing constraint (aux209 + aux201))
c Both direct and order encoding.
c Var 'aux222' order represents '0' with '2423'
c Var 'aux222' direct represents '0' with '2423'
c Var 'aux222' order represents '1' with '2424'
-2423 2424 0
c Var 'aux222' direct represents '1' with '2425'
2423 -2424 2425 0
-2425 2424 0
-2425 -2423 0
c Var 'aux222' order represents '2' with '2426'
-2424 2426 0
c Var 'aux222' direct represents '2' with '2427'
2424 -2426 2427 0
-2427 2426 0
-2427 -2424 0
c Var 'aux222' order represents '3' with '2428'
-2426 2428 0
c Var 'aux222' direct represents '3' with '2429'
2426 -2428 2429 0
-2429 2428 0
-2429 -2426 0
c Var 'aux222' direct represents '4' with '-2428'
2423 2425 2427 2429 -2428 0
c Encoding variable: aux223 with domain: int(0..8) (representing constraint (aux216 + aux222))
c Both direct and order encoding.
c Var 'aux223' order represents '0' with '2430'
c Var 'aux223' direct represents '0' with '2430'
c Var 'aux223' order represents '1' with '2431'
-2430 2431 0
c Var 'aux223' direct represents '1' with '2432'
2430 -2431 2432 0
-2432 2431 0
-2432 -2430 0
c Var 'aux223' order represents '2' with '2433'
-2431 2433 0
c Var 'aux223' direct represents '2' with '2434'
2431 -2433 2434 0
-2434 2433 0
-2434 -2431 0
c Var 'aux223' order represents '3' with '2435'
-2433 2435 0
c Var 'aux223' direct represents '3' with '2436'
2433 -2435 2436 0
-2436 2435 0
-2436 -2433 0
c Var 'aux223' order represents '4' with '2437'
-2435 2437 0
c Var 'aux223' direct represents '4' with '2438'
2435 -2437 2438 0
-2438 2437 0
-2438 -2435 0
c Var 'aux223' order represents '5' with '2439'
-2437 2439 0
c Var 'aux223' direct represents '5' with '2440'
2437 -2439 2440 0
-2440 2439 0
-2440 -2437 0
c Var 'aux223' order represents '6' with '2441'
-2439 2441 0
c Var 'aux223' direct represents '6' with '2442'
2439 -2441 2442 0
-2442 2441 0
-2442 -2439 0
c Var 'aux223' order represents '7' with '2443'
-2441 2443 0
c Var 'aux223' direct represents '7' with '2444'
2441 -2443 2444 0
-2444 2443 0
-2444 -2441 0
c Var 'aux223' direct represents '8' with '-2443'
2430 2432 2434 2436 2438 2440 2442 2444 -2443 0
c Encoding variable: aux224 with domain: int(0..8) (representing constraint (aux215 + aux219))
c Both direct and order encoding.
c Var 'aux224' order represents '0' with '2445'
c Var 'aux224' direct represents '0' with '2445'
c Var 'aux224' order represents '1' with '2446'
-2445 2446 0
c Var 'aux224' direct represents '1' with '2447'
2445 -2446 2447 0
-2447 2446 0
-2447 -2445 0
c Var 'aux224' order represents '2' with '2448'
-2446 2448 0
c Var 'aux224' direct represents '2' with '2449'
2446 -2448 2449 0
-2449 2448 0
-2449 -2446 0
c Var 'aux224' order represents '3' with '2450'
-2448 2450 0
c Var 'aux224' direct represents '3' with '2451'
2448 -2450 2451 0
-2451 2450 0
-2451 -2448 0
c Var 'aux224' order represents '4' with '2452'
-2450 2452 0
c Var 'aux224' direct represents '4' with '2453'
2450 -2452 2453 0
-2453 2452 0
-2453 -2450 0
c Var 'aux224' order represents '5' with '2454'
-2452 2454 0
c Var 'aux224' direct represents '5' with '2455'
2452 -2454 2455 0
-2455 2454 0
-2455 -2452 0
c Var 'aux224' order represents '6' with '2456'
-2454 2456 0
c Var 'aux224' direct represents '6' with '2457'
2454 -2456 2457 0
-2457 2456 0
-2457 -2454 0
c Var 'aux224' order represents '7' with '2458'
-2456 2458 0
c Var 'aux224' direct represents '7' with '2459'
2456 -2458 2459 0
-2459 2458 0
-2459 -2456 0
c Var 'aux224' direct represents '8' with '-2458'
2445 2447 2449 2451 2453 2455 2457 2459 -2458 0
c Encoding variable: aux225 with domain: int(0..8) (representing constraint (aux213 + aux214))
c Both direct and order encoding.
c Var 'aux225' order represents '0' with '2460'
c Var 'aux225' direct represents '0' with '2460'
c Var 'aux225' order represents '1' with '2461'
-2460 2461 0
c Var 'aux225' direct represents '1' with '2462'
2460 -2461 2462 0
-2462 2461 0
-2462 -2460 0
c Var 'aux225' order represents '2' with '2463'
-2461 2463 0
c Var 'aux225' direct represents '2' with '2464'
2461 -2463 2464 0
-2464 2463 0
-2464 -2461 0
c Var 'aux225' order represents '3' with '2465'
-2463 2465 0
c Var 'aux225' direct represents '3' with '2466'
2463 -2465 2466 0
-2466 2465 0
-2466 -2463 0
c Var 'aux225' order represents '4' with '2467'
-2465 2467 0
c Var 'aux225' direct represents '4' with '2468'
2465 -2467 2468 0
-2468 2467 0
-2468 -2465 0
c Var 'aux225' order represents '5' with '2469'
-2467 2469 0
c Var 'aux225' direct represents '5' with '2470'
2467 -2469 2470 0
-2470 2469 0
-2470 -2467 0
c Var 'aux225' order represents '6' with '2471'
-2469 2471 0
c Var 'aux225' direct represents '6' with '2472'
2469 -2471 2472 0
-2472 2471 0
-2472 -2469 0
c Var 'aux225' order represents '7' with '2473'
-2471 2473 0
c Var 'aux225' direct represents '7' with '2474'
2471 -2473 2474 0
-2474 2473 0
-2474 -2471 0
c Var 'aux225' direct represents '8' with '-2473'
2460 2462 2464 2466 2468 2470 2472 2474 -2473 0
c Encoding variable: aux226 with domain: int(0..8) (representing constraint (aux217 + aux218))
c Both direct and order encoding.
c Var 'aux226' order represents '0' with '2475'
c Var 'aux226' direct represents '0' with '2475'
c Var 'aux226' order represents '1' with '2476'
-2475 2476 0
c Var 'aux226' direct represents '1' with '2477'
2475 -2476 2477 0
-2477 2476 0
-2477 -2475 0
c Var 'aux226' order represents '2' with '2478'
-2476 2478 0
c Var 'aux226' direct represents '2' with '2479'
2476 -2478 2479 0
-2479 2478 0
-2479 -2476 0
c Var 'aux226' order represents '3' with '2480'
-2478 2480 0
c Var 'aux226' direct represents '3' with '2481'
2478 -2480 2481 0
-2481 2480 0
-2481 -2478 0
c Var 'aux226' order represents '4' with '2482'
-2480 2482 0
c Var 'aux226' direct represents '4' with '2483'
2480 -2482 2483 0
-2483 2482 0
-2483 -2480 0
c Var 'aux226' order represents '5' with '2484'
-2482 2484 0
c Var 'aux226' direct represents '5' with '2485'
2482 -2484 2485 0
-2485 2484 0
-2485 -2482 0
c Var 'aux226' order represents '6' with '2486'
-2484 2486 0
c Var 'aux226' direct represents '6' with '2487'
2484 -2486 2487 0
-2487 2486 0
-2487 -2484 0
c Var 'aux226' order represents '7' with '2488'
-2486 2488 0
c Var 'aux226' direct represents '7' with '2489'
2486 -2488 2489 0
-2489 2488 0
-2489 -2486 0
c Var 'aux226' direct represents '8' with '-2488'
2475 2477 2479 2481 2483 2485 2487 2489 -2488 0
c Encoding variable: aux227 with domain: int(0..8) (representing constraint (aux220 + aux221))
c Both direct and order encoding.
c Var 'aux227' order represents '0' with '2490'
c Var 'aux227' direct represents '0' with '2490'
c Var 'aux227' order represents '1' with '2491'
-2490 2491 0
c Var 'aux227' direct represents '1' with '2492'
2490 -2491 2492 0
-2492 2491 0
-2492 -2490 0
c Var 'aux227' order represents '2' with '2493'
-2491 2493 0
c Var 'aux227' direct represents '2' with '2494'
2491 -2493 2494 0
-2494 2493 0
-2494 -2491 0
c Var 'aux227' order represents '3' with '2495'
-2493 2495 0
c Var 'aux227' direct represents '3' with '2496'
2493 -2495 2496 0
-2496 2495 0
-2496 -2493 0
c Var 'aux227' order represents '4' with '2497'
-2495 2497 0
c Var 'aux227' direct represents '4' with '2498'
2495 -2497 2498 0
-2498 2497 0
-2498 -2495 0
c Var 'aux227' order represents '5' with '2499'
-2497 2499 0
c Var 'aux227' direct represents '5' with '2500'
2497 -2499 2500 0
-2500 2499 0
-2500 -2497 0
c Var 'aux227' order represents '6' with '2501'
-2499 2501 0
c Var 'aux227' direct represents '6' with '2502'
2499 -2501 2502 0
-2502 2501 0
-2502 -2499 0
c Var 'aux227' order represents '7' with '2503'
-2501 2503 0
c Var 'aux227' direct represents '7' with '2504'
2501 -2503 2504 0
-2504 2503 0
-2504 -2501 0
c Var 'aux227' direct represents '8' with '-2503'
2490 2492 2494 2496 2498 2500 2502 2504 -2503 0
c Encoding variable: aux228 with domain: int(0..16) (representing constraint (aux224 + aux227))
c Both direct and order encoding.
c Var 'aux228' order represents '0' with '2505'
c Var 'aux228' direct represents '0' with '2505'
c Var 'aux228' order represents '1' with '2506'
-2505 2506 0
c Var 'aux228' direct represents '1' with '2507'
2505 -2506 2507 0
-2507 2506 0
-2507 -2505 0
c Var 'aux228' order represents '2' with '2508'
-2506 2508 0
c Var 'aux228' direct represents '2' with '2509'
2506 -2508 2509 0
-2509 2508 0
-2509 -2506 0
c Var 'aux228' order represents '3' with '2510'
-2508 2510 0
c Var 'aux228' direct represents '3' with '2511'
2508 -2510 2511 0
-2511 2510 0
-2511 -2508 0
c Var 'aux228' order represents '4' with '2512'
-2510 2512 0
c Var 'aux228' direct represents '4' with '2513'
2510 -2512 2513 0
-2513 2512 0
-2513 -2510 0
c Var 'aux228' order represents '5' with '2514'
-2512 2514 0
c Var 'aux228' direct represents '5' with '2515'
2512 -2514 2515 0
-2515 2514 0
-2515 -2512 0
c Var 'aux228' order represents '6' with '2516'
-2514 2516 0
c Var 'aux228' direct represents '6' with '2517'
2514 -2516 2517 0
-2517 2516 0
-2517 -2514 0
c Var 'aux228' order represents '7' with '2518'
-2516 2518 0
c Var 'aux228' direct represents '7' with '2519'
2516 -2518 2519 0
-2519 2518 0
-2519 -2516 0
c Var 'aux228' order represents '8' with '2520'
-2518 2520 0
c Var 'aux228' direct represents '8' with '2521'
2518 -2520 2521 0
-2521 2520 0
-2521 -2518 0
c Var 'aux228' order represents '9' with '2522'
-2520 2522 0
c Var 'aux228' direct represents '9' with '2523'
2520 -2522 2523 0
-2523 2522 0
-2523 -2520 0
c Var 'aux228' order represents '10' with '2524'
-2522 2524 0
c Var 'aux228' direct represents '10' with '2525'
2522 -2524 2525 0
-2525 2524 0
-2525 -2522 0
c Var 'aux228' order represents '11' with '2526'
-2524 2526 0
c Var 'aux228' direct represents '11' with '2527'
2524 -2526 2527 0
-2527 2526 0
-2527 -2524 0
c Var 'aux228' order represents '12' with '2528'
-2526 2528 0
c Var 'aux228' direct represents '12' with '2529'
2526 -2528 2529 0
-2529 2528 0
-2529 -2526 0
c Var 'aux228' order represents '13' with '2530'
-2528 2530 0
c Var 'aux228' direct represents '13' with '2531'
2528 -2530 2531 0
-2531 2530 0
-2531 -2528 0
c Var 'aux228' order represents '14' with '2532'
-2530 2532 0
c Var 'aux228' direct represents '14' with '2533'
2530 -2532 2533 0
-2533 2532 0
-2533 -2530 0
c Var 'aux228' order represents '15' with '2534'
-2532 2534 0
c Var 'aux228' direct represents '15' with '2535'
2532 -2534 2535 0
-2535 2534 0
-2535 -2532 0
c Var 'aux228' direct represents '16' with '-2534'
2505 2507 2509 2511 2513 2515 2517 2519 2521 2523 2525 2527 2529 2531 2533 2535 -2534 0
c Encoding variable: aux229 with domain: int(0..16) (representing constraint (aux223 + aux225))
c Both direct and order encoding.
c Var 'aux229' order represents '0' with '2536'
c Var 'aux229' direct represents '0' with '2536'
c Var 'aux229' order represents '1' with '2537'
-2536 2537 0
c Var 'aux229' direct represents '1' with '2538'
2536 -2537 2538 0
-2538 2537 0
-2538 -2536 0
c Var 'aux229' order represents '2' with '2539'
-2537 2539 0
c Var 'aux229' direct represents '2' with '2540'
2537 -2539 2540 0
-2540 2539 0
-2540 -2537 0
c Var 'aux229' order represents '3' with '2541'
-2539 2541 0
c Var 'aux229' direct represents '3' with '2542'
2539 -2541 2542 0
-2542 2541 0
-2542 -2539 0
c Var 'aux229' order represents '4' with '2543'
-2541 2543 0
c Var 'aux229' direct represents '4' with '2544'
2541 -2543 2544 0
-2544 2543 0
-2544 -2541 0
c Var 'aux229' order represents '5' with '2545'
-2543 2545 0
c Var 'aux229' direct represents '5' with '2546'
2543 -2545 2546 0
-2546 2545 0
-2546 -2543 0
c Var 'aux229' order represents '6' with '2547'
-2545 2547 0
c Var 'aux229' direct represents '6' with '2548'
2545 -2547 2548 0
-2548 2547 0
-2548 -2545 0
c Var 'aux229' order represents '7' with '2549'
-2547 2549 0
c Var 'aux229' direct represents '7' with '2550'
2547 -2549 2550 0
-2550 2549 0
-2550 -2547 0
c Var 'aux229' order represents '8' with '2551'
-2549 2551 0
c Var 'aux229' direct represents '8' with '2552'
2549 -2551 2552 0
-2552 2551 0
-2552 -2549 0
c Var 'aux229' order represents '9' with '2553'
-2551 2553 0
c Var 'aux229' direct represents '9' with '2554'
2551 -2553 2554 0
-2554 2553 0
-2554 -2551 0
c Var 'aux229' order represents '10' with '2555'
-2553 2555 0
c Var 'aux229' direct represents '10' with '2556'
2553 -2555 2556 0
-2556 2555 0
-2556 -2553 0
c Var 'aux229' order represents '11' with '2557'
-2555 2557 0
c Var 'aux229' direct represents '11' with '2558'
2555 -2557 2558 0
-2558 2557 0
-2558 -2555 0
c Var 'aux229' order represents '12' with '2559'
-2557 2559 0
c Var 'aux229' direct represents '12' with '2560'
2557 -2559 2560 0
-2560 2559 0
-2560 -2557 0
c Var 'aux229' order represents '13' with '2561'
-2559 2561 0
c Var 'aux229' direct represents '13' with '2562'
2559 -2561 2562 0
-2562 2561 0
-2562 -2559 0
c Var 'aux229' order represents '14' with '2563'
-2561 2563 0
c Var 'aux229' direct represents '14' with '2564'
2561 -2563 2564 0
-2564 2563 0
-2564 -2561 0
c Var 'aux229' order represents '15' with '2565'
-2563 2565 0
c Var 'aux229' direct represents '15' with '2566'
2563 -2565 2566 0
-2566 2565 0
-2566 -2563 0
c Var 'aux229' direct represents '16' with '-2565'
2536 2538 2540 2542 2544 2546 2548 2550 2552 2554 2556 2558 2560 2562 2564 2566 -2565 0
c Encoding variable: aux230 with domain: int(0..2) (representing constraint ((6=grid_00005_00000) + (grid_00000_00006=6)))
c Both direct and order encoding.
c Var 'aux230' order represents '0' with '2567'
c Var 'aux230' direct represents '0' with '2567'
c Var 'aux230' order represents '1' with '2568'
-2567 2568 0
c Var 'aux230' direct represents '1' with '2569'
2567 -2568 2569 0
-2569 2568 0
-2569 -2567 0
c Var 'aux230' direct represents '2' with '-2568'
2567 2569 -2568 0
c Encoding variable: aux231 with domain: int(0..2) (representing constraint ((grid_00000_00005=6) + (6=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux231' order represents '0' with '2570'
c Var 'aux231' direct represents '0' with '2570'
c Var 'aux231' order represents '1' with '2571'
-2570 2571 0
c Var 'aux231' direct represents '1' with '2572'
2570 -2571 2572 0
-2572 2571 0
-2572 -2570 0
c Var 'aux231' direct represents '2' with '-2571'
2570 2572 -2571 0
c Encoding variable: aux232 with domain: int(0..2) (representing constraint ((grid_00000_00004=6) + (6=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux232' order represents '0' with '2573'
c Var 'aux232' direct represents '0' with '2573'
c Var 'aux232' order represents '1' with '2574'
-2573 2574 0
c Var 'aux232' direct represents '1' with '2575'
2573 -2574 2575 0
-2575 2574 0
-2575 -2573 0
c Var 'aux232' direct represents '2' with '-2574'
2573 2575 -2574 0
c Encoding variable: aux233 with domain: int(0..2) (representing constraint ((grid_00000_00003=6) + (grid_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux233' order represents '0' with '2576'
c Var 'aux233' direct represents '0' with '2576'
c Var 'aux233' order represents '1' with '2577'
-2576 2577 0
c Var 'aux233' direct represents '1' with '2578'
2576 -2577 2578 0
-2578 2577 0
-2578 -2576 0
c Var 'aux233' direct represents '2' with '-2577'
2576 2578 -2577 0
c Encoding variable: aux234 with domain: int(0..2) (representing constraint ((grid_00000_00002=6) + (6=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux234' order represents '0' with '2579'
c Var 'aux234' direct represents '0' with '2579'
c Var 'aux234' order represents '1' with '2580'
-2579 2580 0
c Var 'aux234' direct represents '1' with '2581'
2579 -2580 2581 0
-2581 2580 0
-2581 -2579 0
c Var 'aux234' direct represents '2' with '-2580'
2579 2581 -2580 0
c Encoding variable: aux235 with domain: int(0..2) (representing constraint ((grid_00000_00001=6) + (grid_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux235' order represents '0' with '2582'
c Var 'aux235' direct represents '0' with '2582'
c Var 'aux235' order represents '1' with '2583'
-2582 2583 0
c Var 'aux235' direct represents '1' with '2584'
2582 -2583 2584 0
-2584 2583 0
-2584 -2582 0
c Var 'aux235' direct represents '2' with '-2583'
2582 2584 -2583 0
c Encoding variable: aux236 with domain: int(0..2) (representing constraint ((grid_00004_00005=6) + (6=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux236' order represents '0' with '2585'
c Var 'aux236' direct represents '0' with '2585'
c Var 'aux236' order represents '1' with '2586'
-2585 2586 0
c Var 'aux236' direct represents '1' with '2587'
2585 -2586 2587 0
-2587 2586 0
-2587 -2585 0
c Var 'aux236' direct represents '2' with '-2586'
2585 2587 -2586 0
c Encoding variable: aux237 with domain: int(0..2) (representing constraint ((grid_00004_00006=6) + (grid_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux237' order represents '0' with '2588'
c Var 'aux237' direct represents '0' with '2588'
c Var 'aux237' order represents '1' with '2589'
-2588 2589 0
c Var 'aux237' direct represents '1' with '2590'
2588 -2589 2590 0
-2590 2589 0
-2590 -2588 0
c Var 'aux237' direct represents '2' with '-2589'
2588 2590 -2589 0
c Encoding variable: aux238 with domain: int(0..2) (representing constraint ((6=grid_00006_00004) + (6=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux238' order represents '0' with '2591'
c Var 'aux238' direct represents '0' with '2591'
c Var 'aux238' order represents '1' with '2592'
-2591 2592 0
c Var 'aux238' direct represents '1' with '2593'
2591 -2592 2593 0
-2593 2592 0
-2593 -2591 0
c Var 'aux238' direct represents '2' with '-2592'
2591 2593 -2592 0
c Encoding variable: aux239 with domain: int(0..2) (representing constraint ((grid_00004_00003=6) + (grid_00003_00000=6)))
c Both direct and order encoding.
c Var 'aux239' order represents '0' with '2594'
c Var 'aux239' direct represents '0' with '2594'
c Var 'aux239' order represents '1' with '2595'
-2594 2595 0
c Var 'aux239' direct represents '1' with '2596'
2594 -2595 2596 0
-2596 2595 0
-2596 -2594 0
c Var 'aux239' direct represents '2' with '-2595'
2594 2596 -2595 0
c Encoding variable: aux240 with domain: int(0..2) (representing constraint ((grid_00004_00002=6) + (6=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux240' order represents '0' with '2597'
c Var 'aux240' direct represents '0' with '2597'
c Var 'aux240' order represents '1' with '2598'
-2597 2598 0
c Var 'aux240' direct represents '1' with '2599'
2597 -2598 2599 0
-2599 2598 0
-2599 -2597 0
c Var 'aux240' direct represents '2' with '-2598'
2597 2599 -2598 0
c Encoding variable: aux241 with domain: int(0..2) (representing constraint ((grid_00004_00001=6) + (6=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux241' order represents '0' with '2600'
c Var 'aux241' direct represents '0' with '2600'
c Var 'aux241' order represents '1' with '2601'
-2600 2601 0
c Var 'aux241' direct represents '1' with '2602'
2600 -2601 2602 0
-2602 2601 0
-2602 -2600 0
c Var 'aux241' direct represents '2' with '-2601'
2600 2602 -2601 0
c Encoding variable: aux242 with domain: int(0..2) (representing constraint ((grid_00004_00000=6) + (6=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux242' order represents '0' with '2603'
c Var 'aux242' direct represents '0' with '2603'
c Var 'aux242' order represents '1' with '2604'
-2603 2604 0
c Var 'aux242' direct represents '1' with '2605'
2603 -2604 2605 0
-2605 2604 0
-2605 -2603 0
c Var 'aux242' direct represents '2' with '-2604'
2603 2605 -2604 0
c Encoding variable: aux243 with domain: int(0..2) (representing constraint ((6=grid_00002_00006) + (6=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux243' order represents '0' with '2606'
c Var 'aux243' direct represents '0' with '2606'
c Var 'aux243' order represents '1' with '2607'
-2606 2607 0
c Var 'aux243' direct represents '1' with '2608'
2606 -2607 2608 0
-2608 2607 0
-2608 -2606 0
c Var 'aux243' direct represents '2' with '-2607'
2606 2608 -2607 0
c Encoding variable: aux244 with domain: int(0..2) (representing constraint ((6=grid_00002_00005) + (6=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux244' order represents '0' with '2609'
c Var 'aux244' direct represents '0' with '2609'
c Var 'aux244' order represents '1' with '2610'
-2609 2610 0
c Var 'aux244' direct represents '1' with '2611'
2609 -2610 2611 0
-2611 2610 0
-2611 -2609 0
c Var 'aux244' direct represents '2' with '-2610'
2609 2611 -2610 0
c Encoding variable: aux245 with domain: int(0..2) (representing constraint ((6=grid_00002_00004) + (6=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux245' order represents '0' with '2612'
c Var 'aux245' direct represents '0' with '2612'
c Var 'aux245' order represents '1' with '2613'
-2612 2613 0
c Var 'aux245' direct represents '1' with '2614'
2612 -2613 2614 0
-2614 2613 0
-2614 -2612 0
c Var 'aux245' direct represents '2' with '-2613'
2612 2614 -2613 0
c Encoding variable: aux246 with domain: int(0..2) (representing constraint ((6=grid_00002_00003) + (6=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux246' order represents '0' with '2615'
c Var 'aux246' direct represents '0' with '2615'
c Var 'aux246' order represents '1' with '2616'
-2615 2616 0
c Var 'aux246' direct represents '1' with '2617'
2615 -2616 2617 0
-2617 2616 0
-2617 -2615 0
c Var 'aux246' direct represents '2' with '-2616'
2615 2617 -2616 0
c Encoding variable: aux247 with domain: int(0..2) (representing constraint ((grid_00003_00002=6) + (6=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux247' order represents '0' with '2618'
c Var 'aux247' direct represents '0' with '2618'
c Var 'aux247' order represents '1' with '2619'
-2618 2619 0
c Var 'aux247' direct represents '1' with '2620'
2618 -2619 2620 0
-2620 2619 0
-2620 -2618 0
c Var 'aux247' direct represents '2' with '-2619'
2618 2620 -2619 0
c Encoding variable: aux248 with domain: int(0..2) (representing constraint ((6=grid_00001_00005) + (grid_00003_00003=6)))
c Both direct and order encoding.
c Var 'aux248' order represents '0' with '2621'
c Var 'aux248' direct represents '0' with '2621'
c Var 'aux248' order represents '1' with '2622'
-2621 2622 0
c Var 'aux248' direct represents '1' with '2623'
2621 -2622 2623 0
-2623 2622 0
-2623 -2621 0
c Var 'aux248' direct represents '2' with '-2622'
2621 2623 -2622 0
c Encoding variable: aux249 with domain: int(0..2) (representing constraint ((6=grid_00006_00000) + (6=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux249' order represents '0' with '2624'
c Var 'aux249' direct represents '0' with '2624'
c Var 'aux249' order represents '1' with '2625'
-2624 2625 0
c Var 'aux249' direct represents '1' with '2626'
2624 -2625 2626 0
-2626 2625 0
-2626 -2624 0
c Var 'aux249' direct represents '2' with '-2625'
2624 2626 -2625 0
c Encoding variable: aux250 with domain: int(0..4) (representing constraint (aux237 + aux249))
c Both direct and order encoding.
c Var 'aux250' order represents '0' with '2627'
c Var 'aux250' direct represents '0' with '2627'
c Var 'aux250' order represents '1' with '2628'
-2627 2628 0
c Var 'aux250' direct represents '1' with '2629'
2627 -2628 2629 0
-2629 2628 0
-2629 -2627 0
c Var 'aux250' order represents '2' with '2630'
-2628 2630 0
c Var 'aux250' direct represents '2' with '2631'
2628 -2630 2631 0
-2631 2630 0
-2631 -2628 0
c Var 'aux250' order represents '3' with '2632'
-2630 2632 0
c Var 'aux250' direct represents '3' with '2633'
2630 -2632 2633 0
-2633 2632 0
-2633 -2630 0
c Var 'aux250' direct represents '4' with '-2632'
2627 2629 2631 2633 -2632 0
c Encoding variable: aux251 with domain: int(0..4) (representing constraint (aux231 + aux244))
c Both direct and order encoding.
c Var 'aux251' order represents '0' with '2634'
c Var 'aux251' direct represents '0' with '2634'
c Var 'aux251' order represents '1' with '2635'
-2634 2635 0
c Var 'aux251' direct represents '1' with '2636'
2634 -2635 2636 0
-2636 2635 0
-2636 -2634 0
c Var 'aux251' order represents '2' with '2637'
-2635 2637 0
c Var 'aux251' direct represents '2' with '2638'
2635 -2637 2638 0
-2638 2637 0
-2638 -2635 0
c Var 'aux251' order represents '3' with '2639'
-2637 2639 0
c Var 'aux251' direct represents '3' with '2640'
2637 -2639 2640 0
-2640 2639 0
-2640 -2637 0
c Var 'aux251' direct represents '4' with '-2639'
2634 2636 2638 2640 -2639 0
c Encoding variable: aux252 with domain: int(0..4) (representing constraint (aux235 + aux230))
c Both direct and order encoding.
c Var 'aux252' order represents '0' with '2641'
c Var 'aux252' direct represents '0' with '2641'
c Var 'aux252' order represents '1' with '2642'
-2641 2642 0
c Var 'aux252' direct represents '1' with '2643'
2641 -2642 2643 0
-2643 2642 0
-2643 -2641 0
c Var 'aux252' order represents '2' with '2644'
-2642 2644 0
c Var 'aux252' direct represents '2' with '2645'
2642 -2644 2645 0
-2645 2644 0
-2645 -2642 0
c Var 'aux252' order represents '3' with '2646'
-2644 2646 0
c Var 'aux252' direct represents '3' with '2647'
2644 -2646 2647 0
-2647 2646 0
-2647 -2644 0
c Var 'aux252' direct represents '4' with '-2646'
2641 2643 2645 2647 -2646 0
c Encoding variable: aux253 with domain: int(0..4) (representing constraint (aux233 + aux232))
c Both direct and order encoding.
c Var 'aux253' order represents '0' with '2648'
c Var 'aux253' direct represents '0' with '2648'
c Var 'aux253' order represents '1' with '2649'
-2648 2649 0
c Var 'aux253' direct represents '1' with '2650'
2648 -2649 2650 0
-2650 2649 0
-2650 -2648 0
c Var 'aux253' order represents '2' with '2651'
-2649 2651 0
c Var 'aux253' direct represents '2' with '2652'
2649 -2651 2652 0
-2652 2651 0
-2652 -2649 0
c Var 'aux253' order represents '3' with '2653'
-2651 2653 0
c Var 'aux253' direct represents '3' with '2654'
2651 -2653 2654 0
-2654 2653 0
-2654 -2651 0
c Var 'aux253' direct represents '4' with '-2653'
2648 2650 2652 2654 -2653 0
c Encoding variable: aux254 with domain: int(0..4) (representing constraint (aux234 + aux236))
c Both direct and order encoding.
c Var 'aux254' order represents '0' with '2655'
c Var 'aux254' direct represents '0' with '2655'
c Var 'aux254' order represents '1' with '2656'
-2655 2656 0
c Var 'aux254' direct represents '1' with '2657'
2655 -2656 2657 0
-2657 2656 0
-2657 -2655 0
c Var 'aux254' order represents '2' with '2658'
-2656 2658 0
c Var 'aux254' direct represents '2' with '2659'
2656 -2658 2659 0
-2659 2658 0
-2659 -2656 0
c Var 'aux254' order represents '3' with '2660'
-2658 2660 0
c Var 'aux254' direct represents '3' with '2661'
2658 -2660 2661 0
-2661 2660 0
-2661 -2658 0
c Var 'aux254' direct represents '4' with '-2660'
2655 2657 2659 2661 -2660 0
c Encoding variable: aux255 with domain: int(0..4) (representing constraint (aux247 + aux243))
c Both direct and order encoding.
c Var 'aux255' order represents '0' with '2662'
c Var 'aux255' direct represents '0' with '2662'
c Var 'aux255' order represents '1' with '2663'
-2662 2663 0
c Var 'aux255' direct represents '1' with '2664'
2662 -2663 2664 0
-2664 2663 0
-2664 -2662 0
c Var 'aux255' order represents '2' with '2665'
-2663 2665 0
c Var 'aux255' direct represents '2' with '2666'
2663 -2665 2666 0
-2666 2665 0
-2666 -2663 0
c Var 'aux255' order represents '3' with '2667'
-2665 2667 0
c Var 'aux255' direct represents '3' with '2668'
2665 -2667 2668 0
-2668 2667 0
-2668 -2665 0
c Var 'aux255' direct represents '4' with '-2667'
2662 2664 2666 2668 -2667 0
c Encoding variable: aux256 with domain: int(0..4) (representing constraint (aux240 + aux239))
c Both direct and order encoding.
c Var 'aux256' order represents '0' with '2669'
c Var 'aux256' direct represents '0' with '2669'
c Var 'aux256' order represents '1' with '2670'
-2669 2670 0
c Var 'aux256' direct represents '1' with '2671'
2669 -2670 2671 0
-2671 2670 0
-2671 -2669 0
c Var 'aux256' order represents '2' with '2672'
-2670 2672 0
c Var 'aux256' direct represents '2' with '2673'
2670 -2672 2673 0
-2673 2672 0
-2673 -2670 0
c Var 'aux256' order represents '3' with '2674'
-2672 2674 0
c Var 'aux256' direct represents '3' with '2675'
2672 -2674 2675 0
-2675 2674 0
-2675 -2672 0
c Var 'aux256' direct represents '4' with '-2674'
2669 2671 2673 2675 -2674 0
c Encoding variable: aux257 with domain: int(0..4) (representing constraint (aux241 + aux242))
c Both direct and order encoding.
c Var 'aux257' order represents '0' with '2676'
c Var 'aux257' direct represents '0' with '2676'
c Var 'aux257' order represents '1' with '2677'
-2676 2677 0
c Var 'aux257' direct represents '1' with '2678'
2676 -2677 2678 0
-2678 2677 0
-2678 -2676 0
c Var 'aux257' order represents '2' with '2679'
-2677 2679 0
c Var 'aux257' direct represents '2' with '2680'
2677 -2679 2680 0
-2680 2679 0
-2680 -2677 0
c Var 'aux257' order represents '3' with '2681'
-2679 2681 0
c Var 'aux257' direct represents '3' with '2682'
2679 -2681 2682 0
-2682 2681 0
-2682 -2679 0
c Var 'aux257' direct represents '4' with '-2681'
2676 2678 2680 2682 -2681 0
c Encoding variable: aux258 with domain: int(0..4) (representing constraint (aux245 + aux248))
c Both direct and order encoding.
c Var 'aux258' order represents '0' with '2683'
c Var 'aux258' direct represents '0' with '2683'
c Var 'aux258' order represents '1' with '2684'
-2683 2684 0
c Var 'aux258' direct represents '1' with '2685'
2683 -2684 2685 0
-2685 2684 0
-2685 -2683 0
c Var 'aux258' order represents '2' with '2686'
-2684 2686 0
c Var 'aux258' direct represents '2' with '2687'
2684 -2686 2687 0
-2687 2686 0
-2687 -2684 0
c Var 'aux258' order represents '3' with '2688'
-2686 2688 0
c Var 'aux258' direct represents '3' with '2689'
2686 -2688 2689 0
-2689 2688 0
-2689 -2686 0
c Var 'aux258' direct represents '4' with '-2688'
2683 2685 2687 2689 -2688 0
c Encoding variable: aux259 with domain: int(0..4) (representing constraint (aux246 + aux238))
c Both direct and order encoding.
c Var 'aux259' order represents '0' with '2690'
c Var 'aux259' direct represents '0' with '2690'
c Var 'aux259' order represents '1' with '2691'
-2690 2691 0
c Var 'aux259' direct represents '1' with '2692'
2690 -2691 2692 0
-2692 2691 0
-2692 -2690 0
c Var 'aux259' order represents '2' with '2693'
-2691 2693 0
c Var 'aux259' direct represents '2' with '2694'
2691 -2693 2694 0
-2694 2693 0
-2694 -2691 0
c Var 'aux259' order represents '3' with '2695'
-2693 2695 0
c Var 'aux259' direct represents '3' with '2696'
2693 -2695 2696 0
-2696 2695 0
-2696 -2693 0
c Var 'aux259' direct represents '4' with '-2695'
2690 2692 2694 2696 -2695 0
c Encoding variable: aux260 with domain: int(0..8) (representing constraint (aux253 + aux259))
c Both direct and order encoding.
c Var 'aux260' order represents '0' with '2697'
c Var 'aux260' direct represents '0' with '2697'
c Var 'aux260' order represents '1' with '2698'
-2697 2698 0
c Var 'aux260' direct represents '1' with '2699'
2697 -2698 2699 0
-2699 2698 0
-2699 -2697 0
c Var 'aux260' order represents '2' with '2700'
-2698 2700 0
c Var 'aux260' direct represents '2' with '2701'
2698 -2700 2701 0
-2701 2700 0
-2701 -2698 0
c Var 'aux260' order represents '3' with '2702'
-2700 2702 0
c Var 'aux260' direct represents '3' with '2703'
2700 -2702 2703 0
-2703 2702 0
-2703 -2700 0
c Var 'aux260' order represents '4' with '2704'
-2702 2704 0
c Var 'aux260' direct represents '4' with '2705'
2702 -2704 2705 0
-2705 2704 0
-2705 -2702 0
c Var 'aux260' order represents '5' with '2706'
-2704 2706 0
c Var 'aux260' direct represents '5' with '2707'
2704 -2706 2707 0
-2707 2706 0
-2707 -2704 0
c Var 'aux260' order represents '6' with '2708'
-2706 2708 0
c Var 'aux260' direct represents '6' with '2709'
2706 -2708 2709 0
-2709 2708 0
-2709 -2706 0
c Var 'aux260' order represents '7' with '2710'
-2708 2710 0
c Var 'aux260' direct represents '7' with '2711'
2708 -2710 2711 0
-2711 2710 0
-2711 -2708 0
c Var 'aux260' direct represents '8' with '-2710'
2697 2699 2701 2703 2705 2707 2709 2711 -2710 0
c Encoding variable: aux261 with domain: int(0..8) (representing constraint (aux252 + aux256))
c Both direct and order encoding.
c Var 'aux261' order represents '0' with '2712'
c Var 'aux261' direct represents '0' with '2712'
c Var 'aux261' order represents '1' with '2713'
-2712 2713 0
c Var 'aux261' direct represents '1' with '2714'
2712 -2713 2714 0
-2714 2713 0
-2714 -2712 0
c Var 'aux261' order represents '2' with '2715'
-2713 2715 0
c Var 'aux261' direct represents '2' with '2716'
2713 -2715 2716 0
-2716 2715 0
-2716 -2713 0
c Var 'aux261' order represents '3' with '2717'
-2715 2717 0
c Var 'aux261' direct represents '3' with '2718'
2715 -2717 2718 0
-2718 2717 0
-2718 -2715 0
c Var 'aux261' order represents '4' with '2719'
-2717 2719 0
c Var 'aux261' direct represents '4' with '2720'
2717 -2719 2720 0
-2720 2719 0
-2720 -2717 0
c Var 'aux261' order represents '5' with '2721'
-2719 2721 0
c Var 'aux261' direct represents '5' with '2722'
2719 -2721 2722 0
-2722 2721 0
-2722 -2719 0
c Var 'aux261' order represents '6' with '2723'
-2721 2723 0
c Var 'aux261' direct represents '6' with '2724'
2721 -2723 2724 0
-2724 2723 0
-2724 -2721 0
c Var 'aux261' order represents '7' with '2725'
-2723 2725 0
c Var 'aux261' direct represents '7' with '2726'
2723 -2725 2726 0
-2726 2725 0
-2726 -2723 0
c Var 'aux261' direct represents '8' with '-2725'
2712 2714 2716 2718 2720 2722 2724 2726 -2725 0
c Encoding variable: aux262 with domain: int(0..8) (representing constraint (aux250 + aux251))
c Both direct and order encoding.
c Var 'aux262' order represents '0' with '2727'
c Var 'aux262' direct represents '0' with '2727'
c Var 'aux262' order represents '1' with '2728'
-2727 2728 0
c Var 'aux262' direct represents '1' with '2729'
2727 -2728 2729 0
-2729 2728 0
-2729 -2727 0
c Var 'aux262' order represents '2' with '2730'
-2728 2730 0
c Var 'aux262' direct represents '2' with '2731'
2728 -2730 2731 0
-2731 2730 0
-2731 -2728 0
c Var 'aux262' order represents '3' with '2732'
-2730 2732 0
c Var 'aux262' direct represents '3' with '2733'
2730 -2732 2733 0
-2733 2732 0
-2733 -2730 0
c Var 'aux262' order represents '4' with '2734'
-2732 2734 0
c Var 'aux262' direct represents '4' with '2735'
2732 -2734 2735 0
-2735 2734 0
-2735 -2732 0
c Var 'aux262' order represents '5' with '2736'
-2734 2736 0
c Var 'aux262' direct represents '5' with '2737'
2734 -2736 2737 0
-2737 2736 0
-2737 -2734 0
c Var 'aux262' order represents '6' with '2738'
-2736 2738 0
c Var 'aux262' direct represents '6' with '2739'
2736 -2738 2739 0
-2739 2738 0
-2739 -2736 0
c Var 'aux262' order represents '7' with '2740'
-2738 2740 0
c Var 'aux262' direct represents '7' with '2741'
2738 -2740 2741 0
-2741 2740 0
-2741 -2738 0
c Var 'aux262' direct represents '8' with '-2740'
2727 2729 2731 2733 2735 2737 2739 2741 -2740 0
c Encoding variable: aux263 with domain: int(0..8) (representing constraint (aux254 + aux255))
c Both direct and order encoding.
c Var 'aux263' order represents '0' with '2742'
c Var 'aux263' direct represents '0' with '2742'
c Var 'aux263' order represents '1' with '2743'
-2742 2743 0
c Var 'aux263' direct represents '1' with '2744'
2742 -2743 2744 0
-2744 2743 0
-2744 -2742 0
c Var 'aux263' order represents '2' with '2745'
-2743 2745 0
c Var 'aux263' direct represents '2' with '2746'
2743 -2745 2746 0
-2746 2745 0
-2746 -2743 0
c Var 'aux263' order represents '3' with '2747'
-2745 2747 0
c Var 'aux263' direct represents '3' with '2748'
2745 -2747 2748 0
-2748 2747 0
-2748 -2745 0
c Var 'aux263' order represents '4' with '2749'
-2747 2749 0
c Var 'aux263' direct represents '4' with '2750'
2747 -2749 2750 0
-2750 2749 0
-2750 -2747 0
c Var 'aux263' order represents '5' with '2751'
-2749 2751 0
c Var 'aux263' direct represents '5' with '2752'
2749 -2751 2752 0
-2752 2751 0
-2752 -2749 0
c Var 'aux263' order represents '6' with '2753'
-2751 2753 0
c Var 'aux263' direct represents '6' with '2754'
2751 -2753 2754 0
-2754 2753 0
-2754 -2751 0
c Var 'aux263' order represents '7' with '2755'
-2753 2755 0
c Var 'aux263' direct represents '7' with '2756'
2753 -2755 2756 0
-2756 2755 0
-2756 -2753 0
c Var 'aux263' direct represents '8' with '-2755'
2742 2744 2746 2748 2750 2752 2754 2756 -2755 0
c Encoding variable: aux264 with domain: int(0..8) (representing constraint (aux257 + aux258))
c Both direct and order encoding.
c Var 'aux264' order represents '0' with '2757'
c Var 'aux264' direct represents '0' with '2757'
c Var 'aux264' order represents '1' with '2758'
-2757 2758 0
c Var 'aux264' direct represents '1' with '2759'
2757 -2758 2759 0
-2759 2758 0
-2759 -2757 0
c Var 'aux264' order represents '2' with '2760'
-2758 2760 0
c Var 'aux264' direct represents '2' with '2761'
2758 -2760 2761 0
-2761 2760 0
-2761 -2758 0
c Var 'aux264' order represents '3' with '2762'
-2760 2762 0
c Var 'aux264' direct represents '3' with '2763'
2760 -2762 2763 0
-2763 2762 0
-2763 -2760 0
c Var 'aux264' order represents '4' with '2764'
-2762 2764 0
c Var 'aux264' direct represents '4' with '2765'
2762 -2764 2765 0
-2765 2764 0
-2765 -2762 0
c Var 'aux264' order represents '5' with '2766'
-2764 2766 0
c Var 'aux264' direct represents '5' with '2767'
2764 -2766 2767 0
-2767 2766 0
-2767 -2764 0
c Var 'aux264' order represents '6' with '2768'
-2766 2768 0
c Var 'aux264' direct represents '6' with '2769'
2766 -2768 2769 0
-2769 2768 0
-2769 -2766 0
c Var 'aux264' order represents '7' with '2770'
-2768 2770 0
c Var 'aux264' direct represents '7' with '2771'
2768 -2770 2771 0
-2771 2770 0
-2771 -2768 0
c Var 'aux264' direct represents '8' with '-2770'
2757 2759 2761 2763 2765 2767 2769 2771 -2770 0
c Encoding variable: aux265 with domain: int(0..16) (representing constraint (aux261 + aux264))
c Both direct and order encoding.
c Var 'aux265' order represents '0' with '2772'
c Var 'aux265' direct represents '0' with '2772'
c Var 'aux265' order represents '1' with '2773'
-2772 2773 0
c Var 'aux265' direct represents '1' with '2774'
2772 -2773 2774 0
-2774 2773 0
-2774 -2772 0
c Var 'aux265' order represents '2' with '2775'
-2773 2775 0
c Var 'aux265' direct represents '2' with '2776'
2773 -2775 2776 0
-2776 2775 0
-2776 -2773 0
c Var 'aux265' order represents '3' with '2777'
-2775 2777 0
c Var 'aux265' direct represents '3' with '2778'
2775 -2777 2778 0
-2778 2777 0
-2778 -2775 0
c Var 'aux265' order represents '4' with '2779'
-2777 2779 0
c Var 'aux265' direct represents '4' with '2780'
2777 -2779 2780 0
-2780 2779 0
-2780 -2777 0
c Var 'aux265' order represents '5' with '2781'
-2779 2781 0
c Var 'aux265' direct represents '5' with '2782'
2779 -2781 2782 0
-2782 2781 0
-2782 -2779 0
c Var 'aux265' order represents '6' with '2783'
-2781 2783 0
c Var 'aux265' direct represents '6' with '2784'
2781 -2783 2784 0
-2784 2783 0
-2784 -2781 0
c Var 'aux265' order represents '7' with '2785'
-2783 2785 0
c Var 'aux265' direct represents '7' with '2786'
2783 -2785 2786 0
-2786 2785 0
-2786 -2783 0
c Var 'aux265' order represents '8' with '2787'
-2785 2787 0
c Var 'aux265' direct represents '8' with '2788'
2785 -2787 2788 0
-2788 2787 0
-2788 -2785 0
c Var 'aux265' order represents '9' with '2789'
-2787 2789 0
c Var 'aux265' direct represents '9' with '2790'
2787 -2789 2790 0
-2790 2789 0
-2790 -2787 0
c Var 'aux265' order represents '10' with '2791'
-2789 2791 0
c Var 'aux265' direct represents '10' with '2792'
2789 -2791 2792 0
-2792 2791 0
-2792 -2789 0
c Var 'aux265' order represents '11' with '2793'
-2791 2793 0
c Var 'aux265' direct represents '11' with '2794'
2791 -2793 2794 0
-2794 2793 0
-2794 -2791 0
c Var 'aux265' order represents '12' with '2795'
-2793 2795 0
c Var 'aux265' direct represents '12' with '2796'
2793 -2795 2796 0
-2796 2795 0
-2796 -2793 0
c Var 'aux265' order represents '13' with '2797'
-2795 2797 0
c Var 'aux265' direct represents '13' with '2798'
2795 -2797 2798 0
-2798 2797 0
-2798 -2795 0
c Var 'aux265' order represents '14' with '2799'
-2797 2799 0
c Var 'aux265' direct represents '14' with '2800'
2797 -2799 2800 0
-2800 2799 0
-2800 -2797 0
c Var 'aux265' order represents '15' with '2801'
-2799 2801 0
c Var 'aux265' direct represents '15' with '2802'
2799 -2801 2802 0
-2802 2801 0
-2802 -2799 0
c Var 'aux265' direct represents '16' with '-2801'
2772 2774 2776 2778 2780 2782 2784 2786 2788 2790 2792 2794 2796 2798 2800 2802 -2801 0
c Encoding variable: aux266 with domain: int(0..16) (representing constraint (aux260 + aux262))
c Both direct and order encoding.
c Var 'aux266' order represents '0' with '2803'
c Var 'aux266' direct represents '0' with '2803'
c Var 'aux266' order represents '1' with '2804'
-2803 2804 0
c Var 'aux266' direct represents '1' with '2805'
2803 -2804 2805 0
-2805 2804 0
-2805 -2803 0
c Var 'aux266' order represents '2' with '2806'
-2804 2806 0
c Var 'aux266' direct represents '2' with '2807'
2804 -2806 2807 0
-2807 2806 0
-2807 -2804 0
c Var 'aux266' order represents '3' with '2808'
-2806 2808 0
c Var 'aux266' direct represents '3' with '2809'
2806 -2808 2809 0
-2809 2808 0
-2809 -2806 0
c Var 'aux266' order represents '4' with '2810'
-2808 2810 0
c Var 'aux266' direct represents '4' with '2811'
2808 -2810 2811 0
-2811 2810 0
-2811 -2808 0
c Var 'aux266' order represents '5' with '2812'
-2810 2812 0
c Var 'aux266' direct represents '5' with '2813'
2810 -2812 2813 0
-2813 2812 0
-2813 -2810 0
c Var 'aux266' order represents '6' with '2814'
-2812 2814 0
c Var 'aux266' direct represents '6' with '2815'
2812 -2814 2815 0
-2815 2814 0
-2815 -2812 0
c Var 'aux266' order represents '7' with '2816'
-2814 2816 0
c Var 'aux266' direct represents '7' with '2817'
2814 -2816 2817 0
-2817 2816 0
-2817 -2814 0
c Var 'aux266' order represents '8' with '2818'
-2816 2818 0
c Var 'aux266' direct represents '8' with '2819'
2816 -2818 2819 0
-2819 2818 0
-2819 -2816 0
c Var 'aux266' order represents '9' with '2820'
-2818 2820 0
c Var 'aux266' direct represents '9' with '2821'
2818 -2820 2821 0
-2821 2820 0
-2821 -2818 0
c Var 'aux266' order represents '10' with '2822'
-2820 2822 0
c Var 'aux266' direct represents '10' with '2823'
2820 -2822 2823 0
-2823 2822 0
-2823 -2820 0
c Var 'aux266' order represents '11' with '2824'
-2822 2824 0
c Var 'aux266' direct represents '11' with '2825'
2822 -2824 2825 0
-2825 2824 0
-2825 -2822 0
c Var 'aux266' order represents '12' with '2826'
-2824 2826 0
c Var 'aux266' direct represents '12' with '2827'
2824 -2826 2827 0
-2827 2826 0
-2827 -2824 0
c Var 'aux266' order represents '13' with '2828'
-2826 2828 0
c Var 'aux266' direct represents '13' with '2829'
2826 -2828 2829 0
-2829 2828 0
-2829 -2826 0
c Var 'aux266' order represents '14' with '2830'
-2828 2830 0
c Var 'aux266' direct represents '14' with '2831'
2828 -2830 2831 0
-2831 2830 0
-2831 -2828 0
c Var 'aux266' order represents '15' with '2832'
-2830 2832 0
c Var 'aux266' direct represents '15' with '2833'
2830 -2832 2833 0
-2833 2832 0
-2833 -2830 0
c Var 'aux266' direct represents '16' with '-2832'
2803 2805 2807 2809 2811 2813 2815 2817 2819 2821 2823 2825 2827 2829 2831 2833 -2832 0
c Encoding variable: aux267 with domain: int(0..2) (representing constraint ((7=grid_00005_00000) + (grid_00000_00006=7)))
c Both direct and order encoding.
c Var 'aux267' order represents '0' with '2834'
c Var 'aux267' direct represents '0' with '2834'
c Var 'aux267' order represents '1' with '2835'
-2834 2835 0
c Var 'aux267' direct represents '1' with '2836'
2834 -2835 2836 0
-2836 2835 0
-2836 -2834 0
c Var 'aux267' direct represents '2' with '-2835'
2834 2836 -2835 0
c Encoding variable: aux268 with domain: int(0..2) (representing constraint ((grid_00000_00005=7) + (7=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux268' order represents '0' with '2837'
c Var 'aux268' direct represents '0' with '2837'
c Var 'aux268' order represents '1' with '2838'
-2837 2838 0
c Var 'aux268' direct represents '1' with '2839'
2837 -2838 2839 0
-2839 2838 0
-2839 -2837 0
c Var 'aux268' direct represents '2' with '-2838'
2837 2839 -2838 0
c Encoding variable: aux269 with domain: int(0..2) (representing constraint ((grid_00000_00004=7) + (7=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux269' order represents '0' with '2840'
c Var 'aux269' direct represents '0' with '2840'
c Var 'aux269' order represents '1' with '2841'
-2840 2841 0
c Var 'aux269' direct represents '1' with '2842'
2840 -2841 2842 0
-2842 2841 0
-2842 -2840 0
c Var 'aux269' direct represents '2' with '-2841'
2840 2842 -2841 0
c Encoding variable: aux270 with domain: int(0..2) (representing constraint ((grid_00000_00003=7) + (grid_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux270' order represents '0' with '2843'
c Var 'aux270' direct represents '0' with '2843'
c Var 'aux270' order represents '1' with '2844'
-2843 2844 0
c Var 'aux270' direct represents '1' with '2845'
2843 -2844 2845 0
-2845 2844 0
-2845 -2843 0
c Var 'aux270' direct represents '2' with '-2844'
2843 2845 -2844 0
c Encoding variable: aux271 with domain: int(0..2) (representing constraint ((grid_00000_00002=7) + (7=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux271' order represents '0' with '2846'
c Var 'aux271' direct represents '0' with '2846'
c Var 'aux271' order represents '1' with '2847'
-2846 2847 0
c Var 'aux271' direct represents '1' with '2848'
2846 -2847 2848 0
-2848 2847 0
-2848 -2846 0
c Var 'aux271' direct represents '2' with '-2847'
2846 2848 -2847 0
c Encoding variable: aux272 with domain: int(0..2) (representing constraint ((grid_00000_00001=7) + (grid_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux272' order represents '0' with '2849'
c Var 'aux272' direct represents '0' with '2849'
c Var 'aux272' order represents '1' with '2850'
-2849 2850 0
c Var 'aux272' direct represents '1' with '2851'
2849 -2850 2851 0
-2851 2850 0
-2851 -2849 0
c Var 'aux272' direct represents '2' with '-2850'
2849 2851 -2850 0
c Encoding variable: aux273 with domain: int(0..2) (representing constraint ((grid_00004_00005=7) + (7=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux273' order represents '0' with '2852'
c Var 'aux273' direct represents '0' with '2852'
c Var 'aux273' order represents '1' with '2853'
-2852 2853 0
c Var 'aux273' direct represents '1' with '2854'
2852 -2853 2854 0
-2854 2853 0
-2854 -2852 0
c Var 'aux273' direct represents '2' with '-2853'
2852 2854 -2853 0
c Encoding variable: aux274 with domain: int(0..2) (representing constraint ((grid_00004_00006=7) + (grid_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux274' order represents '0' with '2855'
c Var 'aux274' direct represents '0' with '2855'
c Var 'aux274' order represents '1' with '2856'
-2855 2856 0
c Var 'aux274' direct represents '1' with '2857'
2855 -2856 2857 0
-2857 2856 0
-2857 -2855 0
c Var 'aux274' direct represents '2' with '-2856'
2855 2857 -2856 0
c Encoding variable: aux275 with domain: int(0..2) (representing constraint ((7=grid_00006_00004) + (7=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux275' order represents '0' with '2858'
c Var 'aux275' direct represents '0' with '2858'
c Var 'aux275' order represents '1' with '2859'
-2858 2859 0
c Var 'aux275' direct represents '1' with '2860'
2858 -2859 2860 0
-2860 2859 0
-2860 -2858 0
c Var 'aux275' direct represents '2' with '-2859'
2858 2860 -2859 0
c Encoding variable: aux276 with domain: int(0..2) (representing constraint ((grid_00004_00003=7) + (grid_00003_00000=7)))
c Both direct and order encoding.
c Var 'aux276' order represents '0' with '2861'
c Var 'aux276' direct represents '0' with '2861'
c Var 'aux276' order represents '1' with '2862'
-2861 2862 0
c Var 'aux276' direct represents '1' with '2863'
2861 -2862 2863 0
-2863 2862 0
-2863 -2861 0
c Var 'aux276' direct represents '2' with '-2862'
2861 2863 -2862 0
c Encoding variable: aux277 with domain: int(0..2) (representing constraint ((grid_00004_00002=7) + (7=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux277' order represents '0' with '2864'
c Var 'aux277' direct represents '0' with '2864'
c Var 'aux277' order represents '1' with '2865'
-2864 2865 0
c Var 'aux277' direct represents '1' with '2866'
2864 -2865 2866 0
-2866 2865 0
-2866 -2864 0
c Var 'aux277' direct represents '2' with '-2865'
2864 2866 -2865 0
c Encoding variable: aux278 with domain: int(0..2) (representing constraint ((grid_00004_00001=7) + (7=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux278' order represents '0' with '2867'
c Var 'aux278' direct represents '0' with '2867'
c Var 'aux278' order represents '1' with '2868'
-2867 2868 0
c Var 'aux278' direct represents '1' with '2869'
2867 -2868 2869 0
-2869 2868 0
-2869 -2867 0
c Var 'aux278' direct represents '2' with '-2868'
2867 2869 -2868 0
c Encoding variable: aux279 with domain: int(0..2) (representing constraint ((grid_00004_00000=7) + (7=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux279' order represents '0' with '2870'
c Var 'aux279' direct represents '0' with '2870'
c Var 'aux279' order represents '1' with '2871'
-2870 2871 0
c Var 'aux279' direct represents '1' with '2872'
2870 -2871 2872 0
-2872 2871 0
-2872 -2870 0
c Var 'aux279' direct represents '2' with '-2871'
2870 2872 -2871 0
c Encoding variable: aux280 with domain: int(0..2) (representing constraint ((7=grid_00002_00006) + (7=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux280' order represents '0' with '2873'
c Var 'aux280' direct represents '0' with '2873'
c Var 'aux280' order represents '1' with '2874'
-2873 2874 0
c Var 'aux280' direct represents '1' with '2875'
2873 -2874 2875 0
-2875 2874 0
-2875 -2873 0
c Var 'aux280' direct represents '2' with '-2874'
2873 2875 -2874 0
c Encoding variable: aux281 with domain: int(0..2) (representing constraint ((7=grid_00002_00005) + (7=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux281' order represents '0' with '2876'
c Var 'aux281' direct represents '0' with '2876'
c Var 'aux281' order represents '1' with '2877'
-2876 2877 0
c Var 'aux281' direct represents '1' with '2878'
2876 -2877 2878 0
-2878 2877 0
-2878 -2876 0
c Var 'aux281' direct represents '2' with '-2877'
2876 2878 -2877 0
c Encoding variable: aux282 with domain: int(0..2) (representing constraint ((7=grid_00002_00004) + (7=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux282' order represents '0' with '2879'
c Var 'aux282' direct represents '0' with '2879'
c Var 'aux282' order represents '1' with '2880'
-2879 2880 0
c Var 'aux282' direct represents '1' with '2881'
2879 -2880 2881 0
-2881 2880 0
-2881 -2879 0
c Var 'aux282' direct represents '2' with '-2880'
2879 2881 -2880 0
c Encoding variable: aux283 with domain: int(0..2) (representing constraint ((7=grid_00002_00003) + (7=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux283' order represents '0' with '2882'
c Var 'aux283' direct represents '0' with '2882'
c Var 'aux283' order represents '1' with '2883'
-2882 2883 0
c Var 'aux283' direct represents '1' with '2884'
2882 -2883 2884 0
-2884 2883 0
-2884 -2882 0
c Var 'aux283' direct represents '2' with '-2883'
2882 2884 -2883 0
c Encoding variable: aux284 with domain: int(0..2) (representing constraint ((grid_00003_00002=7) + (7=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux284' order represents '0' with '2885'
c Var 'aux284' direct represents '0' with '2885'
c Var 'aux284' order represents '1' with '2886'
-2885 2886 0
c Var 'aux284' direct represents '1' with '2887'
2885 -2886 2887 0
-2887 2886 0
-2887 -2885 0
c Var 'aux284' direct represents '2' with '-2886'
2885 2887 -2886 0
c Encoding variable: aux285 with domain: int(0..2) (representing constraint ((7=grid_00001_00005) + (grid_00003_00003=7)))
c Both direct and order encoding.
c Var 'aux285' order represents '0' with '2888'
c Var 'aux285' direct represents '0' with '2888'
c Var 'aux285' order represents '1' with '2889'
-2888 2889 0
c Var 'aux285' direct represents '1' with '2890'
2888 -2889 2890 0
-2890 2889 0
-2890 -2888 0
c Var 'aux285' direct represents '2' with '-2889'
2888 2890 -2889 0
c Encoding variable: aux286 with domain: int(0..2) (representing constraint ((7=grid_00006_00000) + (7=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux286' order represents '0' with '2891'
c Var 'aux286' direct represents '0' with '2891'
c Var 'aux286' order represents '1' with '2892'
-2891 2892 0
c Var 'aux286' direct represents '1' with '2893'
2891 -2892 2893 0
-2893 2892 0
-2893 -2891 0
c Var 'aux286' direct represents '2' with '-2892'
2891 2893 -2892 0
c Encoding variable: aux287 with domain: int(0..4) (representing constraint (aux274 + aux286))
c Both direct and order encoding.
c Var 'aux287' order represents '0' with '2894'
c Var 'aux287' direct represents '0' with '2894'
c Var 'aux287' order represents '1' with '2895'
-2894 2895 0
c Var 'aux287' direct represents '1' with '2896'
2894 -2895 2896 0
-2896 2895 0
-2896 -2894 0
c Var 'aux287' order represents '2' with '2897'
-2895 2897 0
c Var 'aux287' direct represents '2' with '2898'
2895 -2897 2898 0
-2898 2897 0
-2898 -2895 0
c Var 'aux287' order represents '3' with '2899'
-2897 2899 0
c Var 'aux287' direct represents '3' with '2900'
2897 -2899 2900 0
-2900 2899 0
-2900 -2897 0
c Var 'aux287' direct represents '4' with '-2899'
2894 2896 2898 2900 -2899 0
c Encoding variable: aux288 with domain: int(0..4) (representing constraint (aux268 + aux281))
c Both direct and order encoding.
c Var 'aux288' order represents '0' with '2901'
c Var 'aux288' direct represents '0' with '2901'
c Var 'aux288' order represents '1' with '2902'
-2901 2902 0
c Var 'aux288' direct represents '1' with '2903'
2901 -2902 2903 0
-2903 2902 0
-2903 -2901 0
c Var 'aux288' order represents '2' with '2904'
-2902 2904 0
c Var 'aux288' direct represents '2' with '2905'
2902 -2904 2905 0
-2905 2904 0
-2905 -2902 0
c Var 'aux288' order represents '3' with '2906'
-2904 2906 0
c Var 'aux288' direct represents '3' with '2907'
2904 -2906 2907 0
-2907 2906 0
-2907 -2904 0
c Var 'aux288' direct represents '4' with '-2906'
2901 2903 2905 2907 -2906 0
c Encoding variable: aux289 with domain: int(0..4) (representing constraint (aux272 + aux267))
c Both direct and order encoding.
c Var 'aux289' order represents '0' with '2908'
c Var 'aux289' direct represents '0' with '2908'
c Var 'aux289' order represents '1' with '2909'
-2908 2909 0
c Var 'aux289' direct represents '1' with '2910'
2908 -2909 2910 0
-2910 2909 0
-2910 -2908 0
c Var 'aux289' order represents '2' with '2911'
-2909 2911 0
c Var 'aux289' direct represents '2' with '2912'
2909 -2911 2912 0
-2912 2911 0
-2912 -2909 0
c Var 'aux289' order represents '3' with '2913'
-2911 2913 0
c Var 'aux289' direct represents '3' with '2914'
2911 -2913 2914 0
-2914 2913 0
-2914 -2911 0
c Var 'aux289' direct represents '4' with '-2913'
2908 2910 2912 2914 -2913 0
c Encoding variable: aux290 with domain: int(0..4) (representing constraint (aux270 + aux269))
c Both direct and order encoding.
c Var 'aux290' order represents '0' with '2915'
c Var 'aux290' direct represents '0' with '2915'
c Var 'aux290' order represents '1' with '2916'
-2915 2916 0
c Var 'aux290' direct represents '1' with '2917'
2915 -2916 2917 0
-2917 2916 0
-2917 -2915 0
c Var 'aux290' order represents '2' with '2918'
-2916 2918 0
c Var 'aux290' direct represents '2' with '2919'
2916 -2918 2919 0
-2919 2918 0
-2919 -2916 0
c Var 'aux290' order represents '3' with '2920'
-2918 2920 0
c Var 'aux290' direct represents '3' with '2921'
2918 -2920 2921 0
-2921 2920 0
-2921 -2918 0
c Var 'aux290' direct represents '4' with '-2920'
2915 2917 2919 2921 -2920 0
c Encoding variable: aux291 with domain: int(0..4) (representing constraint (aux271 + aux273))
c Both direct and order encoding.
c Var 'aux291' order represents '0' with '2922'
c Var 'aux291' direct represents '0' with '2922'
c Var 'aux291' order represents '1' with '2923'
-2922 2923 0
c Var 'aux291' direct represents '1' with '2924'
2922 -2923 2924 0
-2924 2923 0
-2924 -2922 0
c Var 'aux291' order represents '2' with '2925'
-2923 2925 0
c Var 'aux291' direct represents '2' with '2926'
2923 -2925 2926 0
-2926 2925 0
-2926 -2923 0
c Var 'aux291' order represents '3' with '2927'
-2925 2927 0
c Var 'aux291' direct represents '3' with '2928'
2925 -2927 2928 0
-2928 2927 0
-2928 -2925 0
c Var 'aux291' direct represents '4' with '-2927'
2922 2924 2926 2928 -2927 0
c Encoding variable: aux292 with domain: int(0..4) (representing constraint (aux284 + aux280))
c Both direct and order encoding.
c Var 'aux292' order represents '0' with '2929'
c Var 'aux292' direct represents '0' with '2929'
c Var 'aux292' order represents '1' with '2930'
-2929 2930 0
c Var 'aux292' direct represents '1' with '2931'
2929 -2930 2931 0
-2931 2930 0
-2931 -2929 0
c Var 'aux292' order represents '2' with '2932'
-2930 2932 0
c Var 'aux292' direct represents '2' with '2933'
2930 -2932 2933 0
-2933 2932 0
-2933 -2930 0
c Var 'aux292' order represents '3' with '2934'
-2932 2934 0
c Var 'aux292' direct represents '3' with '2935'
2932 -2934 2935 0
-2935 2934 0
-2935 -2932 0
c Var 'aux292' direct represents '4' with '-2934'
2929 2931 2933 2935 -2934 0
c Encoding variable: aux293 with domain: int(0..4) (representing constraint (aux277 + aux276))
c Both direct and order encoding.
c Var 'aux293' order represents '0' with '2936'
c Var 'aux293' direct represents '0' with '2936'
c Var 'aux293' order represents '1' with '2937'
-2936 2937 0
c Var 'aux293' direct represents '1' with '2938'
2936 -2937 2938 0
-2938 2937 0
-2938 -2936 0
c Var 'aux293' order represents '2' with '2939'
-2937 2939 0
c Var 'aux293' direct represents '2' with '2940'
2937 -2939 2940 0
-2940 2939 0
-2940 -2937 0
c Var 'aux293' order represents '3' with '2941'
-2939 2941 0
c Var 'aux293' direct represents '3' with '2942'
2939 -2941 2942 0
-2942 2941 0
-2942 -2939 0
c Var 'aux293' direct represents '4' with '-2941'
2936 2938 2940 2942 -2941 0
c Encoding variable: aux294 with domain: int(0..4) (representing constraint (aux278 + aux279))
c Both direct and order encoding.
c Var 'aux294' order represents '0' with '2943'
c Var 'aux294' direct represents '0' with '2943'
c Var 'aux294' order represents '1' with '2944'
-2943 2944 0
c Var 'aux294' direct represents '1' with '2945'
2943 -2944 2945 0
-2945 2944 0
-2945 -2943 0
c Var 'aux294' order represents '2' with '2946'
-2944 2946 0
c Var 'aux294' direct represents '2' with '2947'
2944 -2946 2947 0
-2947 2946 0
-2947 -2944 0
c Var 'aux294' order represents '3' with '2948'
-2946 2948 0
c Var 'aux294' direct represents '3' with '2949'
2946 -2948 2949 0
-2949 2948 0
-2949 -2946 0
c Var 'aux294' direct represents '4' with '-2948'
2943 2945 2947 2949 -2948 0
c Encoding variable: aux295 with domain: int(0..4) (representing constraint (aux282 + aux285))
c Both direct and order encoding.
c Var 'aux295' order represents '0' with '2950'
c Var 'aux295' direct represents '0' with '2950'
c Var 'aux295' order represents '1' with '2951'
-2950 2951 0
c Var 'aux295' direct represents '1' with '2952'
2950 -2951 2952 0
-2952 2951 0
-2952 -2950 0
c Var 'aux295' order represents '2' with '2953'
-2951 2953 0
c Var 'aux295' direct represents '2' with '2954'
2951 -2953 2954 0
-2954 2953 0
-2954 -2951 0
c Var 'aux295' order represents '3' with '2955'
-2953 2955 0
c Var 'aux295' direct represents '3' with '2956'
2953 -2955 2956 0
-2956 2955 0
-2956 -2953 0
c Var 'aux295' direct represents '4' with '-2955'
2950 2952 2954 2956 -2955 0
c Encoding variable: aux296 with domain: int(0..4) (representing constraint (aux283 + aux275))
c Both direct and order encoding.
c Var 'aux296' order represents '0' with '2957'
c Var 'aux296' direct represents '0' with '2957'
c Var 'aux296' order represents '1' with '2958'
-2957 2958 0
c Var 'aux296' direct represents '1' with '2959'
2957 -2958 2959 0
-2959 2958 0
-2959 -2957 0
c Var 'aux296' order represents '2' with '2960'
-2958 2960 0
c Var 'aux296' direct represents '2' with '2961'
2958 -2960 2961 0
-2961 2960 0
-2961 -2958 0
c Var 'aux296' order represents '3' with '2962'
-2960 2962 0
c Var 'aux296' direct represents '3' with '2963'
2960 -2962 2963 0
-2963 2962 0
-2963 -2960 0
c Var 'aux296' direct represents '4' with '-2962'
2957 2959 2961 2963 -2962 0
c Encoding variable: aux297 with domain: int(0..8) (representing constraint (aux290 + aux296))
c Both direct and order encoding.
c Var 'aux297' order represents '0' with '2964'
c Var 'aux297' direct represents '0' with '2964'
c Var 'aux297' order represents '1' with '2965'
-2964 2965 0
c Var 'aux297' direct represents '1' with '2966'
2964 -2965 2966 0
-2966 2965 0
-2966 -2964 0
c Var 'aux297' order represents '2' with '2967'
-2965 2967 0
c Var 'aux297' direct represents '2' with '2968'
2965 -2967 2968 0
-2968 2967 0
-2968 -2965 0
c Var 'aux297' order represents '3' with '2969'
-2967 2969 0
c Var 'aux297' direct represents '3' with '2970'
2967 -2969 2970 0
-2970 2969 0
-2970 -2967 0
c Var 'aux297' order represents '4' with '2971'
-2969 2971 0
c Var 'aux297' direct represents '4' with '2972'
2969 -2971 2972 0
-2972 2971 0
-2972 -2969 0
c Var 'aux297' order represents '5' with '2973'
-2971 2973 0
c Var 'aux297' direct represents '5' with '2974'
2971 -2973 2974 0
-2974 2973 0
-2974 -2971 0
c Var 'aux297' order represents '6' with '2975'
-2973 2975 0
c Var 'aux297' direct represents '6' with '2976'
2973 -2975 2976 0
-2976 2975 0
-2976 -2973 0
c Var 'aux297' order represents '7' with '2977'
-2975 2977 0
c Var 'aux297' direct represents '7' with '2978'
2975 -2977 2978 0
-2978 2977 0
-2978 -2975 0
c Var 'aux297' direct represents '8' with '-2977'
2964 2966 2968 2970 2972 2974 2976 2978 -2977 0
c Encoding variable: aux298 with domain: int(0..8) (representing constraint (aux289 + aux293))
c Both direct and order encoding.
c Var 'aux298' order represents '0' with '2979'
c Var 'aux298' direct represents '0' with '2979'
c Var 'aux298' order represents '1' with '2980'
-2979 2980 0
c Var 'aux298' direct represents '1' with '2981'
2979 -2980 2981 0
-2981 2980 0
-2981 -2979 0
c Var 'aux298' order represents '2' with '2982'
-2980 2982 0
c Var 'aux298' direct represents '2' with '2983'
2980 -2982 2983 0
-2983 2982 0
-2983 -2980 0
c Var 'aux298' order represents '3' with '2984'
-2982 2984 0
c Var 'aux298' direct represents '3' with '2985'
2982 -2984 2985 0
-2985 2984 0
-2985 -2982 0
c Var 'aux298' order represents '4' with '2986'
-2984 2986 0
c Var 'aux298' direct represents '4' with '2987'
2984 -2986 2987 0
-2987 2986 0
-2987 -2984 0
c Var 'aux298' order represents '5' with '2988'
-2986 2988 0
c Var 'aux298' direct represents '5' with '2989'
2986 -2988 2989 0
-2989 2988 0
-2989 -2986 0
c Var 'aux298' order represents '6' with '2990'
-2988 2990 0
c Var 'aux298' direct represents '6' with '2991'
2988 -2990 2991 0
-2991 2990 0
-2991 -2988 0
c Var 'aux298' order represents '7' with '2992'
-2990 2992 0
c Var 'aux298' direct represents '7' with '2993'
2990 -2992 2993 0
-2993 2992 0
-2993 -2990 0
c Var 'aux298' direct represents '8' with '-2992'
2979 2981 2983 2985 2987 2989 2991 2993 -2992 0
c Encoding variable: aux299 with domain: int(0..8) (representing constraint (aux287 + aux288))
c Both direct and order encoding.
c Var 'aux299' order represents '0' with '2994'
c Var 'aux299' direct represents '0' with '2994'
c Var 'aux299' order represents '1' with '2995'
-2994 2995 0
c Var 'aux299' direct represents '1' with '2996'
2994 -2995 2996 0
-2996 2995 0
-2996 -2994 0
c Var 'aux299' order represents '2' with '2997'
-2995 2997 0
c Var 'aux299' direct represents '2' with '2998'
2995 -2997 2998 0
-2998 2997 0
-2998 -2995 0
c Var 'aux299' order represents '3' with '2999'
-2997 2999 0
c Var 'aux299' direct represents '3' with '3000'
2997 -2999 3000 0
-3000 2999 0
-3000 -2997 0
c Var 'aux299' order represents '4' with '3001'
-2999 3001 0
c Var 'aux299' direct represents '4' with '3002'
2999 -3001 3002 0
-3002 3001 0
-3002 -2999 0
c Var 'aux299' order represents '5' with '3003'
-3001 3003 0
c Var 'aux299' direct represents '5' with '3004'
3001 -3003 3004 0
-3004 3003 0
-3004 -3001 0
c Var 'aux299' order represents '6' with '3005'
-3003 3005 0
c Var 'aux299' direct represents '6' with '3006'
3003 -3005 3006 0
-3006 3005 0
-3006 -3003 0
c Var 'aux299' order represents '7' with '3007'
-3005 3007 0
c Var 'aux299' direct represents '7' with '3008'
3005 -3007 3008 0
-3008 3007 0
-3008 -3005 0
c Var 'aux299' direct represents '8' with '-3007'
2994 2996 2998 3000 3002 3004 3006 3008 -3007 0
c Encoding variable: aux300 with domain: int(0..8) (representing constraint (aux291 + aux292))
c Both direct and order encoding.
c Var 'aux300' order represents '0' with '3009'
c Var 'aux300' direct represents '0' with '3009'
c Var 'aux300' order represents '1' with '3010'
-3009 3010 0
c Var 'aux300' direct represents '1' with '3011'
3009 -3010 3011 0
-3011 3010 0
-3011 -3009 0
c Var 'aux300' order represents '2' with '3012'
-3010 3012 0
c Var 'aux300' direct represents '2' with '3013'
3010 -3012 3013 0
-3013 3012 0
-3013 -3010 0
c Var 'aux300' order represents '3' with '3014'
-3012 3014 0
c Var 'aux300' direct represents '3' with '3015'
3012 -3014 3015 0
-3015 3014 0
-3015 -3012 0
c Var 'aux300' order represents '4' with '3016'
-3014 3016 0
c Var 'aux300' direct represents '4' with '3017'
3014 -3016 3017 0
-3017 3016 0
-3017 -3014 0
c Var 'aux300' order represents '5' with '3018'
-3016 3018 0
c Var 'aux300' direct represents '5' with '3019'
3016 -3018 3019 0
-3019 3018 0
-3019 -3016 0
c Var 'aux300' order represents '6' with '3020'
-3018 3020 0
c Var 'aux300' direct represents '6' with '3021'
3018 -3020 3021 0
-3021 3020 0
-3021 -3018 0
c Var 'aux300' order represents '7' with '3022'
-3020 3022 0
c Var 'aux300' direct represents '7' with '3023'
3020 -3022 3023 0
-3023 3022 0
-3023 -3020 0
c Var 'aux300' direct represents '8' with '-3022'
3009 3011 3013 3015 3017 3019 3021 3023 -3022 0
c Encoding variable: aux301 with domain: int(0..8) (representing constraint (aux294 + aux295))
c Both direct and order encoding.
c Var 'aux301' order represents '0' with '3024'
c Var 'aux301' direct represents '0' with '3024'
c Var 'aux301' order represents '1' with '3025'
-3024 3025 0
c Var 'aux301' direct represents '1' with '3026'
3024 -3025 3026 0
-3026 3025 0
-3026 -3024 0
c Var 'aux301' order represents '2' with '3027'
-3025 3027 0
c Var 'aux301' direct represents '2' with '3028'
3025 -3027 3028 0
-3028 3027 0
-3028 -3025 0
c Var 'aux301' order represents '3' with '3029'
-3027 3029 0
c Var 'aux301' direct represents '3' with '3030'
3027 -3029 3030 0
-3030 3029 0
-3030 -3027 0
c Var 'aux301' order represents '4' with '3031'
-3029 3031 0
c Var 'aux301' direct represents '4' with '3032'
3029 -3031 3032 0
-3032 3031 0
-3032 -3029 0
c Var 'aux301' order represents '5' with '3033'
-3031 3033 0
c Var 'aux301' direct represents '5' with '3034'
3031 -3033 3034 0
-3034 3033 0
-3034 -3031 0
c Var 'aux301' order represents '6' with '3035'
-3033 3035 0
c Var 'aux301' direct represents '6' with '3036'
3033 -3035 3036 0
-3036 3035 0
-3036 -3033 0
c Var 'aux301' order represents '7' with '3037'
-3035 3037 0
c Var 'aux301' direct represents '7' with '3038'
3035 -3037 3038 0
-3038 3037 0
-3038 -3035 0
c Var 'aux301' direct represents '8' with '-3037'
3024 3026 3028 3030 3032 3034 3036 3038 -3037 0
c Encoding variable: aux302 with domain: int(0..16) (representing constraint (aux298 + aux301))
c Both direct and order encoding.
c Var 'aux302' order represents '0' with '3039'
c Var 'aux302' direct represents '0' with '3039'
c Var 'aux302' order represents '1' with '3040'
-3039 3040 0
c Var 'aux302' direct represents '1' with '3041'
3039 -3040 3041 0
-3041 3040 0
-3041 -3039 0
c Var 'aux302' order represents '2' with '3042'
-3040 3042 0
c Var 'aux302' direct represents '2' with '3043'
3040 -3042 3043 0
-3043 3042 0
-3043 -3040 0
c Var 'aux302' order represents '3' with '3044'
-3042 3044 0
c Var 'aux302' direct represents '3' with '3045'
3042 -3044 3045 0
-3045 3044 0
-3045 -3042 0
c Var 'aux302' order represents '4' with '3046'
-3044 3046 0
c Var 'aux302' direct represents '4' with '3047'
3044 -3046 3047 0
-3047 3046 0
-3047 -3044 0
c Var 'aux302' order represents '5' with '3048'
-3046 3048 0
c Var 'aux302' direct represents '5' with '3049'
3046 -3048 3049 0
-3049 3048 0
-3049 -3046 0
c Var 'aux302' order represents '6' with '3050'
-3048 3050 0
c Var 'aux302' direct represents '6' with '3051'
3048 -3050 3051 0
-3051 3050 0
-3051 -3048 0
c Var 'aux302' order represents '7' with '3052'
-3050 3052 0
c Var 'aux302' direct represents '7' with '3053'
3050 -3052 3053 0
-3053 3052 0
-3053 -3050 0
c Var 'aux302' order represents '8' with '3054'
-3052 3054 0
c Var 'aux302' direct represents '8' with '3055'
3052 -3054 3055 0
-3055 3054 0
-3055 -3052 0
c Var 'aux302' order represents '9' with '3056'
-3054 3056 0
c Var 'aux302' direct represents '9' with '3057'
3054 -3056 3057 0
-3057 3056 0
-3057 -3054 0
c Var 'aux302' order represents '10' with '3058'
-3056 3058 0
c Var 'aux302' direct represents '10' with '3059'
3056 -3058 3059 0
-3059 3058 0
-3059 -3056 0
c Var 'aux302' order represents '11' with '3060'
-3058 3060 0
c Var 'aux302' direct represents '11' with '3061'
3058 -3060 3061 0
-3061 3060 0
-3061 -3058 0
c Var 'aux302' order represents '12' with '3062'
-3060 3062 0
c Var 'aux302' direct represents '12' with '3063'
3060 -3062 3063 0
-3063 3062 0
-3063 -3060 0
c Var 'aux302' order represents '13' with '3064'
-3062 3064 0
c Var 'aux302' direct represents '13' with '3065'
3062 -3064 3065 0
-3065 3064 0
-3065 -3062 0
c Var 'aux302' order represents '14' with '3066'
-3064 3066 0
c Var 'aux302' direct represents '14' with '3067'
3064 -3066 3067 0
-3067 3066 0
-3067 -3064 0
c Var 'aux302' order represents '15' with '3068'
-3066 3068 0
c Var 'aux302' direct represents '15' with '3069'
3066 -3068 3069 0
-3069 3068 0
-3069 -3066 0
c Var 'aux302' direct represents '16' with '-3068'
3039 3041 3043 3045 3047 3049 3051 3053 3055 3057 3059 3061 3063 3065 3067 3069 -3068 0
c Encoding variable: aux303 with domain: int(0..16) (representing constraint (aux297 + aux299))
c Both direct and order encoding.
c Var 'aux303' order represents '0' with '3070'
c Var 'aux303' direct represents '0' with '3070'
c Var 'aux303' order represents '1' with '3071'
-3070 3071 0
c Var 'aux303' direct represents '1' with '3072'
3070 -3071 3072 0
-3072 3071 0
-3072 -3070 0
c Var 'aux303' order represents '2' with '3073'
-3071 3073 0
c Var 'aux303' direct represents '2' with '3074'
3071 -3073 3074 0
-3074 3073 0
-3074 -3071 0
c Var 'aux303' order represents '3' with '3075'
-3073 3075 0
c Var 'aux303' direct represents '3' with '3076'
3073 -3075 3076 0
-3076 3075 0
-3076 -3073 0
c Var 'aux303' order represents '4' with '3077'
-3075 3077 0
c Var 'aux303' direct represents '4' with '3078'
3075 -3077 3078 0
-3078 3077 0
-3078 -3075 0
c Var 'aux303' order represents '5' with '3079'
-3077 3079 0
c Var 'aux303' direct represents '5' with '3080'
3077 -3079 3080 0
-3080 3079 0
-3080 -3077 0
c Var 'aux303' order represents '6' with '3081'
-3079 3081 0
c Var 'aux303' direct represents '6' with '3082'
3079 -3081 3082 0
-3082 3081 0
-3082 -3079 0
c Var 'aux303' order represents '7' with '3083'
-3081 3083 0
c Var 'aux303' direct represents '7' with '3084'
3081 -3083 3084 0
-3084 3083 0
-3084 -3081 0
c Var 'aux303' order represents '8' with '3085'
-3083 3085 0
c Var 'aux303' direct represents '8' with '3086'
3083 -3085 3086 0
-3086 3085 0
-3086 -3083 0
c Var 'aux303' order represents '9' with '3087'
-3085 3087 0
c Var 'aux303' direct represents '9' with '3088'
3085 -3087 3088 0
-3088 3087 0
-3088 -3085 0
c Var 'aux303' order represents '10' with '3089'
-3087 3089 0
c Var 'aux303' direct represents '10' with '3090'
3087 -3089 3090 0
-3090 3089 0
-3090 -3087 0
c Var 'aux303' order represents '11' with '3091'
-3089 3091 0
c Var 'aux303' direct represents '11' with '3092'
3089 -3091 3092 0
-3092 3091 0
-3092 -3089 0
c Var 'aux303' order represents '12' with '3093'
-3091 3093 0
c Var 'aux303' direct represents '12' with '3094'
3091 -3093 3094 0
-3094 3093 0
-3094 -3091 0
c Var 'aux303' order represents '13' with '3095'
-3093 3095 0
c Var 'aux303' direct represents '13' with '3096'
3093 -3095 3096 0
-3096 3095 0
-3096 -3093 0
c Var 'aux303' order represents '14' with '3097'
-3095 3097 0
c Var 'aux303' direct represents '14' with '3098'
3095 -3097 3098 0
-3098 3097 0
-3098 -3095 0
c Var 'aux303' order represents '15' with '3099'
-3097 3099 0
c Var 'aux303' direct represents '15' with '3100'
3097 -3099 3100 0
-3100 3099 0
-3100 -3097 0
c Var 'aux303' direct represents '16' with '-3099'
3070 3072 3074 3076 3078 3080 3082 3084 3086 3088 3090 3092 3094 3096 3098 3100 -3099 0
c Encoding variable: aux304 with domain: int(0..2) (representing constraint ((8=grid_00005_00000) + (grid_00000_00006=8)))
c Both direct and order encoding.
c Var 'aux304' order represents '0' with '3101'
c Var 'aux304' direct represents '0' with '3101'
c Var 'aux304' order represents '1' with '3102'
-3101 3102 0
c Var 'aux304' direct represents '1' with '3103'
3101 -3102 3103 0
-3103 3102 0
-3103 -3101 0
c Var 'aux304' direct represents '2' with '-3102'
3101 3103 -3102 0
c Encoding variable: aux305 with domain: int(0..2) (representing constraint ((grid_00000_00005=8) + (8=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux305' order represents '0' with '3104'
c Var 'aux305' direct represents '0' with '3104'
c Var 'aux305' order represents '1' with '3105'
-3104 3105 0
c Var 'aux305' direct represents '1' with '3106'
3104 -3105 3106 0
-3106 3105 0
-3106 -3104 0
c Var 'aux305' direct represents '2' with '-3105'
3104 3106 -3105 0
c Encoding variable: aux306 with domain: int(0..2) (representing constraint ((grid_00000_00004=8) + (8=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux306' order represents '0' with '3107'
c Var 'aux306' direct represents '0' with '3107'
c Var 'aux306' order represents '1' with '3108'
-3107 3108 0
c Var 'aux306' direct represents '1' with '3109'
3107 -3108 3109 0
-3109 3108 0
-3109 -3107 0
c Var 'aux306' direct represents '2' with '-3108'
3107 3109 -3108 0
c Encoding variable: aux307 with domain: int(0..2) (representing constraint ((grid_00000_00003=8) + (grid_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux307' order represents '0' with '3110'
c Var 'aux307' direct represents '0' with '3110'
c Var 'aux307' order represents '1' with '3111'
-3110 3111 0
c Var 'aux307' direct represents '1' with '3112'
3110 -3111 3112 0
-3112 3111 0
-3112 -3110 0
c Var 'aux307' direct represents '2' with '-3111'
3110 3112 -3111 0
c Encoding variable: aux308 with domain: int(0..2) (representing constraint ((grid_00000_00002=8) + (8=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux308' order represents '0' with '3113'
c Var 'aux308' direct represents '0' with '3113'
c Var 'aux308' order represents '1' with '3114'
-3113 3114 0
c Var 'aux308' direct represents '1' with '3115'
3113 -3114 3115 0
-3115 3114 0
-3115 -3113 0
c Var 'aux308' direct represents '2' with '-3114'
3113 3115 -3114 0
c Encoding variable: aux309 with domain: int(0..2) (representing constraint ((grid_00000_00001=8) + (grid_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux309' order represents '0' with '3116'
c Var 'aux309' direct represents '0' with '3116'
c Var 'aux309' order represents '1' with '3117'
-3116 3117 0
c Var 'aux309' direct represents '1' with '3118'
3116 -3117 3118 0
-3118 3117 0
-3118 -3116 0
c Var 'aux309' direct represents '2' with '-3117'
3116 3118 -3117 0
c Encoding variable: aux310 with domain: int(0..2) (representing constraint ((grid_00004_00005=8) + (8=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux310' order represents '0' with '3119'
c Var 'aux310' direct represents '0' with '3119'
c Var 'aux310' order represents '1' with '3120'
-3119 3120 0
c Var 'aux310' direct represents '1' with '3121'
3119 -3120 3121 0
-3121 3120 0
-3121 -3119 0
c Var 'aux310' direct represents '2' with '-3120'
3119 3121 -3120 0
c Encoding variable: aux311 with domain: int(0..2) (representing constraint ((grid_00004_00006=8) + (grid_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux311' order represents '0' with '3122'
c Var 'aux311' direct represents '0' with '3122'
c Var 'aux311' order represents '1' with '3123'
-3122 3123 0
c Var 'aux311' direct represents '1' with '3124'
3122 -3123 3124 0
-3124 3123 0
-3124 -3122 0
c Var 'aux311' direct represents '2' with '-3123'
3122 3124 -3123 0
c Encoding variable: aux312 with domain: int(0..2) (representing constraint ((8=grid_00006_00004) + (8=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux312' order represents '0' with '3125'
c Var 'aux312' direct represents '0' with '3125'
c Var 'aux312' order represents '1' with '3126'
-3125 3126 0
c Var 'aux312' direct represents '1' with '3127'
3125 -3126 3127 0
-3127 3126 0
-3127 -3125 0
c Var 'aux312' direct represents '2' with '-3126'
3125 3127 -3126 0
c Encoding variable: aux313 with domain: int(0..2) (representing constraint ((grid_00004_00003=8) + (grid_00003_00000=8)))
c Both direct and order encoding.
c Var 'aux313' order represents '0' with '3128'
c Var 'aux313' direct represents '0' with '3128'
c Var 'aux313' order represents '1' with '3129'
-3128 3129 0
c Var 'aux313' direct represents '1' with '3130'
3128 -3129 3130 0
-3130 3129 0
-3130 -3128 0
c Var 'aux313' direct represents '2' with '-3129'
3128 3130 -3129 0
c Encoding variable: aux314 with domain: int(0..2) (representing constraint ((grid_00004_00002=8) + (8=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux314' order represents '0' with '3131'
c Var 'aux314' direct represents '0' with '3131'
c Var 'aux314' order represents '1' with '3132'
-3131 3132 0
c Var 'aux314' direct represents '1' with '3133'
3131 -3132 3133 0
-3133 3132 0
-3133 -3131 0
c Var 'aux314' direct represents '2' with '-3132'
3131 3133 -3132 0
c Encoding variable: aux315 with domain: int(0..2) (representing constraint ((grid_00004_00001=8) + (8=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux315' order represents '0' with '3134'
c Var 'aux315' direct represents '0' with '3134'
c Var 'aux315' order represents '1' with '3135'
-3134 3135 0
c Var 'aux315' direct represents '1' with '3136'
3134 -3135 3136 0
-3136 3135 0
-3136 -3134 0
c Var 'aux315' direct represents '2' with '-3135'
3134 3136 -3135 0
c Encoding variable: aux316 with domain: int(0..2) (representing constraint ((grid_00004_00000=8) + (8=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux316' order represents '0' with '3137'
c Var 'aux316' direct represents '0' with '3137'
c Var 'aux316' order represents '1' with '3138'
-3137 3138 0
c Var 'aux316' direct represents '1' with '3139'
3137 -3138 3139 0
-3139 3138 0
-3139 -3137 0
c Var 'aux316' direct represents '2' with '-3138'
3137 3139 -3138 0
c Encoding variable: aux317 with domain: int(0..2) (representing constraint ((8=grid_00002_00006) + (8=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux317' order represents '0' with '3140'
c Var 'aux317' direct represents '0' with '3140'
c Var 'aux317' order represents '1' with '3141'
-3140 3141 0
c Var 'aux317' direct represents '1' with '3142'
3140 -3141 3142 0
-3142 3141 0
-3142 -3140 0
c Var 'aux317' direct represents '2' with '-3141'
3140 3142 -3141 0
c Encoding variable: aux318 with domain: int(0..2) (representing constraint ((8=grid_00002_00005) + (8=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux318' order represents '0' with '3143'
c Var 'aux318' direct represents '0' with '3143'
c Var 'aux318' order represents '1' with '3144'
-3143 3144 0
c Var 'aux318' direct represents '1' with '3145'
3143 -3144 3145 0
-3145 3144 0
-3145 -3143 0
c Var 'aux318' direct represents '2' with '-3144'
3143 3145 -3144 0
c Encoding variable: aux319 with domain: int(0..2) (representing constraint ((8=grid_00002_00004) + (8=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux319' order represents '0' with '3146'
c Var 'aux319' direct represents '0' with '3146'
c Var 'aux319' order represents '1' with '3147'
-3146 3147 0
c Var 'aux319' direct represents '1' with '3148'
3146 -3147 3148 0
-3148 3147 0
-3148 -3146 0
c Var 'aux319' direct represents '2' with '-3147'
3146 3148 -3147 0
c Encoding variable: aux320 with domain: int(0..2) (representing constraint ((8=grid_00002_00003) + (8=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux320' order represents '0' with '3149'
c Var 'aux320' direct represents '0' with '3149'
c Var 'aux320' order represents '1' with '3150'
-3149 3150 0
c Var 'aux320' direct represents '1' with '3151'
3149 -3150 3151 0
-3151 3150 0
-3151 -3149 0
c Var 'aux320' direct represents '2' with '-3150'
3149 3151 -3150 0
c Encoding variable: aux321 with domain: int(0..2) (representing constraint ((grid_00003_00002=8) + (8=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux321' order represents '0' with '3152'
c Var 'aux321' direct represents '0' with '3152'
c Var 'aux321' order represents '1' with '3153'
-3152 3153 0
c Var 'aux321' direct represents '1' with '3154'
3152 -3153 3154 0
-3154 3153 0
-3154 -3152 0
c Var 'aux321' direct represents '2' with '-3153'
3152 3154 -3153 0
c Encoding variable: aux322 with domain: int(0..2) (representing constraint ((8=grid_00001_00005) + (grid_00003_00003=8)))
c Both direct and order encoding.
c Var 'aux322' order represents '0' with '3155'
c Var 'aux322' direct represents '0' with '3155'
c Var 'aux322' order represents '1' with '3156'
-3155 3156 0
c Var 'aux322' direct represents '1' with '3157'
3155 -3156 3157 0
-3157 3156 0
-3157 -3155 0
c Var 'aux322' direct represents '2' with '-3156'
3155 3157 -3156 0
c Encoding variable: aux323 with domain: int(0..2) (representing constraint ((8=grid_00006_00000) + (8=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux323' order represents '0' with '3158'
c Var 'aux323' direct represents '0' with '3158'
c Var 'aux323' order represents '1' with '3159'
-3158 3159 0
c Var 'aux323' direct represents '1' with '3160'
3158 -3159 3160 0
-3160 3159 0
-3160 -3158 0
c Var 'aux323' direct represents '2' with '-3159'
3158 3160 -3159 0
c Encoding variable: aux324 with domain: int(0..4) (representing constraint (aux311 + aux323))
c Both direct and order encoding.
c Var 'aux324' order represents '0' with '3161'
c Var 'aux324' direct represents '0' with '3161'
c Var 'aux324' order represents '1' with '3162'
-3161 3162 0
c Var 'aux324' direct represents '1' with '3163'
3161 -3162 3163 0
-3163 3162 0
-3163 -3161 0
c Var 'aux324' order represents '2' with '3164'
-3162 3164 0
c Var 'aux324' direct represents '2' with '3165'
3162 -3164 3165 0
-3165 3164 0
-3165 -3162 0
c Var 'aux324' order represents '3' with '3166'
-3164 3166 0
c Var 'aux324' direct represents '3' with '3167'
3164 -3166 3167 0
-3167 3166 0
-3167 -3164 0
c Var 'aux324' direct represents '4' with '-3166'
3161 3163 3165 3167 -3166 0
c Encoding variable: aux325 with domain: int(0..4) (representing constraint (aux305 + aux318))
c Both direct and order encoding.
c Var 'aux325' order represents '0' with '3168'
c Var 'aux325' direct represents '0' with '3168'
c Var 'aux325' order represents '1' with '3169'
-3168 3169 0
c Var 'aux325' direct represents '1' with '3170'
3168 -3169 3170 0
-3170 3169 0
-3170 -3168 0
c Var 'aux325' order represents '2' with '3171'
-3169 3171 0
c Var 'aux325' direct represents '2' with '3172'
3169 -3171 3172 0
-3172 3171 0
-3172 -3169 0
c Var 'aux325' order represents '3' with '3173'
-3171 3173 0
c Var 'aux325' direct represents '3' with '3174'
3171 -3173 3174 0
-3174 3173 0
-3174 -3171 0
c Var 'aux325' direct represents '4' with '-3173'
3168 3170 3172 3174 -3173 0
c Encoding variable: aux326 with domain: int(0..4) (representing constraint (aux309 + aux304))
c Both direct and order encoding.
c Var 'aux326' order represents '0' with '3175'
c Var 'aux326' direct represents '0' with '3175'
c Var 'aux326' order represents '1' with '3176'
-3175 3176 0
c Var 'aux326' direct represents '1' with '3177'
3175 -3176 3177 0
-3177 3176 0
-3177 -3175 0
c Var 'aux326' order represents '2' with '3178'
-3176 3178 0
c Var 'aux326' direct represents '2' with '3179'
3176 -3178 3179 0
-3179 3178 0
-3179 -3176 0
c Var 'aux326' order represents '3' with '3180'
-3178 3180 0
c Var 'aux326' direct represents '3' with '3181'
3178 -3180 3181 0
-3181 3180 0
-3181 -3178 0
c Var 'aux326' direct represents '4' with '-3180'
3175 3177 3179 3181 -3180 0
c Encoding variable: aux327 with domain: int(0..4) (representing constraint (aux307 + aux306))
c Both direct and order encoding.
c Var 'aux327' order represents '0' with '3182'
c Var 'aux327' direct represents '0' with '3182'
c Var 'aux327' order represents '1' with '3183'
-3182 3183 0
c Var 'aux327' direct represents '1' with '3184'
3182 -3183 3184 0
-3184 3183 0
-3184 -3182 0
c Var 'aux327' order represents '2' with '3185'
-3183 3185 0
c Var 'aux327' direct represents '2' with '3186'
3183 -3185 3186 0
-3186 3185 0
-3186 -3183 0
c Var 'aux327' order represents '3' with '3187'
-3185 3187 0
c Var 'aux327' direct represents '3' with '3188'
3185 -3187 3188 0
-3188 3187 0
-3188 -3185 0
c Var 'aux327' direct represents '4' with '-3187'
3182 3184 3186 3188 -3187 0
c Encoding variable: aux328 with domain: int(0..4) (representing constraint (aux308 + aux310))
c Both direct and order encoding.
c Var 'aux328' order represents '0' with '3189'
c Var 'aux328' direct represents '0' with '3189'
c Var 'aux328' order represents '1' with '3190'
-3189 3190 0
c Var 'aux328' direct represents '1' with '3191'
3189 -3190 3191 0
-3191 3190 0
-3191 -3189 0
c Var 'aux328' order represents '2' with '3192'
-3190 3192 0
c Var 'aux328' direct represents '2' with '3193'
3190 -3192 3193 0
-3193 3192 0
-3193 -3190 0
c Var 'aux328' order represents '3' with '3194'
-3192 3194 0
c Var 'aux328' direct represents '3' with '3195'
3192 -3194 3195 0
-3195 3194 0
-3195 -3192 0
c Var 'aux328' direct represents '4' with '-3194'
3189 3191 3193 3195 -3194 0
c Encoding variable: aux329 with domain: int(0..4) (representing constraint (aux321 + aux317))
c Both direct and order encoding.
c Var 'aux329' order represents '0' with '3196'
c Var 'aux329' direct represents '0' with '3196'
c Var 'aux329' order represents '1' with '3197'
-3196 3197 0
c Var 'aux329' direct represents '1' with '3198'
3196 -3197 3198 0
-3198 3197 0
-3198 -3196 0
c Var 'aux329' order represents '2' with '3199'
-3197 3199 0
c Var 'aux329' direct represents '2' with '3200'
3197 -3199 3200 0
-3200 3199 0
-3200 -3197 0
c Var 'aux329' order represents '3' with '3201'
-3199 3201 0
c Var 'aux329' direct represents '3' with '3202'
3199 -3201 3202 0
-3202 3201 0
-3202 -3199 0
c Var 'aux329' direct represents '4' with '-3201'
3196 3198 3200 3202 -3201 0
c Encoding variable: aux330 with domain: int(0..4) (representing constraint (aux314 + aux313))
c Both direct and order encoding.
c Var 'aux330' order represents '0' with '3203'
c Var 'aux330' direct represents '0' with '3203'
c Var 'aux330' order represents '1' with '3204'
-3203 3204 0
c Var 'aux330' direct represents '1' with '3205'
3203 -3204 3205 0
-3205 3204 0
-3205 -3203 0
c Var 'aux330' order represents '2' with '3206'
-3204 3206 0
c Var 'aux330' direct represents '2' with '3207'
3204 -3206 3207 0
-3207 3206 0
-3207 -3204 0
c Var 'aux330' order represents '3' with '3208'
-3206 3208 0
c Var 'aux330' direct represents '3' with '3209'
3206 -3208 3209 0
-3209 3208 0
-3209 -3206 0
c Var 'aux330' direct represents '4' with '-3208'
3203 3205 3207 3209 -3208 0
c Encoding variable: aux331 with domain: int(0..4) (representing constraint (aux315 + aux316))
c Both direct and order encoding.
c Var 'aux331' order represents '0' with '3210'
c Var 'aux331' direct represents '0' with '3210'
c Var 'aux331' order represents '1' with '3211'
-3210 3211 0
c Var 'aux331' direct represents '1' with '3212'
3210 -3211 3212 0
-3212 3211 0
-3212 -3210 0
c Var 'aux331' order represents '2' with '3213'
-3211 3213 0
c Var 'aux331' direct represents '2' with '3214'
3211 -3213 3214 0
-3214 3213 0
-3214 -3211 0
c Var 'aux331' order represents '3' with '3215'
-3213 3215 0
c Var 'aux331' direct represents '3' with '3216'
3213 -3215 3216 0
-3216 3215 0
-3216 -3213 0
c Var 'aux331' direct represents '4' with '-3215'
3210 3212 3214 3216 -3215 0
c Encoding variable: aux332 with domain: int(0..4) (representing constraint (aux319 + aux322))
c Both direct and order encoding.
c Var 'aux332' order represents '0' with '3217'
c Var 'aux332' direct represents '0' with '3217'
c Var 'aux332' order represents '1' with '3218'
-3217 3218 0
c Var 'aux332' direct represents '1' with '3219'
3217 -3218 3219 0
-3219 3218 0
-3219 -3217 0
c Var 'aux332' order represents '2' with '3220'
-3218 3220 0
c Var 'aux332' direct represents '2' with '3221'
3218 -3220 3221 0
-3221 3220 0
-3221 -3218 0
c Var 'aux332' order represents '3' with '3222'
-3220 3222 0
c Var 'aux332' direct represents '3' with '3223'
3220 -3222 3223 0
-3223 3222 0
-3223 -3220 0
c Var 'aux332' direct represents '4' with '-3222'
3217 3219 3221 3223 -3222 0
c Encoding variable: aux333 with domain: int(0..4) (representing constraint (aux320 + aux312))
c Both direct and order encoding.
c Var 'aux333' order represents '0' with '3224'
c Var 'aux333' direct represents '0' with '3224'
c Var 'aux333' order represents '1' with '3225'
-3224 3225 0
c Var 'aux333' direct represents '1' with '3226'
3224 -3225 3226 0
-3226 3225 0
-3226 -3224 0
c Var 'aux333' order represents '2' with '3227'
-3225 3227 0
c Var 'aux333' direct represents '2' with '3228'
3225 -3227 3228 0
-3228 3227 0
-3228 -3225 0
c Var 'aux333' order represents '3' with '3229'
-3227 3229 0
c Var 'aux333' direct represents '3' with '3230'
3227 -3229 3230 0
-3230 3229 0
-3230 -3227 0
c Var 'aux333' direct represents '4' with '-3229'
3224 3226 3228 3230 -3229 0
c Encoding variable: aux334 with domain: int(0..8) (representing constraint (aux327 + aux333))
c Both direct and order encoding.
c Var 'aux334' order represents '0' with '3231'
c Var 'aux334' direct represents '0' with '3231'
c Var 'aux334' order represents '1' with '3232'
-3231 3232 0
c Var 'aux334' direct represents '1' with '3233'
3231 -3232 3233 0
-3233 3232 0
-3233 -3231 0
c Var 'aux334' order represents '2' with '3234'
-3232 3234 0
c Var 'aux334' direct represents '2' with '3235'
3232 -3234 3235 0
-3235 3234 0
-3235 -3232 0
c Var 'aux334' order represents '3' with '3236'
-3234 3236 0
c Var 'aux334' direct represents '3' with '3237'
3234 -3236 3237 0
-3237 3236 0
-3237 -3234 0
c Var 'aux334' order represents '4' with '3238'
-3236 3238 0
c Var 'aux334' direct represents '4' with '3239'
3236 -3238 3239 0
-3239 3238 0
-3239 -3236 0
c Var 'aux334' order represents '5' with '3240'
-3238 3240 0
c Var 'aux334' direct represents '5' with '3241'
3238 -3240 3241 0
-3241 3240 0
-3241 -3238 0
c Var 'aux334' order represents '6' with '3242'
-3240 3242 0
c Var 'aux334' direct represents '6' with '3243'
3240 -3242 3243 0
-3243 3242 0
-3243 -3240 0
c Var 'aux334' order represents '7' with '3244'
-3242 3244 0
c Var 'aux334' direct represents '7' with '3245'
3242 -3244 3245 0
-3245 3244 0
-3245 -3242 0
c Var 'aux334' direct represents '8' with '-3244'
3231 3233 3235 3237 3239 3241 3243 3245 -3244 0
c Encoding variable: aux335 with domain: int(0..8) (representing constraint (aux326 + aux330))
c Both direct and order encoding.
c Var 'aux335' order represents '0' with '3246'
c Var 'aux335' direct represents '0' with '3246'
c Var 'aux335' order represents '1' with '3247'
-3246 3247 0
c Var 'aux335' direct represents '1' with '3248'
3246 -3247 3248 0
-3248 3247 0
-3248 -3246 0
c Var 'aux335' order represents '2' with '3249'
-3247 3249 0
c Var 'aux335' direct represents '2' with '3250'
3247 -3249 3250 0
-3250 3249 0
-3250 -3247 0
c Var 'aux335' order represents '3' with '3251'
-3249 3251 0
c Var 'aux335' direct represents '3' with '3252'
3249 -3251 3252 0
-3252 3251 0
-3252 -3249 0
c Var 'aux335' order represents '4' with '3253'
-3251 3253 0
c Var 'aux335' direct represents '4' with '3254'
3251 -3253 3254 0
-3254 3253 0
-3254 -3251 0
c Var 'aux335' order represents '5' with '3255'
-3253 3255 0
c Var 'aux335' direct represents '5' with '3256'
3253 -3255 3256 0
-3256 3255 0
-3256 -3253 0
c Var 'aux335' order represents '6' with '3257'
-3255 3257 0
c Var 'aux335' direct represents '6' with '3258'
3255 -3257 3258 0
-3258 3257 0
-3258 -3255 0
c Var 'aux335' order represents '7' with '3259'
-3257 3259 0
c Var 'aux335' direct represents '7' with '3260'
3257 -3259 3260 0
-3260 3259 0
-3260 -3257 0
c Var 'aux335' direct represents '8' with '-3259'
3246 3248 3250 3252 3254 3256 3258 3260 -3259 0
c Encoding variable: aux336 with domain: int(0..8) (representing constraint (aux324 + aux325))
c Both direct and order encoding.
c Var 'aux336' order represents '0' with '3261'
c Var 'aux336' direct represents '0' with '3261'
c Var 'aux336' order represents '1' with '3262'
-3261 3262 0
c Var 'aux336' direct represents '1' with '3263'
3261 -3262 3263 0
-3263 3262 0
-3263 -3261 0
c Var 'aux336' order represents '2' with '3264'
-3262 3264 0
c Var 'aux336' direct represents '2' with '3265'
3262 -3264 3265 0
-3265 3264 0
-3265 -3262 0
c Var 'aux336' order represents '3' with '3266'
-3264 3266 0
c Var 'aux336' direct represents '3' with '3267'
3264 -3266 3267 0
-3267 3266 0
-3267 -3264 0
c Var 'aux336' order represents '4' with '3268'
-3266 3268 0
c Var 'aux336' direct represents '4' with '3269'
3266 -3268 3269 0
-3269 3268 0
-3269 -3266 0
c Var 'aux336' order represents '5' with '3270'
-3268 3270 0
c Var 'aux336' direct represents '5' with '3271'
3268 -3270 3271 0
-3271 3270 0
-3271 -3268 0
c Var 'aux336' order represents '6' with '3272'
-3270 3272 0
c Var 'aux336' direct represents '6' with '3273'
3270 -3272 3273 0
-3273 3272 0
-3273 -3270 0
c Var 'aux336' order represents '7' with '3274'
-3272 3274 0
c Var 'aux336' direct represents '7' with '3275'
3272 -3274 3275 0
-3275 3274 0
-3275 -3272 0
c Var 'aux336' direct represents '8' with '-3274'
3261 3263 3265 3267 3269 3271 3273 3275 -3274 0
c Encoding variable: aux337 with domain: int(0..8) (representing constraint (aux328 + aux329))
c Both direct and order encoding.
c Var 'aux337' order represents '0' with '3276'
c Var 'aux337' direct represents '0' with '3276'
c Var 'aux337' order represents '1' with '3277'
-3276 3277 0
c Var 'aux337' direct represents '1' with '3278'
3276 -3277 3278 0
-3278 3277 0
-3278 -3276 0
c Var 'aux337' order represents '2' with '3279'
-3277 3279 0
c Var 'aux337' direct represents '2' with '3280'
3277 -3279 3280 0
-3280 3279 0
-3280 -3277 0
c Var 'aux337' order represents '3' with '3281'
-3279 3281 0
c Var 'aux337' direct represents '3' with '3282'
3279 -3281 3282 0
-3282 3281 0
-3282 -3279 0
c Var 'aux337' order represents '4' with '3283'
-3281 3283 0
c Var 'aux337' direct represents '4' with '3284'
3281 -3283 3284 0
-3284 3283 0
-3284 -3281 0
c Var 'aux337' order represents '5' with '3285'
-3283 3285 0
c Var 'aux337' direct represents '5' with '3286'
3283 -3285 3286 0
-3286 3285 0
-3286 -3283 0
c Var 'aux337' order represents '6' with '3287'
-3285 3287 0
c Var 'aux337' direct represents '6' with '3288'
3285 -3287 3288 0
-3288 3287 0
-3288 -3285 0
c Var 'aux337' order represents '7' with '3289'
-3287 3289 0
c Var 'aux337' direct represents '7' with '3290'
3287 -3289 3290 0
-3290 3289 0
-3290 -3287 0
c Var 'aux337' direct represents '8' with '-3289'
3276 3278 3280 3282 3284 3286 3288 3290 -3289 0
c Encoding variable: aux338 with domain: int(0..8) (representing constraint (aux331 + aux332))
c Both direct and order encoding.
c Var 'aux338' order represents '0' with '3291'
c Var 'aux338' direct represents '0' with '3291'
c Var 'aux338' order represents '1' with '3292'
-3291 3292 0
c Var 'aux338' direct represents '1' with '3293'
3291 -3292 3293 0
-3293 3292 0
-3293 -3291 0
c Var 'aux338' order represents '2' with '3294'
-3292 3294 0
c Var 'aux338' direct represents '2' with '3295'
3292 -3294 3295 0
-3295 3294 0
-3295 -3292 0
c Var 'aux338' order represents '3' with '3296'
-3294 3296 0
c Var 'aux338' direct represents '3' with '3297'
3294 -3296 3297 0
-3297 3296 0
-3297 -3294 0
c Var 'aux338' order represents '4' with '3298'
-3296 3298 0
c Var 'aux338' direct represents '4' with '3299'
3296 -3298 3299 0
-3299 3298 0
-3299 -3296 0
c Var 'aux338' order represents '5' with '3300'
-3298 3300 0
c Var 'aux338' direct represents '5' with '3301'
3298 -3300 3301 0
-3301 3300 0
-3301 -3298 0
c Var 'aux338' order represents '6' with '3302'
-3300 3302 0
c Var 'aux338' direct represents '6' with '3303'
3300 -3302 3303 0
-3303 3302 0
-3303 -3300 0
c Var 'aux338' order represents '7' with '3304'
-3302 3304 0
c Var 'aux338' direct represents '7' with '3305'
3302 -3304 3305 0
-3305 3304 0
-3305 -3302 0
c Var 'aux338' direct represents '8' with '-3304'
3291 3293 3295 3297 3299 3301 3303 3305 -3304 0
c Encoding variable: aux339 with domain: int(0..16) (representing constraint (aux335 + aux338))
c Both direct and order encoding.
c Var 'aux339' order represents '0' with '3306'
c Var 'aux339' direct represents '0' with '3306'
c Var 'aux339' order represents '1' with '3307'
-3306 3307 0
c Var 'aux339' direct represents '1' with '3308'
3306 -3307 3308 0
-3308 3307 0
-3308 -3306 0
c Var 'aux339' order represents '2' with '3309'
-3307 3309 0
c Var 'aux339' direct represents '2' with '3310'
3307 -3309 3310 0
-3310 3309 0
-3310 -3307 0
c Var 'aux339' order represents '3' with '3311'
-3309 3311 0
c Var 'aux339' direct represents '3' with '3312'
3309 -3311 3312 0
-3312 3311 0
-3312 -3309 0
c Var 'aux339' order represents '4' with '3313'
-3311 3313 0
c Var 'aux339' direct represents '4' with '3314'
3311 -3313 3314 0
-3314 3313 0
-3314 -3311 0
c Var 'aux339' order represents '5' with '3315'
-3313 3315 0
c Var 'aux339' direct represents '5' with '3316'
3313 -3315 3316 0
-3316 3315 0
-3316 -3313 0
c Var 'aux339' order represents '6' with '3317'
-3315 3317 0
c Var 'aux339' direct represents '6' with '3318'
3315 -3317 3318 0
-3318 3317 0
-3318 -3315 0
c Var 'aux339' order represents '7' with '3319'
-3317 3319 0
c Var 'aux339' direct represents '7' with '3320'
3317 -3319 3320 0
-3320 3319 0
-3320 -3317 0
c Var 'aux339' order represents '8' with '3321'
-3319 3321 0
c Var 'aux339' direct represents '8' with '3322'
3319 -3321 3322 0
-3322 3321 0
-3322 -3319 0
c Var 'aux339' order represents '9' with '3323'
-3321 3323 0
c Var 'aux339' direct represents '9' with '3324'
3321 -3323 3324 0
-3324 3323 0
-3324 -3321 0
c Var 'aux339' order represents '10' with '3325'
-3323 3325 0
c Var 'aux339' direct represents '10' with '3326'
3323 -3325 3326 0
-3326 3325 0
-3326 -3323 0
c Var 'aux339' order represents '11' with '3327'
-3325 3327 0
c Var 'aux339' direct represents '11' with '3328'
3325 -3327 3328 0
-3328 3327 0
-3328 -3325 0
c Var 'aux339' order represents '12' with '3329'
-3327 3329 0
c Var 'aux339' direct represents '12' with '3330'
3327 -3329 3330 0
-3330 3329 0
-3330 -3327 0
c Var 'aux339' order represents '13' with '3331'
-3329 3331 0
c Var 'aux339' direct represents '13' with '3332'
3329 -3331 3332 0
-3332 3331 0
-3332 -3329 0
c Var 'aux339' order represents '14' with '3333'
-3331 3333 0
c Var 'aux339' direct represents '14' with '3334'
3331 -3333 3334 0
-3334 3333 0
-3334 -3331 0
c Var 'aux339' order represents '15' with '3335'
-3333 3335 0
c Var 'aux339' direct represents '15' with '3336'
3333 -3335 3336 0
-3336 3335 0
-3336 -3333 0
c Var 'aux339' direct represents '16' with '-3335'
3306 3308 3310 3312 3314 3316 3318 3320 3322 3324 3326 3328 3330 3332 3334 3336 -3335 0
c Encoding variable: aux340 with domain: int(0..16) (representing constraint (aux334 + aux336))
c Both direct and order encoding.
c Var 'aux340' order represents '0' with '3337'
c Var 'aux340' direct represents '0' with '3337'
c Var 'aux340' order represents '1' with '3338'
-3337 3338 0
c Var 'aux340' direct represents '1' with '3339'
3337 -3338 3339 0
-3339 3338 0
-3339 -3337 0
c Var 'aux340' order represents '2' with '3340'
-3338 3340 0
c Var 'aux340' direct represents '2' with '3341'
3338 -3340 3341 0
-3341 3340 0
-3341 -3338 0
c Var 'aux340' order represents '3' with '3342'
-3340 3342 0
c Var 'aux340' direct represents '3' with '3343'
3340 -3342 3343 0
-3343 3342 0
-3343 -3340 0
c Var 'aux340' order represents '4' with '3344'
-3342 3344 0
c Var 'aux340' direct represents '4' with '3345'
3342 -3344 3345 0
-3345 3344 0
-3345 -3342 0
c Var 'aux340' order represents '5' with '3346'
-3344 3346 0
c Var 'aux340' direct represents '5' with '3347'
3344 -3346 3347 0
-3347 3346 0
-3347 -3344 0
c Var 'aux340' order represents '6' with '3348'
-3346 3348 0
c Var 'aux340' direct represents '6' with '3349'
3346 -3348 3349 0
-3349 3348 0
-3349 -3346 0
c Var 'aux340' order represents '7' with '3350'
-3348 3350 0
c Var 'aux340' direct represents '7' with '3351'
3348 -3350 3351 0
-3351 3350 0
-3351 -3348 0
c Var 'aux340' order represents '8' with '3352'
-3350 3352 0
c Var 'aux340' direct represents '8' with '3353'
3350 -3352 3353 0
-3353 3352 0
-3353 -3350 0
c Var 'aux340' order represents '9' with '3354'
-3352 3354 0
c Var 'aux340' direct represents '9' with '3355'
3352 -3354 3355 0
-3355 3354 0
-3355 -3352 0
c Var 'aux340' order represents '10' with '3356'
-3354 3356 0
c Var 'aux340' direct represents '10' with '3357'
3354 -3356 3357 0
-3357 3356 0
-3357 -3354 0
c Var 'aux340' order represents '11' with '3358'
-3356 3358 0
c Var 'aux340' direct represents '11' with '3359'
3356 -3358 3359 0
-3359 3358 0
-3359 -3356 0
c Var 'aux340' order represents '12' with '3360'
-3358 3360 0
c Var 'aux340' direct represents '12' with '3361'
3358 -3360 3361 0
-3361 3360 0
-3361 -3358 0
c Var 'aux340' order represents '13' with '3362'
-3360 3362 0
c Var 'aux340' direct represents '13' with '3363'
3360 -3362 3363 0
-3363 3362 0
-3363 -3360 0
c Var 'aux340' order represents '14' with '3364'
-3362 3364 0
c Var 'aux340' direct represents '14' with '3365'
3362 -3364 3365 0
-3365 3364 0
-3365 -3362 0
c Var 'aux340' order represents '15' with '3366'
-3364 3366 0
c Var 'aux340' direct represents '15' with '3367'
3364 -3366 3367 0
-3367 3366 0
-3367 -3364 0
c Var 'aux340' direct represents '16' with '-3366'
3337 3339 3341 3343 3345 3347 3349 3351 3353 3355 3357 3359 3361 3363 3365 3367 -3366 0
c Encoding variable: aux341 with domain: int(0..2) (representing constraint ((9=grid_00005_00000) + (grid_00000_00006=9)))
c Both direct and order encoding.
c Var 'aux341' order represents '0' with '3368'
c Var 'aux341' direct represents '0' with '3368'
c Var 'aux341' order represents '1' with '3369'
-3368 3369 0
c Var 'aux341' direct represents '1' with '3370'
3368 -3369 3370 0
-3370 3369 0
-3370 -3368 0
c Var 'aux341' direct represents '2' with '-3369'
3368 3370 -3369 0
c Encoding variable: aux342 with domain: int(0..2) (representing constraint ((grid_00000_00005=9) + (9=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux342' order represents '0' with '3371'
c Var 'aux342' direct represents '0' with '3371'
c Var 'aux342' order represents '1' with '3372'
-3371 3372 0
c Var 'aux342' direct represents '1' with '3373'
3371 -3372 3373 0
-3373 3372 0
-3373 -3371 0
c Var 'aux342' direct represents '2' with '-3372'
3371 3373 -3372 0
c Encoding variable: aux343 with domain: int(0..2) (representing constraint ((grid_00000_00004=9) + (9=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux343' order represents '0' with '3374'
c Var 'aux343' direct represents '0' with '3374'
c Var 'aux343' order represents '1' with '3375'
-3374 3375 0
c Var 'aux343' direct represents '1' with '3376'
3374 -3375 3376 0
-3376 3375 0
-3376 -3374 0
c Var 'aux343' direct represents '2' with '-3375'
3374 3376 -3375 0
c Encoding variable: aux344 with domain: int(0..2) (representing constraint ((grid_00000_00003=9) + (grid_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux344' order represents '0' with '3377'
c Var 'aux344' direct represents '0' with '3377'
c Var 'aux344' order represents '1' with '3378'
-3377 3378 0
c Var 'aux344' direct represents '1' with '3379'
3377 -3378 3379 0
-3379 3378 0
-3379 -3377 0
c Var 'aux344' direct represents '2' with '-3378'
3377 3379 -3378 0
c Encoding variable: aux345 with domain: int(0..2) (representing constraint ((grid_00000_00002=9) + (9=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux345' order represents '0' with '3380'
c Var 'aux345' direct represents '0' with '3380'
c Var 'aux345' order represents '1' with '3381'
-3380 3381 0
c Var 'aux345' direct represents '1' with '3382'
3380 -3381 3382 0
-3382 3381 0
-3382 -3380 0
c Var 'aux345' direct represents '2' with '-3381'
3380 3382 -3381 0
c Encoding variable: aux346 with domain: int(0..2) (representing constraint ((grid_00000_00001=9) + (grid_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux346' order represents '0' with '3383'
c Var 'aux346' direct represents '0' with '3383'
c Var 'aux346' order represents '1' with '3384'
-3383 3384 0
c Var 'aux346' direct represents '1' with '3385'
3383 -3384 3385 0
-3385 3384 0
-3385 -3383 0
c Var 'aux346' direct represents '2' with '-3384'
3383 3385 -3384 0
c Encoding variable: aux347 with domain: int(0..2) (representing constraint ((grid_00004_00005=9) + (9=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux347' order represents '0' with '3386'
c Var 'aux347' direct represents '0' with '3386'
c Var 'aux347' order represents '1' with '3387'
-3386 3387 0
c Var 'aux347' direct represents '1' with '3388'
3386 -3387 3388 0
-3388 3387 0
-3388 -3386 0
c Var 'aux347' direct represents '2' with '-3387'
3386 3388 -3387 0
c Encoding variable: aux348 with domain: int(0..2) (representing constraint ((grid_00004_00006=9) + (grid_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux348' order represents '0' with '3389'
c Var 'aux348' direct represents '0' with '3389'
c Var 'aux348' order represents '1' with '3390'
-3389 3390 0
c Var 'aux348' direct represents '1' with '3391'
3389 -3390 3391 0
-3391 3390 0
-3391 -3389 0
c Var 'aux348' direct represents '2' with '-3390'
3389 3391 -3390 0
c Encoding variable: aux349 with domain: int(0..2) (representing constraint ((9=grid_00006_00004) + (9=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux349' order represents '0' with '3392'
c Var 'aux349' direct represents '0' with '3392'
c Var 'aux349' order represents '1' with '3393'
-3392 3393 0
c Var 'aux349' direct represents '1' with '3394'
3392 -3393 3394 0
-3394 3393 0
-3394 -3392 0
c Var 'aux349' direct represents '2' with '-3393'
3392 3394 -3393 0
c Encoding variable: aux350 with domain: int(0..2) (representing constraint ((grid_00004_00003=9) + (grid_00003_00000=9)))
c Both direct and order encoding.
c Var 'aux350' order represents '0' with '3395'
c Var 'aux350' direct represents '0' with '3395'
c Var 'aux350' order represents '1' with '3396'
-3395 3396 0
c Var 'aux350' direct represents '1' with '3397'
3395 -3396 3397 0
-3397 3396 0
-3397 -3395 0
c Var 'aux350' direct represents '2' with '-3396'
3395 3397 -3396 0
c Encoding variable: aux351 with domain: int(0..2) (representing constraint ((grid_00004_00002=9) + (9=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux351' order represents '0' with '3398'
c Var 'aux351' direct represents '0' with '3398'
c Var 'aux351' order represents '1' with '3399'
-3398 3399 0
c Var 'aux351' direct represents '1' with '3400'
3398 -3399 3400 0
-3400 3399 0
-3400 -3398 0
c Var 'aux351' direct represents '2' with '-3399'
3398 3400 -3399 0
c Encoding variable: aux352 with domain: int(0..2) (representing constraint ((grid_00004_00001=9) + (9=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux352' order represents '0' with '3401'
c Var 'aux352' direct represents '0' with '3401'
c Var 'aux352' order represents '1' with '3402'
-3401 3402 0
c Var 'aux352' direct represents '1' with '3403'
3401 -3402 3403 0
-3403 3402 0
-3403 -3401 0
c Var 'aux352' direct represents '2' with '-3402'
3401 3403 -3402 0
c Encoding variable: aux353 with domain: int(0..2) (representing constraint ((grid_00004_00000=9) + (9=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux353' order represents '0' with '3404'
c Var 'aux353' direct represents '0' with '3404'
c Var 'aux353' order represents '1' with '3405'
-3404 3405 0
c Var 'aux353' direct represents '1' with '3406'
3404 -3405 3406 0
-3406 3405 0
-3406 -3404 0
c Var 'aux353' direct represents '2' with '-3405'
3404 3406 -3405 0
c Encoding variable: aux354 with domain: int(0..2) (representing constraint ((9=grid_00002_00006) + (9=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux354' order represents '0' with '3407'
c Var 'aux354' direct represents '0' with '3407'
c Var 'aux354' order represents '1' with '3408'
-3407 3408 0
c Var 'aux354' direct represents '1' with '3409'
3407 -3408 3409 0
-3409 3408 0
-3409 -3407 0
c Var 'aux354' direct represents '2' with '-3408'
3407 3409 -3408 0
c Encoding variable: aux355 with domain: int(0..2) (representing constraint ((9=grid_00002_00005) + (9=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux355' order represents '0' with '3410'
c Var 'aux355' direct represents '0' with '3410'
c Var 'aux355' order represents '1' with '3411'
-3410 3411 0
c Var 'aux355' direct represents '1' with '3412'
3410 -3411 3412 0
-3412 3411 0
-3412 -3410 0
c Var 'aux355' direct represents '2' with '-3411'
3410 3412 -3411 0
c Encoding variable: aux356 with domain: int(0..2) (representing constraint ((9=grid_00002_00004) + (9=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux356' order represents '0' with '3413'
c Var 'aux356' direct represents '0' with '3413'
c Var 'aux356' order represents '1' with '3414'
-3413 3414 0
c Var 'aux356' direct represents '1' with '3415'
3413 -3414 3415 0
-3415 3414 0
-3415 -3413 0
c Var 'aux356' direct represents '2' with '-3414'
3413 3415 -3414 0
c Encoding variable: aux357 with domain: int(0..2) (representing constraint ((9=grid_00002_00003) + (9=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux357' order represents '0' with '3416'
c Var 'aux357' direct represents '0' with '3416'
c Var 'aux357' order represents '1' with '3417'
-3416 3417 0
c Var 'aux357' direct represents '1' with '3418'
3416 -3417 3418 0
-3418 3417 0
-3418 -3416 0
c Var 'aux357' direct represents '2' with '-3417'
3416 3418 -3417 0
c Encoding variable: aux358 with domain: int(0..2) (representing constraint ((grid_00003_00002=9) + (9=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux358' order represents '0' with '3419'
c Var 'aux358' direct represents '0' with '3419'
c Var 'aux358' order represents '1' with '3420'
-3419 3420 0
c Var 'aux358' direct represents '1' with '3421'
3419 -3420 3421 0
-3421 3420 0
-3421 -3419 0
c Var 'aux358' direct represents '2' with '-3420'
3419 3421 -3420 0
c Encoding variable: aux359 with domain: int(0..2) (representing constraint ((9=grid_00001_00005) + (grid_00003_00003=9)))
c Both direct and order encoding.
c Var 'aux359' order represents '0' with '3422'
c Var 'aux359' direct represents '0' with '3422'
c Var 'aux359' order represents '1' with '3423'
-3422 3423 0
c Var 'aux359' direct represents '1' with '3424'
3422 -3423 3424 0
-3424 3423 0
-3424 -3422 0
c Var 'aux359' direct represents '2' with '-3423'
3422 3424 -3423 0
c Encoding variable: aux360 with domain: int(0..2) (representing constraint ((9=grid_00006_00000) + (9=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux360' order represents '0' with '3425'
c Var 'aux360' direct represents '0' with '3425'
c Var 'aux360' order represents '1' with '3426'
-3425 3426 0
c Var 'aux360' direct represents '1' with '3427'
3425 -3426 3427 0
-3427 3426 0
-3427 -3425 0
c Var 'aux360' direct represents '2' with '-3426'
3425 3427 -3426 0
c Encoding variable: aux361 with domain: int(0..4) (representing constraint (aux348 + aux360))
c Both direct and order encoding.
c Var 'aux361' order represents '0' with '3428'
c Var 'aux361' direct represents '0' with '3428'
c Var 'aux361' order represents '1' with '3429'
-3428 3429 0
c Var 'aux361' direct represents '1' with '3430'
3428 -3429 3430 0
-3430 3429 0
-3430 -3428 0
c Var 'aux361' order represents '2' with '3431'
-3429 3431 0
c Var 'aux361' direct represents '2' with '3432'
3429 -3431 3432 0
-3432 3431 0
-3432 -3429 0
c Var 'aux361' order represents '3' with '3433'
-3431 3433 0
c Var 'aux361' direct represents '3' with '3434'
3431 -3433 3434 0
-3434 3433 0
-3434 -3431 0
c Var 'aux361' direct represents '4' with '-3433'
3428 3430 3432 3434 -3433 0
c Encoding variable: aux362 with domain: int(0..4) (representing constraint (aux342 + aux355))
c Both direct and order encoding.
c Var 'aux362' order represents '0' with '3435'
c Var 'aux362' direct represents '0' with '3435'
c Var 'aux362' order represents '1' with '3436'
-3435 3436 0
c Var 'aux362' direct represents '1' with '3437'
3435 -3436 3437 0
-3437 3436 0
-3437 -3435 0
c Var 'aux362' order represents '2' with '3438'
-3436 3438 0
c Var 'aux362' direct represents '2' with '3439'
3436 -3438 3439 0
-3439 3438 0
-3439 -3436 0
c Var 'aux362' order represents '3' with '3440'
-3438 3440 0
c Var 'aux362' direct represents '3' with '3441'
3438 -3440 3441 0
-3441 3440 0
-3441 -3438 0
c Var 'aux362' direct represents '4' with '-3440'
3435 3437 3439 3441 -3440 0
c Encoding variable: aux363 with domain: int(0..4) (representing constraint (aux346 + aux341))
c Both direct and order encoding.
c Var 'aux363' order represents '0' with '3442'
c Var 'aux363' direct represents '0' with '3442'
c Var 'aux363' order represents '1' with '3443'
-3442 3443 0
c Var 'aux363' direct represents '1' with '3444'
3442 -3443 3444 0
-3444 3443 0
-3444 -3442 0
c Var 'aux363' order represents '2' with '3445'
-3443 3445 0
c Var 'aux363' direct represents '2' with '3446'
3443 -3445 3446 0
-3446 3445 0
-3446 -3443 0
c Var 'aux363' order represents '3' with '3447'
-3445 3447 0
c Var 'aux363' direct represents '3' with '3448'
3445 -3447 3448 0
-3448 3447 0
-3448 -3445 0
c Var 'aux363' direct represents '4' with '-3447'
3442 3444 3446 3448 -3447 0
c Encoding variable: aux364 with domain: int(0..4) (representing constraint (aux344 + aux343))
c Both direct and order encoding.
c Var 'aux364' order represents '0' with '3449'
c Var 'aux364' direct represents '0' with '3449'
c Var 'aux364' order represents '1' with '3450'
-3449 3450 0
c Var 'aux364' direct represents '1' with '3451'
3449 -3450 3451 0
-3451 3450 0
-3451 -3449 0
c Var 'aux364' order represents '2' with '3452'
-3450 3452 0
c Var 'aux364' direct represents '2' with '3453'
3450 -3452 3453 0
-3453 3452 0
-3453 -3450 0
c Var 'aux364' order represents '3' with '3454'
-3452 3454 0
c Var 'aux364' direct represents '3' with '3455'
3452 -3454 3455 0
-3455 3454 0
-3455 -3452 0
c Var 'aux364' direct represents '4' with '-3454'
3449 3451 3453 3455 -3454 0
c Encoding variable: aux365 with domain: int(0..4) (representing constraint (aux345 + aux347))
c Both direct and order encoding.
c Var 'aux365' order represents '0' with '3456'
c Var 'aux365' direct represents '0' with '3456'
c Var 'aux365' order represents '1' with '3457'
-3456 3457 0
c Var 'aux365' direct represents '1' with '3458'
3456 -3457 3458 0
-3458 3457 0
-3458 -3456 0
c Var 'aux365' order represents '2' with '3459'
-3457 3459 0
c Var 'aux365' direct represents '2' with '3460'
3457 -3459 3460 0
-3460 3459 0
-3460 -3457 0
c Var 'aux365' order represents '3' with '3461'
-3459 3461 0
c Var 'aux365' direct represents '3' with '3462'
3459 -3461 3462 0
-3462 3461 0
-3462 -3459 0
c Var 'aux365' direct represents '4' with '-3461'
3456 3458 3460 3462 -3461 0
c Encoding variable: aux366 with domain: int(0..4) (representing constraint (aux358 + aux354))
c Both direct and order encoding.
c Var 'aux366' order represents '0' with '3463'
c Var 'aux366' direct represents '0' with '3463'
c Var 'aux366' order represents '1' with '3464'
-3463 3464 0
c Var 'aux366' direct represents '1' with '3465'
3463 -3464 3465 0
-3465 3464 0
-3465 -3463 0
c Var 'aux366' order represents '2' with '3466'
-3464 3466 0
c Var 'aux366' direct represents '2' with '3467'
3464 -3466 3467 0
-3467 3466 0
-3467 -3464 0
c Var 'aux366' order represents '3' with '3468'
-3466 3468 0
c Var 'aux366' direct represents '3' with '3469'
3466 -3468 3469 0
-3469 3468 0
-3469 -3466 0
c Var 'aux366' direct represents '4' with '-3468'
3463 3465 3467 3469 -3468 0
c Encoding variable: aux367 with domain: int(0..4) (representing constraint (aux351 + aux350))
c Both direct and order encoding.
c Var 'aux367' order represents '0' with '3470'
c Var 'aux367' direct represents '0' with '3470'
c Var 'aux367' order represents '1' with '3471'
-3470 3471 0
c Var 'aux367' direct represents '1' with '3472'
3470 -3471 3472 0
-3472 3471 0
-3472 -3470 0
c Var 'aux367' order represents '2' with '3473'
-3471 3473 0
c Var 'aux367' direct represents '2' with '3474'
3471 -3473 3474 0
-3474 3473 0
-3474 -3471 0
c Var 'aux367' order represents '3' with '3475'
-3473 3475 0
c Var 'aux367' direct represents '3' with '3476'
3473 -3475 3476 0
-3476 3475 0
-3476 -3473 0
c Var 'aux367' direct represents '4' with '-3475'
3470 3472 3474 3476 -3475 0
c Encoding variable: aux368 with domain: int(0..4) (representing constraint (aux352 + aux353))
c Both direct and order encoding.
c Var 'aux368' order represents '0' with '3477'
c Var 'aux368' direct represents '0' with '3477'
c Var 'aux368' order represents '1' with '3478'
-3477 3478 0
c Var 'aux368' direct represents '1' with '3479'
3477 -3478 3479 0
-3479 3478 0
-3479 -3477 0
c Var 'aux368' order represents '2' with '3480'
-3478 3480 0
c Var 'aux368' direct represents '2' with '3481'
3478 -3480 3481 0
-3481 3480 0
-3481 -3478 0
c Var 'aux368' order represents '3' with '3482'
-3480 3482 0
c Var 'aux368' direct represents '3' with '3483'
3480 -3482 3483 0
-3483 3482 0
-3483 -3480 0
c Var 'aux368' direct represents '4' with '-3482'
3477 3479 3481 3483 -3482 0
c Encoding variable: aux369 with domain: int(0..4) (representing constraint (aux356 + aux359))
c Both direct and order encoding.
c Var 'aux369' order represents '0' with '3484'
c Var 'aux369' direct represents '0' with '3484'
c Var 'aux369' order represents '1' with '3485'
-3484 3485 0
c Var 'aux369' direct represents '1' with '3486'
3484 -3485 3486 0
-3486 3485 0
-3486 -3484 0
c Var 'aux369' order represents '2' with '3487'
-3485 3487 0
c Var 'aux369' direct represents '2' with '3488'
3485 -3487 3488 0
-3488 3487 0
-3488 -3485 0
c Var 'aux369' order represents '3' with '3489'
-3487 3489 0
c Var 'aux369' direct represents '3' with '3490'
3487 -3489 3490 0
-3490 3489 0
-3490 -3487 0
c Var 'aux369' direct represents '4' with '-3489'
3484 3486 3488 3490 -3489 0
c Encoding variable: aux370 with domain: int(0..4) (representing constraint (aux357 + aux349))
c Both direct and order encoding.
c Var 'aux370' order represents '0' with '3491'
c Var 'aux370' direct represents '0' with '3491'
c Var 'aux370' order represents '1' with '3492'
-3491 3492 0
c Var 'aux370' direct represents '1' with '3493'
3491 -3492 3493 0
-3493 3492 0
-3493 -3491 0
c Var 'aux370' order represents '2' with '3494'
-3492 3494 0
c Var 'aux370' direct represents '2' with '3495'
3492 -3494 3495 0
-3495 3494 0
-3495 -3492 0
c Var 'aux370' order represents '3' with '3496'
-3494 3496 0
c Var 'aux370' direct represents '3' with '3497'
3494 -3496 3497 0
-3497 3496 0
-3497 -3494 0
c Var 'aux370' direct represents '4' with '-3496'
3491 3493 3495 3497 -3496 0
c Encoding variable: aux371 with domain: int(0..8) (representing constraint (aux364 + aux370))
c Both direct and order encoding.
c Var 'aux371' order represents '0' with '3498'
c Var 'aux371' direct represents '0' with '3498'
c Var 'aux371' order represents '1' with '3499'
-3498 3499 0
c Var 'aux371' direct represents '1' with '3500'
3498 -3499 3500 0
-3500 3499 0
-3500 -3498 0
c Var 'aux371' order represents '2' with '3501'
-3499 3501 0
c Var 'aux371' direct represents '2' with '3502'
3499 -3501 3502 0
-3502 3501 0
-3502 -3499 0
c Var 'aux371' order represents '3' with '3503'
-3501 3503 0
c Var 'aux371' direct represents '3' with '3504'
3501 -3503 3504 0
-3504 3503 0
-3504 -3501 0
c Var 'aux371' order represents '4' with '3505'
-3503 3505 0
c Var 'aux371' direct represents '4' with '3506'
3503 -3505 3506 0
-3506 3505 0
-3506 -3503 0
c Var 'aux371' order represents '5' with '3507'
-3505 3507 0
c Var 'aux371' direct represents '5' with '3508'
3505 -3507 3508 0
-3508 3507 0
-3508 -3505 0
c Var 'aux371' order represents '6' with '3509'
-3507 3509 0
c Var 'aux371' direct represents '6' with '3510'
3507 -3509 3510 0
-3510 3509 0
-3510 -3507 0
c Var 'aux371' order represents '7' with '3511'
-3509 3511 0
c Var 'aux371' direct represents '7' with '3512'
3509 -3511 3512 0
-3512 3511 0
-3512 -3509 0
c Var 'aux371' direct represents '8' with '-3511'
3498 3500 3502 3504 3506 3508 3510 3512 -3511 0
c Encoding variable: aux372 with domain: int(0..8) (representing constraint (aux363 + aux367))
c Both direct and order encoding.
c Var 'aux372' order represents '0' with '3513'
c Var 'aux372' direct represents '0' with '3513'
c Var 'aux372' order represents '1' with '3514'
-3513 3514 0
c Var 'aux372' direct represents '1' with '3515'
3513 -3514 3515 0
-3515 3514 0
-3515 -3513 0
c Var 'aux372' order represents '2' with '3516'
-3514 3516 0
c Var 'aux372' direct represents '2' with '3517'
3514 -3516 3517 0
-3517 3516 0
-3517 -3514 0
c Var 'aux372' order represents '3' with '3518'
-3516 3518 0
c Var 'aux372' direct represents '3' with '3519'
3516 -3518 3519 0
-3519 3518 0
-3519 -3516 0
c Var 'aux372' order represents '4' with '3520'
-3518 3520 0
c Var 'aux372' direct represents '4' with '3521'
3518 -3520 3521 0
-3521 3520 0
-3521 -3518 0
c Var 'aux372' order represents '5' with '3522'
-3520 3522 0
c Var 'aux372' direct represents '5' with '3523'
3520 -3522 3523 0
-3523 3522 0
-3523 -3520 0
c Var 'aux372' order represents '6' with '3524'
-3522 3524 0
c Var 'aux372' direct represents '6' with '3525'
3522 -3524 3525 0
-3525 3524 0
-3525 -3522 0
c Var 'aux372' order represents '7' with '3526'
-3524 3526 0
c Var 'aux372' direct represents '7' with '3527'
3524 -3526 3527 0
-3527 3526 0
-3527 -3524 0
c Var 'aux372' direct represents '8' with '-3526'
3513 3515 3517 3519 3521 3523 3525 3527 -3526 0
c Encoding variable: aux373 with domain: int(0..8) (representing constraint (aux361 + aux362))
c Both direct and order encoding.
c Var 'aux373' order represents '0' with '3528'
c Var 'aux373' direct represents '0' with '3528'
c Var 'aux373' order represents '1' with '3529'
-3528 3529 0
c Var 'aux373' direct represents '1' with '3530'
3528 -3529 3530 0
-3530 3529 0
-3530 -3528 0
c Var 'aux373' order represents '2' with '3531'
-3529 3531 0
c Var 'aux373' direct represents '2' with '3532'
3529 -3531 3532 0
-3532 3531 0
-3532 -3529 0
c Var 'aux373' order represents '3' with '3533'
-3531 3533 0
c Var 'aux373' direct represents '3' with '3534'
3531 -3533 3534 0
-3534 3533 0
-3534 -3531 0
c Var 'aux373' order represents '4' with '3535'
-3533 3535 0
c Var 'aux373' direct represents '4' with '3536'
3533 -3535 3536 0
-3536 3535 0
-3536 -3533 0
c Var 'aux373' order represents '5' with '3537'
-3535 3537 0
c Var 'aux373' direct represents '5' with '3538'
3535 -3537 3538 0
-3538 3537 0
-3538 -3535 0
c Var 'aux373' order represents '6' with '3539'
-3537 3539 0
c Var 'aux373' direct represents '6' with '3540'
3537 -3539 3540 0
-3540 3539 0
-3540 -3537 0
c Var 'aux373' order represents '7' with '3541'
-3539 3541 0
c Var 'aux373' direct represents '7' with '3542'
3539 -3541 3542 0
-3542 3541 0
-3542 -3539 0
c Var 'aux373' direct represents '8' with '-3541'
3528 3530 3532 3534 3536 3538 3540 3542 -3541 0
c Encoding variable: aux374 with domain: int(0..8) (representing constraint (aux365 + aux366))
c Both direct and order encoding.
c Var 'aux374' order represents '0' with '3543'
c Var 'aux374' direct represents '0' with '3543'
c Var 'aux374' order represents '1' with '3544'
-3543 3544 0
c Var 'aux374' direct represents '1' with '3545'
3543 -3544 3545 0
-3545 3544 0
-3545 -3543 0
c Var 'aux374' order represents '2' with '3546'
-3544 3546 0
c Var 'aux374' direct represents '2' with '3547'
3544 -3546 3547 0
-3547 3546 0
-3547 -3544 0
c Var 'aux374' order represents '3' with '3548'
-3546 3548 0
c Var 'aux374' direct represents '3' with '3549'
3546 -3548 3549 0
-3549 3548 0
-3549 -3546 0
c Var 'aux374' order represents '4' with '3550'
-3548 3550 0
c Var 'aux374' direct represents '4' with '3551'
3548 -3550 3551 0
-3551 3550 0
-3551 -3548 0
c Var 'aux374' order represents '5' with '3552'
-3550 3552 0
c Var 'aux374' direct represents '5' with '3553'
3550 -3552 3553 0
-3553 3552 0
-3553 -3550 0
c Var 'aux374' order represents '6' with '3554'
-3552 3554 0
c Var 'aux374' direct represents '6' with '3555'
3552 -3554 3555 0
-3555 3554 0
-3555 -3552 0
c Var 'aux374' order represents '7' with '3556'
-3554 3556 0
c Var 'aux374' direct represents '7' with '3557'
3554 -3556 3557 0
-3557 3556 0
-3557 -3554 0
c Var 'aux374' direct represents '8' with '-3556'
3543 3545 3547 3549 3551 3553 3555 3557 -3556 0
c Encoding variable: aux375 with domain: int(0..8) (representing constraint (aux368 + aux369))
c Both direct and order encoding.
c Var 'aux375' order represents '0' with '3558'
c Var 'aux375' direct represents '0' with '3558'
c Var 'aux375' order represents '1' with '3559'
-3558 3559 0
c Var 'aux375' direct represents '1' with '3560'
3558 -3559 3560 0
-3560 3559 0
-3560 -3558 0
c Var 'aux375' order represents '2' with '3561'
-3559 3561 0
c Var 'aux375' direct represents '2' with '3562'
3559 -3561 3562 0
-3562 3561 0
-3562 -3559 0
c Var 'aux375' order represents '3' with '3563'
-3561 3563 0
c Var 'aux375' direct represents '3' with '3564'
3561 -3563 3564 0
-3564 3563 0
-3564 -3561 0
c Var 'aux375' order represents '4' with '3565'
-3563 3565 0
c Var 'aux375' direct represents '4' with '3566'
3563 -3565 3566 0
-3566 3565 0
-3566 -3563 0
c Var 'aux375' order represents '5' with '3567'
-3565 3567 0
c Var 'aux375' direct represents '5' with '3568'
3565 -3567 3568 0
-3568 3567 0
-3568 -3565 0
c Var 'aux375' order represents '6' with '3569'
-3567 3569 0
c Var 'aux375' direct represents '6' with '3570'
3567 -3569 3570 0
-3570 3569 0
-3570 -3567 0
c Var 'aux375' order represents '7' with '3571'
-3569 3571 0
c Var 'aux375' direct represents '7' with '3572'
3569 -3571 3572 0
-3572 3571 0
-3572 -3569 0
c Var 'aux375' direct represents '8' with '-3571'
3558 3560 3562 3564 3566 3568 3570 3572 -3571 0
c Encoding variable: aux376 with domain: int(0..16) (representing constraint (aux372 + aux375))
c Both direct and order encoding.
c Var 'aux376' order represents '0' with '3573'
c Var 'aux376' direct represents '0' with '3573'
c Var 'aux376' order represents '1' with '3574'
-3573 3574 0
c Var 'aux376' direct represents '1' with '3575'
3573 -3574 3575 0
-3575 3574 0
-3575 -3573 0
c Var 'aux376' order represents '2' with '3576'
-3574 3576 0
c Var 'aux376' direct represents '2' with '3577'
3574 -3576 3577 0
-3577 3576 0
-3577 -3574 0
c Var 'aux376' order represents '3' with '3578'
-3576 3578 0
c Var 'aux376' direct represents '3' with '3579'
3576 -3578 3579 0
-3579 3578 0
-3579 -3576 0
c Var 'aux376' order represents '4' with '3580'
-3578 3580 0
c Var 'aux376' direct represents '4' with '3581'
3578 -3580 3581 0
-3581 3580 0
-3581 -3578 0
c Var 'aux376' order represents '5' with '3582'
-3580 3582 0
c Var 'aux376' direct represents '5' with '3583'
3580 -3582 3583 0
-3583 3582 0
-3583 -3580 0
c Var 'aux376' order represents '6' with '3584'
-3582 3584 0
c Var 'aux376' direct represents '6' with '3585'
3582 -3584 3585 0
-3585 3584 0
-3585 -3582 0
c Var 'aux376' order represents '7' with '3586'
-3584 3586 0
c Var 'aux376' direct represents '7' with '3587'
3584 -3586 3587 0
-3587 3586 0
-3587 -3584 0
c Var 'aux376' order represents '8' with '3588'
-3586 3588 0
c Var 'aux376' direct represents '8' with '3589'
3586 -3588 3589 0
-3589 3588 0
-3589 -3586 0
c Var 'aux376' order represents '9' with '3590'
-3588 3590 0
c Var 'aux376' direct represents '9' with '3591'
3588 -3590 3591 0
-3591 3590 0
-3591 -3588 0
c Var 'aux376' order represents '10' with '3592'
-3590 3592 0
c Var 'aux376' direct represents '10' with '3593'
3590 -3592 3593 0
-3593 3592 0
-3593 -3590 0
c Var 'aux376' order represents '11' with '3594'
-3592 3594 0
c Var 'aux376' direct represents '11' with '3595'
3592 -3594 3595 0
-3595 3594 0
-3595 -3592 0
c Var 'aux376' order represents '12' with '3596'
-3594 3596 0
c Var 'aux376' direct represents '12' with '3597'
3594 -3596 3597 0
-3597 3596 0
-3597 -3594 0
c Var 'aux376' order represents '13' with '3598'
-3596 3598 0
c Var 'aux376' direct represents '13' with '3599'
3596 -3598 3599 0
-3599 3598 0
-3599 -3596 0
c Var 'aux376' order represents '14' with '3600'
-3598 3600 0
c Var 'aux376' direct represents '14' with '3601'
3598 -3600 3601 0
-3601 3600 0
-3601 -3598 0
c Var 'aux376' order represents '15' with '3602'
-3600 3602 0
c Var 'aux376' direct represents '15' with '3603'
3600 -3602 3603 0
-3603 3602 0
-3603 -3600 0
c Var 'aux376' direct represents '16' with '-3602'
3573 3575 3577 3579 3581 3583 3585 3587 3589 3591 3593 3595 3597 3599 3601 3603 -3602 0
c Encoding variable: aux377 with domain: int(0..16) (representing constraint (aux371 + aux373))
c Both direct and order encoding.
c Var 'aux377' order represents '0' with '3604'
c Var 'aux377' direct represents '0' with '3604'
c Var 'aux377' order represents '1' with '3605'
-3604 3605 0
c Var 'aux377' direct represents '1' with '3606'
3604 -3605 3606 0
-3606 3605 0
-3606 -3604 0
c Var 'aux377' order represents '2' with '3607'
-3605 3607 0
c Var 'aux377' direct represents '2' with '3608'
3605 -3607 3608 0
-3608 3607 0
-3608 -3605 0
c Var 'aux377' order represents '3' with '3609'
-3607 3609 0
c Var 'aux377' direct represents '3' with '3610'
3607 -3609 3610 0
-3610 3609 0
-3610 -3607 0
c Var 'aux377' order represents '4' with '3611'
-3609 3611 0
c Var 'aux377' direct represents '4' with '3612'
3609 -3611 3612 0
-3612 3611 0
-3612 -3609 0
c Var 'aux377' order represents '5' with '3613'
-3611 3613 0
c Var 'aux377' direct represents '5' with '3614'
3611 -3613 3614 0
-3614 3613 0
-3614 -3611 0
c Var 'aux377' order represents '6' with '3615'
-3613 3615 0
c Var 'aux377' direct represents '6' with '3616'
3613 -3615 3616 0
-3616 3615 0
-3616 -3613 0
c Var 'aux377' order represents '7' with '3617'
-3615 3617 0
c Var 'aux377' direct represents '7' with '3618'
3615 -3617 3618 0
-3618 3617 0
-3618 -3615 0
c Var 'aux377' order represents '8' with '3619'
-3617 3619 0
c Var 'aux377' direct represents '8' with '3620'
3617 -3619 3620 0
-3620 3619 0
-3620 -3617 0
c Var 'aux377' order represents '9' with '3621'
-3619 3621 0
c Var 'aux377' direct represents '9' with '3622'
3619 -3621 3622 0
-3622 3621 0
-3622 -3619 0
c Var 'aux377' order represents '10' with '3623'
-3621 3623 0
c Var 'aux377' direct represents '10' with '3624'
3621 -3623 3624 0
-3624 3623 0
-3624 -3621 0
c Var 'aux377' order represents '11' with '3625'
-3623 3625 0
c Var 'aux377' direct represents '11' with '3626'
3623 -3625 3626 0
-3626 3625 0
-3626 -3623 0
c Var 'aux377' order represents '12' with '3627'
-3625 3627 0
c Var 'aux377' direct represents '12' with '3628'
3625 -3627 3628 0
-3628 3627 0
-3628 -3625 0
c Var 'aux377' order represents '13' with '3629'
-3627 3629 0
c Var 'aux377' direct represents '13' with '3630'
3627 -3629 3630 0
-3630 3629 0
-3630 -3627 0
c Var 'aux377' order represents '14' with '3631'
-3629 3631 0
c Var 'aux377' direct represents '14' with '3632'
3629 -3631 3632 0
-3632 3631 0
-3632 -3629 0
c Var 'aux377' order represents '15' with '3633'
-3631 3633 0
c Var 'aux377' direct represents '15' with '3634'
3631 -3633 3634 0
-3634 3633 0
-3634 -3631 0
c Var 'aux377' direct represents '16' with '-3633'
3604 3606 3608 3610 3612 3614 3616 3618 3620 3622 3624 3626 3628 3630 3632 3634 -3633 0
c Encoding variable: aux378 with domain: int(0..2) (representing constraint ((1=grid_00005_00000) + (grid_00000_00006=1)))
c Both direct and order encoding.
c Var 'aux378' order represents '0' with '3635'
c Var 'aux378' direct represents '0' with '3635'
c Var 'aux378' order represents '1' with '3636'
-3635 3636 0
c Var 'aux378' direct represents '1' with '3637'
3635 -3636 3637 0
-3637 3636 0
-3637 -3635 0
c Var 'aux378' direct represents '2' with '-3636'
3635 3637 -3636 0
c Encoding variable: aux379 with domain: int(0..2) (representing constraint ((grid_00000_00005=1) + (1=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux379' order represents '0' with '3638'
c Var 'aux379' direct represents '0' with '3638'
c Var 'aux379' order represents '1' with '3639'
-3638 3639 0
c Var 'aux379' direct represents '1' with '3640'
3638 -3639 3640 0
-3640 3639 0
-3640 -3638 0
c Var 'aux379' direct represents '2' with '-3639'
3638 3640 -3639 0
c Encoding variable: aux380 with domain: int(0..2) (representing constraint ((grid_00000_00004=1) + (1=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux380' order represents '0' with '3641'
c Var 'aux380' direct represents '0' with '3641'
c Var 'aux380' order represents '1' with '3642'
-3641 3642 0
c Var 'aux380' direct represents '1' with '3643'
3641 -3642 3643 0
-3643 3642 0
-3643 -3641 0
c Var 'aux380' direct represents '2' with '-3642'
3641 3643 -3642 0
c Encoding variable: aux381 with domain: int(0..2) (representing constraint ((grid_00000_00003=1) + (grid_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux381' order represents '0' with '3644'
c Var 'aux381' direct represents '0' with '3644'
c Var 'aux381' order represents '1' with '3645'
-3644 3645 0
c Var 'aux381' direct represents '1' with '3646'
3644 -3645 3646 0
-3646 3645 0
-3646 -3644 0
c Var 'aux381' direct represents '2' with '-3645'
3644 3646 -3645 0
c Encoding variable: aux382 with domain: int(0..2) (representing constraint ((grid_00000_00002=1) + (1=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux382' order represents '0' with '3647'
c Var 'aux382' direct represents '0' with '3647'
c Var 'aux382' order represents '1' with '3648'
-3647 3648 0
c Var 'aux382' direct represents '1' with '3649'
3647 -3648 3649 0
-3649 3648 0
-3649 -3647 0
c Var 'aux382' direct represents '2' with '-3648'
3647 3649 -3648 0
c Encoding variable: aux383 with domain: int(0..2) (representing constraint ((grid_00000_00001=1) + (grid_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux383' order represents '0' with '3650'
c Var 'aux383' direct represents '0' with '3650'
c Var 'aux383' order represents '1' with '3651'
-3650 3651 0
c Var 'aux383' direct represents '1' with '3652'
3650 -3651 3652 0
-3652 3651 0
-3652 -3650 0
c Var 'aux383' direct represents '2' with '-3651'
3650 3652 -3651 0
c Encoding variable: aux384 with domain: int(0..2) (representing constraint ((grid_00004_00005=1) + (1=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux384' order represents '0' with '3653'
c Var 'aux384' direct represents '0' with '3653'
c Var 'aux384' order represents '1' with '3654'
-3653 3654 0
c Var 'aux384' direct represents '1' with '3655'
3653 -3654 3655 0
-3655 3654 0
-3655 -3653 0
c Var 'aux384' direct represents '2' with '-3654'
3653 3655 -3654 0
c Encoding variable: aux385 with domain: int(0..2) (representing constraint ((grid_00004_00006=1) + (grid_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux385' order represents '0' with '3656'
c Var 'aux385' direct represents '0' with '3656'
c Var 'aux385' order represents '1' with '3657'
-3656 3657 0
c Var 'aux385' direct represents '1' with '3658'
3656 -3657 3658 0
-3658 3657 0
-3658 -3656 0
c Var 'aux385' direct represents '2' with '-3657'
3656 3658 -3657 0
c Encoding variable: aux386 with domain: int(0..2) (representing constraint ((1=grid_00006_00004) + (1=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux386' order represents '0' with '3659'
c Var 'aux386' direct represents '0' with '3659'
c Var 'aux386' order represents '1' with '3660'
-3659 3660 0
c Var 'aux386' direct represents '1' with '3661'
3659 -3660 3661 0
-3661 3660 0
-3661 -3659 0
c Var 'aux386' direct represents '2' with '-3660'
3659 3661 -3660 0
c Encoding variable: aux387 with domain: int(0..2) (representing constraint ((grid_00004_00003=1) + (grid_00003_00000=1)))
c Both direct and order encoding.
c Var 'aux387' order represents '0' with '3662'
c Var 'aux387' direct represents '0' with '3662'
c Var 'aux387' order represents '1' with '3663'
-3662 3663 0
c Var 'aux387' direct represents '1' with '3664'
3662 -3663 3664 0
-3664 3663 0
-3664 -3662 0
c Var 'aux387' direct represents '2' with '-3663'
3662 3664 -3663 0
c Encoding variable: aux388 with domain: int(0..2) (representing constraint ((grid_00004_00002=1) + (1=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux388' order represents '0' with '3665'
c Var 'aux388' direct represents '0' with '3665'
c Var 'aux388' order represents '1' with '3666'
-3665 3666 0
c Var 'aux388' direct represents '1' with '3667'
3665 -3666 3667 0
-3667 3666 0
-3667 -3665 0
c Var 'aux388' direct represents '2' with '-3666'
3665 3667 -3666 0
c Encoding variable: aux389 with domain: int(0..2) (representing constraint ((grid_00004_00001=1) + (1=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux389' order represents '0' with '3668'
c Var 'aux389' direct represents '0' with '3668'
c Var 'aux389' order represents '1' with '3669'
-3668 3669 0
c Var 'aux389' direct represents '1' with '3670'
3668 -3669 3670 0
-3670 3669 0
-3670 -3668 0
c Var 'aux389' direct represents '2' with '-3669'
3668 3670 -3669 0
c Encoding variable: aux390 with domain: int(0..2) (representing constraint ((grid_00004_00000=1) + (1=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux390' order represents '0' with '3671'
c Var 'aux390' direct represents '0' with '3671'
c Var 'aux390' order represents '1' with '3672'
-3671 3672 0
c Var 'aux390' direct represents '1' with '3673'
3671 -3672 3673 0
-3673 3672 0
-3673 -3671 0
c Var 'aux390' direct represents '2' with '-3672'
3671 3673 -3672 0
c Encoding variable: aux391 with domain: int(0..2) (representing constraint ((1=grid_00002_00006) + (1=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux391' order represents '0' with '3674'
c Var 'aux391' direct represents '0' with '3674'
c Var 'aux391' order represents '1' with '3675'
-3674 3675 0
c Var 'aux391' direct represents '1' with '3676'
3674 -3675 3676 0
-3676 3675 0
-3676 -3674 0
c Var 'aux391' direct represents '2' with '-3675'
3674 3676 -3675 0
c Encoding variable: aux392 with domain: int(0..2) (representing constraint ((1=grid_00002_00005) + (1=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux392' order represents '0' with '3677'
c Var 'aux392' direct represents '0' with '3677'
c Var 'aux392' order represents '1' with '3678'
-3677 3678 0
c Var 'aux392' direct represents '1' with '3679'
3677 -3678 3679 0
-3679 3678 0
-3679 -3677 0
c Var 'aux392' direct represents '2' with '-3678'
3677 3679 -3678 0
c Encoding variable: aux393 with domain: int(0..2) (representing constraint ((1=grid_00002_00004) + (1=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux393' order represents '0' with '3680'
c Var 'aux393' direct represents '0' with '3680'
c Var 'aux393' order represents '1' with '3681'
-3680 3681 0
c Var 'aux393' direct represents '1' with '3682'
3680 -3681 3682 0
-3682 3681 0
-3682 -3680 0
c Var 'aux393' direct represents '2' with '-3681'
3680 3682 -3681 0
c Encoding variable: aux394 with domain: int(0..2) (representing constraint ((1=grid_00002_00003) + (1=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux394' order represents '0' with '3683'
c Var 'aux394' direct represents '0' with '3683'
c Var 'aux394' order represents '1' with '3684'
-3683 3684 0
c Var 'aux394' direct represents '1' with '3685'
3683 -3684 3685 0
-3685 3684 0
-3685 -3683 0
c Var 'aux394' direct represents '2' with '-3684'
3683 3685 -3684 0
c Encoding variable: aux395 with domain: int(0..2) (representing constraint ((grid_00003_00002=1) + (1=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux395' order represents '0' with '3686'
c Var 'aux395' direct represents '0' with '3686'
c Var 'aux395' order represents '1' with '3687'
-3686 3687 0
c Var 'aux395' direct represents '1' with '3688'
3686 -3687 3688 0
-3688 3687 0
-3688 -3686 0
c Var 'aux395' direct represents '2' with '-3687'
3686 3688 -3687 0
c Encoding variable: aux396 with domain: int(0..2) (representing constraint ((1=grid_00001_00005) + (grid_00003_00003=1)))
c Both direct and order encoding.
c Var 'aux396' order represents '0' with '3689'
c Var 'aux396' direct represents '0' with '3689'
c Var 'aux396' order represents '1' with '3690'
-3689 3690 0
c Var 'aux396' direct represents '1' with '3691'
3689 -3690 3691 0
-3691 3690 0
-3691 -3689 0
c Var 'aux396' direct represents '2' with '-3690'
3689 3691 -3690 0
c Encoding variable: aux397 with domain: int(0..2) (representing constraint ((1=grid_00006_00000) + (1=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux397' order represents '0' with '3692'
c Var 'aux397' direct represents '0' with '3692'
c Var 'aux397' order represents '1' with '3693'
-3692 3693 0
c Var 'aux397' direct represents '1' with '3694'
3692 -3693 3694 0
-3694 3693 0
-3694 -3692 0
c Var 'aux397' direct represents '2' with '-3693'
3692 3694 -3693 0
c Encoding variable: aux398 with domain: int(0..4) (representing constraint (aux385 + aux397))
c Both direct and order encoding.
c Var 'aux398' order represents '0' with '3695'
c Var 'aux398' direct represents '0' with '3695'
c Var 'aux398' order represents '1' with '3696'
-3695 3696 0
c Var 'aux398' direct represents '1' with '3697'
3695 -3696 3697 0
-3697 3696 0
-3697 -3695 0
c Var 'aux398' order represents '2' with '3698'
-3696 3698 0
c Var 'aux398' direct represents '2' with '3699'
3696 -3698 3699 0
-3699 3698 0
-3699 -3696 0
c Var 'aux398' order represents '3' with '3700'
-3698 3700 0
c Var 'aux398' direct represents '3' with '3701'
3698 -3700 3701 0
-3701 3700 0
-3701 -3698 0
c Var 'aux398' direct represents '4' with '-3700'
3695 3697 3699 3701 -3700 0
c Encoding variable: aux399 with domain: int(0..4) (representing constraint (aux379 + aux392))
c Both direct and order encoding.
c Var 'aux399' order represents '0' with '3702'
c Var 'aux399' direct represents '0' with '3702'
c Var 'aux399' order represents '1' with '3703'
-3702 3703 0
c Var 'aux399' direct represents '1' with '3704'
3702 -3703 3704 0
-3704 3703 0
-3704 -3702 0
c Var 'aux399' order represents '2' with '3705'
-3703 3705 0
c Var 'aux399' direct represents '2' with '3706'
3703 -3705 3706 0
-3706 3705 0
-3706 -3703 0
c Var 'aux399' order represents '3' with '3707'
-3705 3707 0
c Var 'aux399' direct represents '3' with '3708'
3705 -3707 3708 0
-3708 3707 0
-3708 -3705 0
c Var 'aux399' direct represents '4' with '-3707'
3702 3704 3706 3708 -3707 0
c Encoding variable: aux400 with domain: int(0..4) (representing constraint (aux383 + aux378))
c Both direct and order encoding.
c Var 'aux400' order represents '0' with '3709'
c Var 'aux400' direct represents '0' with '3709'
c Var 'aux400' order represents '1' with '3710'
-3709 3710 0
c Var 'aux400' direct represents '1' with '3711'
3709 -3710 3711 0
-3711 3710 0
-3711 -3709 0
c Var 'aux400' order represents '2' with '3712'
-3710 3712 0
c Var 'aux400' direct represents '2' with '3713'
3710 -3712 3713 0
-3713 3712 0
-3713 -3710 0
c Var 'aux400' order represents '3' with '3714'
-3712 3714 0
c Var 'aux400' direct represents '3' with '3715'
3712 -3714 3715 0
-3715 3714 0
-3715 -3712 0
c Var 'aux400' direct represents '4' with '-3714'
3709 3711 3713 3715 -3714 0
c Encoding variable: aux401 with domain: int(0..4) (representing constraint (aux381 + aux380))
c Both direct and order encoding.
c Var 'aux401' order represents '0' with '3716'
c Var 'aux401' direct represents '0' with '3716'
c Var 'aux401' order represents '1' with '3717'
-3716 3717 0
c Var 'aux401' direct represents '1' with '3718'
3716 -3717 3718 0
-3718 3717 0
-3718 -3716 0
c Var 'aux401' order represents '2' with '3719'
-3717 3719 0
c Var 'aux401' direct represents '2' with '3720'
3717 -3719 3720 0
-3720 3719 0
-3720 -3717 0
c Var 'aux401' order represents '3' with '3721'
-3719 3721 0
c Var 'aux401' direct represents '3' with '3722'
3719 -3721 3722 0
-3722 3721 0
-3722 -3719 0
c Var 'aux401' direct represents '4' with '-3721'
3716 3718 3720 3722 -3721 0
c Encoding variable: aux402 with domain: int(0..4) (representing constraint (aux382 + aux384))
c Both direct and order encoding.
c Var 'aux402' order represents '0' with '3723'
c Var 'aux402' direct represents '0' with '3723'
c Var 'aux402' order represents '1' with '3724'
-3723 3724 0
c Var 'aux402' direct represents '1' with '3725'
3723 -3724 3725 0
-3725 3724 0
-3725 -3723 0
c Var 'aux402' order represents '2' with '3726'
-3724 3726 0
c Var 'aux402' direct represents '2' with '3727'
3724 -3726 3727 0
-3727 3726 0
-3727 -3724 0
c Var 'aux402' order represents '3' with '3728'
-3726 3728 0
c Var 'aux402' direct represents '3' with '3729'
3726 -3728 3729 0
-3729 3728 0
-3729 -3726 0
c Var 'aux402' direct represents '4' with '-3728'
3723 3725 3727 3729 -3728 0
c Encoding variable: aux403 with domain: int(0..4) (representing constraint (aux395 + aux391))
c Both direct and order encoding.
c Var 'aux403' order represents '0' with '3730'
c Var 'aux403' direct represents '0' with '3730'
c Var 'aux403' order represents '1' with '3731'
-3730 3731 0
c Var 'aux403' direct represents '1' with '3732'
3730 -3731 3732 0
-3732 3731 0
-3732 -3730 0
c Var 'aux403' order represents '2' with '3733'
-3731 3733 0
c Var 'aux403' direct represents '2' with '3734'
3731 -3733 3734 0
-3734 3733 0
-3734 -3731 0
c Var 'aux403' order represents '3' with '3735'
-3733 3735 0
c Var 'aux403' direct represents '3' with '3736'
3733 -3735 3736 0
-3736 3735 0
-3736 -3733 0
c Var 'aux403' direct represents '4' with '-3735'
3730 3732 3734 3736 -3735 0
c Encoding variable: aux404 with domain: int(0..4) (representing constraint (aux388 + aux387))
c Both direct and order encoding.
c Var 'aux404' order represents '0' with '3737'
c Var 'aux404' direct represents '0' with '3737'
c Var 'aux404' order represents '1' with '3738'
-3737 3738 0
c Var 'aux404' direct represents '1' with '3739'
3737 -3738 3739 0
-3739 3738 0
-3739 -3737 0
c Var 'aux404' order represents '2' with '3740'
-3738 3740 0
c Var 'aux404' direct represents '2' with '3741'
3738 -3740 3741 0
-3741 3740 0
-3741 -3738 0
c Var 'aux404' order represents '3' with '3742'
-3740 3742 0
c Var 'aux404' direct represents '3' with '3743'
3740 -3742 3743 0
-3743 3742 0
-3743 -3740 0
c Var 'aux404' direct represents '4' with '-3742'
3737 3739 3741 3743 -3742 0
c Encoding variable: aux405 with domain: int(0..4) (representing constraint (aux389 + aux390))
c Both direct and order encoding.
c Var 'aux405' order represents '0' with '3744'
c Var 'aux405' direct represents '0' with '3744'
c Var 'aux405' order represents '1' with '3745'
-3744 3745 0
c Var 'aux405' direct represents '1' with '3746'
3744 -3745 3746 0
-3746 3745 0
-3746 -3744 0
c Var 'aux405' order represents '2' with '3747'
-3745 3747 0
c Var 'aux405' direct represents '2' with '3748'
3745 -3747 3748 0
-3748 3747 0
-3748 -3745 0
c Var 'aux405' order represents '3' with '3749'
-3747 3749 0
c Var 'aux405' direct represents '3' with '3750'
3747 -3749 3750 0
-3750 3749 0
-3750 -3747 0
c Var 'aux405' direct represents '4' with '-3749'
3744 3746 3748 3750 -3749 0
c Encoding variable: aux406 with domain: int(0..4) (representing constraint (aux393 + aux396))
c Both direct and order encoding.
c Var 'aux406' order represents '0' with '3751'
c Var 'aux406' direct represents '0' with '3751'
c Var 'aux406' order represents '1' with '3752'
-3751 3752 0
c Var 'aux406' direct represents '1' with '3753'
3751 -3752 3753 0
-3753 3752 0
-3753 -3751 0
c Var 'aux406' order represents '2' with '3754'
-3752 3754 0
c Var 'aux406' direct represents '2' with '3755'
3752 -3754 3755 0
-3755 3754 0
-3755 -3752 0
c Var 'aux406' order represents '3' with '3756'
-3754 3756 0
c Var 'aux406' direct represents '3' with '3757'
3754 -3756 3757 0
-3757 3756 0
-3757 -3754 0
c Var 'aux406' direct represents '4' with '-3756'
3751 3753 3755 3757 -3756 0
c Encoding variable: aux407 with domain: int(0..4) (representing constraint (aux394 + aux386))
c Both direct and order encoding.
c Var 'aux407' order represents '0' with '3758'
c Var 'aux407' direct represents '0' with '3758'
c Var 'aux407' order represents '1' with '3759'
-3758 3759 0
c Var 'aux407' direct represents '1' with '3760'
3758 -3759 3760 0
-3760 3759 0
-3760 -3758 0
c Var 'aux407' order represents '2' with '3761'
-3759 3761 0
c Var 'aux407' direct represents '2' with '3762'
3759 -3761 3762 0
-3762 3761 0
-3762 -3759 0
c Var 'aux407' order represents '3' with '3763'
-3761 3763 0
c Var 'aux407' direct represents '3' with '3764'
3761 -3763 3764 0
-3764 3763 0
-3764 -3761 0
c Var 'aux407' direct represents '4' with '-3763'
3758 3760 3762 3764 -3763 0
c Encoding variable: aux408 with domain: int(0..8) (representing constraint (aux401 + aux407))
c Both direct and order encoding.
c Var 'aux408' order represents '0' with '3765'
c Var 'aux408' direct represents '0' with '3765'
c Var 'aux408' order represents '1' with '3766'
-3765 3766 0
c Var 'aux408' direct represents '1' with '3767'
3765 -3766 3767 0
-3767 3766 0
-3767 -3765 0
c Var 'aux408' order represents '2' with '3768'
-3766 3768 0
c Var 'aux408' direct represents '2' with '3769'
3766 -3768 3769 0
-3769 3768 0
-3769 -3766 0
c Var 'aux408' order represents '3' with '3770'
-3768 3770 0
c Var 'aux408' direct represents '3' with '3771'
3768 -3770 3771 0
-3771 3770 0
-3771 -3768 0
c Var 'aux408' order represents '4' with '3772'
-3770 3772 0
c Var 'aux408' direct represents '4' with '3773'
3770 -3772 3773 0
-3773 3772 0
-3773 -3770 0
c Var 'aux408' order represents '5' with '3774'
-3772 3774 0
c Var 'aux408' direct represents '5' with '3775'
3772 -3774 3775 0
-3775 3774 0
-3775 -3772 0
c Var 'aux408' order represents '6' with '3776'
-3774 3776 0
c Var 'aux408' direct represents '6' with '3777'
3774 -3776 3777 0
-3777 3776 0
-3777 -3774 0
c Var 'aux408' order represents '7' with '3778'
-3776 3778 0
c Var 'aux408' direct represents '7' with '3779'
3776 -3778 3779 0
-3779 3778 0
-3779 -3776 0
c Var 'aux408' direct represents '8' with '-3778'
3765 3767 3769 3771 3773 3775 3777 3779 -3778 0
c Encoding variable: aux409 with domain: int(0..8) (representing constraint (aux400 + aux404))
c Both direct and order encoding.
c Var 'aux409' order represents '0' with '3780'
c Var 'aux409' direct represents '0' with '3780'
c Var 'aux409' order represents '1' with '3781'
-3780 3781 0
c Var 'aux409' direct represents '1' with '3782'
3780 -3781 3782 0
-3782 3781 0
-3782 -3780 0
c Var 'aux409' order represents '2' with '3783'
-3781 3783 0
c Var 'aux409' direct represents '2' with '3784'
3781 -3783 3784 0
-3784 3783 0
-3784 -3781 0
c Var 'aux409' order represents '3' with '3785'
-3783 3785 0
c Var 'aux409' direct represents '3' with '3786'
3783 -3785 3786 0
-3786 3785 0
-3786 -3783 0
c Var 'aux409' order represents '4' with '3787'
-3785 3787 0
c Var 'aux409' direct represents '4' with '3788'
3785 -3787 3788 0
-3788 3787 0
-3788 -3785 0
c Var 'aux409' order represents '5' with '3789'
-3787 3789 0
c Var 'aux409' direct represents '5' with '3790'
3787 -3789 3790 0
-3790 3789 0
-3790 -3787 0
c Var 'aux409' order represents '6' with '3791'
-3789 3791 0
c Var 'aux409' direct represents '6' with '3792'
3789 -3791 3792 0
-3792 3791 0
-3792 -3789 0
c Var 'aux409' order represents '7' with '3793'
-3791 3793 0
c Var 'aux409' direct represents '7' with '3794'
3791 -3793 3794 0
-3794 3793 0
-3794 -3791 0
c Var 'aux409' direct represents '8' with '-3793'
3780 3782 3784 3786 3788 3790 3792 3794 -3793 0
c Encoding variable: aux410 with domain: int(0..8) (representing constraint (aux398 + aux399))
c Both direct and order encoding.
c Var 'aux410' order represents '0' with '3795'
c Var 'aux410' direct represents '0' with '3795'
c Var 'aux410' order represents '1' with '3796'
-3795 3796 0
c Var 'aux410' direct represents '1' with '3797'
3795 -3796 3797 0
-3797 3796 0
-3797 -3795 0
c Var 'aux410' order represents '2' with '3798'
-3796 3798 0
c Var 'aux410' direct represents '2' with '3799'
3796 -3798 3799 0
-3799 3798 0
-3799 -3796 0
c Var 'aux410' order represents '3' with '3800'
-3798 3800 0
c Var 'aux410' direct represents '3' with '3801'
3798 -3800 3801 0
-3801 3800 0
-3801 -3798 0
c Var 'aux410' order represents '4' with '3802'
-3800 3802 0
c Var 'aux410' direct represents '4' with '3803'
3800 -3802 3803 0
-3803 3802 0
-3803 -3800 0
c Var 'aux410' order represents '5' with '3804'
-3802 3804 0
c Var 'aux410' direct represents '5' with '3805'
3802 -3804 3805 0
-3805 3804 0
-3805 -3802 0
c Var 'aux410' order represents '6' with '3806'
-3804 3806 0
c Var 'aux410' direct represents '6' with '3807'
3804 -3806 3807 0
-3807 3806 0
-3807 -3804 0
c Var 'aux410' order represents '7' with '3808'
-3806 3808 0
c Var 'aux410' direct represents '7' with '3809'
3806 -3808 3809 0
-3809 3808 0
-3809 -3806 0
c Var 'aux410' direct represents '8' with '-3808'
3795 3797 3799 3801 3803 3805 3807 3809 -3808 0
c Encoding variable: aux411 with domain: int(0..8) (representing constraint (aux402 + aux403))
c Both direct and order encoding.
c Var 'aux411' order represents '0' with '3810'
c Var 'aux411' direct represents '0' with '3810'
c Var 'aux411' order represents '1' with '3811'
-3810 3811 0
c Var 'aux411' direct represents '1' with '3812'
3810 -3811 3812 0
-3812 3811 0
-3812 -3810 0
c Var 'aux411' order represents '2' with '3813'
-3811 3813 0
c Var 'aux411' direct represents '2' with '3814'
3811 -3813 3814 0
-3814 3813 0
-3814 -3811 0
c Var 'aux411' order represents '3' with '3815'
-3813 3815 0
c Var 'aux411' direct represents '3' with '3816'
3813 -3815 3816 0
-3816 3815 0
-3816 -3813 0
c Var 'aux411' order represents '4' with '3817'
-3815 3817 0
c Var 'aux411' direct represents '4' with '3818'
3815 -3817 3818 0
-3818 3817 0
-3818 -3815 0
c Var 'aux411' order represents '5' with '3819'
-3817 3819 0
c Var 'aux411' direct represents '5' with '3820'
3817 -3819 3820 0
-3820 3819 0
-3820 -3817 0
c Var 'aux411' order represents '6' with '3821'
-3819 3821 0
c Var 'aux411' direct represents '6' with '3822'
3819 -3821 3822 0
-3822 3821 0
-3822 -3819 0
c Var 'aux411' order represents '7' with '3823'
-3821 3823 0
c Var 'aux411' direct represents '7' with '3824'
3821 -3823 3824 0
-3824 3823 0
-3824 -3821 0
c Var 'aux411' direct represents '8' with '-3823'
3810 3812 3814 3816 3818 3820 3822 3824 -3823 0
c Encoding variable: aux412 with domain: int(0..8) (representing constraint (aux405 + aux406))
c Both direct and order encoding.
c Var 'aux412' order represents '0' with '3825'
c Var 'aux412' direct represents '0' with '3825'
c Var 'aux412' order represents '1' with '3826'
-3825 3826 0
c Var 'aux412' direct represents '1' with '3827'
3825 -3826 3827 0
-3827 3826 0
-3827 -3825 0
c Var 'aux412' order represents '2' with '3828'
-3826 3828 0
c Var 'aux412' direct represents '2' with '3829'
3826 -3828 3829 0
-3829 3828 0
-3829 -3826 0
c Var 'aux412' order represents '3' with '3830'
-3828 3830 0
c Var 'aux412' direct represents '3' with '3831'
3828 -3830 3831 0
-3831 3830 0
-3831 -3828 0
c Var 'aux412' order represents '4' with '3832'
-3830 3832 0
c Var 'aux412' direct represents '4' with '3833'
3830 -3832 3833 0
-3833 3832 0
-3833 -3830 0
c Var 'aux412' order represents '5' with '3834'
-3832 3834 0
c Var 'aux412' direct represents '5' with '3835'
3832 -3834 3835 0
-3835 3834 0
-3835 -3832 0
c Var 'aux412' order represents '6' with '3836'
-3834 3836 0
c Var 'aux412' direct represents '6' with '3837'
3834 -3836 3837 0
-3837 3836 0
-3837 -3834 0
c Var 'aux412' order represents '7' with '3838'
-3836 3838 0
c Var 'aux412' direct represents '7' with '3839'
3836 -3838 3839 0
-3839 3838 0
-3839 -3836 0
c Var 'aux412' direct represents '8' with '-3838'
3825 3827 3829 3831 3833 3835 3837 3839 -3838 0
c Encoding variable: aux413 with domain: int(0..16) (representing constraint (aux409 + aux412))
c Both direct and order encoding.
c Var 'aux413' order represents '0' with '3840'
c Var 'aux413' direct represents '0' with '3840'
c Var 'aux413' order represents '1' with '3841'
-3840 3841 0
c Var 'aux413' direct represents '1' with '3842'
3840 -3841 3842 0
-3842 3841 0
-3842 -3840 0
c Var 'aux413' order represents '2' with '3843'
-3841 3843 0
c Var 'aux413' direct represents '2' with '3844'
3841 -3843 3844 0
-3844 3843 0
-3844 -3841 0
c Var 'aux413' order represents '3' with '3845'
-3843 3845 0
c Var 'aux413' direct represents '3' with '3846'
3843 -3845 3846 0
-3846 3845 0
-3846 -3843 0
c Var 'aux413' order represents '4' with '3847'
-3845 3847 0
c Var 'aux413' direct represents '4' with '3848'
3845 -3847 3848 0
-3848 3847 0
-3848 -3845 0
c Var 'aux413' order represents '5' with '3849'
-3847 3849 0
c Var 'aux413' direct represents '5' with '3850'
3847 -3849 3850 0
-3850 3849 0
-3850 -3847 0
c Var 'aux413' order represents '6' with '3851'
-3849 3851 0
c Var 'aux413' direct represents '6' with '3852'
3849 -3851 3852 0
-3852 3851 0
-3852 -3849 0
c Var 'aux413' order represents '7' with '3853'
-3851 3853 0
c Var 'aux413' direct represents '7' with '3854'
3851 -3853 3854 0
-3854 3853 0
-3854 -3851 0
c Var 'aux413' order represents '8' with '3855'
-3853 3855 0
c Var 'aux413' direct represents '8' with '3856'
3853 -3855 3856 0
-3856 3855 0
-3856 -3853 0
c Var 'aux413' order represents '9' with '3857'
-3855 3857 0
c Var 'aux413' direct represents '9' with '3858'
3855 -3857 3858 0
-3858 3857 0
-3858 -3855 0
c Var 'aux413' order represents '10' with '3859'
-3857 3859 0
c Var 'aux413' direct represents '10' with '3860'
3857 -3859 3860 0
-3860 3859 0
-3860 -3857 0
c Var 'aux413' order represents '11' with '3861'
-3859 3861 0
c Var 'aux413' direct represents '11' with '3862'
3859 -3861 3862 0
-3862 3861 0
-3862 -3859 0
c Var 'aux413' order represents '12' with '3863'
-3861 3863 0
c Var 'aux413' direct represents '12' with '3864'
3861 -3863 3864 0
-3864 3863 0
-3864 -3861 0
c Var 'aux413' order represents '13' with '3865'
-3863 3865 0
c Var 'aux413' direct represents '13' with '3866'
3863 -3865 3866 0
-3866 3865 0
-3866 -3863 0
c Var 'aux413' order represents '14' with '3867'
-3865 3867 0
c Var 'aux413' direct represents '14' with '3868'
3865 -3867 3868 0
-3868 3867 0
-3868 -3865 0
c Var 'aux413' order represents '15' with '3869'
-3867 3869 0
c Var 'aux413' direct represents '15' with '3870'
3867 -3869 3870 0
-3870 3869 0
-3870 -3867 0
c Var 'aux413' direct represents '16' with '-3869'
3840 3842 3844 3846 3848 3850 3852 3854 3856 3858 3860 3862 3864 3866 3868 3870 -3869 0
c Encoding variable: aux414 with domain: int(0..16) (representing constraint (aux408 + aux410))
c Both direct and order encoding.
c Var 'aux414' order represents '0' with '3871'
c Var 'aux414' direct represents '0' with '3871'
c Var 'aux414' order represents '1' with '3872'
-3871 3872 0
c Var 'aux414' direct represents '1' with '3873'
3871 -3872 3873 0
-3873 3872 0
-3873 -3871 0
c Var 'aux414' order represents '2' with '3874'
-3872 3874 0
c Var 'aux414' direct represents '2' with '3875'
3872 -3874 3875 0
-3875 3874 0
-3875 -3872 0
c Var 'aux414' order represents '3' with '3876'
-3874 3876 0
c Var 'aux414' direct represents '3' with '3877'
3874 -3876 3877 0
-3877 3876 0
-3877 -3874 0
c Var 'aux414' order represents '4' with '3878'
-3876 3878 0
c Var 'aux414' direct represents '4' with '3879'
3876 -3878 3879 0
-3879 3878 0
-3879 -3876 0
c Var 'aux414' order represents '5' with '3880'
-3878 3880 0
c Var 'aux414' direct represents '5' with '3881'
3878 -3880 3881 0
-3881 3880 0
-3881 -3878 0
c Var 'aux414' order represents '6' with '3882'
-3880 3882 0
c Var 'aux414' direct represents '6' with '3883'
3880 -3882 3883 0
-3883 3882 0
-3883 -3880 0
c Var 'aux414' order represents '7' with '3884'
-3882 3884 0
c Var 'aux414' direct represents '7' with '3885'
3882 -3884 3885 0
-3885 3884 0
-3885 -3882 0
c Var 'aux414' order represents '8' with '3886'
-3884 3886 0
c Var 'aux414' direct represents '8' with '3887'
3884 -3886 3887 0
-3887 3886 0
-3887 -3884 0
c Var 'aux414' order represents '9' with '3888'
-3886 3888 0
c Var 'aux414' direct represents '9' with '3889'
3886 -3888 3889 0
-3889 3888 0
-3889 -3886 0
c Var 'aux414' order represents '10' with '3890'
-3888 3890 0
c Var 'aux414' direct represents '10' with '3891'
3888 -3890 3891 0
-3891 3890 0
-3891 -3888 0
c Var 'aux414' order represents '11' with '3892'
-3890 3892 0
c Var 'aux414' direct represents '11' with '3893'
3890 -3892 3893 0
-3893 3892 0
-3893 -3890 0
c Var 'aux414' order represents '12' with '3894'
-3892 3894 0
c Var 'aux414' direct represents '12' with '3895'
3892 -3894 3895 0
-3895 3894 0
-3895 -3892 0
c Var 'aux414' order represents '13' with '3896'
-3894 3896 0
c Var 'aux414' direct represents '13' with '3897'
3894 -3896 3897 0
-3897 3896 0
-3897 -3894 0
c Var 'aux414' order represents '14' with '3898'
-3896 3898 0
c Var 'aux414' direct represents '14' with '3899'
3896 -3898 3899 0
-3899 3898 0
-3899 -3896 0
c Var 'aux414' order represents '15' with '3900'
-3898 3900 0
c Var 'aux414' direct represents '15' with '3901'
3898 -3900 3901 0
-3901 3900 0
-3901 -3898 0
c Var 'aux414' direct represents '16' with '-3900'
3871 3873 3875 3877 3879 3881 3883 3885 3887 3889 3891 3893 3895 3897 3899 3901 -3900 0
c Encoding variable: aux415 with domain: int(0..2) (representing constraint ((2=grid_00005_00000) + (grid_00000_00006=2)))
c Both direct and order encoding.
c Var 'aux415' order represents '0' with '3902'
c Var 'aux415' direct represents '0' with '3902'
c Var 'aux415' order represents '1' with '3903'
-3902 3903 0
c Var 'aux415' direct represents '1' with '3904'
3902 -3903 3904 0
-3904 3903 0
-3904 -3902 0
c Var 'aux415' direct represents '2' with '-3903'
3902 3904 -3903 0
c Encoding variable: aux416 with domain: int(0..2) (representing constraint ((grid_00000_00005=2) + (2=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux416' order represents '0' with '3905'
c Var 'aux416' direct represents '0' with '3905'
c Var 'aux416' order represents '1' with '3906'
-3905 3906 0
c Var 'aux416' direct represents '1' with '3907'
3905 -3906 3907 0
-3907 3906 0
-3907 -3905 0
c Var 'aux416' direct represents '2' with '-3906'
3905 3907 -3906 0
c Encoding variable: aux417 with domain: int(0..2) (representing constraint ((grid_00000_00004=2) + (2=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux417' order represents '0' with '3908'
c Var 'aux417' direct represents '0' with '3908'
c Var 'aux417' order represents '1' with '3909'
-3908 3909 0
c Var 'aux417' direct represents '1' with '3910'
3908 -3909 3910 0
-3910 3909 0
-3910 -3908 0
c Var 'aux417' direct represents '2' with '-3909'
3908 3910 -3909 0
c Encoding variable: aux418 with domain: int(0..2) (representing constraint ((grid_00000_00003=2) + (grid_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux418' order represents '0' with '3911'
c Var 'aux418' direct represents '0' with '3911'
c Var 'aux418' order represents '1' with '3912'
-3911 3912 0
c Var 'aux418' direct represents '1' with '3913'
3911 -3912 3913 0
-3913 3912 0
-3913 -3911 0
c Var 'aux418' direct represents '2' with '-3912'
3911 3913 -3912 0
c Encoding variable: aux419 with domain: int(0..2) (representing constraint ((grid_00000_00002=2) + (2=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux419' order represents '0' with '3914'
c Var 'aux419' direct represents '0' with '3914'
c Var 'aux419' order represents '1' with '3915'
-3914 3915 0
c Var 'aux419' direct represents '1' with '3916'
3914 -3915 3916 0
-3916 3915 0
-3916 -3914 0
c Var 'aux419' direct represents '2' with '-3915'
3914 3916 -3915 0
c Encoding variable: aux420 with domain: int(0..2) (representing constraint ((grid_00000_00001=2) + (grid_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux420' order represents '0' with '3917'
c Var 'aux420' direct represents '0' with '3917'
c Var 'aux420' order represents '1' with '3918'
-3917 3918 0
c Var 'aux420' direct represents '1' with '3919'
3917 -3918 3919 0
-3919 3918 0
-3919 -3917 0
c Var 'aux420' direct represents '2' with '-3918'
3917 3919 -3918 0
c Encoding variable: aux421 with domain: int(0..2) (representing constraint ((grid_00004_00005=2) + (2=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux421' order represents '0' with '3920'
c Var 'aux421' direct represents '0' with '3920'
c Var 'aux421' order represents '1' with '3921'
-3920 3921 0
c Var 'aux421' direct represents '1' with '3922'
3920 -3921 3922 0
-3922 3921 0
-3922 -3920 0
c Var 'aux421' direct represents '2' with '-3921'
3920 3922 -3921 0
c Encoding variable: aux422 with domain: int(0..2) (representing constraint ((grid_00004_00006=2) + (grid_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux422' order represents '0' with '3923'
c Var 'aux422' direct represents '0' with '3923'
c Var 'aux422' order represents '1' with '3924'
-3923 3924 0
c Var 'aux422' direct represents '1' with '3925'
3923 -3924 3925 0
-3925 3924 0
-3925 -3923 0
c Var 'aux422' direct represents '2' with '-3924'
3923 3925 -3924 0
c Encoding variable: aux423 with domain: int(0..2) (representing constraint ((2=grid_00006_00004) + (2=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux423' order represents '0' with '3926'
c Var 'aux423' direct represents '0' with '3926'
c Var 'aux423' order represents '1' with '3927'
-3926 3927 0
c Var 'aux423' direct represents '1' with '3928'
3926 -3927 3928 0
-3928 3927 0
-3928 -3926 0
c Var 'aux423' direct represents '2' with '-3927'
3926 3928 -3927 0
c Encoding variable: aux424 with domain: int(0..2) (representing constraint ((grid_00004_00003=2) + (grid_00003_00000=2)))
c Both direct and order encoding.
c Var 'aux424' order represents '0' with '3929'
c Var 'aux424' direct represents '0' with '3929'
c Var 'aux424' order represents '1' with '3930'
-3929 3930 0
c Var 'aux424' direct represents '1' with '3931'
3929 -3930 3931 0
-3931 3930 0
-3931 -3929 0
c Var 'aux424' direct represents '2' with '-3930'
3929 3931 -3930 0
c Encoding variable: aux425 with domain: int(0..2) (representing constraint ((grid_00004_00002=2) + (2=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux425' order represents '0' with '3932'
c Var 'aux425' direct represents '0' with '3932'
c Var 'aux425' order represents '1' with '3933'
-3932 3933 0
c Var 'aux425' direct represents '1' with '3934'
3932 -3933 3934 0
-3934 3933 0
-3934 -3932 0
c Var 'aux425' direct represents '2' with '-3933'
3932 3934 -3933 0
c Encoding variable: aux426 with domain: int(0..2) (representing constraint ((grid_00004_00001=2) + (2=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux426' order represents '0' with '3935'
c Var 'aux426' direct represents '0' with '3935'
c Var 'aux426' order represents '1' with '3936'
-3935 3936 0
c Var 'aux426' direct represents '1' with '3937'
3935 -3936 3937 0
-3937 3936 0
-3937 -3935 0
c Var 'aux426' direct represents '2' with '-3936'
3935 3937 -3936 0
c Encoding variable: aux427 with domain: int(0..2) (representing constraint ((grid_00004_00000=2) + (2=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux427' order represents '0' with '3938'
c Var 'aux427' direct represents '0' with '3938'
c Var 'aux427' order represents '1' with '3939'
-3938 3939 0
c Var 'aux427' direct represents '1' with '3940'
3938 -3939 3940 0
-3940 3939 0
-3940 -3938 0
c Var 'aux427' direct represents '2' with '-3939'
3938 3940 -3939 0
c Encoding variable: aux428 with domain: int(0..2) (representing constraint ((2=grid_00002_00006) + (2=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux428' order represents '0' with '3941'
c Var 'aux428' direct represents '0' with '3941'
c Var 'aux428' order represents '1' with '3942'
-3941 3942 0
c Var 'aux428' direct represents '1' with '3943'
3941 -3942 3943 0
-3943 3942 0
-3943 -3941 0
c Var 'aux428' direct represents '2' with '-3942'
3941 3943 -3942 0
c Encoding variable: aux429 with domain: int(0..2) (representing constraint ((2=grid_00002_00005) + (2=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux429' order represents '0' with '3944'
c Var 'aux429' direct represents '0' with '3944'
c Var 'aux429' order represents '1' with '3945'
-3944 3945 0
c Var 'aux429' direct represents '1' with '3946'
3944 -3945 3946 0
-3946 3945 0
-3946 -3944 0
c Var 'aux429' direct represents '2' with '-3945'
3944 3946 -3945 0
c Encoding variable: aux430 with domain: int(0..2) (representing constraint ((2=grid_00002_00004) + (2=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux430' order represents '0' with '3947'
c Var 'aux430' direct represents '0' with '3947'
c Var 'aux430' order represents '1' with '3948'
-3947 3948 0
c Var 'aux430' direct represents '1' with '3949'
3947 -3948 3949 0
-3949 3948 0
-3949 -3947 0
c Var 'aux430' direct represents '2' with '-3948'
3947 3949 -3948 0
c Encoding variable: aux431 with domain: int(0..2) (representing constraint ((2=grid_00002_00003) + (2=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux431' order represents '0' with '3950'
c Var 'aux431' direct represents '0' with '3950'
c Var 'aux431' order represents '1' with '3951'
-3950 3951 0
c Var 'aux431' direct represents '1' with '3952'
3950 -3951 3952 0
-3952 3951 0
-3952 -3950 0
c Var 'aux431' direct represents '2' with '-3951'
3950 3952 -3951 0
c Encoding variable: aux432 with domain: int(0..2) (representing constraint ((grid_00003_00002=2) + (2=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux432' order represents '0' with '3953'
c Var 'aux432' direct represents '0' with '3953'
c Var 'aux432' order represents '1' with '3954'
-3953 3954 0
c Var 'aux432' direct represents '1' with '3955'
3953 -3954 3955 0
-3955 3954 0
-3955 -3953 0
c Var 'aux432' direct represents '2' with '-3954'
3953 3955 -3954 0
c Encoding variable: aux433 with domain: int(0..2) (representing constraint ((2=grid_00001_00005) + (grid_00003_00003=2)))
c Both direct and order encoding.
c Var 'aux433' order represents '0' with '3956'
c Var 'aux433' direct represents '0' with '3956'
c Var 'aux433' order represents '1' with '3957'
-3956 3957 0
c Var 'aux433' direct represents '1' with '3958'
3956 -3957 3958 0
-3958 3957 0
-3958 -3956 0
c Var 'aux433' direct represents '2' with '-3957'
3956 3958 -3957 0
c Encoding variable: aux434 with domain: int(0..2) (representing constraint ((2=grid_00006_00000) + (2=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux434' order represents '0' with '3959'
c Var 'aux434' direct represents '0' with '3959'
c Var 'aux434' order represents '1' with '3960'
-3959 3960 0
c Var 'aux434' direct represents '1' with '3961'
3959 -3960 3961 0
-3961 3960 0
-3961 -3959 0
c Var 'aux434' direct represents '2' with '-3960'
3959 3961 -3960 0
c Encoding variable: aux435 with domain: int(0..4) (representing constraint (aux422 + aux434))
c Both direct and order encoding.
c Var 'aux435' order represents '0' with '3962'
c Var 'aux435' direct represents '0' with '3962'
c Var 'aux435' order represents '1' with '3963'
-3962 3963 0
c Var 'aux435' direct represents '1' with '3964'
3962 -3963 3964 0
-3964 3963 0
-3964 -3962 0
c Var 'aux435' order represents '2' with '3965'
-3963 3965 0
c Var 'aux435' direct represents '2' with '3966'
3963 -3965 3966 0
-3966 3965 0
-3966 -3963 0
c Var 'aux435' order represents '3' with '3967'
-3965 3967 0
c Var 'aux435' direct represents '3' with '3968'
3965 -3967 3968 0
-3968 3967 0
-3968 -3965 0
c Var 'aux435' direct represents '4' with '-3967'
3962 3964 3966 3968 -3967 0
c Encoding variable: aux436 with domain: int(0..4) (representing constraint (aux416 + aux429))
c Both direct and order encoding.
c Var 'aux436' order represents '0' with '3969'
c Var 'aux436' direct represents '0' with '3969'
c Var 'aux436' order represents '1' with '3970'
-3969 3970 0
c Var 'aux436' direct represents '1' with '3971'
3969 -3970 3971 0
-3971 3970 0
-3971 -3969 0
c Var 'aux436' order represents '2' with '3972'
-3970 3972 0
c Var 'aux436' direct represents '2' with '3973'
3970 -3972 3973 0
-3973 3972 0
-3973 -3970 0
c Var 'aux436' order represents '3' with '3974'
-3972 3974 0
c Var 'aux436' direct represents '3' with '3975'
3972 -3974 3975 0
-3975 3974 0
-3975 -3972 0
c Var 'aux436' direct represents '4' with '-3974'
3969 3971 3973 3975 -3974 0
c Encoding variable: aux437 with domain: int(0..4) (representing constraint (aux420 + aux415))
c Both direct and order encoding.
c Var 'aux437' order represents '0' with '3976'
c Var 'aux437' direct represents '0' with '3976'
c Var 'aux437' order represents '1' with '3977'
-3976 3977 0
c Var 'aux437' direct represents '1' with '3978'
3976 -3977 3978 0
-3978 3977 0
-3978 -3976 0
c Var 'aux437' order represents '2' with '3979'
-3977 3979 0
c Var 'aux437' direct represents '2' with '3980'
3977 -3979 3980 0
-3980 3979 0
-3980 -3977 0
c Var 'aux437' order represents '3' with '3981'
-3979 3981 0
c Var 'aux437' direct represents '3' with '3982'
3979 -3981 3982 0
-3982 3981 0
-3982 -3979 0
c Var 'aux437' direct represents '4' with '-3981'
3976 3978 3980 3982 -3981 0
c Encoding variable: aux438 with domain: int(0..4) (representing constraint (aux418 + aux417))
c Both direct and order encoding.
c Var 'aux438' order represents '0' with '3983'
c Var 'aux438' direct represents '0' with '3983'
c Var 'aux438' order represents '1' with '3984'
-3983 3984 0
c Var 'aux438' direct represents '1' with '3985'
3983 -3984 3985 0
-3985 3984 0
-3985 -3983 0
c Var 'aux438' order represents '2' with '3986'
-3984 3986 0
c Var 'aux438' direct represents '2' with '3987'
3984 -3986 3987 0
-3987 3986 0
-3987 -3984 0
c Var 'aux438' order represents '3' with '3988'
-3986 3988 0
c Var 'aux438' direct represents '3' with '3989'
3986 -3988 3989 0
-3989 3988 0
-3989 -3986 0
c Var 'aux438' direct represents '4' with '-3988'
3983 3985 3987 3989 -3988 0
c Encoding variable: aux439 with domain: int(0..4) (representing constraint (aux419 + aux421))
c Both direct and order encoding.
c Var 'aux439' order represents '0' with '3990'
c Var 'aux439' direct represents '0' with '3990'
c Var 'aux439' order represents '1' with '3991'
-3990 3991 0
c Var 'aux439' direct represents '1' with '3992'
3990 -3991 3992 0
-3992 3991 0
-3992 -3990 0
c Var 'aux439' order represents '2' with '3993'
-3991 3993 0
c Var 'aux439' direct represents '2' with '3994'
3991 -3993 3994 0
-3994 3993 0
-3994 -3991 0
c Var 'aux439' order represents '3' with '3995'
-3993 3995 0
c Var 'aux439' direct represents '3' with '3996'
3993 -3995 3996 0
-3996 3995 0
-3996 -3993 0
c Var 'aux439' direct represents '4' with '-3995'
3990 3992 3994 3996 -3995 0
c Encoding variable: aux440 with domain: int(0..4) (representing constraint (aux432 + aux428))
c Both direct and order encoding.
c Var 'aux440' order represents '0' with '3997'
c Var 'aux440' direct represents '0' with '3997'
c Var 'aux440' order represents '1' with '3998'
-3997 3998 0
c Var 'aux440' direct represents '1' with '3999'
3997 -3998 3999 0
-3999 3998 0
-3999 -3997 0
c Var 'aux440' order represents '2' with '4000'
-3998 4000 0
c Var 'aux440' direct represents '2' with '4001'
3998 -4000 4001 0
-4001 4000 0
-4001 -3998 0
c Var 'aux440' order represents '3' with '4002'
-4000 4002 0
c Var 'aux440' direct represents '3' with '4003'
4000 -4002 4003 0
-4003 4002 0
-4003 -4000 0
c Var 'aux440' direct represents '4' with '-4002'
3997 3999 4001 4003 -4002 0
c Encoding variable: aux441 with domain: int(0..4) (representing constraint (aux425 + aux424))
c Both direct and order encoding.
c Var 'aux441' order represents '0' with '4004'
c Var 'aux441' direct represents '0' with '4004'
c Var 'aux441' order represents '1' with '4005'
-4004 4005 0
c Var 'aux441' direct represents '1' with '4006'
4004 -4005 4006 0
-4006 4005 0
-4006 -4004 0
c Var 'aux441' order represents '2' with '4007'
-4005 4007 0
c Var 'aux441' direct represents '2' with '4008'
4005 -4007 4008 0
-4008 4007 0
-4008 -4005 0
c Var 'aux441' order represents '3' with '4009'
-4007 4009 0
c Var 'aux441' direct represents '3' with '4010'
4007 -4009 4010 0
-4010 4009 0
-4010 -4007 0
c Var 'aux441' direct represents '4' with '-4009'
4004 4006 4008 4010 -4009 0
c Encoding variable: aux442 with domain: int(0..4) (representing constraint (aux426 + aux427))
c Both direct and order encoding.
c Var 'aux442' order represents '0' with '4011'
c Var 'aux442' direct represents '0' with '4011'
c Var 'aux442' order represents '1' with '4012'
-4011 4012 0
c Var 'aux442' direct represents '1' with '4013'
4011 -4012 4013 0
-4013 4012 0
-4013 -4011 0
c Var 'aux442' order represents '2' with '4014'
-4012 4014 0
c Var 'aux442' direct represents '2' with '4015'
4012 -4014 4015 0
-4015 4014 0
-4015 -4012 0
c Var 'aux442' order represents '3' with '4016'
-4014 4016 0
c Var 'aux442' direct represents '3' with '4017'
4014 -4016 4017 0
-4017 4016 0
-4017 -4014 0
c Var 'aux442' direct represents '4' with '-4016'
4011 4013 4015 4017 -4016 0
c Encoding variable: aux443 with domain: int(0..4) (representing constraint (aux430 + aux433))
c Both direct and order encoding.
c Var 'aux443' order represents '0' with '4018'
c Var 'aux443' direct represents '0' with '4018'
c Var 'aux443' order represents '1' with '4019'
-4018 4019 0
c Var 'aux443' direct represents '1' with '4020'
4018 -4019 4020 0
-4020 4019 0
-4020 -4018 0
c Var 'aux443' order represents '2' with '4021'
-4019 4021 0
c Var 'aux443' direct represents '2' with '4022'
4019 -4021 4022 0
-4022 4021 0
-4022 -4019 0
c Var 'aux443' order represents '3' with '4023'
-4021 4023 0
c Var 'aux443' direct represents '3' with '4024'
4021 -4023 4024 0
-4024 4023 0
-4024 -4021 0
c Var 'aux443' direct represents '4' with '-4023'
4018 4020 4022 4024 -4023 0
c Encoding variable: aux444 with domain: int(0..4) (representing constraint (aux431 + aux423))
c Both direct and order encoding.
c Var 'aux444' order represents '0' with '4025'
c Var 'aux444' direct represents '0' with '4025'
c Var 'aux444' order represents '1' with '4026'
-4025 4026 0
c Var 'aux444' direct represents '1' with '4027'
4025 -4026 4027 0
-4027 4026 0
-4027 -4025 0
c Var 'aux444' order represents '2' with '4028'
-4026 4028 0
c Var 'aux444' direct represents '2' with '4029'
4026 -4028 4029 0
-4029 4028 0
-4029 -4026 0
c Var 'aux444' order represents '3' with '4030'
-4028 4030 0
c Var 'aux444' direct represents '3' with '4031'
4028 -4030 4031 0
-4031 4030 0
-4031 -4028 0
c Var 'aux444' direct represents '4' with '-4030'
4025 4027 4029 4031 -4030 0
c Encoding variable: aux445 with domain: int(0..8) (representing constraint (aux438 + aux444))
c Both direct and order encoding.
c Var 'aux445' order represents '0' with '4032'
c Var 'aux445' direct represents '0' with '4032'
c Var 'aux445' order represents '1' with '4033'
-4032 4033 0
c Var 'aux445' direct represents '1' with '4034'
4032 -4033 4034 0
-4034 4033 0
-4034 -4032 0
c Var 'aux445' order represents '2' with '4035'
-4033 4035 0
c Var 'aux445' direct represents '2' with '4036'
4033 -4035 4036 0
-4036 4035 0
-4036 -4033 0
c Var 'aux445' order represents '3' with '4037'
-4035 4037 0
c Var 'aux445' direct represents '3' with '4038'
4035 -4037 4038 0
-4038 4037 0
-4038 -4035 0
c Var 'aux445' order represents '4' with '4039'
-4037 4039 0
c Var 'aux445' direct represents '4' with '4040'
4037 -4039 4040 0
-4040 4039 0
-4040 -4037 0
c Var 'aux445' order represents '5' with '4041'
-4039 4041 0
c Var 'aux445' direct represents '5' with '4042'
4039 -4041 4042 0
-4042 4041 0
-4042 -4039 0
c Var 'aux445' order represents '6' with '4043'
-4041 4043 0
c Var 'aux445' direct represents '6' with '4044'
4041 -4043 4044 0
-4044 4043 0
-4044 -4041 0
c Var 'aux445' order represents '7' with '4045'
-4043 4045 0
c Var 'aux445' direct represents '7' with '4046'
4043 -4045 4046 0
-4046 4045 0
-4046 -4043 0
c Var 'aux445' direct represents '8' with '-4045'
4032 4034 4036 4038 4040 4042 4044 4046 -4045 0
c Encoding variable: aux446 with domain: int(0..8) (representing constraint (aux437 + aux441))
c Both direct and order encoding.
c Var 'aux446' order represents '0' with '4047'
c Var 'aux446' direct represents '0' with '4047'
c Var 'aux446' order represents '1' with '4048'
-4047 4048 0
c Var 'aux446' direct represents '1' with '4049'
4047 -4048 4049 0
-4049 4048 0
-4049 -4047 0
c Var 'aux446' order represents '2' with '4050'
-4048 4050 0
c Var 'aux446' direct represents '2' with '4051'
4048 -4050 4051 0
-4051 4050 0
-4051 -4048 0
c Var 'aux446' order represents '3' with '4052'
-4050 4052 0
c Var 'aux446' direct represents '3' with '4053'
4050 -4052 4053 0
-4053 4052 0
-4053 -4050 0
c Var 'aux446' order represents '4' with '4054'
-4052 4054 0
c Var 'aux446' direct represents '4' with '4055'
4052 -4054 4055 0
-4055 4054 0
-4055 -4052 0
c Var 'aux446' order represents '5' with '4056'
-4054 4056 0
c Var 'aux446' direct represents '5' with '4057'
4054 -4056 4057 0
-4057 4056 0
-4057 -4054 0
c Var 'aux446' order represents '6' with '4058'
-4056 4058 0
c Var 'aux446' direct represents '6' with '4059'
4056 -4058 4059 0
-4059 4058 0
-4059 -4056 0
c Var 'aux446' order represents '7' with '4060'
-4058 4060 0
c Var 'aux446' direct represents '7' with '4061'
4058 -4060 4061 0
-4061 4060 0
-4061 -4058 0
c Var 'aux446' direct represents '8' with '-4060'
4047 4049 4051 4053 4055 4057 4059 4061 -4060 0
c Encoding variable: aux447 with domain: int(0..8) (representing constraint (aux435 + aux436))
c Both direct and order encoding.
c Var 'aux447' order represents '0' with '4062'
c Var 'aux447' direct represents '0' with '4062'
c Var 'aux447' order represents '1' with '4063'
-4062 4063 0
c Var 'aux447' direct represents '1' with '4064'
4062 -4063 4064 0
-4064 4063 0
-4064 -4062 0
c Var 'aux447' order represents '2' with '4065'
-4063 4065 0
c Var 'aux447' direct represents '2' with '4066'
4063 -4065 4066 0
-4066 4065 0
-4066 -4063 0
c Var 'aux447' order represents '3' with '4067'
-4065 4067 0
c Var 'aux447' direct represents '3' with '4068'
4065 -4067 4068 0
-4068 4067 0
-4068 -4065 0
c Var 'aux447' order represents '4' with '4069'
-4067 4069 0
c Var 'aux447' direct represents '4' with '4070'
4067 -4069 4070 0
-4070 4069 0
-4070 -4067 0
c Var 'aux447' order represents '5' with '4071'
-4069 4071 0
c Var 'aux447' direct represents '5' with '4072'
4069 -4071 4072 0
-4072 4071 0
-4072 -4069 0
c Var 'aux447' order represents '6' with '4073'
-4071 4073 0
c Var 'aux447' direct represents '6' with '4074'
4071 -4073 4074 0
-4074 4073 0
-4074 -4071 0
c Var 'aux447' order represents '7' with '4075'
-4073 4075 0
c Var 'aux447' direct represents '7' with '4076'
4073 -4075 4076 0
-4076 4075 0
-4076 -4073 0
c Var 'aux447' direct represents '8' with '-4075'
4062 4064 4066 4068 4070 4072 4074 4076 -4075 0
c Encoding variable: aux448 with domain: int(0..8) (representing constraint (aux439 + aux440))
c Both direct and order encoding.
c Var 'aux448' order represents '0' with '4077'
c Var 'aux448' direct represents '0' with '4077'
c Var 'aux448' order represents '1' with '4078'
-4077 4078 0
c Var 'aux448' direct represents '1' with '4079'
4077 -4078 4079 0
-4079 4078 0
-4079 -4077 0
c Var 'aux448' order represents '2' with '4080'
-4078 4080 0
c Var 'aux448' direct represents '2' with '4081'
4078 -4080 4081 0
-4081 4080 0
-4081 -4078 0
c Var 'aux448' order represents '3' with '4082'
-4080 4082 0
c Var 'aux448' direct represents '3' with '4083'
4080 -4082 4083 0
-4083 4082 0
-4083 -4080 0
c Var 'aux448' order represents '4' with '4084'
-4082 4084 0
c Var 'aux448' direct represents '4' with '4085'
4082 -4084 4085 0
-4085 4084 0
-4085 -4082 0
c Var 'aux448' order represents '5' with '4086'
-4084 4086 0
c Var 'aux448' direct represents '5' with '4087'
4084 -4086 4087 0
-4087 4086 0
-4087 -4084 0
c Var 'aux448' order represents '6' with '4088'
-4086 4088 0
c Var 'aux448' direct represents '6' with '4089'
4086 -4088 4089 0
-4089 4088 0
-4089 -4086 0
c Var 'aux448' order represents '7' with '4090'
-4088 4090 0
c Var 'aux448' direct represents '7' with '4091'
4088 -4090 4091 0
-4091 4090 0
-4091 -4088 0
c Var 'aux448' direct represents '8' with '-4090'
4077 4079 4081 4083 4085 4087 4089 4091 -4090 0
c Encoding variable: aux449 with domain: int(0..8) (representing constraint (aux442 + aux443))
c Both direct and order encoding.
c Var 'aux449' order represents '0' with '4092'
c Var 'aux449' direct represents '0' with '4092'
c Var 'aux449' order represents '1' with '4093'
-4092 4093 0
c Var 'aux449' direct represents '1' with '4094'
4092 -4093 4094 0
-4094 4093 0
-4094 -4092 0
c Var 'aux449' order represents '2' with '4095'
-4093 4095 0
c Var 'aux449' direct represents '2' with '4096'
4093 -4095 4096 0
-4096 4095 0
-4096 -4093 0
c Var 'aux449' order represents '3' with '4097'
-4095 4097 0
c Var 'aux449' direct represents '3' with '4098'
4095 -4097 4098 0
-4098 4097 0
-4098 -4095 0
c Var 'aux449' order represents '4' with '4099'
-4097 4099 0
c Var 'aux449' direct represents '4' with '4100'
4097 -4099 4100 0
-4100 4099 0
-4100 -4097 0
c Var 'aux449' order represents '5' with '4101'
-4099 4101 0
c Var 'aux449' direct represents '5' with '4102'
4099 -4101 4102 0
-4102 4101 0
-4102 -4099 0
c Var 'aux449' order represents '6' with '4103'
-4101 4103 0
c Var 'aux449' direct represents '6' with '4104'
4101 -4103 4104 0
-4104 4103 0
-4104 -4101 0
c Var 'aux449' order represents '7' with '4105'
-4103 4105 0
c Var 'aux449' direct represents '7' with '4106'
4103 -4105 4106 0
-4106 4105 0
-4106 -4103 0
c Var 'aux449' direct represents '8' with '-4105'
4092 4094 4096 4098 4100 4102 4104 4106 -4105 0
c Encoding variable: aux450 with domain: int(0..16) (representing constraint (aux446 + aux449))
c Both direct and order encoding.
c Var 'aux450' order represents '0' with '4107'
c Var 'aux450' direct represents '0' with '4107'
c Var 'aux450' order represents '1' with '4108'
-4107 4108 0
c Var 'aux450' direct represents '1' with '4109'
4107 -4108 4109 0
-4109 4108 0
-4109 -4107 0
c Var 'aux450' order represents '2' with '4110'
-4108 4110 0
c Var 'aux450' direct represents '2' with '4111'
4108 -4110 4111 0
-4111 4110 0
-4111 -4108 0
c Var 'aux450' order represents '3' with '4112'
-4110 4112 0
c Var 'aux450' direct represents '3' with '4113'
4110 -4112 4113 0
-4113 4112 0
-4113 -4110 0
c Var 'aux450' order represents '4' with '4114'
-4112 4114 0
c Var 'aux450' direct represents '4' with '4115'
4112 -4114 4115 0
-4115 4114 0
-4115 -4112 0
c Var 'aux450' order represents '5' with '4116'
-4114 4116 0
c Var 'aux450' direct represents '5' with '4117'
4114 -4116 4117 0
-4117 4116 0
-4117 -4114 0
c Var 'aux450' order represents '6' with '4118'
-4116 4118 0
c Var 'aux450' direct represents '6' with '4119'
4116 -4118 4119 0
-4119 4118 0
-4119 -4116 0
c Var 'aux450' order represents '7' with '4120'
-4118 4120 0
c Var 'aux450' direct represents '7' with '4121'
4118 -4120 4121 0
-4121 4120 0
-4121 -4118 0
c Var 'aux450' order represents '8' with '4122'
-4120 4122 0
c Var 'aux450' direct represents '8' with '4123'
4120 -4122 4123 0
-4123 4122 0
-4123 -4120 0
c Var 'aux450' order represents '9' with '4124'
-4122 4124 0
c Var 'aux450' direct represents '9' with '4125'
4122 -4124 4125 0
-4125 4124 0
-4125 -4122 0
c Var 'aux450' order represents '10' with '4126'
-4124 4126 0
c Var 'aux450' direct represents '10' with '4127'
4124 -4126 4127 0
-4127 4126 0
-4127 -4124 0
c Var 'aux450' order represents '11' with '4128'
-4126 4128 0
c Var 'aux450' direct represents '11' with '4129'
4126 -4128 4129 0
-4129 4128 0
-4129 -4126 0
c Var 'aux450' order represents '12' with '4130'
-4128 4130 0
c Var 'aux450' direct represents '12' with '4131'
4128 -4130 4131 0
-4131 4130 0
-4131 -4128 0
c Var 'aux450' order represents '13' with '4132'
-4130 4132 0
c Var 'aux450' direct represents '13' with '4133'
4130 -4132 4133 0
-4133 4132 0
-4133 -4130 0
c Var 'aux450' order represents '14' with '4134'
-4132 4134 0
c Var 'aux450' direct represents '14' with '4135'
4132 -4134 4135 0
-4135 4134 0
-4135 -4132 0
c Var 'aux450' order represents '15' with '4136'
-4134 4136 0
c Var 'aux450' direct represents '15' with '4137'
4134 -4136 4137 0
-4137 4136 0
-4137 -4134 0
c Var 'aux450' direct represents '16' with '-4136'
4107 4109 4111 4113 4115 4117 4119 4121 4123 4125 4127 4129 4131 4133 4135 4137 -4136 0
c Encoding variable: aux451 with domain: int(0..16) (representing constraint (aux445 + aux447))
c Both direct and order encoding.
c Var 'aux451' order represents '0' with '4138'
c Var 'aux451' direct represents '0' with '4138'
c Var 'aux451' order represents '1' with '4139'
-4138 4139 0
c Var 'aux451' direct represents '1' with '4140'
4138 -4139 4140 0
-4140 4139 0
-4140 -4138 0
c Var 'aux451' order represents '2' with '4141'
-4139 4141 0
c Var 'aux451' direct represents '2' with '4142'
4139 -4141 4142 0
-4142 4141 0
-4142 -4139 0
c Var 'aux451' order represents '3' with '4143'
-4141 4143 0
c Var 'aux451' direct represents '3' with '4144'
4141 -4143 4144 0
-4144 4143 0
-4144 -4141 0
c Var 'aux451' order represents '4' with '4145'
-4143 4145 0
c Var 'aux451' direct represents '4' with '4146'
4143 -4145 4146 0
-4146 4145 0
-4146 -4143 0
c Var 'aux451' order represents '5' with '4147'
-4145 4147 0
c Var 'aux451' direct represents '5' with '4148'
4145 -4147 4148 0
-4148 4147 0
-4148 -4145 0
c Var 'aux451' order represents '6' with '4149'
-4147 4149 0
c Var 'aux451' direct represents '6' with '4150'
4147 -4149 4150 0
-4150 4149 0
-4150 -4147 0
c Var 'aux451' order represents '7' with '4151'
-4149 4151 0
c Var 'aux451' direct represents '7' with '4152'
4149 -4151 4152 0
-4152 4151 0
-4152 -4149 0
c Var 'aux451' order represents '8' with '4153'
-4151 4153 0
c Var 'aux451' direct represents '8' with '4154'
4151 -4153 4154 0
-4154 4153 0
-4154 -4151 0
c Var 'aux451' order represents '9' with '4155'
-4153 4155 0
c Var 'aux451' direct represents '9' with '4156'
4153 -4155 4156 0
-4156 4155 0
-4156 -4153 0
c Var 'aux451' order represents '10' with '4157'
-4155 4157 0
c Var 'aux451' direct represents '10' with '4158'
4155 -4157 4158 0
-4158 4157 0
-4158 -4155 0
c Var 'aux451' order represents '11' with '4159'
-4157 4159 0
c Var 'aux451' direct represents '11' with '4160'
4157 -4159 4160 0
-4160 4159 0
-4160 -4157 0
c Var 'aux451' order represents '12' with '4161'
-4159 4161 0
c Var 'aux451' direct represents '12' with '4162'
4159 -4161 4162 0
-4162 4161 0
-4162 -4159 0
c Var 'aux451' order represents '13' with '4163'
-4161 4163 0
c Var 'aux451' direct represents '13' with '4164'
4161 -4163 4164 0
-4164 4163 0
-4164 -4161 0
c Var 'aux451' order represents '14' with '4165'
-4163 4165 0
c Var 'aux451' direct represents '14' with '4166'
4163 -4165 4166 0
-4166 4165 0
-4166 -4163 0
c Var 'aux451' order represents '15' with '4167'
-4165 4167 0
c Var 'aux451' direct represents '15' with '4168'
4165 -4167 4168 0
-4168 4167 0
-4168 -4165 0
c Var 'aux451' direct represents '16' with '-4167'
4138 4140 4142 4144 4146 4148 4150 4152 4154 4156 4158 4160 4162 4164 4166 4168 -4167 0
c Encoding variable: aux452 with domain: int(0..2) (representing constraint ((3=grid_00005_00000) + (grid_00000_00006=3)))
c Both direct and order encoding.
c Var 'aux452' order represents '0' with '4169'
c Var 'aux452' direct represents '0' with '4169'
c Var 'aux452' order represents '1' with '4170'
-4169 4170 0
c Var 'aux452' direct represents '1' with '4171'
4169 -4170 4171 0
-4171 4170 0
-4171 -4169 0
c Var 'aux452' direct represents '2' with '-4170'
4169 4171 -4170 0
c Encoding variable: aux453 with domain: int(0..2) (representing constraint ((grid_00000_00005=3) + (3=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux453' order represents '0' with '4172'
c Var 'aux453' direct represents '0' with '4172'
c Var 'aux453' order represents '1' with '4173'
-4172 4173 0
c Var 'aux453' direct represents '1' with '4174'
4172 -4173 4174 0
-4174 4173 0
-4174 -4172 0
c Var 'aux453' direct represents '2' with '-4173'
4172 4174 -4173 0
c Encoding variable: aux454 with domain: int(0..2) (representing constraint ((grid_00000_00004=3) + (3=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux454' order represents '0' with '4175'
c Var 'aux454' direct represents '0' with '4175'
c Var 'aux454' order represents '1' with '4176'
-4175 4176 0
c Var 'aux454' direct represents '1' with '4177'
4175 -4176 4177 0
-4177 4176 0
-4177 -4175 0
c Var 'aux454' direct represents '2' with '-4176'
4175 4177 -4176 0
c Encoding variable: aux455 with domain: int(0..2) (representing constraint ((grid_00000_00003=3) + (grid_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux455' order represents '0' with '4178'
c Var 'aux455' direct represents '0' with '4178'
c Var 'aux455' order represents '1' with '4179'
-4178 4179 0
c Var 'aux455' direct represents '1' with '4180'
4178 -4179 4180 0
-4180 4179 0
-4180 -4178 0
c Var 'aux455' direct represents '2' with '-4179'
4178 4180 -4179 0
c Encoding variable: aux456 with domain: int(0..2) (representing constraint ((grid_00000_00002=3) + (3=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux456' order represents '0' with '4181'
c Var 'aux456' direct represents '0' with '4181'
c Var 'aux456' order represents '1' with '4182'
-4181 4182 0
c Var 'aux456' direct represents '1' with '4183'
4181 -4182 4183 0
-4183 4182 0
-4183 -4181 0
c Var 'aux456' direct represents '2' with '-4182'
4181 4183 -4182 0
c Encoding variable: aux457 with domain: int(0..2) (representing constraint ((grid_00000_00001=3) + (grid_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux457' order represents '0' with '4184'
c Var 'aux457' direct represents '0' with '4184'
c Var 'aux457' order represents '1' with '4185'
-4184 4185 0
c Var 'aux457' direct represents '1' with '4186'
4184 -4185 4186 0
-4186 4185 0
-4186 -4184 0
c Var 'aux457' direct represents '2' with '-4185'
4184 4186 -4185 0
c Encoding variable: aux458 with domain: int(0..2) (representing constraint ((grid_00004_00005=3) + (3=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux458' order represents '0' with '4187'
c Var 'aux458' direct represents '0' with '4187'
c Var 'aux458' order represents '1' with '4188'
-4187 4188 0
c Var 'aux458' direct represents '1' with '4189'
4187 -4188 4189 0
-4189 4188 0
-4189 -4187 0
c Var 'aux458' direct represents '2' with '-4188'
4187 4189 -4188 0
c Encoding variable: aux459 with domain: int(0..2) (representing constraint ((grid_00004_00006=3) + (grid_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux459' order represents '0' with '4190'
c Var 'aux459' direct represents '0' with '4190'
c Var 'aux459' order represents '1' with '4191'
-4190 4191 0
c Var 'aux459' direct represents '1' with '4192'
4190 -4191 4192 0
-4192 4191 0
-4192 -4190 0
c Var 'aux459' direct represents '2' with '-4191'
4190 4192 -4191 0
c Encoding variable: aux460 with domain: int(0..2) (representing constraint ((3=grid_00006_00004) + (3=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux460' order represents '0' with '4193'
c Var 'aux460' direct represents '0' with '4193'
c Var 'aux460' order represents '1' with '4194'
-4193 4194 0
c Var 'aux460' direct represents '1' with '4195'
4193 -4194 4195 0
-4195 4194 0
-4195 -4193 0
c Var 'aux460' direct represents '2' with '-4194'
4193 4195 -4194 0
c Encoding variable: aux461 with domain: int(0..2) (representing constraint ((grid_00004_00003=3) + (grid_00003_00000=3)))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '4196'
c Var 'aux461' direct represents '0' with '4196'
c Var 'aux461' order represents '1' with '4197'
-4196 4197 0
c Var 'aux461' direct represents '1' with '4198'
4196 -4197 4198 0
-4198 4197 0
-4198 -4196 0
c Var 'aux461' direct represents '2' with '-4197'
4196 4198 -4197 0
c Encoding variable: aux462 with domain: int(0..2) (representing constraint ((grid_00004_00002=3) + (3=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '4199'
c Var 'aux462' direct represents '0' with '4199'
c Var 'aux462' order represents '1' with '4200'
-4199 4200 0
c Var 'aux462' direct represents '1' with '4201'
4199 -4200 4201 0
-4201 4200 0
-4201 -4199 0
c Var 'aux462' direct represents '2' with '-4200'
4199 4201 -4200 0
c Encoding variable: aux463 with domain: int(0..2) (representing constraint ((grid_00004_00001=3) + (3=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '4202'
c Var 'aux463' direct represents '0' with '4202'
c Var 'aux463' order represents '1' with '4203'
-4202 4203 0
c Var 'aux463' direct represents '1' with '4204'
4202 -4203 4204 0
-4204 4203 0
-4204 -4202 0
c Var 'aux463' direct represents '2' with '-4203'
4202 4204 -4203 0
c Encoding variable: aux464 with domain: int(0..2) (representing constraint ((grid_00004_00000=3) + (3=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '4205'
c Var 'aux464' direct represents '0' with '4205'
c Var 'aux464' order represents '1' with '4206'
-4205 4206 0
c Var 'aux464' direct represents '1' with '4207'
4205 -4206 4207 0
-4207 4206 0
-4207 -4205 0
c Var 'aux464' direct represents '2' with '-4206'
4205 4207 -4206 0
c Encoding variable: aux465 with domain: int(0..2) (representing constraint ((3=grid_00002_00006) + (3=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '4208'
c Var 'aux465' direct represents '0' with '4208'
c Var 'aux465' order represents '1' with '4209'
-4208 4209 0
c Var 'aux465' direct represents '1' with '4210'
4208 -4209 4210 0
-4210 4209 0
-4210 -4208 0
c Var 'aux465' direct represents '2' with '-4209'
4208 4210 -4209 0
c Encoding variable: aux466 with domain: int(0..2) (representing constraint ((3=grid_00002_00005) + (3=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '4211'
c Var 'aux466' direct represents '0' with '4211'
c Var 'aux466' order represents '1' with '4212'
-4211 4212 0
c Var 'aux466' direct represents '1' with '4213'
4211 -4212 4213 0
-4213 4212 0
-4213 -4211 0
c Var 'aux466' direct represents '2' with '-4212'
4211 4213 -4212 0
c Encoding variable: aux467 with domain: int(0..2) (representing constraint ((3=grid_00002_00004) + (3=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '4214'
c Var 'aux467' direct represents '0' with '4214'
c Var 'aux467' order represents '1' with '4215'
-4214 4215 0
c Var 'aux467' direct represents '1' with '4216'
4214 -4215 4216 0
-4216 4215 0
-4216 -4214 0
c Var 'aux467' direct represents '2' with '-4215'
4214 4216 -4215 0
c Encoding variable: aux468 with domain: int(0..2) (representing constraint ((3=grid_00002_00003) + (3=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '4217'
c Var 'aux468' direct represents '0' with '4217'
c Var 'aux468' order represents '1' with '4218'
-4217 4218 0
c Var 'aux468' direct represents '1' with '4219'
4217 -4218 4219 0
-4219 4218 0
-4219 -4217 0
c Var 'aux468' direct represents '2' with '-4218'
4217 4219 -4218 0
c Encoding variable: aux469 with domain: int(0..2) (representing constraint ((grid_00003_00002=3) + (3=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '4220'
c Var 'aux469' direct represents '0' with '4220'
c Var 'aux469' order represents '1' with '4221'
-4220 4221 0
c Var 'aux469' direct represents '1' with '4222'
4220 -4221 4222 0
-4222 4221 0
-4222 -4220 0
c Var 'aux469' direct represents '2' with '-4221'
4220 4222 -4221 0
c Encoding variable: aux470 with domain: int(0..2) (representing constraint ((3=grid_00001_00005) + (grid_00003_00003=3)))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '4223'
c Var 'aux470' direct represents '0' with '4223'
c Var 'aux470' order represents '1' with '4224'
-4223 4224 0
c Var 'aux470' direct represents '1' with '4225'
4223 -4224 4225 0
-4225 4224 0
-4225 -4223 0
c Var 'aux470' direct represents '2' with '-4224'
4223 4225 -4224 0
c Encoding variable: aux471 with domain: int(0..2) (representing constraint ((3=grid_00006_00000) + (3=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '4226'
c Var 'aux471' direct represents '0' with '4226'
c Var 'aux471' order represents '1' with '4227'
-4226 4227 0
c Var 'aux471' direct represents '1' with '4228'
4226 -4227 4228 0
-4228 4227 0
-4228 -4226 0
c Var 'aux471' direct represents '2' with '-4227'
4226 4228 -4227 0
c Encoding variable: aux472 with domain: int(0..4) (representing constraint (aux459 + aux471))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '4229'
c Var 'aux472' direct represents '0' with '4229'
c Var 'aux472' order represents '1' with '4230'
-4229 4230 0
c Var 'aux472' direct represents '1' with '4231'
4229 -4230 4231 0
-4231 4230 0
-4231 -4229 0
c Var 'aux472' order represents '2' with '4232'
-4230 4232 0
c Var 'aux472' direct represents '2' with '4233'
4230 -4232 4233 0
-4233 4232 0
-4233 -4230 0
c Var 'aux472' order represents '3' with '4234'
-4232 4234 0
c Var 'aux472' direct represents '3' with '4235'
4232 -4234 4235 0
-4235 4234 0
-4235 -4232 0
c Var 'aux472' direct represents '4' with '-4234'
4229 4231 4233 4235 -4234 0
c Encoding variable: aux473 with domain: int(0..4) (representing constraint (aux453 + aux466))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '4236'
c Var 'aux473' direct represents '0' with '4236'
c Var 'aux473' order represents '1' with '4237'
-4236 4237 0
c Var 'aux473' direct represents '1' with '4238'
4236 -4237 4238 0
-4238 4237 0
-4238 -4236 0
c Var 'aux473' order represents '2' with '4239'
-4237 4239 0
c Var 'aux473' direct represents '2' with '4240'
4237 -4239 4240 0
-4240 4239 0
-4240 -4237 0
c Var 'aux473' order represents '3' with '4241'
-4239 4241 0
c Var 'aux473' direct represents '3' with '4242'
4239 -4241 4242 0
-4242 4241 0
-4242 -4239 0
c Var 'aux473' direct represents '4' with '-4241'
4236 4238 4240 4242 -4241 0
c Encoding variable: aux474 with domain: int(0..4) (representing constraint (aux457 + aux452))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '4243'
c Var 'aux474' direct represents '0' with '4243'
c Var 'aux474' order represents '1' with '4244'
-4243 4244 0
c Var 'aux474' direct represents '1' with '4245'
4243 -4244 4245 0
-4245 4244 0
-4245 -4243 0
c Var 'aux474' order represents '2' with '4246'
-4244 4246 0
c Var 'aux474' direct represents '2' with '4247'
4244 -4246 4247 0
-4247 4246 0
-4247 -4244 0
c Var 'aux474' order represents '3' with '4248'
-4246 4248 0
c Var 'aux474' direct represents '3' with '4249'
4246 -4248 4249 0
-4249 4248 0
-4249 -4246 0
c Var 'aux474' direct represents '4' with '-4248'
4243 4245 4247 4249 -4248 0
c Encoding variable: aux475 with domain: int(0..4) (representing constraint (aux455 + aux454))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '4250'
c Var 'aux475' direct represents '0' with '4250'
c Var 'aux475' order represents '1' with '4251'
-4250 4251 0
c Var 'aux475' direct represents '1' with '4252'
4250 -4251 4252 0
-4252 4251 0
-4252 -4250 0
c Var 'aux475' order represents '2' with '4253'
-4251 4253 0
c Var 'aux475' direct represents '2' with '4254'
4251 -4253 4254 0
-4254 4253 0
-4254 -4251 0
c Var 'aux475' order represents '3' with '4255'
-4253 4255 0
c Var 'aux475' direct represents '3' with '4256'
4253 -4255 4256 0
-4256 4255 0
-4256 -4253 0
c Var 'aux475' direct represents '4' with '-4255'
4250 4252 4254 4256 -4255 0
c Encoding variable: aux476 with domain: int(0..4) (representing constraint (aux456 + aux458))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '4257'
c Var 'aux476' direct represents '0' with '4257'
c Var 'aux476' order represents '1' with '4258'
-4257 4258 0
c Var 'aux476' direct represents '1' with '4259'
4257 -4258 4259 0
-4259 4258 0
-4259 -4257 0
c Var 'aux476' order represents '2' with '4260'
-4258 4260 0
c Var 'aux476' direct represents '2' with '4261'
4258 -4260 4261 0
-4261 4260 0
-4261 -4258 0
c Var 'aux476' order represents '3' with '4262'
-4260 4262 0
c Var 'aux476' direct represents '3' with '4263'
4260 -4262 4263 0
-4263 4262 0
-4263 -4260 0
c Var 'aux476' direct represents '4' with '-4262'
4257 4259 4261 4263 -4262 0
c Encoding variable: aux477 with domain: int(0..4) (representing constraint (aux469 + aux465))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '4264'
c Var 'aux477' direct represents '0' with '4264'
c Var 'aux477' order represents '1' with '4265'
-4264 4265 0
c Var 'aux477' direct represents '1' with '4266'
4264 -4265 4266 0
-4266 4265 0
-4266 -4264 0
c Var 'aux477' order represents '2' with '4267'
-4265 4267 0
c Var 'aux477' direct represents '2' with '4268'
4265 -4267 4268 0
-4268 4267 0
-4268 -4265 0
c Var 'aux477' order represents '3' with '4269'
-4267 4269 0
c Var 'aux477' direct represents '3' with '4270'
4267 -4269 4270 0
-4270 4269 0
-4270 -4267 0
c Var 'aux477' direct represents '4' with '-4269'
4264 4266 4268 4270 -4269 0
c Encoding variable: aux478 with domain: int(0..4) (representing constraint (aux462 + aux461))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '4271'
c Var 'aux478' direct represents '0' with '4271'
c Var 'aux478' order represents '1' with '4272'
-4271 4272 0
c Var 'aux478' direct represents '1' with '4273'
4271 -4272 4273 0
-4273 4272 0
-4273 -4271 0
c Var 'aux478' order represents '2' with '4274'
-4272 4274 0
c Var 'aux478' direct represents '2' with '4275'
4272 -4274 4275 0
-4275 4274 0
-4275 -4272 0
c Var 'aux478' order represents '3' with '4276'
-4274 4276 0
c Var 'aux478' direct represents '3' with '4277'
4274 -4276 4277 0
-4277 4276 0
-4277 -4274 0
c Var 'aux478' direct represents '4' with '-4276'
4271 4273 4275 4277 -4276 0
c Encoding variable: aux479 with domain: int(0..4) (representing constraint (aux463 + aux464))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '4278'
c Var 'aux479' direct represents '0' with '4278'
c Var 'aux479' order represents '1' with '4279'
-4278 4279 0
c Var 'aux479' direct represents '1' with '4280'
4278 -4279 4280 0
-4280 4279 0
-4280 -4278 0
c Var 'aux479' order represents '2' with '4281'
-4279 4281 0
c Var 'aux479' direct represents '2' with '4282'
4279 -4281 4282 0
-4282 4281 0
-4282 -4279 0
c Var 'aux479' order represents '3' with '4283'
-4281 4283 0
c Var 'aux479' direct represents '3' with '4284'
4281 -4283 4284 0
-4284 4283 0
-4284 -4281 0
c Var 'aux479' direct represents '4' with '-4283'
4278 4280 4282 4284 -4283 0
c Encoding variable: aux480 with domain: int(0..4) (representing constraint (aux467 + aux470))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '4285'
c Var 'aux480' direct represents '0' with '4285'
c Var 'aux480' order represents '1' with '4286'
-4285 4286 0
c Var 'aux480' direct represents '1' with '4287'
4285 -4286 4287 0
-4287 4286 0
-4287 -4285 0
c Var 'aux480' order represents '2' with '4288'
-4286 4288 0
c Var 'aux480' direct represents '2' with '4289'
4286 -4288 4289 0
-4289 4288 0
-4289 -4286 0
c Var 'aux480' order represents '3' with '4290'
-4288 4290 0
c Var 'aux480' direct represents '3' with '4291'
4288 -4290 4291 0
-4291 4290 0
-4291 -4288 0
c Var 'aux480' direct represents '4' with '-4290'
4285 4287 4289 4291 -4290 0
c Encoding variable: aux481 with domain: int(0..4) (representing constraint (aux468 + aux460))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '4292'
c Var 'aux481' direct represents '0' with '4292'
c Var 'aux481' order represents '1' with '4293'
-4292 4293 0
c Var 'aux481' direct represents '1' with '4294'
4292 -4293 4294 0
-4294 4293 0
-4294 -4292 0
c Var 'aux481' order represents '2' with '4295'
-4293 4295 0
c Var 'aux481' direct represents '2' with '4296'
4293 -4295 4296 0
-4296 4295 0
-4296 -4293 0
c Var 'aux481' order represents '3' with '4297'
-4295 4297 0
c Var 'aux481' direct represents '3' with '4298'
4295 -4297 4298 0
-4298 4297 0
-4298 -4295 0
c Var 'aux481' direct represents '4' with '-4297'
4292 4294 4296 4298 -4297 0
c Encoding variable: aux482 with domain: int(0..8) (representing constraint (aux475 + aux481))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '4299'
c Var 'aux482' direct represents '0' with '4299'
c Var 'aux482' order represents '1' with '4300'
-4299 4300 0
c Var 'aux482' direct represents '1' with '4301'
4299 -4300 4301 0
-4301 4300 0
-4301 -4299 0
c Var 'aux482' order represents '2' with '4302'
-4300 4302 0
c Var 'aux482' direct represents '2' with '4303'
4300 -4302 4303 0
-4303 4302 0
-4303 -4300 0
c Var 'aux482' order represents '3' with '4304'
-4302 4304 0
c Var 'aux482' direct represents '3' with '4305'
4302 -4304 4305 0
-4305 4304 0
-4305 -4302 0
c Var 'aux482' order represents '4' with '4306'
-4304 4306 0
c Var 'aux482' direct represents '4' with '4307'
4304 -4306 4307 0
-4307 4306 0
-4307 -4304 0
c Var 'aux482' order represents '5' with '4308'
-4306 4308 0
c Var 'aux482' direct represents '5' with '4309'
4306 -4308 4309 0
-4309 4308 0
-4309 -4306 0
c Var 'aux482' order represents '6' with '4310'
-4308 4310 0
c Var 'aux482' direct represents '6' with '4311'
4308 -4310 4311 0
-4311 4310 0
-4311 -4308 0
c Var 'aux482' order represents '7' with '4312'
-4310 4312 0
c Var 'aux482' direct represents '7' with '4313'
4310 -4312 4313 0
-4313 4312 0
-4313 -4310 0
c Var 'aux482' direct represents '8' with '-4312'
4299 4301 4303 4305 4307 4309 4311 4313 -4312 0
c Encoding variable: aux483 with domain: int(0..8) (representing constraint (aux474 + aux478))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '4314'
c Var 'aux483' direct represents '0' with '4314'
c Var 'aux483' order represents '1' with '4315'
-4314 4315 0
c Var 'aux483' direct represents '1' with '4316'
4314 -4315 4316 0
-4316 4315 0
-4316 -4314 0
c Var 'aux483' order represents '2' with '4317'
-4315 4317 0
c Var 'aux483' direct represents '2' with '4318'
4315 -4317 4318 0
-4318 4317 0
-4318 -4315 0
c Var 'aux483' order represents '3' with '4319'
-4317 4319 0
c Var 'aux483' direct represents '3' with '4320'
4317 -4319 4320 0
-4320 4319 0
-4320 -4317 0
c Var 'aux483' order represents '4' with '4321'
-4319 4321 0
c Var 'aux483' direct represents '4' with '4322'
4319 -4321 4322 0
-4322 4321 0
-4322 -4319 0
c Var 'aux483' order represents '5' with '4323'
-4321 4323 0
c Var 'aux483' direct represents '5' with '4324'
4321 -4323 4324 0
-4324 4323 0
-4324 -4321 0
c Var 'aux483' order represents '6' with '4325'
-4323 4325 0
c Var 'aux483' direct represents '6' with '4326'
4323 -4325 4326 0
-4326 4325 0
-4326 -4323 0
c Var 'aux483' order represents '7' with '4327'
-4325 4327 0
c Var 'aux483' direct represents '7' with '4328'
4325 -4327 4328 0
-4328 4327 0
-4328 -4325 0
c Var 'aux483' direct represents '8' with '-4327'
4314 4316 4318 4320 4322 4324 4326 4328 -4327 0
c Encoding variable: aux484 with domain: int(0..8) (representing constraint (aux472 + aux473))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '4329'
c Var 'aux484' direct represents '0' with '4329'
c Var 'aux484' order represents '1' with '4330'
-4329 4330 0
c Var 'aux484' direct represents '1' with '4331'
4329 -4330 4331 0
-4331 4330 0
-4331 -4329 0
c Var 'aux484' order represents '2' with '4332'
-4330 4332 0
c Var 'aux484' direct represents '2' with '4333'
4330 -4332 4333 0
-4333 4332 0
-4333 -4330 0
c Var 'aux484' order represents '3' with '4334'
-4332 4334 0
c Var 'aux484' direct represents '3' with '4335'
4332 -4334 4335 0
-4335 4334 0
-4335 -4332 0
c Var 'aux484' order represents '4' with '4336'
-4334 4336 0
c Var 'aux484' direct represents '4' with '4337'
4334 -4336 4337 0
-4337 4336 0
-4337 -4334 0
c Var 'aux484' order represents '5' with '4338'
-4336 4338 0
c Var 'aux484' direct represents '5' with '4339'
4336 -4338 4339 0
-4339 4338 0
-4339 -4336 0
c Var 'aux484' order represents '6' with '4340'
-4338 4340 0
c Var 'aux484' direct represents '6' with '4341'
4338 -4340 4341 0
-4341 4340 0
-4341 -4338 0
c Var 'aux484' order represents '7' with '4342'
-4340 4342 0
c Var 'aux484' direct represents '7' with '4343'
4340 -4342 4343 0
-4343 4342 0
-4343 -4340 0
c Var 'aux484' direct represents '8' with '-4342'
4329 4331 4333 4335 4337 4339 4341 4343 -4342 0
c Encoding variable: aux485 with domain: int(0..8) (representing constraint (aux476 + aux477))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '4344'
c Var 'aux485' direct represents '0' with '4344'
c Var 'aux485' order represents '1' with '4345'
-4344 4345 0
c Var 'aux485' direct represents '1' with '4346'
4344 -4345 4346 0
-4346 4345 0
-4346 -4344 0
c Var 'aux485' order represents '2' with '4347'
-4345 4347 0
c Var 'aux485' direct represents '2' with '4348'
4345 -4347 4348 0
-4348 4347 0
-4348 -4345 0
c Var 'aux485' order represents '3' with '4349'
-4347 4349 0
c Var 'aux485' direct represents '3' with '4350'
4347 -4349 4350 0
-4350 4349 0
-4350 -4347 0
c Var 'aux485' order represents '4' with '4351'
-4349 4351 0
c Var 'aux485' direct represents '4' with '4352'
4349 -4351 4352 0
-4352 4351 0
-4352 -4349 0
c Var 'aux485' order represents '5' with '4353'
-4351 4353 0
c Var 'aux485' direct represents '5' with '4354'
4351 -4353 4354 0
-4354 4353 0
-4354 -4351 0
c Var 'aux485' order represents '6' with '4355'
-4353 4355 0
c Var 'aux485' direct represents '6' with '4356'
4353 -4355 4356 0
-4356 4355 0
-4356 -4353 0
c Var 'aux485' order represents '7' with '4357'
-4355 4357 0
c Var 'aux485' direct represents '7' with '4358'
4355 -4357 4358 0
-4358 4357 0
-4358 -4355 0
c Var 'aux485' direct represents '8' with '-4357'
4344 4346 4348 4350 4352 4354 4356 4358 -4357 0
c Encoding variable: aux486 with domain: int(0..8) (representing constraint (aux479 + aux480))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '4359'
c Var 'aux486' direct represents '0' with '4359'
c Var 'aux486' order represents '1' with '4360'
-4359 4360 0
c Var 'aux486' direct represents '1' with '4361'
4359 -4360 4361 0
-4361 4360 0
-4361 -4359 0
c Var 'aux486' order represents '2' with '4362'
-4360 4362 0
c Var 'aux486' direct represents '2' with '4363'
4360 -4362 4363 0
-4363 4362 0
-4363 -4360 0
c Var 'aux486' order represents '3' with '4364'
-4362 4364 0
c Var 'aux486' direct represents '3' with '4365'
4362 -4364 4365 0
-4365 4364 0
-4365 -4362 0
c Var 'aux486' order represents '4' with '4366'
-4364 4366 0
c Var 'aux486' direct represents '4' with '4367'
4364 -4366 4367 0
-4367 4366 0
-4367 -4364 0
c Var 'aux486' order represents '5' with '4368'
-4366 4368 0
c Var 'aux486' direct represents '5' with '4369'
4366 -4368 4369 0
-4369 4368 0
-4369 -4366 0
c Var 'aux486' order represents '6' with '4370'
-4368 4370 0
c Var 'aux486' direct represents '6' with '4371'
4368 -4370 4371 0
-4371 4370 0
-4371 -4368 0
c Var 'aux486' order represents '7' with '4372'
-4370 4372 0
c Var 'aux486' direct represents '7' with '4373'
4370 -4372 4373 0
-4373 4372 0
-4373 -4370 0
c Var 'aux486' direct represents '8' with '-4372'
4359 4361 4363 4365 4367 4369 4371 4373 -4372 0
c Encoding variable: aux487 with domain: int(0..16) (representing constraint (aux483 + aux486))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '4374'
c Var 'aux487' direct represents '0' with '4374'
c Var 'aux487' order represents '1' with '4375'
-4374 4375 0
c Var 'aux487' direct represents '1' with '4376'
4374 -4375 4376 0
-4376 4375 0
-4376 -4374 0
c Var 'aux487' order represents '2' with '4377'
-4375 4377 0
c Var 'aux487' direct represents '2' with '4378'
4375 -4377 4378 0
-4378 4377 0
-4378 -4375 0
c Var 'aux487' order represents '3' with '4379'
-4377 4379 0
c Var 'aux487' direct represents '3' with '4380'
4377 -4379 4380 0
-4380 4379 0
-4380 -4377 0
c Var 'aux487' order represents '4' with '4381'
-4379 4381 0
c Var 'aux487' direct represents '4' with '4382'
4379 -4381 4382 0
-4382 4381 0
-4382 -4379 0
c Var 'aux487' order represents '5' with '4383'
-4381 4383 0
c Var 'aux487' direct represents '5' with '4384'
4381 -4383 4384 0
-4384 4383 0
-4384 -4381 0
c Var 'aux487' order represents '6' with '4385'
-4383 4385 0
c Var 'aux487' direct represents '6' with '4386'
4383 -4385 4386 0
-4386 4385 0
-4386 -4383 0
c Var 'aux487' order represents '7' with '4387'
-4385 4387 0
c Var 'aux487' direct represents '7' with '4388'
4385 -4387 4388 0
-4388 4387 0
-4388 -4385 0
c Var 'aux487' order represents '8' with '4389'
-4387 4389 0
c Var 'aux487' direct represents '8' with '4390'
4387 -4389 4390 0
-4390 4389 0
-4390 -4387 0
c Var 'aux487' order represents '9' with '4391'
-4389 4391 0
c Var 'aux487' direct represents '9' with '4392'
4389 -4391 4392 0
-4392 4391 0
-4392 -4389 0
c Var 'aux487' order represents '10' with '4393'
-4391 4393 0
c Var 'aux487' direct represents '10' with '4394'
4391 -4393 4394 0
-4394 4393 0
-4394 -4391 0
c Var 'aux487' order represents '11' with '4395'
-4393 4395 0
c Var 'aux487' direct represents '11' with '4396'
4393 -4395 4396 0
-4396 4395 0
-4396 -4393 0
c Var 'aux487' order represents '12' with '4397'
-4395 4397 0
c Var 'aux487' direct represents '12' with '4398'
4395 -4397 4398 0
-4398 4397 0
-4398 -4395 0
c Var 'aux487' order represents '13' with '4399'
-4397 4399 0
c Var 'aux487' direct represents '13' with '4400'
4397 -4399 4400 0
-4400 4399 0
-4400 -4397 0
c Var 'aux487' order represents '14' with '4401'
-4399 4401 0
c Var 'aux487' direct represents '14' with '4402'
4399 -4401 4402 0
-4402 4401 0
-4402 -4399 0
c Var 'aux487' order represents '15' with '4403'
-4401 4403 0
c Var 'aux487' direct represents '15' with '4404'
4401 -4403 4404 0
-4404 4403 0
-4404 -4401 0
c Var 'aux487' direct represents '16' with '-4403'
4374 4376 4378 4380 4382 4384 4386 4388 4390 4392 4394 4396 4398 4400 4402 4404 -4403 0
c Encoding variable: aux488 with domain: int(0..16) (representing constraint (aux482 + aux484))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '4405'
c Var 'aux488' direct represents '0' with '4405'
c Var 'aux488' order represents '1' with '4406'
-4405 4406 0
c Var 'aux488' direct represents '1' with '4407'
4405 -4406 4407 0
-4407 4406 0
-4407 -4405 0
c Var 'aux488' order represents '2' with '4408'
-4406 4408 0
c Var 'aux488' direct represents '2' with '4409'
4406 -4408 4409 0
-4409 4408 0
-4409 -4406 0
c Var 'aux488' order represents '3' with '4410'
-4408 4410 0
c Var 'aux488' direct represents '3' with '4411'
4408 -4410 4411 0
-4411 4410 0
-4411 -4408 0
c Var 'aux488' order represents '4' with '4412'
-4410 4412 0
c Var 'aux488' direct represents '4' with '4413'
4410 -4412 4413 0
-4413 4412 0
-4413 -4410 0
c Var 'aux488' order represents '5' with '4414'
-4412 4414 0
c Var 'aux488' direct represents '5' with '4415'
4412 -4414 4415 0
-4415 4414 0
-4415 -4412 0
c Var 'aux488' order represents '6' with '4416'
-4414 4416 0
c Var 'aux488' direct represents '6' with '4417'
4414 -4416 4417 0
-4417 4416 0
-4417 -4414 0
c Var 'aux488' order represents '7' with '4418'
-4416 4418 0
c Var 'aux488' direct represents '7' with '4419'
4416 -4418 4419 0
-4419 4418 0
-4419 -4416 0
c Var 'aux488' order represents '8' with '4420'
-4418 4420 0
c Var 'aux488' direct represents '8' with '4421'
4418 -4420 4421 0
-4421 4420 0
-4421 -4418 0
c Var 'aux488' order represents '9' with '4422'
-4420 4422 0
c Var 'aux488' direct represents '9' with '4423'
4420 -4422 4423 0
-4423 4422 0
-4423 -4420 0
c Var 'aux488' order represents '10' with '4424'
-4422 4424 0
c Var 'aux488' direct represents '10' with '4425'
4422 -4424 4425 0
-4425 4424 0
-4425 -4422 0
c Var 'aux488' order represents '11' with '4426'
-4424 4426 0
c Var 'aux488' direct represents '11' with '4427'
4424 -4426 4427 0
-4427 4426 0
-4427 -4424 0
c Var 'aux488' order represents '12' with '4428'
-4426 4428 0
c Var 'aux488' direct represents '12' with '4429'
4426 -4428 4429 0
-4429 4428 0
-4429 -4426 0
c Var 'aux488' order represents '13' with '4430'
-4428 4430 0
c Var 'aux488' direct represents '13' with '4431'
4428 -4430 4431 0
-4431 4430 0
-4431 -4428 0
c Var 'aux488' order represents '14' with '4432'
-4430 4432 0
c Var 'aux488' direct represents '14' with '4433'
4430 -4432 4433 0
-4433 4432 0
-4433 -4430 0
c Var 'aux488' order represents '15' with '4434'
-4432 4434 0
c Var 'aux488' direct represents '15' with '4435'
4432 -4434 4435 0
-4435 4434 0
-4435 -4432 0
c Var 'aux488' direct represents '16' with '-4434'
4405 4407 4409 4411 4413 4415 4417 4419 4421 4423 4425 4427 4429 4431 4433 4435 -4434 0
c Encoding variable: aux489 with domain: int(0..2) (representing constraint ((4=grid_00005_00000) + (grid_00000_00006=4)))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '4436'
c Var 'aux489' direct represents '0' with '4436'
c Var 'aux489' order represents '1' with '4437'
-4436 4437 0
c Var 'aux489' direct represents '1' with '4438'
4436 -4437 4438 0
-4438 4437 0
-4438 -4436 0
c Var 'aux489' direct represents '2' with '-4437'
4436 4438 -4437 0
c Encoding variable: aux490 with domain: int(0..2) (representing constraint ((grid_00000_00005=4) + (4=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '4439'
c Var 'aux490' direct represents '0' with '4439'
c Var 'aux490' order represents '1' with '4440'
-4439 4440 0
c Var 'aux490' direct represents '1' with '4441'
4439 -4440 4441 0
-4441 4440 0
-4441 -4439 0
c Var 'aux490' direct represents '2' with '-4440'
4439 4441 -4440 0
c Encoding variable: aux491 with domain: int(0..2) (representing constraint ((grid_00000_00004=4) + (4=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '4442'
c Var 'aux491' direct represents '0' with '4442'
c Var 'aux491' order represents '1' with '4443'
-4442 4443 0
c Var 'aux491' direct represents '1' with '4444'
4442 -4443 4444 0
-4444 4443 0
-4444 -4442 0
c Var 'aux491' direct represents '2' with '-4443'
4442 4444 -4443 0
c Encoding variable: aux492 with domain: int(0..2) (representing constraint ((grid_00000_00003=4) + (grid_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '4445'
c Var 'aux492' direct represents '0' with '4445'
c Var 'aux492' order represents '1' with '4446'
-4445 4446 0
c Var 'aux492' direct represents '1' with '4447'
4445 -4446 4447 0
-4447 4446 0
-4447 -4445 0
c Var 'aux492' direct represents '2' with '-4446'
4445 4447 -4446 0
c Encoding variable: aux493 with domain: int(0..2) (representing constraint ((grid_00000_00002=4) + (4=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '4448'
c Var 'aux493' direct represents '0' with '4448'
c Var 'aux493' order represents '1' with '4449'
-4448 4449 0
c Var 'aux493' direct represents '1' with '4450'
4448 -4449 4450 0
-4450 4449 0
-4450 -4448 0
c Var 'aux493' direct represents '2' with '-4449'
4448 4450 -4449 0
c Encoding variable: aux494 with domain: int(0..2) (representing constraint ((grid_00000_00001=4) + (grid_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '4451'
c Var 'aux494' direct represents '0' with '4451'
c Var 'aux494' order represents '1' with '4452'
-4451 4452 0
c Var 'aux494' direct represents '1' with '4453'
4451 -4452 4453 0
-4453 4452 0
-4453 -4451 0
c Var 'aux494' direct represents '2' with '-4452'
4451 4453 -4452 0
c Encoding variable: aux495 with domain: int(0..2) (representing constraint ((grid_00004_00005=4) + (4=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '4454'
c Var 'aux495' direct represents '0' with '4454'
c Var 'aux495' order represents '1' with '4455'
-4454 4455 0
c Var 'aux495' direct represents '1' with '4456'
4454 -4455 4456 0
-4456 4455 0
-4456 -4454 0
c Var 'aux495' direct represents '2' with '-4455'
4454 4456 -4455 0
c Encoding variable: aux496 with domain: int(0..2) (representing constraint ((grid_00004_00006=4) + (grid_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '4457'
c Var 'aux496' direct represents '0' with '4457'
c Var 'aux496' order represents '1' with '4458'
-4457 4458 0
c Var 'aux496' direct represents '1' with '4459'
4457 -4458 4459 0
-4459 4458 0
-4459 -4457 0
c Var 'aux496' direct represents '2' with '-4458'
4457 4459 -4458 0
c Encoding variable: aux497 with domain: int(0..2) (representing constraint ((4=grid_00006_00004) + (4=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '4460'
c Var 'aux497' direct represents '0' with '4460'
c Var 'aux497' order represents '1' with '4461'
-4460 4461 0
c Var 'aux497' direct represents '1' with '4462'
4460 -4461 4462 0
-4462 4461 0
-4462 -4460 0
c Var 'aux497' direct represents '2' with '-4461'
4460 4462 -4461 0
c Encoding variable: aux498 with domain: int(0..2) (representing constraint ((grid_00004_00003=4) + (grid_00003_00000=4)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '4463'
c Var 'aux498' direct represents '0' with '4463'
c Var 'aux498' order represents '1' with '4464'
-4463 4464 0
c Var 'aux498' direct represents '1' with '4465'
4463 -4464 4465 0
-4465 4464 0
-4465 -4463 0
c Var 'aux498' direct represents '2' with '-4464'
4463 4465 -4464 0
c Encoding variable: aux499 with domain: int(0..2) (representing constraint ((grid_00004_00002=4) + (4=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '4466'
c Var 'aux499' direct represents '0' with '4466'
c Var 'aux499' order represents '1' with '4467'
-4466 4467 0
c Var 'aux499' direct represents '1' with '4468'
4466 -4467 4468 0
-4468 4467 0
-4468 -4466 0
c Var 'aux499' direct represents '2' with '-4467'
4466 4468 -4467 0
c Encoding variable: aux500 with domain: int(0..2) (representing constraint ((grid_00004_00001=4) + (4=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '4469'
c Var 'aux500' direct represents '0' with '4469'
c Var 'aux500' order represents '1' with '4470'
-4469 4470 0
c Var 'aux500' direct represents '1' with '4471'
4469 -4470 4471 0
-4471 4470 0
-4471 -4469 0
c Var 'aux500' direct represents '2' with '-4470'
4469 4471 -4470 0
c Encoding variable: aux501 with domain: int(0..2) (representing constraint ((grid_00004_00000=4) + (4=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '4472'
c Var 'aux501' direct represents '0' with '4472'
c Var 'aux501' order represents '1' with '4473'
-4472 4473 0
c Var 'aux501' direct represents '1' with '4474'
4472 -4473 4474 0
-4474 4473 0
-4474 -4472 0
c Var 'aux501' direct represents '2' with '-4473'
4472 4474 -4473 0
c Encoding variable: aux502 with domain: int(0..2) (representing constraint ((4=grid_00002_00006) + (4=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '4475'
c Var 'aux502' direct represents '0' with '4475'
c Var 'aux502' order represents '1' with '4476'
-4475 4476 0
c Var 'aux502' direct represents '1' with '4477'
4475 -4476 4477 0
-4477 4476 0
-4477 -4475 0
c Var 'aux502' direct represents '2' with '-4476'
4475 4477 -4476 0
c Encoding variable: aux503 with domain: int(0..2) (representing constraint ((4=grid_00002_00005) + (4=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '4478'
c Var 'aux503' direct represents '0' with '4478'
c Var 'aux503' order represents '1' with '4479'
-4478 4479 0
c Var 'aux503' direct represents '1' with '4480'
4478 -4479 4480 0
-4480 4479 0
-4480 -4478 0
c Var 'aux503' direct represents '2' with '-4479'
4478 4480 -4479 0
c Encoding variable: aux504 with domain: int(0..2) (representing constraint ((4=grid_00002_00004) + (4=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '4481'
c Var 'aux504' direct represents '0' with '4481'
c Var 'aux504' order represents '1' with '4482'
-4481 4482 0
c Var 'aux504' direct represents '1' with '4483'
4481 -4482 4483 0
-4483 4482 0
-4483 -4481 0
c Var 'aux504' direct represents '2' with '-4482'
4481 4483 -4482 0
c Encoding variable: aux505 with domain: int(0..2) (representing constraint ((4=grid_00002_00003) + (4=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '4484'
c Var 'aux505' direct represents '0' with '4484'
c Var 'aux505' order represents '1' with '4485'
-4484 4485 0
c Var 'aux505' direct represents '1' with '4486'
4484 -4485 4486 0
-4486 4485 0
-4486 -4484 0
c Var 'aux505' direct represents '2' with '-4485'
4484 4486 -4485 0
c Encoding variable: aux506 with domain: int(0..2) (representing constraint ((grid_00003_00002=4) + (4=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '4487'
c Var 'aux506' direct represents '0' with '4487'
c Var 'aux506' order represents '1' with '4488'
-4487 4488 0
c Var 'aux506' direct represents '1' with '4489'
4487 -4488 4489 0
-4489 4488 0
-4489 -4487 0
c Var 'aux506' direct represents '2' with '-4488'
4487 4489 -4488 0
c Encoding variable: aux507 with domain: int(0..2) (representing constraint ((4=grid_00001_00005) + (grid_00003_00003=4)))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '4490'
c Var 'aux507' direct represents '0' with '4490'
c Var 'aux507' order represents '1' with '4491'
-4490 4491 0
c Var 'aux507' direct represents '1' with '4492'
4490 -4491 4492 0
-4492 4491 0
-4492 -4490 0
c Var 'aux507' direct represents '2' with '-4491'
4490 4492 -4491 0
c Encoding variable: aux508 with domain: int(0..2) (representing constraint ((4=grid_00006_00000) + (4=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '4493'
c Var 'aux508' direct represents '0' with '4493'
c Var 'aux508' order represents '1' with '4494'
-4493 4494 0
c Var 'aux508' direct represents '1' with '4495'
4493 -4494 4495 0
-4495 4494 0
-4495 -4493 0
c Var 'aux508' direct represents '2' with '-4494'
4493 4495 -4494 0
c Encoding variable: aux509 with domain: int(0..4) (representing constraint (aux496 + aux508))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '4496'
c Var 'aux509' direct represents '0' with '4496'
c Var 'aux509' order represents '1' with '4497'
-4496 4497 0
c Var 'aux509' direct represents '1' with '4498'
4496 -4497 4498 0
-4498 4497 0
-4498 -4496 0
c Var 'aux509' order represents '2' with '4499'
-4497 4499 0
c Var 'aux509' direct represents '2' with '4500'
4497 -4499 4500 0
-4500 4499 0
-4500 -4497 0
c Var 'aux509' order represents '3' with '4501'
-4499 4501 0
c Var 'aux509' direct represents '3' with '4502'
4499 -4501 4502 0
-4502 4501 0
-4502 -4499 0
c Var 'aux509' direct represents '4' with '-4501'
4496 4498 4500 4502 -4501 0
c Encoding variable: aux510 with domain: int(0..4) (representing constraint (aux490 + aux503))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '4503'
c Var 'aux510' direct represents '0' with '4503'
c Var 'aux510' order represents '1' with '4504'
-4503 4504 0
c Var 'aux510' direct represents '1' with '4505'
4503 -4504 4505 0
-4505 4504 0
-4505 -4503 0
c Var 'aux510' order represents '2' with '4506'
-4504 4506 0
c Var 'aux510' direct represents '2' with '4507'
4504 -4506 4507 0
-4507 4506 0
-4507 -4504 0
c Var 'aux510' order represents '3' with '4508'
-4506 4508 0
c Var 'aux510' direct represents '3' with '4509'
4506 -4508 4509 0
-4509 4508 0
-4509 -4506 0
c Var 'aux510' direct represents '4' with '-4508'
4503 4505 4507 4509 -4508 0
c Encoding variable: aux511 with domain: int(0..4) (representing constraint (aux494 + aux489))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '4510'
c Var 'aux511' direct represents '0' with '4510'
c Var 'aux511' order represents '1' with '4511'
-4510 4511 0
c Var 'aux511' direct represents '1' with '4512'
4510 -4511 4512 0
-4512 4511 0
-4512 -4510 0
c Var 'aux511' order represents '2' with '4513'
-4511 4513 0
c Var 'aux511' direct represents '2' with '4514'
4511 -4513 4514 0
-4514 4513 0
-4514 -4511 0
c Var 'aux511' order represents '3' with '4515'
-4513 4515 0
c Var 'aux511' direct represents '3' with '4516'
4513 -4515 4516 0
-4516 4515 0
-4516 -4513 0
c Var 'aux511' direct represents '4' with '-4515'
4510 4512 4514 4516 -4515 0
c Encoding variable: aux512 with domain: int(0..4) (representing constraint (aux492 + aux491))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '4517'
c Var 'aux512' direct represents '0' with '4517'
c Var 'aux512' order represents '1' with '4518'
-4517 4518 0
c Var 'aux512' direct represents '1' with '4519'
4517 -4518 4519 0
-4519 4518 0
-4519 -4517 0
c Var 'aux512' order represents '2' with '4520'
-4518 4520 0
c Var 'aux512' direct represents '2' with '4521'
4518 -4520 4521 0
-4521 4520 0
-4521 -4518 0
c Var 'aux512' order represents '3' with '4522'
-4520 4522 0
c Var 'aux512' direct represents '3' with '4523'
4520 -4522 4523 0
-4523 4522 0
-4523 -4520 0
c Var 'aux512' direct represents '4' with '-4522'
4517 4519 4521 4523 -4522 0
c Encoding variable: aux513 with domain: int(0..4) (representing constraint (aux493 + aux495))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '4524'
c Var 'aux513' direct represents '0' with '4524'
c Var 'aux513' order represents '1' with '4525'
-4524 4525 0
c Var 'aux513' direct represents '1' with '4526'
4524 -4525 4526 0
-4526 4525 0
-4526 -4524 0
c Var 'aux513' order represents '2' with '4527'
-4525 4527 0
c Var 'aux513' direct represents '2' with '4528'
4525 -4527 4528 0
-4528 4527 0
-4528 -4525 0
c Var 'aux513' order represents '3' with '4529'
-4527 4529 0
c Var 'aux513' direct represents '3' with '4530'
4527 -4529 4530 0
-4530 4529 0
-4530 -4527 0
c Var 'aux513' direct represents '4' with '-4529'
4524 4526 4528 4530 -4529 0
c Encoding variable: aux514 with domain: int(0..4) (representing constraint (aux506 + aux502))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '4531'
c Var 'aux514' direct represents '0' with '4531'
c Var 'aux514' order represents '1' with '4532'
-4531 4532 0
c Var 'aux514' direct represents '1' with '4533'
4531 -4532 4533 0
-4533 4532 0
-4533 -4531 0
c Var 'aux514' order represents '2' with '4534'
-4532 4534 0
c Var 'aux514' direct represents '2' with '4535'
4532 -4534 4535 0
-4535 4534 0
-4535 -4532 0
c Var 'aux514' order represents '3' with '4536'
-4534 4536 0
c Var 'aux514' direct represents '3' with '4537'
4534 -4536 4537 0
-4537 4536 0
-4537 -4534 0
c Var 'aux514' direct represents '4' with '-4536'
4531 4533 4535 4537 -4536 0
c Encoding variable: aux515 with domain: int(0..4) (representing constraint (aux499 + aux498))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '4538'
c Var 'aux515' direct represents '0' with '4538'
c Var 'aux515' order represents '1' with '4539'
-4538 4539 0
c Var 'aux515' direct represents '1' with '4540'
4538 -4539 4540 0
-4540 4539 0
-4540 -4538 0
c Var 'aux515' order represents '2' with '4541'
-4539 4541 0
c Var 'aux515' direct represents '2' with '4542'
4539 -4541 4542 0
-4542 4541 0
-4542 -4539 0
c Var 'aux515' order represents '3' with '4543'
-4541 4543 0
c Var 'aux515' direct represents '3' with '4544'
4541 -4543 4544 0
-4544 4543 0
-4544 -4541 0
c Var 'aux515' direct represents '4' with '-4543'
4538 4540 4542 4544 -4543 0
c Encoding variable: aux516 with domain: int(0..4) (representing constraint (aux500 + aux501))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '4545'
c Var 'aux516' direct represents '0' with '4545'
c Var 'aux516' order represents '1' with '4546'
-4545 4546 0
c Var 'aux516' direct represents '1' with '4547'
4545 -4546 4547 0
-4547 4546 0
-4547 -4545 0
c Var 'aux516' order represents '2' with '4548'
-4546 4548 0
c Var 'aux516' direct represents '2' with '4549'
4546 -4548 4549 0
-4549 4548 0
-4549 -4546 0
c Var 'aux516' order represents '3' with '4550'
-4548 4550 0
c Var 'aux516' direct represents '3' with '4551'
4548 -4550 4551 0
-4551 4550 0
-4551 -4548 0
c Var 'aux516' direct represents '4' with '-4550'
4545 4547 4549 4551 -4550 0
c Encoding variable: aux517 with domain: int(0..4) (representing constraint (aux504 + aux507))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '4552'
c Var 'aux517' direct represents '0' with '4552'
c Var 'aux517' order represents '1' with '4553'
-4552 4553 0
c Var 'aux517' direct represents '1' with '4554'
4552 -4553 4554 0
-4554 4553 0
-4554 -4552 0
c Var 'aux517' order represents '2' with '4555'
-4553 4555 0
c Var 'aux517' direct represents '2' with '4556'
4553 -4555 4556 0
-4556 4555 0
-4556 -4553 0
c Var 'aux517' order represents '3' with '4557'
-4555 4557 0
c Var 'aux517' direct represents '3' with '4558'
4555 -4557 4558 0
-4558 4557 0
-4558 -4555 0
c Var 'aux517' direct represents '4' with '-4557'
4552 4554 4556 4558 -4557 0
c Encoding variable: aux518 with domain: int(0..4) (representing constraint (aux505 + aux497))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '4559'
c Var 'aux518' direct represents '0' with '4559'
c Var 'aux518' order represents '1' with '4560'
-4559 4560 0
c Var 'aux518' direct represents '1' with '4561'
4559 -4560 4561 0
-4561 4560 0
-4561 -4559 0
c Var 'aux518' order represents '2' with '4562'
-4560 4562 0
c Var 'aux518' direct represents '2' with '4563'
4560 -4562 4563 0
-4563 4562 0
-4563 -4560 0
c Var 'aux518' order represents '3' with '4564'
-4562 4564 0
c Var 'aux518' direct represents '3' with '4565'
4562 -4564 4565 0
-4565 4564 0
-4565 -4562 0
c Var 'aux518' direct represents '4' with '-4564'
4559 4561 4563 4565 -4564 0
c Encoding variable: aux519 with domain: int(0..8) (representing constraint (aux512 + aux518))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '4566'
c Var 'aux519' direct represents '0' with '4566'
c Var 'aux519' order represents '1' with '4567'
-4566 4567 0
c Var 'aux519' direct represents '1' with '4568'
4566 -4567 4568 0
-4568 4567 0
-4568 -4566 0
c Var 'aux519' order represents '2' with '4569'
-4567 4569 0
c Var 'aux519' direct represents '2' with '4570'
4567 -4569 4570 0
-4570 4569 0
-4570 -4567 0
c Var 'aux519' order represents '3' with '4571'
-4569 4571 0
c Var 'aux519' direct represents '3' with '4572'
4569 -4571 4572 0
-4572 4571 0
-4572 -4569 0
c Var 'aux519' order represents '4' with '4573'
-4571 4573 0
c Var 'aux519' direct represents '4' with '4574'
4571 -4573 4574 0
-4574 4573 0
-4574 -4571 0
c Var 'aux519' order represents '5' with '4575'
-4573 4575 0
c Var 'aux519' direct represents '5' with '4576'
4573 -4575 4576 0
-4576 4575 0
-4576 -4573 0
c Var 'aux519' order represents '6' with '4577'
-4575 4577 0
c Var 'aux519' direct represents '6' with '4578'
4575 -4577 4578 0
-4578 4577 0
-4578 -4575 0
c Var 'aux519' order represents '7' with '4579'
-4577 4579 0
c Var 'aux519' direct represents '7' with '4580'
4577 -4579 4580 0
-4580 4579 0
-4580 -4577 0
c Var 'aux519' direct represents '8' with '-4579'
4566 4568 4570 4572 4574 4576 4578 4580 -4579 0
c Encoding variable: aux520 with domain: int(0..8) (representing constraint (aux511 + aux515))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '4581'
c Var 'aux520' direct represents '0' with '4581'
c Var 'aux520' order represents '1' with '4582'
-4581 4582 0
c Var 'aux520' direct represents '1' with '4583'
4581 -4582 4583 0
-4583 4582 0
-4583 -4581 0
c Var 'aux520' order represents '2' with '4584'
-4582 4584 0
c Var 'aux520' direct represents '2' with '4585'
4582 -4584 4585 0
-4585 4584 0
-4585 -4582 0
c Var 'aux520' order represents '3' with '4586'
-4584 4586 0
c Var 'aux520' direct represents '3' with '4587'
4584 -4586 4587 0
-4587 4586 0
-4587 -4584 0
c Var 'aux520' order represents '4' with '4588'
-4586 4588 0
c Var 'aux520' direct represents '4' with '4589'
4586 -4588 4589 0
-4589 4588 0
-4589 -4586 0
c Var 'aux520' order represents '5' with '4590'
-4588 4590 0
c Var 'aux520' direct represents '5' with '4591'
4588 -4590 4591 0
-4591 4590 0
-4591 -4588 0
c Var 'aux520' order represents '6' with '4592'
-4590 4592 0
c Var 'aux520' direct represents '6' with '4593'
4590 -4592 4593 0
-4593 4592 0
-4593 -4590 0
c Var 'aux520' order represents '7' with '4594'
-4592 4594 0
c Var 'aux520' direct represents '7' with '4595'
4592 -4594 4595 0
-4595 4594 0
-4595 -4592 0
c Var 'aux520' direct represents '8' with '-4594'
4581 4583 4585 4587 4589 4591 4593 4595 -4594 0
c Encoding variable: aux521 with domain: int(0..8) (representing constraint (aux509 + aux510))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '4596'
c Var 'aux521' direct represents '0' with '4596'
c Var 'aux521' order represents '1' with '4597'
-4596 4597 0
c Var 'aux521' direct represents '1' with '4598'
4596 -4597 4598 0
-4598 4597 0
-4598 -4596 0
c Var 'aux521' order represents '2' with '4599'
-4597 4599 0
c Var 'aux521' direct represents '2' with '4600'
4597 -4599 4600 0
-4600 4599 0
-4600 -4597 0
c Var 'aux521' order represents '3' with '4601'
-4599 4601 0
c Var 'aux521' direct represents '3' with '4602'
4599 -4601 4602 0
-4602 4601 0
-4602 -4599 0
c Var 'aux521' order represents '4' with '4603'
-4601 4603 0
c Var 'aux521' direct represents '4' with '4604'
4601 -4603 4604 0
-4604 4603 0
-4604 -4601 0
c Var 'aux521' order represents '5' with '4605'
-4603 4605 0
c Var 'aux521' direct represents '5' with '4606'
4603 -4605 4606 0
-4606 4605 0
-4606 -4603 0
c Var 'aux521' order represents '6' with '4607'
-4605 4607 0
c Var 'aux521' direct represents '6' with '4608'
4605 -4607 4608 0
-4608 4607 0
-4608 -4605 0
c Var 'aux521' order represents '7' with '4609'
-4607 4609 0
c Var 'aux521' direct represents '7' with '4610'
4607 -4609 4610 0
-4610 4609 0
-4610 -4607 0
c Var 'aux521' direct represents '8' with '-4609'
4596 4598 4600 4602 4604 4606 4608 4610 -4609 0
c Encoding variable: aux522 with domain: int(0..8) (representing constraint (aux513 + aux514))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '4611'
c Var 'aux522' direct represents '0' with '4611'
c Var 'aux522' order represents '1' with '4612'
-4611 4612 0
c Var 'aux522' direct represents '1' with '4613'
4611 -4612 4613 0
-4613 4612 0
-4613 -4611 0
c Var 'aux522' order represents '2' with '4614'
-4612 4614 0
c Var 'aux522' direct represents '2' with '4615'
4612 -4614 4615 0
-4615 4614 0
-4615 -4612 0
c Var 'aux522' order represents '3' with '4616'
-4614 4616 0
c Var 'aux522' direct represents '3' with '4617'
4614 -4616 4617 0
-4617 4616 0
-4617 -4614 0
c Var 'aux522' order represents '4' with '4618'
-4616 4618 0
c Var 'aux522' direct represents '4' with '4619'
4616 -4618 4619 0
-4619 4618 0
-4619 -4616 0
c Var 'aux522' order represents '5' with '4620'
-4618 4620 0
c Var 'aux522' direct represents '5' with '4621'
4618 -4620 4621 0
-4621 4620 0
-4621 -4618 0
c Var 'aux522' order represents '6' with '4622'
-4620 4622 0
c Var 'aux522' direct represents '6' with '4623'
4620 -4622 4623 0
-4623 4622 0
-4623 -4620 0
c Var 'aux522' order represents '7' with '4624'
-4622 4624 0
c Var 'aux522' direct represents '7' with '4625'
4622 -4624 4625 0
-4625 4624 0
-4625 -4622 0
c Var 'aux522' direct represents '8' with '-4624'
4611 4613 4615 4617 4619 4621 4623 4625 -4624 0
c Encoding variable: aux523 with domain: int(0..8) (representing constraint (aux516 + aux517))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '4626'
c Var 'aux523' direct represents '0' with '4626'
c Var 'aux523' order represents '1' with '4627'
-4626 4627 0
c Var 'aux523' direct represents '1' with '4628'
4626 -4627 4628 0
-4628 4627 0
-4628 -4626 0
c Var 'aux523' order represents '2' with '4629'
-4627 4629 0
c Var 'aux523' direct represents '2' with '4630'
4627 -4629 4630 0
-4630 4629 0
-4630 -4627 0
c Var 'aux523' order represents '3' with '4631'
-4629 4631 0
c Var 'aux523' direct represents '3' with '4632'
4629 -4631 4632 0
-4632 4631 0
-4632 -4629 0
c Var 'aux523' order represents '4' with '4633'
-4631 4633 0
c Var 'aux523' direct represents '4' with '4634'
4631 -4633 4634 0
-4634 4633 0
-4634 -4631 0
c Var 'aux523' order represents '5' with '4635'
-4633 4635 0
c Var 'aux523' direct represents '5' with '4636'
4633 -4635 4636 0
-4636 4635 0
-4636 -4633 0
c Var 'aux523' order represents '6' with '4637'
-4635 4637 0
c Var 'aux523' direct represents '6' with '4638'
4635 -4637 4638 0
-4638 4637 0
-4638 -4635 0
c Var 'aux523' order represents '7' with '4639'
-4637 4639 0
c Var 'aux523' direct represents '7' with '4640'
4637 -4639 4640 0
-4640 4639 0
-4640 -4637 0
c Var 'aux523' direct represents '8' with '-4639'
4626 4628 4630 4632 4634 4636 4638 4640 -4639 0
c Encoding variable: aux524 with domain: int(0..16) (representing constraint (aux520 + aux523))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '4641'
c Var 'aux524' direct represents '0' with '4641'
c Var 'aux524' order represents '1' with '4642'
-4641 4642 0
c Var 'aux524' direct represents '1' with '4643'
4641 -4642 4643 0
-4643 4642 0
-4643 -4641 0
c Var 'aux524' order represents '2' with '4644'
-4642 4644 0
c Var 'aux524' direct represents '2' with '4645'
4642 -4644 4645 0
-4645 4644 0
-4645 -4642 0
c Var 'aux524' order represents '3' with '4646'
-4644 4646 0
c Var 'aux524' direct represents '3' with '4647'
4644 -4646 4647 0
-4647 4646 0
-4647 -4644 0
c Var 'aux524' order represents '4' with '4648'
-4646 4648 0
c Var 'aux524' direct represents '4' with '4649'
4646 -4648 4649 0
-4649 4648 0
-4649 -4646 0
c Var 'aux524' order represents '5' with '4650'
-4648 4650 0
c Var 'aux524' direct represents '5' with '4651'
4648 -4650 4651 0
-4651 4650 0
-4651 -4648 0
c Var 'aux524' order represents '6' with '4652'
-4650 4652 0
c Var 'aux524' direct represents '6' with '4653'
4650 -4652 4653 0
-4653 4652 0
-4653 -4650 0
c Var 'aux524' order represents '7' with '4654'
-4652 4654 0
c Var 'aux524' direct represents '7' with '4655'
4652 -4654 4655 0
-4655 4654 0
-4655 -4652 0
c Var 'aux524' order represents '8' with '4656'
-4654 4656 0
c Var 'aux524' direct represents '8' with '4657'
4654 -4656 4657 0
-4657 4656 0
-4657 -4654 0
c Var 'aux524' order represents '9' with '4658'
-4656 4658 0
c Var 'aux524' direct represents '9' with '4659'
4656 -4658 4659 0
-4659 4658 0
-4659 -4656 0
c Var 'aux524' order represents '10' with '4660'
-4658 4660 0
c Var 'aux524' direct represents '10' with '4661'
4658 -4660 4661 0
-4661 4660 0
-4661 -4658 0
c Var 'aux524' order represents '11' with '4662'
-4660 4662 0
c Var 'aux524' direct represents '11' with '4663'
4660 -4662 4663 0
-4663 4662 0
-4663 -4660 0
c Var 'aux524' order represents '12' with '4664'
-4662 4664 0
c Var 'aux524' direct represents '12' with '4665'
4662 -4664 4665 0
-4665 4664 0
-4665 -4662 0
c Var 'aux524' order represents '13' with '4666'
-4664 4666 0
c Var 'aux524' direct represents '13' with '4667'
4664 -4666 4667 0
-4667 4666 0
-4667 -4664 0
c Var 'aux524' order represents '14' with '4668'
-4666 4668 0
c Var 'aux524' direct represents '14' with '4669'
4666 -4668 4669 0
-4669 4668 0
-4669 -4666 0
c Var 'aux524' order represents '15' with '4670'
-4668 4670 0
c Var 'aux524' direct represents '15' with '4671'
4668 -4670 4671 0
-4671 4670 0
-4671 -4668 0
c Var 'aux524' direct represents '16' with '-4670'
4641 4643 4645 4647 4649 4651 4653 4655 4657 4659 4661 4663 4665 4667 4669 4671 -4670 0
c Encoding variable: aux525 with domain: int(0..16) (representing constraint (aux519 + aux521))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '4672'
c Var 'aux525' direct represents '0' with '4672'
c Var 'aux525' order represents '1' with '4673'
-4672 4673 0
c Var 'aux525' direct represents '1' with '4674'
4672 -4673 4674 0
-4674 4673 0
-4674 -4672 0
c Var 'aux525' order represents '2' with '4675'
-4673 4675 0
c Var 'aux525' direct represents '2' with '4676'
4673 -4675 4676 0
-4676 4675 0
-4676 -4673 0
c Var 'aux525' order represents '3' with '4677'
-4675 4677 0
c Var 'aux525' direct represents '3' with '4678'
4675 -4677 4678 0
-4678 4677 0
-4678 -4675 0
c Var 'aux525' order represents '4' with '4679'
-4677 4679 0
c Var 'aux525' direct represents '4' with '4680'
4677 -4679 4680 0
-4680 4679 0
-4680 -4677 0
c Var 'aux525' order represents '5' with '4681'
-4679 4681 0
c Var 'aux525' direct represents '5' with '4682'
4679 -4681 4682 0
-4682 4681 0
-4682 -4679 0
c Var 'aux525' order represents '6' with '4683'
-4681 4683 0
c Var 'aux525' direct represents '6' with '4684'
4681 -4683 4684 0
-4684 4683 0
-4684 -4681 0
c Var 'aux525' order represents '7' with '4685'
-4683 4685 0
c Var 'aux525' direct represents '7' with '4686'
4683 -4685 4686 0
-4686 4685 0
-4686 -4683 0
c Var 'aux525' order represents '8' with '4687'
-4685 4687 0
c Var 'aux525' direct represents '8' with '4688'
4685 -4687 4688 0
-4688 4687 0
-4688 -4685 0
c Var 'aux525' order represents '9' with '4689'
-4687 4689 0
c Var 'aux525' direct represents '9' with '4690'
4687 -4689 4690 0
-4690 4689 0
-4690 -4687 0
c Var 'aux525' order represents '10' with '4691'
-4689 4691 0
c Var 'aux525' direct represents '10' with '4692'
4689 -4691 4692 0
-4692 4691 0
-4692 -4689 0
c Var 'aux525' order represents '11' with '4693'
-4691 4693 0
c Var 'aux525' direct represents '11' with '4694'
4691 -4693 4694 0
-4694 4693 0
-4694 -4691 0
c Var 'aux525' order represents '12' with '4695'
-4693 4695 0
c Var 'aux525' direct represents '12' with '4696'
4693 -4695 4696 0
-4696 4695 0
-4696 -4693 0
c Var 'aux525' order represents '13' with '4697'
-4695 4697 0
c Var 'aux525' direct represents '13' with '4698'
4695 -4697 4698 0
-4698 4697 0
-4698 -4695 0
c Var 'aux525' order represents '14' with '4699'
-4697 4699 0
c Var 'aux525' direct represents '14' with '4700'
4697 -4699 4700 0
-4700 4699 0
-4700 -4697 0
c Var 'aux525' order represents '15' with '4701'
-4699 4701 0
c Var 'aux525' direct represents '15' with '4702'
4699 -4701 4702 0
-4702 4701 0
-4702 -4699 0
c Var 'aux525' direct represents '16' with '-4701'
4672 4674 4676 4678 4680 4682 4684 4686 4688 4690 4692 4694 4696 4698 4700 4702 -4701 0
c Encoding variable: aux526 with domain: int(0..2) (representing constraint ((5=grid_00005_00000) + (grid_00000_00006=5)))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '4703'
c Var 'aux526' direct represents '0' with '4703'
c Var 'aux526' order represents '1' with '4704'
-4703 4704 0
c Var 'aux526' direct represents '1' with '4705'
4703 -4704 4705 0
-4705 4704 0
-4705 -4703 0
c Var 'aux526' direct represents '2' with '-4704'
4703 4705 -4704 0
c Encoding variable: aux527 with domain: int(0..2) (representing constraint ((grid_00000_00005=5) + (5=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '4706'
c Var 'aux527' direct represents '0' with '4706'
c Var 'aux527' order represents '1' with '4707'
-4706 4707 0
c Var 'aux527' direct represents '1' with '4708'
4706 -4707 4708 0
-4708 4707 0
-4708 -4706 0
c Var 'aux527' direct represents '2' with '-4707'
4706 4708 -4707 0
c Encoding variable: aux528 with domain: int(0..2) (representing constraint ((grid_00000_00004=5) + (5=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '4709'
c Var 'aux528' direct represents '0' with '4709'
c Var 'aux528' order represents '1' with '4710'
-4709 4710 0
c Var 'aux528' direct represents '1' with '4711'
4709 -4710 4711 0
-4711 4710 0
-4711 -4709 0
c Var 'aux528' direct represents '2' with '-4710'
4709 4711 -4710 0
c Encoding variable: aux529 with domain: int(0..2) (representing constraint ((grid_00000_00003=5) + (grid_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '4712'
c Var 'aux529' direct represents '0' with '4712'
c Var 'aux529' order represents '1' with '4713'
-4712 4713 0
c Var 'aux529' direct represents '1' with '4714'
4712 -4713 4714 0
-4714 4713 0
-4714 -4712 0
c Var 'aux529' direct represents '2' with '-4713'
4712 4714 -4713 0
c Encoding variable: aux530 with domain: int(0..2) (representing constraint ((grid_00000_00002=5) + (5=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '4715'
c Var 'aux530' direct represents '0' with '4715'
c Var 'aux530' order represents '1' with '4716'
-4715 4716 0
c Var 'aux530' direct represents '1' with '4717'
4715 -4716 4717 0
-4717 4716 0
-4717 -4715 0
c Var 'aux530' direct represents '2' with '-4716'
4715 4717 -4716 0
c Encoding variable: aux531 with domain: int(0..2) (representing constraint ((grid_00000_00001=5) + (grid_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '4718'
c Var 'aux531' direct represents '0' with '4718'
c Var 'aux531' order represents '1' with '4719'
-4718 4719 0
c Var 'aux531' direct represents '1' with '4720'
4718 -4719 4720 0
-4720 4719 0
-4720 -4718 0
c Var 'aux531' direct represents '2' with '-4719'
4718 4720 -4719 0
c Encoding variable: aux532 with domain: int(0..2) (representing constraint ((grid_00004_00005=5) + (5=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '4721'
c Var 'aux532' direct represents '0' with '4721'
c Var 'aux532' order represents '1' with '4722'
-4721 4722 0
c Var 'aux532' direct represents '1' with '4723'
4721 -4722 4723 0
-4723 4722 0
-4723 -4721 0
c Var 'aux532' direct represents '2' with '-4722'
4721 4723 -4722 0
c Encoding variable: aux533 with domain: int(0..2) (representing constraint ((grid_00004_00006=5) + (grid_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '4724'
c Var 'aux533' direct represents '0' with '4724'
c Var 'aux533' order represents '1' with '4725'
-4724 4725 0
c Var 'aux533' direct represents '1' with '4726'
4724 -4725 4726 0
-4726 4725 0
-4726 -4724 0
c Var 'aux533' direct represents '2' with '-4725'
4724 4726 -4725 0
c Encoding variable: aux534 with domain: int(0..2) (representing constraint ((5=grid_00006_00004) + (5=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '4727'
c Var 'aux534' direct represents '0' with '4727'
c Var 'aux534' order represents '1' with '4728'
-4727 4728 0
c Var 'aux534' direct represents '1' with '4729'
4727 -4728 4729 0
-4729 4728 0
-4729 -4727 0
c Var 'aux534' direct represents '2' with '-4728'
4727 4729 -4728 0
c Encoding variable: aux535 with domain: int(0..2) (representing constraint ((grid_00004_00003=5) + (grid_00003_00000=5)))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '4730'
c Var 'aux535' direct represents '0' with '4730'
c Var 'aux535' order represents '1' with '4731'
-4730 4731 0
c Var 'aux535' direct represents '1' with '4732'
4730 -4731 4732 0
-4732 4731 0
-4732 -4730 0
c Var 'aux535' direct represents '2' with '-4731'
4730 4732 -4731 0
c Encoding variable: aux536 with domain: int(0..2) (representing constraint ((grid_00004_00002=5) + (5=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '4733'
c Var 'aux536' direct represents '0' with '4733'
c Var 'aux536' order represents '1' with '4734'
-4733 4734 0
c Var 'aux536' direct represents '1' with '4735'
4733 -4734 4735 0
-4735 4734 0
-4735 -4733 0
c Var 'aux536' direct represents '2' with '-4734'
4733 4735 -4734 0
c Encoding variable: aux537 with domain: int(0..2) (representing constraint ((grid_00004_00001=5) + (5=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '4736'
c Var 'aux537' direct represents '0' with '4736'
c Var 'aux537' order represents '1' with '4737'
-4736 4737 0
c Var 'aux537' direct represents '1' with '4738'
4736 -4737 4738 0
-4738 4737 0
-4738 -4736 0
c Var 'aux537' direct represents '2' with '-4737'
4736 4738 -4737 0
c Encoding variable: aux538 with domain: int(0..2) (representing constraint ((grid_00004_00000=5) + (5=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '4739'
c Var 'aux538' direct represents '0' with '4739'
c Var 'aux538' order represents '1' with '4740'
-4739 4740 0
c Var 'aux538' direct represents '1' with '4741'
4739 -4740 4741 0
-4741 4740 0
-4741 -4739 0
c Var 'aux538' direct represents '2' with '-4740'
4739 4741 -4740 0
c Encoding variable: aux539 with domain: int(0..2) (representing constraint ((5=grid_00002_00006) + (5=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '4742'
c Var 'aux539' direct represents '0' with '4742'
c Var 'aux539' order represents '1' with '4743'
-4742 4743 0
c Var 'aux539' direct represents '1' with '4744'
4742 -4743 4744 0
-4744 4743 0
-4744 -4742 0
c Var 'aux539' direct represents '2' with '-4743'
4742 4744 -4743 0
c Encoding variable: aux540 with domain: int(0..2) (representing constraint ((5=grid_00002_00005) + (5=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '4745'
c Var 'aux540' direct represents '0' with '4745'
c Var 'aux540' order represents '1' with '4746'
-4745 4746 0
c Var 'aux540' direct represents '1' with '4747'
4745 -4746 4747 0
-4747 4746 0
-4747 -4745 0
c Var 'aux540' direct represents '2' with '-4746'
4745 4747 -4746 0
c Encoding variable: aux541 with domain: int(0..2) (representing constraint ((5=grid_00002_00004) + (5=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '4748'
c Var 'aux541' direct represents '0' with '4748'
c Var 'aux541' order represents '1' with '4749'
-4748 4749 0
c Var 'aux541' direct represents '1' with '4750'
4748 -4749 4750 0
-4750 4749 0
-4750 -4748 0
c Var 'aux541' direct represents '2' with '-4749'
4748 4750 -4749 0
c Encoding variable: aux542 with domain: int(0..2) (representing constraint ((5=grid_00002_00003) + (5=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '4751'
c Var 'aux542' direct represents '0' with '4751'
c Var 'aux542' order represents '1' with '4752'
-4751 4752 0
c Var 'aux542' direct represents '1' with '4753'
4751 -4752 4753 0
-4753 4752 0
-4753 -4751 0
c Var 'aux542' direct represents '2' with '-4752'
4751 4753 -4752 0
c Encoding variable: aux543 with domain: int(0..2) (representing constraint ((grid_00003_00002=5) + (5=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '4754'
c Var 'aux543' direct represents '0' with '4754'
c Var 'aux543' order represents '1' with '4755'
-4754 4755 0
c Var 'aux543' direct represents '1' with '4756'
4754 -4755 4756 0
-4756 4755 0
-4756 -4754 0
c Var 'aux543' direct represents '2' with '-4755'
4754 4756 -4755 0
c Encoding variable: aux544 with domain: int(0..2) (representing constraint ((5=grid_00001_00005) + (grid_00003_00003=5)))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '4757'
c Var 'aux544' direct represents '0' with '4757'
c Var 'aux544' order represents '1' with '4758'
-4757 4758 0
c Var 'aux544' direct represents '1' with '4759'
4757 -4758 4759 0
-4759 4758 0
-4759 -4757 0
c Var 'aux544' direct represents '2' with '-4758'
4757 4759 -4758 0
c Encoding variable: aux545 with domain: int(0..2) (representing constraint ((5=grid_00006_00000) + (5=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '4760'
c Var 'aux545' direct represents '0' with '4760'
c Var 'aux545' order represents '1' with '4761'
-4760 4761 0
c Var 'aux545' direct represents '1' with '4762'
4760 -4761 4762 0
-4762 4761 0
-4762 -4760 0
c Var 'aux545' direct represents '2' with '-4761'
4760 4762 -4761 0
c Encoding variable: aux546 with domain: int(0..4) (representing constraint (aux533 + aux545))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '4763'
c Var 'aux546' direct represents '0' with '4763'
c Var 'aux546' order represents '1' with '4764'
-4763 4764 0
c Var 'aux546' direct represents '1' with '4765'
4763 -4764 4765 0
-4765 4764 0
-4765 -4763 0
c Var 'aux546' order represents '2' with '4766'
-4764 4766 0
c Var 'aux546' direct represents '2' with '4767'
4764 -4766 4767 0
-4767 4766 0
-4767 -4764 0
c Var 'aux546' order represents '3' with '4768'
-4766 4768 0
c Var 'aux546' direct represents '3' with '4769'
4766 -4768 4769 0
-4769 4768 0
-4769 -4766 0
c Var 'aux546' direct represents '4' with '-4768'
4763 4765 4767 4769 -4768 0
c Encoding variable: aux547 with domain: int(0..4) (representing constraint (aux527 + aux540))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '4770'
c Var 'aux547' direct represents '0' with '4770'
c Var 'aux547' order represents '1' with '4771'
-4770 4771 0
c Var 'aux547' direct represents '1' with '4772'
4770 -4771 4772 0
-4772 4771 0
-4772 -4770 0
c Var 'aux547' order represents '2' with '4773'
-4771 4773 0
c Var 'aux547' direct represents '2' with '4774'
4771 -4773 4774 0
-4774 4773 0
-4774 -4771 0
c Var 'aux547' order represents '3' with '4775'
-4773 4775 0
c Var 'aux547' direct represents '3' with '4776'
4773 -4775 4776 0
-4776 4775 0
-4776 -4773 0
c Var 'aux547' direct represents '4' with '-4775'
4770 4772 4774 4776 -4775 0
c Encoding variable: aux548 with domain: int(0..4) (representing constraint (aux531 + aux526))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '4777'
c Var 'aux548' direct represents '0' with '4777'
c Var 'aux548' order represents '1' with '4778'
-4777 4778 0
c Var 'aux548' direct represents '1' with '4779'
4777 -4778 4779 0
-4779 4778 0
-4779 -4777 0
c Var 'aux548' order represents '2' with '4780'
-4778 4780 0
c Var 'aux548' direct represents '2' with '4781'
4778 -4780 4781 0
-4781 4780 0
-4781 -4778 0
c Var 'aux548' order represents '3' with '4782'
-4780 4782 0
c Var 'aux548' direct represents '3' with '4783'
4780 -4782 4783 0
-4783 4782 0
-4783 -4780 0
c Var 'aux548' direct represents '4' with '-4782'
4777 4779 4781 4783 -4782 0
c Encoding variable: aux549 with domain: int(0..4) (representing constraint (aux529 + aux528))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '4784'
c Var 'aux549' direct represents '0' with '4784'
c Var 'aux549' order represents '1' with '4785'
-4784 4785 0
c Var 'aux549' direct represents '1' with '4786'
4784 -4785 4786 0
-4786 4785 0
-4786 -4784 0
c Var 'aux549' order represents '2' with '4787'
-4785 4787 0
c Var 'aux549' direct represents '2' with '4788'
4785 -4787 4788 0
-4788 4787 0
-4788 -4785 0
c Var 'aux549' order represents '3' with '4789'
-4787 4789 0
c Var 'aux549' direct represents '3' with '4790'
4787 -4789 4790 0
-4790 4789 0
-4790 -4787 0
c Var 'aux549' direct represents '4' with '-4789'
4784 4786 4788 4790 -4789 0
c Encoding variable: aux550 with domain: int(0..4) (representing constraint (aux530 + aux532))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '4791'
c Var 'aux550' direct represents '0' with '4791'
c Var 'aux550' order represents '1' with '4792'
-4791 4792 0
c Var 'aux550' direct represents '1' with '4793'
4791 -4792 4793 0
-4793 4792 0
-4793 -4791 0
c Var 'aux550' order represents '2' with '4794'
-4792 4794 0
c Var 'aux550' direct represents '2' with '4795'
4792 -4794 4795 0
-4795 4794 0
-4795 -4792 0
c Var 'aux550' order represents '3' with '4796'
-4794 4796 0
c Var 'aux550' direct represents '3' with '4797'
4794 -4796 4797 0
-4797 4796 0
-4797 -4794 0
c Var 'aux550' direct represents '4' with '-4796'
4791 4793 4795 4797 -4796 0
c Encoding variable: aux551 with domain: int(0..4) (representing constraint (aux543 + aux539))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '4798'
c Var 'aux551' direct represents '0' with '4798'
c Var 'aux551' order represents '1' with '4799'
-4798 4799 0
c Var 'aux551' direct represents '1' with '4800'
4798 -4799 4800 0
-4800 4799 0
-4800 -4798 0
c Var 'aux551' order represents '2' with '4801'
-4799 4801 0
c Var 'aux551' direct represents '2' with '4802'
4799 -4801 4802 0
-4802 4801 0
-4802 -4799 0
c Var 'aux551' order represents '3' with '4803'
-4801 4803 0
c Var 'aux551' direct represents '3' with '4804'
4801 -4803 4804 0
-4804 4803 0
-4804 -4801 0
c Var 'aux551' direct represents '4' with '-4803'
4798 4800 4802 4804 -4803 0
c Encoding variable: aux552 with domain: int(0..4) (representing constraint (aux536 + aux535))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '4805'
c Var 'aux552' direct represents '0' with '4805'
c Var 'aux552' order represents '1' with '4806'
-4805 4806 0
c Var 'aux552' direct represents '1' with '4807'
4805 -4806 4807 0
-4807 4806 0
-4807 -4805 0
c Var 'aux552' order represents '2' with '4808'
-4806 4808 0
c Var 'aux552' direct represents '2' with '4809'
4806 -4808 4809 0
-4809 4808 0
-4809 -4806 0
c Var 'aux552' order represents '3' with '4810'
-4808 4810 0
c Var 'aux552' direct represents '3' with '4811'
4808 -4810 4811 0
-4811 4810 0
-4811 -4808 0
c Var 'aux552' direct represents '4' with '-4810'
4805 4807 4809 4811 -4810 0
c Encoding variable: aux553 with domain: int(0..4) (representing constraint (aux537 + aux538))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '4812'
c Var 'aux553' direct represents '0' with '4812'
c Var 'aux553' order represents '1' with '4813'
-4812 4813 0
c Var 'aux553' direct represents '1' with '4814'
4812 -4813 4814 0
-4814 4813 0
-4814 -4812 0
c Var 'aux553' order represents '2' with '4815'
-4813 4815 0
c Var 'aux553' direct represents '2' with '4816'
4813 -4815 4816 0
-4816 4815 0
-4816 -4813 0
c Var 'aux553' order represents '3' with '4817'
-4815 4817 0
c Var 'aux553' direct represents '3' with '4818'
4815 -4817 4818 0
-4818 4817 0
-4818 -4815 0
c Var 'aux553' direct represents '4' with '-4817'
4812 4814 4816 4818 -4817 0
c Encoding variable: aux554 with domain: int(0..4) (representing constraint (aux541 + aux544))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '4819'
c Var 'aux554' direct represents '0' with '4819'
c Var 'aux554' order represents '1' with '4820'
-4819 4820 0
c Var 'aux554' direct represents '1' with '4821'
4819 -4820 4821 0
-4821 4820 0
-4821 -4819 0
c Var 'aux554' order represents '2' with '4822'
-4820 4822 0
c Var 'aux554' direct represents '2' with '4823'
4820 -4822 4823 0
-4823 4822 0
-4823 -4820 0
c Var 'aux554' order represents '3' with '4824'
-4822 4824 0
c Var 'aux554' direct represents '3' with '4825'
4822 -4824 4825 0
-4825 4824 0
-4825 -4822 0
c Var 'aux554' direct represents '4' with '-4824'
4819 4821 4823 4825 -4824 0
c Encoding variable: aux555 with domain: int(0..4) (representing constraint (aux542 + aux534))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '4826'
c Var 'aux555' direct represents '0' with '4826'
c Var 'aux555' order represents '1' with '4827'
-4826 4827 0
c Var 'aux555' direct represents '1' with '4828'
4826 -4827 4828 0
-4828 4827 0
-4828 -4826 0
c Var 'aux555' order represents '2' with '4829'
-4827 4829 0
c Var 'aux555' direct represents '2' with '4830'
4827 -4829 4830 0
-4830 4829 0
-4830 -4827 0
c Var 'aux555' order represents '3' with '4831'
-4829 4831 0
c Var 'aux555' direct represents '3' with '4832'
4829 -4831 4832 0
-4832 4831 0
-4832 -4829 0
c Var 'aux555' direct represents '4' with '-4831'
4826 4828 4830 4832 -4831 0
c Encoding variable: aux556 with domain: int(0..8) (representing constraint (aux549 + aux555))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '4833'
c Var 'aux556' direct represents '0' with '4833'
c Var 'aux556' order represents '1' with '4834'
-4833 4834 0
c Var 'aux556' direct represents '1' with '4835'
4833 -4834 4835 0
-4835 4834 0
-4835 -4833 0
c Var 'aux556' order represents '2' with '4836'
-4834 4836 0
c Var 'aux556' direct represents '2' with '4837'
4834 -4836 4837 0
-4837 4836 0
-4837 -4834 0
c Var 'aux556' order represents '3' with '4838'
-4836 4838 0
c Var 'aux556' direct represents '3' with '4839'
4836 -4838 4839 0
-4839 4838 0
-4839 -4836 0
c Var 'aux556' order represents '4' with '4840'
-4838 4840 0
c Var 'aux556' direct represents '4' with '4841'
4838 -4840 4841 0
-4841 4840 0
-4841 -4838 0
c Var 'aux556' order represents '5' with '4842'
-4840 4842 0
c Var 'aux556' direct represents '5' with '4843'
4840 -4842 4843 0
-4843 4842 0
-4843 -4840 0
c Var 'aux556' order represents '6' with '4844'
-4842 4844 0
c Var 'aux556' direct represents '6' with '4845'
4842 -4844 4845 0
-4845 4844 0
-4845 -4842 0
c Var 'aux556' order represents '7' with '4846'
-4844 4846 0
c Var 'aux556' direct represents '7' with '4847'
4844 -4846 4847 0
-4847 4846 0
-4847 -4844 0
c Var 'aux556' direct represents '8' with '-4846'
4833 4835 4837 4839 4841 4843 4845 4847 -4846 0
c Encoding variable: aux557 with domain: int(0..8) (representing constraint (aux548 + aux552))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '4848'
c Var 'aux557' direct represents '0' with '4848'
c Var 'aux557' order represents '1' with '4849'
-4848 4849 0
c Var 'aux557' direct represents '1' with '4850'
4848 -4849 4850 0
-4850 4849 0
-4850 -4848 0
c Var 'aux557' order represents '2' with '4851'
-4849 4851 0
c Var 'aux557' direct represents '2' with '4852'
4849 -4851 4852 0
-4852 4851 0
-4852 -4849 0
c Var 'aux557' order represents '3' with '4853'
-4851 4853 0
c Var 'aux557' direct represents '3' with '4854'
4851 -4853 4854 0
-4854 4853 0
-4854 -4851 0
c Var 'aux557' order represents '4' with '4855'
-4853 4855 0
c Var 'aux557' direct represents '4' with '4856'
4853 -4855 4856 0
-4856 4855 0
-4856 -4853 0
c Var 'aux557' order represents '5' with '4857'
-4855 4857 0
c Var 'aux557' direct represents '5' with '4858'
4855 -4857 4858 0
-4858 4857 0
-4858 -4855 0
c Var 'aux557' order represents '6' with '4859'
-4857 4859 0
c Var 'aux557' direct represents '6' with '4860'
4857 -4859 4860 0
-4860 4859 0
-4860 -4857 0
c Var 'aux557' order represents '7' with '4861'
-4859 4861 0
c Var 'aux557' direct represents '7' with '4862'
4859 -4861 4862 0
-4862 4861 0
-4862 -4859 0
c Var 'aux557' direct represents '8' with '-4861'
4848 4850 4852 4854 4856 4858 4860 4862 -4861 0
c Encoding variable: aux558 with domain: int(0..8) (representing constraint (aux546 + aux547))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '4863'
c Var 'aux558' direct represents '0' with '4863'
c Var 'aux558' order represents '1' with '4864'
-4863 4864 0
c Var 'aux558' direct represents '1' with '4865'
4863 -4864 4865 0
-4865 4864 0
-4865 -4863 0
c Var 'aux558' order represents '2' with '4866'
-4864 4866 0
c Var 'aux558' direct represents '2' with '4867'
4864 -4866 4867 0
-4867 4866 0
-4867 -4864 0
c Var 'aux558' order represents '3' with '4868'
-4866 4868 0
c Var 'aux558' direct represents '3' with '4869'
4866 -4868 4869 0
-4869 4868 0
-4869 -4866 0
c Var 'aux558' order represents '4' with '4870'
-4868 4870 0
c Var 'aux558' direct represents '4' with '4871'
4868 -4870 4871 0
-4871 4870 0
-4871 -4868 0
c Var 'aux558' order represents '5' with '4872'
-4870 4872 0
c Var 'aux558' direct represents '5' with '4873'
4870 -4872 4873 0
-4873 4872 0
-4873 -4870 0
c Var 'aux558' order represents '6' with '4874'
-4872 4874 0
c Var 'aux558' direct represents '6' with '4875'
4872 -4874 4875 0
-4875 4874 0
-4875 -4872 0
c Var 'aux558' order represents '7' with '4876'
-4874 4876 0
c Var 'aux558' direct represents '7' with '4877'
4874 -4876 4877 0
-4877 4876 0
-4877 -4874 0
c Var 'aux558' direct represents '8' with '-4876'
4863 4865 4867 4869 4871 4873 4875 4877 -4876 0
c Encoding variable: aux559 with domain: int(0..8) (representing constraint (aux550 + aux551))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '4878'
c Var 'aux559' direct represents '0' with '4878'
c Var 'aux559' order represents '1' with '4879'
-4878 4879 0
c Var 'aux559' direct represents '1' with '4880'
4878 -4879 4880 0
-4880 4879 0
-4880 -4878 0
c Var 'aux559' order represents '2' with '4881'
-4879 4881 0
c Var 'aux559' direct represents '2' with '4882'
4879 -4881 4882 0
-4882 4881 0
-4882 -4879 0
c Var 'aux559' order represents '3' with '4883'
-4881 4883 0
c Var 'aux559' direct represents '3' with '4884'
4881 -4883 4884 0
-4884 4883 0
-4884 -4881 0
c Var 'aux559' order represents '4' with '4885'
-4883 4885 0
c Var 'aux559' direct represents '4' with '4886'
4883 -4885 4886 0
-4886 4885 0
-4886 -4883 0
c Var 'aux559' order represents '5' with '4887'
-4885 4887 0
c Var 'aux559' direct represents '5' with '4888'
4885 -4887 4888 0
-4888 4887 0
-4888 -4885 0
c Var 'aux559' order represents '6' with '4889'
-4887 4889 0
c Var 'aux559' direct represents '6' with '4890'
4887 -4889 4890 0
-4890 4889 0
-4890 -4887 0
c Var 'aux559' order represents '7' with '4891'
-4889 4891 0
c Var 'aux559' direct represents '7' with '4892'
4889 -4891 4892 0
-4892 4891 0
-4892 -4889 0
c Var 'aux559' direct represents '8' with '-4891'
4878 4880 4882 4884 4886 4888 4890 4892 -4891 0
c Encoding variable: aux560 with domain: int(0..8) (representing constraint (aux553 + aux554))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '4893'
c Var 'aux560' direct represents '0' with '4893'
c Var 'aux560' order represents '1' with '4894'
-4893 4894 0
c Var 'aux560' direct represents '1' with '4895'
4893 -4894 4895 0
-4895 4894 0
-4895 -4893 0
c Var 'aux560' order represents '2' with '4896'
-4894 4896 0
c Var 'aux560' direct represents '2' with '4897'
4894 -4896 4897 0
-4897 4896 0
-4897 -4894 0
c Var 'aux560' order represents '3' with '4898'
-4896 4898 0
c Var 'aux560' direct represents '3' with '4899'
4896 -4898 4899 0
-4899 4898 0
-4899 -4896 0
c Var 'aux560' order represents '4' with '4900'
-4898 4900 0
c Var 'aux560' direct represents '4' with '4901'
4898 -4900 4901 0
-4901 4900 0
-4901 -4898 0
c Var 'aux560' order represents '5' with '4902'
-4900 4902 0
c Var 'aux560' direct represents '5' with '4903'
4900 -4902 4903 0
-4903 4902 0
-4903 -4900 0
c Var 'aux560' order represents '6' with '4904'
-4902 4904 0
c Var 'aux560' direct represents '6' with '4905'
4902 -4904 4905 0
-4905 4904 0
-4905 -4902 0
c Var 'aux560' order represents '7' with '4906'
-4904 4906 0
c Var 'aux560' direct represents '7' with '4907'
4904 -4906 4907 0
-4907 4906 0
-4907 -4904 0
c Var 'aux560' direct represents '8' with '-4906'
4893 4895 4897 4899 4901 4903 4905 4907 -4906 0
c Encoding variable: aux561 with domain: int(0..16) (representing constraint (aux557 + aux560))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '4908'
c Var 'aux561' direct represents '0' with '4908'
c Var 'aux561' order represents '1' with '4909'
-4908 4909 0
c Var 'aux561' direct represents '1' with '4910'
4908 -4909 4910 0
-4910 4909 0
-4910 -4908 0
c Var 'aux561' order represents '2' with '4911'
-4909 4911 0
c Var 'aux561' direct represents '2' with '4912'
4909 -4911 4912 0
-4912 4911 0
-4912 -4909 0
c Var 'aux561' order represents '3' with '4913'
-4911 4913 0
c Var 'aux561' direct represents '3' with '4914'
4911 -4913 4914 0
-4914 4913 0
-4914 -4911 0
c Var 'aux561' order represents '4' with '4915'
-4913 4915 0
c Var 'aux561' direct represents '4' with '4916'
4913 -4915 4916 0
-4916 4915 0
-4916 -4913 0
c Var 'aux561' order represents '5' with '4917'
-4915 4917 0
c Var 'aux561' direct represents '5' with '4918'
4915 -4917 4918 0
-4918 4917 0
-4918 -4915 0
c Var 'aux561' order represents '6' with '4919'
-4917 4919 0
c Var 'aux561' direct represents '6' with '4920'
4917 -4919 4920 0
-4920 4919 0
-4920 -4917 0
c Var 'aux561' order represents '7' with '4921'
-4919 4921 0
c Var 'aux561' direct represents '7' with '4922'
4919 -4921 4922 0
-4922 4921 0
-4922 -4919 0
c Var 'aux561' order represents '8' with '4923'
-4921 4923 0
c Var 'aux561' direct represents '8' with '4924'
4921 -4923 4924 0
-4924 4923 0
-4924 -4921 0
c Var 'aux561' order represents '9' with '4925'
-4923 4925 0
c Var 'aux561' direct represents '9' with '4926'
4923 -4925 4926 0
-4926 4925 0
-4926 -4923 0
c Var 'aux561' order represents '10' with '4927'
-4925 4927 0
c Var 'aux561' direct represents '10' with '4928'
4925 -4927 4928 0
-4928 4927 0
-4928 -4925 0
c Var 'aux561' order represents '11' with '4929'
-4927 4929 0
c Var 'aux561' direct represents '11' with '4930'
4927 -4929 4930 0
-4930 4929 0
-4930 -4927 0
c Var 'aux561' order represents '12' with '4931'
-4929 4931 0
c Var 'aux561' direct represents '12' with '4932'
4929 -4931 4932 0
-4932 4931 0
-4932 -4929 0
c Var 'aux561' order represents '13' with '4933'
-4931 4933 0
c Var 'aux561' direct represents '13' with '4934'
4931 -4933 4934 0
-4934 4933 0
-4934 -4931 0
c Var 'aux561' order represents '14' with '4935'
-4933 4935 0
c Var 'aux561' direct represents '14' with '4936'
4933 -4935 4936 0
-4936 4935 0
-4936 -4933 0
c Var 'aux561' order represents '15' with '4937'
-4935 4937 0
c Var 'aux561' direct represents '15' with '4938'
4935 -4937 4938 0
-4938 4937 0
-4938 -4935 0
c Var 'aux561' direct represents '16' with '-4937'
4908 4910 4912 4914 4916 4918 4920 4922 4924 4926 4928 4930 4932 4934 4936 4938 -4937 0
c Encoding variable: aux562 with domain: int(0..16) (representing constraint (aux556 + aux558))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '4939'
c Var 'aux562' direct represents '0' with '4939'
c Var 'aux562' order represents '1' with '4940'
-4939 4940 0
c Var 'aux562' direct represents '1' with '4941'
4939 -4940 4941 0
-4941 4940 0
-4941 -4939 0
c Var 'aux562' order represents '2' with '4942'
-4940 4942 0
c Var 'aux562' direct represents '2' with '4943'
4940 -4942 4943 0
-4943 4942 0
-4943 -4940 0
c Var 'aux562' order represents '3' with '4944'
-4942 4944 0
c Var 'aux562' direct represents '3' with '4945'
4942 -4944 4945 0
-4945 4944 0
-4945 -4942 0
c Var 'aux562' order represents '4' with '4946'
-4944 4946 0
c Var 'aux562' direct represents '4' with '4947'
4944 -4946 4947 0
-4947 4946 0
-4947 -4944 0
c Var 'aux562' order represents '5' with '4948'
-4946 4948 0
c Var 'aux562' direct represents '5' with '4949'
4946 -4948 4949 0
-4949 4948 0
-4949 -4946 0
c Var 'aux562' order represents '6' with '4950'
-4948 4950 0
c Var 'aux562' direct represents '6' with '4951'
4948 -4950 4951 0
-4951 4950 0
-4951 -4948 0
c Var 'aux562' order represents '7' with '4952'
-4950 4952 0
c Var 'aux562' direct represents '7' with '4953'
4950 -4952 4953 0
-4953 4952 0
-4953 -4950 0
c Var 'aux562' order represents '8' with '4954'
-4952 4954 0
c Var 'aux562' direct represents '8' with '4955'
4952 -4954 4955 0
-4955 4954 0
-4955 -4952 0
c Var 'aux562' order represents '9' with '4956'
-4954 4956 0
c Var 'aux562' direct represents '9' with '4957'
4954 -4956 4957 0
-4957 4956 0
-4957 -4954 0
c Var 'aux562' order represents '10' with '4958'
-4956 4958 0
c Var 'aux562' direct represents '10' with '4959'
4956 -4958 4959 0
-4959 4958 0
-4959 -4956 0
c Var 'aux562' order represents '11' with '4960'
-4958 4960 0
c Var 'aux562' direct represents '11' with '4961'
4958 -4960 4961 0
-4961 4960 0
-4961 -4958 0
c Var 'aux562' order represents '12' with '4962'
-4960 4962 0
c Var 'aux562' direct represents '12' with '4963'
4960 -4962 4963 0
-4963 4962 0
-4963 -4960 0
c Var 'aux562' order represents '13' with '4964'
-4962 4964 0
c Var 'aux562' direct represents '13' with '4965'
4962 -4964 4965 0
-4965 4964 0
-4965 -4962 0
c Var 'aux562' order represents '14' with '4966'
-4964 4966 0
c Var 'aux562' direct represents '14' with '4967'
4964 -4966 4967 0
-4967 4966 0
-4967 -4964 0
c Var 'aux562' order represents '15' with '4968'
-4966 4968 0
c Var 'aux562' direct represents '15' with '4969'
4966 -4968 4969 0
-4969 4968 0
-4969 -4966 0
c Var 'aux562' direct represents '16' with '-4968'
4939 4941 4943 4945 4947 4949 4951 4953 4955 4957 4959 4961 4963 4965 4967 4969 -4968 0
c Encoding variable: aux563 with domain: int(0..2) (representing constraint ((6=grid_00005_00000) + (grid_00000_00006=6)))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '4970'
c Var 'aux563' direct represents '0' with '4970'
c Var 'aux563' order represents '1' with '4971'
-4970 4971 0
c Var 'aux563' direct represents '1' with '4972'
4970 -4971 4972 0
-4972 4971 0
-4972 -4970 0
c Var 'aux563' direct represents '2' with '-4971'
4970 4972 -4971 0
c Encoding variable: aux564 with domain: int(0..2) (representing constraint ((grid_00000_00005=6) + (6=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '4973'
c Var 'aux564' direct represents '0' with '4973'
c Var 'aux564' order represents '1' with '4974'
-4973 4974 0
c Var 'aux564' direct represents '1' with '4975'
4973 -4974 4975 0
-4975 4974 0
-4975 -4973 0
c Var 'aux564' direct represents '2' with '-4974'
4973 4975 -4974 0
c Encoding variable: aux565 with domain: int(0..2) (representing constraint ((grid_00000_00004=6) + (6=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '4976'
c Var 'aux565' direct represents '0' with '4976'
c Var 'aux565' order represents '1' with '4977'
-4976 4977 0
c Var 'aux565' direct represents '1' with '4978'
4976 -4977 4978 0
-4978 4977 0
-4978 -4976 0
c Var 'aux565' direct represents '2' with '-4977'
4976 4978 -4977 0
c Encoding variable: aux566 with domain: int(0..2) (representing constraint ((grid_00000_00003=6) + (grid_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '4979'
c Var 'aux566' direct represents '0' with '4979'
c Var 'aux566' order represents '1' with '4980'
-4979 4980 0
c Var 'aux566' direct represents '1' with '4981'
4979 -4980 4981 0
-4981 4980 0
-4981 -4979 0
c Var 'aux566' direct represents '2' with '-4980'
4979 4981 -4980 0
c Encoding variable: aux567 with domain: int(0..2) (representing constraint ((grid_00000_00002=6) + (6=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '4982'
c Var 'aux567' direct represents '0' with '4982'
c Var 'aux567' order represents '1' with '4983'
-4982 4983 0
c Var 'aux567' direct represents '1' with '4984'
4982 -4983 4984 0
-4984 4983 0
-4984 -4982 0
c Var 'aux567' direct represents '2' with '-4983'
4982 4984 -4983 0
c Encoding variable: aux568 with domain: int(0..2) (representing constraint ((grid_00000_00001=6) + (grid_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '4985'
c Var 'aux568' direct represents '0' with '4985'
c Var 'aux568' order represents '1' with '4986'
-4985 4986 0
c Var 'aux568' direct represents '1' with '4987'
4985 -4986 4987 0
-4987 4986 0
-4987 -4985 0
c Var 'aux568' direct represents '2' with '-4986'
4985 4987 -4986 0
c Encoding variable: aux569 with domain: int(0..2) (representing constraint ((grid_00004_00005=6) + (6=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '4988'
c Var 'aux569' direct represents '0' with '4988'
c Var 'aux569' order represents '1' with '4989'
-4988 4989 0
c Var 'aux569' direct represents '1' with '4990'
4988 -4989 4990 0
-4990 4989 0
-4990 -4988 0
c Var 'aux569' direct represents '2' with '-4989'
4988 4990 -4989 0
c Encoding variable: aux570 with domain: int(0..2) (representing constraint ((grid_00004_00006=6) + (grid_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '4991'
c Var 'aux570' direct represents '0' with '4991'
c Var 'aux570' order represents '1' with '4992'
-4991 4992 0
c Var 'aux570' direct represents '1' with '4993'
4991 -4992 4993 0
-4993 4992 0
-4993 -4991 0
c Var 'aux570' direct represents '2' with '-4992'
4991 4993 -4992 0
c Encoding variable: aux571 with domain: int(0..2) (representing constraint ((6=grid_00006_00004) + (6=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '4994'
c Var 'aux571' direct represents '0' with '4994'
c Var 'aux571' order represents '1' with '4995'
-4994 4995 0
c Var 'aux571' direct represents '1' with '4996'
4994 -4995 4996 0
-4996 4995 0
-4996 -4994 0
c Var 'aux571' direct represents '2' with '-4995'
4994 4996 -4995 0
c Encoding variable: aux572 with domain: int(0..2) (representing constraint ((grid_00004_00003=6) + (grid_00003_00000=6)))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '4997'
c Var 'aux572' direct represents '0' with '4997'
c Var 'aux572' order represents '1' with '4998'
-4997 4998 0
c Var 'aux572' direct represents '1' with '4999'
4997 -4998 4999 0
-4999 4998 0
-4999 -4997 0
c Var 'aux572' direct represents '2' with '-4998'
4997 4999 -4998 0
c Encoding variable: aux573 with domain: int(0..2) (representing constraint ((grid_00004_00002=6) + (6=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '5000'
c Var 'aux573' direct represents '0' with '5000'
c Var 'aux573' order represents '1' with '5001'
-5000 5001 0
c Var 'aux573' direct represents '1' with '5002'
5000 -5001 5002 0
-5002 5001 0
-5002 -5000 0
c Var 'aux573' direct represents '2' with '-5001'
5000 5002 -5001 0
c Encoding variable: aux574 with domain: int(0..2) (representing constraint ((grid_00004_00001=6) + (6=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '5003'
c Var 'aux574' direct represents '0' with '5003'
c Var 'aux574' order represents '1' with '5004'
-5003 5004 0
c Var 'aux574' direct represents '1' with '5005'
5003 -5004 5005 0
-5005 5004 0
-5005 -5003 0
c Var 'aux574' direct represents '2' with '-5004'
5003 5005 -5004 0
c Encoding variable: aux575 with domain: int(0..2) (representing constraint ((grid_00004_00000=6) + (6=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '5006'
c Var 'aux575' direct represents '0' with '5006'
c Var 'aux575' order represents '1' with '5007'
-5006 5007 0
c Var 'aux575' direct represents '1' with '5008'
5006 -5007 5008 0
-5008 5007 0
-5008 -5006 0
c Var 'aux575' direct represents '2' with '-5007'
5006 5008 -5007 0
c Encoding variable: aux576 with domain: int(0..2) (representing constraint ((6=grid_00002_00006) + (6=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '5009'
c Var 'aux576' direct represents '0' with '5009'
c Var 'aux576' order represents '1' with '5010'
-5009 5010 0
c Var 'aux576' direct represents '1' with '5011'
5009 -5010 5011 0
-5011 5010 0
-5011 -5009 0
c Var 'aux576' direct represents '2' with '-5010'
5009 5011 -5010 0
c Encoding variable: aux577 with domain: int(0..2) (representing constraint ((6=grid_00002_00005) + (6=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '5012'
c Var 'aux577' direct represents '0' with '5012'
c Var 'aux577' order represents '1' with '5013'
-5012 5013 0
c Var 'aux577' direct represents '1' with '5014'
5012 -5013 5014 0
-5014 5013 0
-5014 -5012 0
c Var 'aux577' direct represents '2' with '-5013'
5012 5014 -5013 0
c Encoding variable: aux578 with domain: int(0..2) (representing constraint ((6=grid_00002_00004) + (6=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '5015'
c Var 'aux578' direct represents '0' with '5015'
c Var 'aux578' order represents '1' with '5016'
-5015 5016 0
c Var 'aux578' direct represents '1' with '5017'
5015 -5016 5017 0
-5017 5016 0
-5017 -5015 0
c Var 'aux578' direct represents '2' with '-5016'
5015 5017 -5016 0
c Encoding variable: aux579 with domain: int(0..2) (representing constraint ((6=grid_00002_00003) + (6=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '5018'
c Var 'aux579' direct represents '0' with '5018'
c Var 'aux579' order represents '1' with '5019'
-5018 5019 0
c Var 'aux579' direct represents '1' with '5020'
5018 -5019 5020 0
-5020 5019 0
-5020 -5018 0
c Var 'aux579' direct represents '2' with '-5019'
5018 5020 -5019 0
c Encoding variable: aux580 with domain: int(0..2) (representing constraint ((grid_00003_00002=6) + (6=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '5021'
c Var 'aux580' direct represents '0' with '5021'
c Var 'aux580' order represents '1' with '5022'
-5021 5022 0
c Var 'aux580' direct represents '1' with '5023'
5021 -5022 5023 0
-5023 5022 0
-5023 -5021 0
c Var 'aux580' direct represents '2' with '-5022'
5021 5023 -5022 0
c Encoding variable: aux581 with domain: int(0..2) (representing constraint ((6=grid_00001_00005) + (grid_00003_00003=6)))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '5024'
c Var 'aux581' direct represents '0' with '5024'
c Var 'aux581' order represents '1' with '5025'
-5024 5025 0
c Var 'aux581' direct represents '1' with '5026'
5024 -5025 5026 0
-5026 5025 0
-5026 -5024 0
c Var 'aux581' direct represents '2' with '-5025'
5024 5026 -5025 0
c Encoding variable: aux582 with domain: int(0..2) (representing constraint ((6=grid_00006_00000) + (6=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '5027'
c Var 'aux582' direct represents '0' with '5027'
c Var 'aux582' order represents '1' with '5028'
-5027 5028 0
c Var 'aux582' direct represents '1' with '5029'
5027 -5028 5029 0
-5029 5028 0
-5029 -5027 0
c Var 'aux582' direct represents '2' with '-5028'
5027 5029 -5028 0
c Encoding variable: aux583 with domain: int(0..4) (representing constraint (aux570 + aux582))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '5030'
c Var 'aux583' direct represents '0' with '5030'
c Var 'aux583' order represents '1' with '5031'
-5030 5031 0
c Var 'aux583' direct represents '1' with '5032'
5030 -5031 5032 0
-5032 5031 0
-5032 -5030 0
c Var 'aux583' order represents '2' with '5033'
-5031 5033 0
c Var 'aux583' direct represents '2' with '5034'
5031 -5033 5034 0
-5034 5033 0
-5034 -5031 0
c Var 'aux583' order represents '3' with '5035'
-5033 5035 0
c Var 'aux583' direct represents '3' with '5036'
5033 -5035 5036 0
-5036 5035 0
-5036 -5033 0
c Var 'aux583' direct represents '4' with '-5035'
5030 5032 5034 5036 -5035 0
c Encoding variable: aux584 with domain: int(0..4) (representing constraint (aux564 + aux577))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '5037'
c Var 'aux584' direct represents '0' with '5037'
c Var 'aux584' order represents '1' with '5038'
-5037 5038 0
c Var 'aux584' direct represents '1' with '5039'
5037 -5038 5039 0
-5039 5038 0
-5039 -5037 0
c Var 'aux584' order represents '2' with '5040'
-5038 5040 0
c Var 'aux584' direct represents '2' with '5041'
5038 -5040 5041 0
-5041 5040 0
-5041 -5038 0
c Var 'aux584' order represents '3' with '5042'
-5040 5042 0
c Var 'aux584' direct represents '3' with '5043'
5040 -5042 5043 0
-5043 5042 0
-5043 -5040 0
c Var 'aux584' direct represents '4' with '-5042'
5037 5039 5041 5043 -5042 0
c Encoding variable: aux585 with domain: int(0..4) (representing constraint (aux568 + aux563))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '5044'
c Var 'aux585' direct represents '0' with '5044'
c Var 'aux585' order represents '1' with '5045'
-5044 5045 0
c Var 'aux585' direct represents '1' with '5046'
5044 -5045 5046 0
-5046 5045 0
-5046 -5044 0
c Var 'aux585' order represents '2' with '5047'
-5045 5047 0
c Var 'aux585' direct represents '2' with '5048'
5045 -5047 5048 0
-5048 5047 0
-5048 -5045 0
c Var 'aux585' order represents '3' with '5049'
-5047 5049 0
c Var 'aux585' direct represents '3' with '5050'
5047 -5049 5050 0
-5050 5049 0
-5050 -5047 0
c Var 'aux585' direct represents '4' with '-5049'
5044 5046 5048 5050 -5049 0
c Encoding variable: aux586 with domain: int(0..4) (representing constraint (aux566 + aux565))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '5051'
c Var 'aux586' direct represents '0' with '5051'
c Var 'aux586' order represents '1' with '5052'
-5051 5052 0
c Var 'aux586' direct represents '1' with '5053'
5051 -5052 5053 0
-5053 5052 0
-5053 -5051 0
c Var 'aux586' order represents '2' with '5054'
-5052 5054 0
c Var 'aux586' direct represents '2' with '5055'
5052 -5054 5055 0
-5055 5054 0
-5055 -5052 0
c Var 'aux586' order represents '3' with '5056'
-5054 5056 0
c Var 'aux586' direct represents '3' with '5057'
5054 -5056 5057 0
-5057 5056 0
-5057 -5054 0
c Var 'aux586' direct represents '4' with '-5056'
5051 5053 5055 5057 -5056 0
c Encoding variable: aux587 with domain: int(0..4) (representing constraint (aux567 + aux569))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '5058'
c Var 'aux587' direct represents '0' with '5058'
c Var 'aux587' order represents '1' with '5059'
-5058 5059 0
c Var 'aux587' direct represents '1' with '5060'
5058 -5059 5060 0
-5060 5059 0
-5060 -5058 0
c Var 'aux587' order represents '2' with '5061'
-5059 5061 0
c Var 'aux587' direct represents '2' with '5062'
5059 -5061 5062 0
-5062 5061 0
-5062 -5059 0
c Var 'aux587' order represents '3' with '5063'
-5061 5063 0
c Var 'aux587' direct represents '3' with '5064'
5061 -5063 5064 0
-5064 5063 0
-5064 -5061 0
c Var 'aux587' direct represents '4' with '-5063'
5058 5060 5062 5064 -5063 0
c Encoding variable: aux588 with domain: int(0..4) (representing constraint (aux580 + aux576))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '5065'
c Var 'aux588' direct represents '0' with '5065'
c Var 'aux588' order represents '1' with '5066'
-5065 5066 0
c Var 'aux588' direct represents '1' with '5067'
5065 -5066 5067 0
-5067 5066 0
-5067 -5065 0
c Var 'aux588' order represents '2' with '5068'
-5066 5068 0
c Var 'aux588' direct represents '2' with '5069'
5066 -5068 5069 0
-5069 5068 0
-5069 -5066 0
c Var 'aux588' order represents '3' with '5070'
-5068 5070 0
c Var 'aux588' direct represents '3' with '5071'
5068 -5070 5071 0
-5071 5070 0
-5071 -5068 0
c Var 'aux588' direct represents '4' with '-5070'
5065 5067 5069 5071 -5070 0
c Encoding variable: aux589 with domain: int(0..4) (representing constraint (aux573 + aux572))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '5072'
c Var 'aux589' direct represents '0' with '5072'
c Var 'aux589' order represents '1' with '5073'
-5072 5073 0
c Var 'aux589' direct represents '1' with '5074'
5072 -5073 5074 0
-5074 5073 0
-5074 -5072 0
c Var 'aux589' order represents '2' with '5075'
-5073 5075 0
c Var 'aux589' direct represents '2' with '5076'
5073 -5075 5076 0
-5076 5075 0
-5076 -5073 0
c Var 'aux589' order represents '3' with '5077'
-5075 5077 0
c Var 'aux589' direct represents '3' with '5078'
5075 -5077 5078 0
-5078 5077 0
-5078 -5075 0
c Var 'aux589' direct represents '4' with '-5077'
5072 5074 5076 5078 -5077 0
c Encoding variable: aux590 with domain: int(0..4) (representing constraint (aux574 + aux575))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '5079'
c Var 'aux590' direct represents '0' with '5079'
c Var 'aux590' order represents '1' with '5080'
-5079 5080 0
c Var 'aux590' direct represents '1' with '5081'
5079 -5080 5081 0
-5081 5080 0
-5081 -5079 0
c Var 'aux590' order represents '2' with '5082'
-5080 5082 0
c Var 'aux590' direct represents '2' with '5083'
5080 -5082 5083 0
-5083 5082 0
-5083 -5080 0
c Var 'aux590' order represents '3' with '5084'
-5082 5084 0
c Var 'aux590' direct represents '3' with '5085'
5082 -5084 5085 0
-5085 5084 0
-5085 -5082 0
c Var 'aux590' direct represents '4' with '-5084'
5079 5081 5083 5085 -5084 0
c Encoding variable: aux591 with domain: int(0..4) (representing constraint (aux578 + aux581))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '5086'
c Var 'aux591' direct represents '0' with '5086'
c Var 'aux591' order represents '1' with '5087'
-5086 5087 0
c Var 'aux591' direct represents '1' with '5088'
5086 -5087 5088 0
-5088 5087 0
-5088 -5086 0
c Var 'aux591' order represents '2' with '5089'
-5087 5089 0
c Var 'aux591' direct represents '2' with '5090'
5087 -5089 5090 0
-5090 5089 0
-5090 -5087 0
c Var 'aux591' order represents '3' with '5091'
-5089 5091 0
c Var 'aux591' direct represents '3' with '5092'
5089 -5091 5092 0
-5092 5091 0
-5092 -5089 0
c Var 'aux591' direct represents '4' with '-5091'
5086 5088 5090 5092 -5091 0
c Encoding variable: aux592 with domain: int(0..4) (representing constraint (aux579 + aux571))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '5093'
c Var 'aux592' direct represents '0' with '5093'
c Var 'aux592' order represents '1' with '5094'
-5093 5094 0
c Var 'aux592' direct represents '1' with '5095'
5093 -5094 5095 0
-5095 5094 0
-5095 -5093 0
c Var 'aux592' order represents '2' with '5096'
-5094 5096 0
c Var 'aux592' direct represents '2' with '5097'
5094 -5096 5097 0
-5097 5096 0
-5097 -5094 0
c Var 'aux592' order represents '3' with '5098'
-5096 5098 0
c Var 'aux592' direct represents '3' with '5099'
5096 -5098 5099 0
-5099 5098 0
-5099 -5096 0
c Var 'aux592' direct represents '4' with '-5098'
5093 5095 5097 5099 -5098 0
c Encoding variable: aux593 with domain: int(0..8) (representing constraint (aux586 + aux592))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '5100'
c Var 'aux593' direct represents '0' with '5100'
c Var 'aux593' order represents '1' with '5101'
-5100 5101 0
c Var 'aux593' direct represents '1' with '5102'
5100 -5101 5102 0
-5102 5101 0
-5102 -5100 0
c Var 'aux593' order represents '2' with '5103'
-5101 5103 0
c Var 'aux593' direct represents '2' with '5104'
5101 -5103 5104 0
-5104 5103 0
-5104 -5101 0
c Var 'aux593' order represents '3' with '5105'
-5103 5105 0
c Var 'aux593' direct represents '3' with '5106'
5103 -5105 5106 0
-5106 5105 0
-5106 -5103 0
c Var 'aux593' order represents '4' with '5107'
-5105 5107 0
c Var 'aux593' direct represents '4' with '5108'
5105 -5107 5108 0
-5108 5107 0
-5108 -5105 0
c Var 'aux593' order represents '5' with '5109'
-5107 5109 0
c Var 'aux593' direct represents '5' with '5110'
5107 -5109 5110 0
-5110 5109 0
-5110 -5107 0
c Var 'aux593' order represents '6' with '5111'
-5109 5111 0
c Var 'aux593' direct represents '6' with '5112'
5109 -5111 5112 0
-5112 5111 0
-5112 -5109 0
c Var 'aux593' order represents '7' with '5113'
-5111 5113 0
c Var 'aux593' direct represents '7' with '5114'
5111 -5113 5114 0
-5114 5113 0
-5114 -5111 0
c Var 'aux593' direct represents '8' with '-5113'
5100 5102 5104 5106 5108 5110 5112 5114 -5113 0
c Encoding variable: aux594 with domain: int(0..8) (representing constraint (aux585 + aux589))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '5115'
c Var 'aux594' direct represents '0' with '5115'
c Var 'aux594' order represents '1' with '5116'
-5115 5116 0
c Var 'aux594' direct represents '1' with '5117'
5115 -5116 5117 0
-5117 5116 0
-5117 -5115 0
c Var 'aux594' order represents '2' with '5118'
-5116 5118 0
c Var 'aux594' direct represents '2' with '5119'
5116 -5118 5119 0
-5119 5118 0
-5119 -5116 0
c Var 'aux594' order represents '3' with '5120'
-5118 5120 0
c Var 'aux594' direct represents '3' with '5121'
5118 -5120 5121 0
-5121 5120 0
-5121 -5118 0
c Var 'aux594' order represents '4' with '5122'
-5120 5122 0
c Var 'aux594' direct represents '4' with '5123'
5120 -5122 5123 0
-5123 5122 0
-5123 -5120 0
c Var 'aux594' order represents '5' with '5124'
-5122 5124 0
c Var 'aux594' direct represents '5' with '5125'
5122 -5124 5125 0
-5125 5124 0
-5125 -5122 0
c Var 'aux594' order represents '6' with '5126'
-5124 5126 0
c Var 'aux594' direct represents '6' with '5127'
5124 -5126 5127 0
-5127 5126 0
-5127 -5124 0
c Var 'aux594' order represents '7' with '5128'
-5126 5128 0
c Var 'aux594' direct represents '7' with '5129'
5126 -5128 5129 0
-5129 5128 0
-5129 -5126 0
c Var 'aux594' direct represents '8' with '-5128'
5115 5117 5119 5121 5123 5125 5127 5129 -5128 0
c Encoding variable: aux595 with domain: int(0..8) (representing constraint (aux583 + aux584))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '5130'
c Var 'aux595' direct represents '0' with '5130'
c Var 'aux595' order represents '1' with '5131'
-5130 5131 0
c Var 'aux595' direct represents '1' with '5132'
5130 -5131 5132 0
-5132 5131 0
-5132 -5130 0
c Var 'aux595' order represents '2' with '5133'
-5131 5133 0
c Var 'aux595' direct represents '2' with '5134'
5131 -5133 5134 0
-5134 5133 0
-5134 -5131 0
c Var 'aux595' order represents '3' with '5135'
-5133 5135 0
c Var 'aux595' direct represents '3' with '5136'
5133 -5135 5136 0
-5136 5135 0
-5136 -5133 0
c Var 'aux595' order represents '4' with '5137'
-5135 5137 0
c Var 'aux595' direct represents '4' with '5138'
5135 -5137 5138 0
-5138 5137 0
-5138 -5135 0
c Var 'aux595' order represents '5' with '5139'
-5137 5139 0
c Var 'aux595' direct represents '5' with '5140'
5137 -5139 5140 0
-5140 5139 0
-5140 -5137 0
c Var 'aux595' order represents '6' with '5141'
-5139 5141 0
c Var 'aux595' direct represents '6' with '5142'
5139 -5141 5142 0
-5142 5141 0
-5142 -5139 0
c Var 'aux595' order represents '7' with '5143'
-5141 5143 0
c Var 'aux595' direct represents '7' with '5144'
5141 -5143 5144 0
-5144 5143 0
-5144 -5141 0
c Var 'aux595' direct represents '8' with '-5143'
5130 5132 5134 5136 5138 5140 5142 5144 -5143 0
c Encoding variable: aux596 with domain: int(0..8) (representing constraint (aux587 + aux588))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '5145'
c Var 'aux596' direct represents '0' with '5145'
c Var 'aux596' order represents '1' with '5146'
-5145 5146 0
c Var 'aux596' direct represents '1' with '5147'
5145 -5146 5147 0
-5147 5146 0
-5147 -5145 0
c Var 'aux596' order represents '2' with '5148'
-5146 5148 0
c Var 'aux596' direct represents '2' with '5149'
5146 -5148 5149 0
-5149 5148 0
-5149 -5146 0
c Var 'aux596' order represents '3' with '5150'
-5148 5150 0
c Var 'aux596' direct represents '3' with '5151'
5148 -5150 5151 0
-5151 5150 0
-5151 -5148 0
c Var 'aux596' order represents '4' with '5152'
-5150 5152 0
c Var 'aux596' direct represents '4' with '5153'
5150 -5152 5153 0
-5153 5152 0
-5153 -5150 0
c Var 'aux596' order represents '5' with '5154'
-5152 5154 0
c Var 'aux596' direct represents '5' with '5155'
5152 -5154 5155 0
-5155 5154 0
-5155 -5152 0
c Var 'aux596' order represents '6' with '5156'
-5154 5156 0
c Var 'aux596' direct represents '6' with '5157'
5154 -5156 5157 0
-5157 5156 0
-5157 -5154 0
c Var 'aux596' order represents '7' with '5158'
-5156 5158 0
c Var 'aux596' direct represents '7' with '5159'
5156 -5158 5159 0
-5159 5158 0
-5159 -5156 0
c Var 'aux596' direct represents '8' with '-5158'
5145 5147 5149 5151 5153 5155 5157 5159 -5158 0
c Encoding variable: aux597 with domain: int(0..8) (representing constraint (aux590 + aux591))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '5160'
c Var 'aux597' direct represents '0' with '5160'
c Var 'aux597' order represents '1' with '5161'
-5160 5161 0
c Var 'aux597' direct represents '1' with '5162'
5160 -5161 5162 0
-5162 5161 0
-5162 -5160 0
c Var 'aux597' order represents '2' with '5163'
-5161 5163 0
c Var 'aux597' direct represents '2' with '5164'
5161 -5163 5164 0
-5164 5163 0
-5164 -5161 0
c Var 'aux597' order represents '3' with '5165'
-5163 5165 0
c Var 'aux597' direct represents '3' with '5166'
5163 -5165 5166 0
-5166 5165 0
-5166 -5163 0
c Var 'aux597' order represents '4' with '5167'
-5165 5167 0
c Var 'aux597' direct represents '4' with '5168'
5165 -5167 5168 0
-5168 5167 0
-5168 -5165 0
c Var 'aux597' order represents '5' with '5169'
-5167 5169 0
c Var 'aux597' direct represents '5' with '5170'
5167 -5169 5170 0
-5170 5169 0
-5170 -5167 0
c Var 'aux597' order represents '6' with '5171'
-5169 5171 0
c Var 'aux597' direct represents '6' with '5172'
5169 -5171 5172 0
-5172 5171 0
-5172 -5169 0
c Var 'aux597' order represents '7' with '5173'
-5171 5173 0
c Var 'aux597' direct represents '7' with '5174'
5171 -5173 5174 0
-5174 5173 0
-5174 -5171 0
c Var 'aux597' direct represents '8' with '-5173'
5160 5162 5164 5166 5168 5170 5172 5174 -5173 0
c Encoding variable: aux598 with domain: int(0..16) (representing constraint (aux594 + aux597))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '5175'
c Var 'aux598' direct represents '0' with '5175'
c Var 'aux598' order represents '1' with '5176'
-5175 5176 0
c Var 'aux598' direct represents '1' with '5177'
5175 -5176 5177 0
-5177 5176 0
-5177 -5175 0
c Var 'aux598' order represents '2' with '5178'
-5176 5178 0
c Var 'aux598' direct represents '2' with '5179'
5176 -5178 5179 0
-5179 5178 0
-5179 -5176 0
c Var 'aux598' order represents '3' with '5180'
-5178 5180 0
c Var 'aux598' direct represents '3' with '5181'
5178 -5180 5181 0
-5181 5180 0
-5181 -5178 0
c Var 'aux598' order represents '4' with '5182'
-5180 5182 0
c Var 'aux598' direct represents '4' with '5183'
5180 -5182 5183 0
-5183 5182 0
-5183 -5180 0
c Var 'aux598' order represents '5' with '5184'
-5182 5184 0
c Var 'aux598' direct represents '5' with '5185'
5182 -5184 5185 0
-5185 5184 0
-5185 -5182 0
c Var 'aux598' order represents '6' with '5186'
-5184 5186 0
c Var 'aux598' direct represents '6' with '5187'
5184 -5186 5187 0
-5187 5186 0
-5187 -5184 0
c Var 'aux598' order represents '7' with '5188'
-5186 5188 0
c Var 'aux598' direct represents '7' with '5189'
5186 -5188 5189 0
-5189 5188 0
-5189 -5186 0
c Var 'aux598' order represents '8' with '5190'
-5188 5190 0
c Var 'aux598' direct represents '8' with '5191'
5188 -5190 5191 0
-5191 5190 0
-5191 -5188 0
c Var 'aux598' order represents '9' with '5192'
-5190 5192 0
c Var 'aux598' direct represents '9' with '5193'
5190 -5192 5193 0
-5193 5192 0
-5193 -5190 0
c Var 'aux598' order represents '10' with '5194'
-5192 5194 0
c Var 'aux598' direct represents '10' with '5195'
5192 -5194 5195 0
-5195 5194 0
-5195 -5192 0
c Var 'aux598' order represents '11' with '5196'
-5194 5196 0
c Var 'aux598' direct represents '11' with '5197'
5194 -5196 5197 0
-5197 5196 0
-5197 -5194 0
c Var 'aux598' order represents '12' with '5198'
-5196 5198 0
c Var 'aux598' direct represents '12' with '5199'
5196 -5198 5199 0
-5199 5198 0
-5199 -5196 0
c Var 'aux598' order represents '13' with '5200'
-5198 5200 0
c Var 'aux598' direct represents '13' with '5201'
5198 -5200 5201 0
-5201 5200 0
-5201 -5198 0
c Var 'aux598' order represents '14' with '5202'
-5200 5202 0
c Var 'aux598' direct represents '14' with '5203'
5200 -5202 5203 0
-5203 5202 0
-5203 -5200 0
c Var 'aux598' order represents '15' with '5204'
-5202 5204 0
c Var 'aux598' direct represents '15' with '5205'
5202 -5204 5205 0
-5205 5204 0
-5205 -5202 0
c Var 'aux598' direct represents '16' with '-5204'
5175 5177 5179 5181 5183 5185 5187 5189 5191 5193 5195 5197 5199 5201 5203 5205 -5204 0
c Encoding variable: aux599 with domain: int(0..16) (representing constraint (aux593 + aux595))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '5206'
c Var 'aux599' direct represents '0' with '5206'
c Var 'aux599' order represents '1' with '5207'
-5206 5207 0
c Var 'aux599' direct represents '1' with '5208'
5206 -5207 5208 0
-5208 5207 0
-5208 -5206 0
c Var 'aux599' order represents '2' with '5209'
-5207 5209 0
c Var 'aux599' direct represents '2' with '5210'
5207 -5209 5210 0
-5210 5209 0
-5210 -5207 0
c Var 'aux599' order represents '3' with '5211'
-5209 5211 0
c Var 'aux599' direct represents '3' with '5212'
5209 -5211 5212 0
-5212 5211 0
-5212 -5209 0
c Var 'aux599' order represents '4' with '5213'
-5211 5213 0
c Var 'aux599' direct represents '4' with '5214'
5211 -5213 5214 0
-5214 5213 0
-5214 -5211 0
c Var 'aux599' order represents '5' with '5215'
-5213 5215 0
c Var 'aux599' direct represents '5' with '5216'
5213 -5215 5216 0
-5216 5215 0
-5216 -5213 0
c Var 'aux599' order represents '6' with '5217'
-5215 5217 0
c Var 'aux599' direct represents '6' with '5218'
5215 -5217 5218 0
-5218 5217 0
-5218 -5215 0
c Var 'aux599' order represents '7' with '5219'
-5217 5219 0
c Var 'aux599' direct represents '7' with '5220'
5217 -5219 5220 0
-5220 5219 0
-5220 -5217 0
c Var 'aux599' order represents '8' with '5221'
-5219 5221 0
c Var 'aux599' direct represents '8' with '5222'
5219 -5221 5222 0
-5222 5221 0
-5222 -5219 0
c Var 'aux599' order represents '9' with '5223'
-5221 5223 0
c Var 'aux599' direct represents '9' with '5224'
5221 -5223 5224 0
-5224 5223 0
-5224 -5221 0
c Var 'aux599' order represents '10' with '5225'
-5223 5225 0
c Var 'aux599' direct represents '10' with '5226'
5223 -5225 5226 0
-5226 5225 0
-5226 -5223 0
c Var 'aux599' order represents '11' with '5227'
-5225 5227 0
c Var 'aux599' direct represents '11' with '5228'
5225 -5227 5228 0
-5228 5227 0
-5228 -5225 0
c Var 'aux599' order represents '12' with '5229'
-5227 5229 0
c Var 'aux599' direct represents '12' with '5230'
5227 -5229 5230 0
-5230 5229 0
-5230 -5227 0
c Var 'aux599' order represents '13' with '5231'
-5229 5231 0
c Var 'aux599' direct represents '13' with '5232'
5229 -5231 5232 0
-5232 5231 0
-5232 -5229 0
c Var 'aux599' order represents '14' with '5233'
-5231 5233 0
c Var 'aux599' direct represents '14' with '5234'
5231 -5233 5234 0
-5234 5233 0
-5234 -5231 0
c Var 'aux599' order represents '15' with '5235'
-5233 5235 0
c Var 'aux599' direct represents '15' with '5236'
5233 -5235 5236 0
-5236 5235 0
-5236 -5233 0
c Var 'aux599' direct represents '16' with '-5235'
5206 5208 5210 5212 5214 5216 5218 5220 5222 5224 5226 5228 5230 5232 5234 5236 -5235 0
c Encoding variable: aux600 with domain: int(0..2) (representing constraint ((7=grid_00005_00000) + (grid_00000_00006=7)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '5237'
c Var 'aux600' direct represents '0' with '5237'
c Var 'aux600' order represents '1' with '5238'
-5237 5238 0
c Var 'aux600' direct represents '1' with '5239'
5237 -5238 5239 0
-5239 5238 0
-5239 -5237 0
c Var 'aux600' direct represents '2' with '-5238'
5237 5239 -5238 0
c Encoding variable: aux601 with domain: int(0..2) (representing constraint ((grid_00000_00005=7) + (7=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '5240'
c Var 'aux601' direct represents '0' with '5240'
c Var 'aux601' order represents '1' with '5241'
-5240 5241 0
c Var 'aux601' direct represents '1' with '5242'
5240 -5241 5242 0
-5242 5241 0
-5242 -5240 0
c Var 'aux601' direct represents '2' with '-5241'
5240 5242 -5241 0
c Encoding variable: aux602 with domain: int(0..2) (representing constraint ((grid_00000_00004=7) + (7=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '5243'
c Var 'aux602' direct represents '0' with '5243'
c Var 'aux602' order represents '1' with '5244'
-5243 5244 0
c Var 'aux602' direct represents '1' with '5245'
5243 -5244 5245 0
-5245 5244 0
-5245 -5243 0
c Var 'aux602' direct represents '2' with '-5244'
5243 5245 -5244 0
c Encoding variable: aux603 with domain: int(0..2) (representing constraint ((grid_00000_00003=7) + (grid_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '5246'
c Var 'aux603' direct represents '0' with '5246'
c Var 'aux603' order represents '1' with '5247'
-5246 5247 0
c Var 'aux603' direct represents '1' with '5248'
5246 -5247 5248 0
-5248 5247 0
-5248 -5246 0
c Var 'aux603' direct represents '2' with '-5247'
5246 5248 -5247 0
c Encoding variable: aux604 with domain: int(0..2) (representing constraint ((grid_00000_00002=7) + (7=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '5249'
c Var 'aux604' direct represents '0' with '5249'
c Var 'aux604' order represents '1' with '5250'
-5249 5250 0
c Var 'aux604' direct represents '1' with '5251'
5249 -5250 5251 0
-5251 5250 0
-5251 -5249 0
c Var 'aux604' direct represents '2' with '-5250'
5249 5251 -5250 0
c Encoding variable: aux605 with domain: int(0..2) (representing constraint ((grid_00000_00001=7) + (grid_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '5252'
c Var 'aux605' direct represents '0' with '5252'
c Var 'aux605' order represents '1' with '5253'
-5252 5253 0
c Var 'aux605' direct represents '1' with '5254'
5252 -5253 5254 0
-5254 5253 0
-5254 -5252 0
c Var 'aux605' direct represents '2' with '-5253'
5252 5254 -5253 0
c Encoding variable: aux606 with domain: int(0..2) (representing constraint ((grid_00004_00005=7) + (7=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '5255'
c Var 'aux606' direct represents '0' with '5255'
c Var 'aux606' order represents '1' with '5256'
-5255 5256 0
c Var 'aux606' direct represents '1' with '5257'
5255 -5256 5257 0
-5257 5256 0
-5257 -5255 0
c Var 'aux606' direct represents '2' with '-5256'
5255 5257 -5256 0
c Encoding variable: aux607 with domain: int(0..2) (representing constraint ((grid_00004_00006=7) + (grid_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '5258'
c Var 'aux607' direct represents '0' with '5258'
c Var 'aux607' order represents '1' with '5259'
-5258 5259 0
c Var 'aux607' direct represents '1' with '5260'
5258 -5259 5260 0
-5260 5259 0
-5260 -5258 0
c Var 'aux607' direct represents '2' with '-5259'
5258 5260 -5259 0
c Encoding variable: aux608 with domain: int(0..2) (representing constraint ((7=grid_00006_00004) + (7=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '5261'
c Var 'aux608' direct represents '0' with '5261'
c Var 'aux608' order represents '1' with '5262'
-5261 5262 0
c Var 'aux608' direct represents '1' with '5263'
5261 -5262 5263 0
-5263 5262 0
-5263 -5261 0
c Var 'aux608' direct represents '2' with '-5262'
5261 5263 -5262 0
c Encoding variable: aux609 with domain: int(0..2) (representing constraint ((grid_00004_00003=7) + (grid_00003_00000=7)))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '5264'
c Var 'aux609' direct represents '0' with '5264'
c Var 'aux609' order represents '1' with '5265'
-5264 5265 0
c Var 'aux609' direct represents '1' with '5266'
5264 -5265 5266 0
-5266 5265 0
-5266 -5264 0
c Var 'aux609' direct represents '2' with '-5265'
5264 5266 -5265 0
c Encoding variable: aux610 with domain: int(0..2) (representing constraint ((grid_00004_00002=7) + (7=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '5267'
c Var 'aux610' direct represents '0' with '5267'
c Var 'aux610' order represents '1' with '5268'
-5267 5268 0
c Var 'aux610' direct represents '1' with '5269'
5267 -5268 5269 0
-5269 5268 0
-5269 -5267 0
c Var 'aux610' direct represents '2' with '-5268'
5267 5269 -5268 0
c Encoding variable: aux611 with domain: int(0..2) (representing constraint ((grid_00004_00001=7) + (7=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '5270'
c Var 'aux611' direct represents '0' with '5270'
c Var 'aux611' order represents '1' with '5271'
-5270 5271 0
c Var 'aux611' direct represents '1' with '5272'
5270 -5271 5272 0
-5272 5271 0
-5272 -5270 0
c Var 'aux611' direct represents '2' with '-5271'
5270 5272 -5271 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((grid_00004_00000=7) + (7=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '5273'
c Var 'aux612' direct represents '0' with '5273'
c Var 'aux612' order represents '1' with '5274'
-5273 5274 0
c Var 'aux612' direct represents '1' with '5275'
5273 -5274 5275 0
-5275 5274 0
-5275 -5273 0
c Var 'aux612' direct represents '2' with '-5274'
5273 5275 -5274 0
c Encoding variable: aux613 with domain: int(0..2) (representing constraint ((7=grid_00002_00006) + (7=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '5276'
c Var 'aux613' direct represents '0' with '5276'
c Var 'aux613' order represents '1' with '5277'
-5276 5277 0
c Var 'aux613' direct represents '1' with '5278'
5276 -5277 5278 0
-5278 5277 0
-5278 -5276 0
c Var 'aux613' direct represents '2' with '-5277'
5276 5278 -5277 0
c Encoding variable: aux614 with domain: int(0..2) (representing constraint ((7=grid_00002_00005) + (7=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '5279'
c Var 'aux614' direct represents '0' with '5279'
c Var 'aux614' order represents '1' with '5280'
-5279 5280 0
c Var 'aux614' direct represents '1' with '5281'
5279 -5280 5281 0
-5281 5280 0
-5281 -5279 0
c Var 'aux614' direct represents '2' with '-5280'
5279 5281 -5280 0
c Encoding variable: aux615 with domain: int(0..2) (representing constraint ((7=grid_00002_00004) + (7=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '5282'
c Var 'aux615' direct represents '0' with '5282'
c Var 'aux615' order represents '1' with '5283'
-5282 5283 0
c Var 'aux615' direct represents '1' with '5284'
5282 -5283 5284 0
-5284 5283 0
-5284 -5282 0
c Var 'aux615' direct represents '2' with '-5283'
5282 5284 -5283 0
c Encoding variable: aux616 with domain: int(0..2) (representing constraint ((7=grid_00002_00003) + (7=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '5285'
c Var 'aux616' direct represents '0' with '5285'
c Var 'aux616' order represents '1' with '5286'
-5285 5286 0
c Var 'aux616' direct represents '1' with '5287'
5285 -5286 5287 0
-5287 5286 0
-5287 -5285 0
c Var 'aux616' direct represents '2' with '-5286'
5285 5287 -5286 0
c Encoding variable: aux617 with domain: int(0..2) (representing constraint ((grid_00003_00002=7) + (7=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '5288'
c Var 'aux617' direct represents '0' with '5288'
c Var 'aux617' order represents '1' with '5289'
-5288 5289 0
c Var 'aux617' direct represents '1' with '5290'
5288 -5289 5290 0
-5290 5289 0
-5290 -5288 0
c Var 'aux617' direct represents '2' with '-5289'
5288 5290 -5289 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((7=grid_00001_00005) + (grid_00003_00003=7)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '5291'
c Var 'aux618' direct represents '0' with '5291'
c Var 'aux618' order represents '1' with '5292'
-5291 5292 0
c Var 'aux618' direct represents '1' with '5293'
5291 -5292 5293 0
-5293 5292 0
-5293 -5291 0
c Var 'aux618' direct represents '2' with '-5292'
5291 5293 -5292 0
c Encoding variable: aux619 with domain: int(0..2) (representing constraint ((7=grid_00006_00000) + (7=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '5294'
c Var 'aux619' direct represents '0' with '5294'
c Var 'aux619' order represents '1' with '5295'
-5294 5295 0
c Var 'aux619' direct represents '1' with '5296'
5294 -5295 5296 0
-5296 5295 0
-5296 -5294 0
c Var 'aux619' direct represents '2' with '-5295'
5294 5296 -5295 0
c Encoding variable: aux620 with domain: int(0..4) (representing constraint (aux607 + aux619))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '5297'
c Var 'aux620' direct represents '0' with '5297'
c Var 'aux620' order represents '1' with '5298'
-5297 5298 0
c Var 'aux620' direct represents '1' with '5299'
5297 -5298 5299 0
-5299 5298 0
-5299 -5297 0
c Var 'aux620' order represents '2' with '5300'
-5298 5300 0
c Var 'aux620' direct represents '2' with '5301'
5298 -5300 5301 0
-5301 5300 0
-5301 -5298 0
c Var 'aux620' order represents '3' with '5302'
-5300 5302 0
c Var 'aux620' direct represents '3' with '5303'
5300 -5302 5303 0
-5303 5302 0
-5303 -5300 0
c Var 'aux620' direct represents '4' with '-5302'
5297 5299 5301 5303 -5302 0
c Encoding variable: aux621 with domain: int(0..4) (representing constraint (aux601 + aux614))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '5304'
c Var 'aux621' direct represents '0' with '5304'
c Var 'aux621' order represents '1' with '5305'
-5304 5305 0
c Var 'aux621' direct represents '1' with '5306'
5304 -5305 5306 0
-5306 5305 0
-5306 -5304 0
c Var 'aux621' order represents '2' with '5307'
-5305 5307 0
c Var 'aux621' direct represents '2' with '5308'
5305 -5307 5308 0
-5308 5307 0
-5308 -5305 0
c Var 'aux621' order represents '3' with '5309'
-5307 5309 0
c Var 'aux621' direct represents '3' with '5310'
5307 -5309 5310 0
-5310 5309 0
-5310 -5307 0
c Var 'aux621' direct represents '4' with '-5309'
5304 5306 5308 5310 -5309 0
c Encoding variable: aux622 with domain: int(0..4) (representing constraint (aux605 + aux600))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '5311'
c Var 'aux622' direct represents '0' with '5311'
c Var 'aux622' order represents '1' with '5312'
-5311 5312 0
c Var 'aux622' direct represents '1' with '5313'
5311 -5312 5313 0
-5313 5312 0
-5313 -5311 0
c Var 'aux622' order represents '2' with '5314'
-5312 5314 0
c Var 'aux622' direct represents '2' with '5315'
5312 -5314 5315 0
-5315 5314 0
-5315 -5312 0
c Var 'aux622' order represents '3' with '5316'
-5314 5316 0
c Var 'aux622' direct represents '3' with '5317'
5314 -5316 5317 0
-5317 5316 0
-5317 -5314 0
c Var 'aux622' direct represents '4' with '-5316'
5311 5313 5315 5317 -5316 0
c Encoding variable: aux623 with domain: int(0..4) (representing constraint (aux603 + aux602))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '5318'
c Var 'aux623' direct represents '0' with '5318'
c Var 'aux623' order represents '1' with '5319'
-5318 5319 0
c Var 'aux623' direct represents '1' with '5320'
5318 -5319 5320 0
-5320 5319 0
-5320 -5318 0
c Var 'aux623' order represents '2' with '5321'
-5319 5321 0
c Var 'aux623' direct represents '2' with '5322'
5319 -5321 5322 0
-5322 5321 0
-5322 -5319 0
c Var 'aux623' order represents '3' with '5323'
-5321 5323 0
c Var 'aux623' direct represents '3' with '5324'
5321 -5323 5324 0
-5324 5323 0
-5324 -5321 0
c Var 'aux623' direct represents '4' with '-5323'
5318 5320 5322 5324 -5323 0
c Encoding variable: aux624 with domain: int(0..4) (representing constraint (aux604 + aux606))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '5325'
c Var 'aux624' direct represents '0' with '5325'
c Var 'aux624' order represents '1' with '5326'
-5325 5326 0
c Var 'aux624' direct represents '1' with '5327'
5325 -5326 5327 0
-5327 5326 0
-5327 -5325 0
c Var 'aux624' order represents '2' with '5328'
-5326 5328 0
c Var 'aux624' direct represents '2' with '5329'
5326 -5328 5329 0
-5329 5328 0
-5329 -5326 0
c Var 'aux624' order represents '3' with '5330'
-5328 5330 0
c Var 'aux624' direct represents '3' with '5331'
5328 -5330 5331 0
-5331 5330 0
-5331 -5328 0
c Var 'aux624' direct represents '4' with '-5330'
5325 5327 5329 5331 -5330 0
c Encoding variable: aux625 with domain: int(0..4) (representing constraint (aux617 + aux613))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '5332'
c Var 'aux625' direct represents '0' with '5332'
c Var 'aux625' order represents '1' with '5333'
-5332 5333 0
c Var 'aux625' direct represents '1' with '5334'
5332 -5333 5334 0
-5334 5333 0
-5334 -5332 0
c Var 'aux625' order represents '2' with '5335'
-5333 5335 0
c Var 'aux625' direct represents '2' with '5336'
5333 -5335 5336 0
-5336 5335 0
-5336 -5333 0
c Var 'aux625' order represents '3' with '5337'
-5335 5337 0
c Var 'aux625' direct represents '3' with '5338'
5335 -5337 5338 0
-5338 5337 0
-5338 -5335 0
c Var 'aux625' direct represents '4' with '-5337'
5332 5334 5336 5338 -5337 0
c Encoding variable: aux626 with domain: int(0..4) (representing constraint (aux610 + aux609))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '5339'
c Var 'aux626' direct represents '0' with '5339'
c Var 'aux626' order represents '1' with '5340'
-5339 5340 0
c Var 'aux626' direct represents '1' with '5341'
5339 -5340 5341 0
-5341 5340 0
-5341 -5339 0
c Var 'aux626' order represents '2' with '5342'
-5340 5342 0
c Var 'aux626' direct represents '2' with '5343'
5340 -5342 5343 0
-5343 5342 0
-5343 -5340 0
c Var 'aux626' order represents '3' with '5344'
-5342 5344 0
c Var 'aux626' direct represents '3' with '5345'
5342 -5344 5345 0
-5345 5344 0
-5345 -5342 0
c Var 'aux626' direct represents '4' with '-5344'
5339 5341 5343 5345 -5344 0
c Encoding variable: aux627 with domain: int(0..4) (representing constraint (aux611 + aux612))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '5346'
c Var 'aux627' direct represents '0' with '5346'
c Var 'aux627' order represents '1' with '5347'
-5346 5347 0
c Var 'aux627' direct represents '1' with '5348'
5346 -5347 5348 0
-5348 5347 0
-5348 -5346 0
c Var 'aux627' order represents '2' with '5349'
-5347 5349 0
c Var 'aux627' direct represents '2' with '5350'
5347 -5349 5350 0
-5350 5349 0
-5350 -5347 0
c Var 'aux627' order represents '3' with '5351'
-5349 5351 0
c Var 'aux627' direct represents '3' with '5352'
5349 -5351 5352 0
-5352 5351 0
-5352 -5349 0
c Var 'aux627' direct represents '4' with '-5351'
5346 5348 5350 5352 -5351 0
c Encoding variable: aux628 with domain: int(0..4) (representing constraint (aux615 + aux618))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '5353'
c Var 'aux628' direct represents '0' with '5353'
c Var 'aux628' order represents '1' with '5354'
-5353 5354 0
c Var 'aux628' direct represents '1' with '5355'
5353 -5354 5355 0
-5355 5354 0
-5355 -5353 0
c Var 'aux628' order represents '2' with '5356'
-5354 5356 0
c Var 'aux628' direct represents '2' with '5357'
5354 -5356 5357 0
-5357 5356 0
-5357 -5354 0
c Var 'aux628' order represents '3' with '5358'
-5356 5358 0
c Var 'aux628' direct represents '3' with '5359'
5356 -5358 5359 0
-5359 5358 0
-5359 -5356 0
c Var 'aux628' direct represents '4' with '-5358'
5353 5355 5357 5359 -5358 0
c Encoding variable: aux629 with domain: int(0..4) (representing constraint (aux616 + aux608))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '5360'
c Var 'aux629' direct represents '0' with '5360'
c Var 'aux629' order represents '1' with '5361'
-5360 5361 0
c Var 'aux629' direct represents '1' with '5362'
5360 -5361 5362 0
-5362 5361 0
-5362 -5360 0
c Var 'aux629' order represents '2' with '5363'
-5361 5363 0
c Var 'aux629' direct represents '2' with '5364'
5361 -5363 5364 0
-5364 5363 0
-5364 -5361 0
c Var 'aux629' order represents '3' with '5365'
-5363 5365 0
c Var 'aux629' direct represents '3' with '5366'
5363 -5365 5366 0
-5366 5365 0
-5366 -5363 0
c Var 'aux629' direct represents '4' with '-5365'
5360 5362 5364 5366 -5365 0
c Encoding variable: aux630 with domain: int(0..8) (representing constraint (aux623 + aux629))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '5367'
c Var 'aux630' direct represents '0' with '5367'
c Var 'aux630' order represents '1' with '5368'
-5367 5368 0
c Var 'aux630' direct represents '1' with '5369'
5367 -5368 5369 0
-5369 5368 0
-5369 -5367 0
c Var 'aux630' order represents '2' with '5370'
-5368 5370 0
c Var 'aux630' direct represents '2' with '5371'
5368 -5370 5371 0
-5371 5370 0
-5371 -5368 0
c Var 'aux630' order represents '3' with '5372'
-5370 5372 0
c Var 'aux630' direct represents '3' with '5373'
5370 -5372 5373 0
-5373 5372 0
-5373 -5370 0
c Var 'aux630' order represents '4' with '5374'
-5372 5374 0
c Var 'aux630' direct represents '4' with '5375'
5372 -5374 5375 0
-5375 5374 0
-5375 -5372 0
c Var 'aux630' order represents '5' with '5376'
-5374 5376 0
c Var 'aux630' direct represents '5' with '5377'
5374 -5376 5377 0
-5377 5376 0
-5377 -5374 0
c Var 'aux630' order represents '6' with '5378'
-5376 5378 0
c Var 'aux630' direct represents '6' with '5379'
5376 -5378 5379 0
-5379 5378 0
-5379 -5376 0
c Var 'aux630' order represents '7' with '5380'
-5378 5380 0
c Var 'aux630' direct represents '7' with '5381'
5378 -5380 5381 0
-5381 5380 0
-5381 -5378 0
c Var 'aux630' direct represents '8' with '-5380'
5367 5369 5371 5373 5375 5377 5379 5381 -5380 0
c Encoding variable: aux631 with domain: int(0..8) (representing constraint (aux622 + aux626))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '5382'
c Var 'aux631' direct represents '0' with '5382'
c Var 'aux631' order represents '1' with '5383'
-5382 5383 0
c Var 'aux631' direct represents '1' with '5384'
5382 -5383 5384 0
-5384 5383 0
-5384 -5382 0
c Var 'aux631' order represents '2' with '5385'
-5383 5385 0
c Var 'aux631' direct represents '2' with '5386'
5383 -5385 5386 0
-5386 5385 0
-5386 -5383 0
c Var 'aux631' order represents '3' with '5387'
-5385 5387 0
c Var 'aux631' direct represents '3' with '5388'
5385 -5387 5388 0
-5388 5387 0
-5388 -5385 0
c Var 'aux631' order represents '4' with '5389'
-5387 5389 0
c Var 'aux631' direct represents '4' with '5390'
5387 -5389 5390 0
-5390 5389 0
-5390 -5387 0
c Var 'aux631' order represents '5' with '5391'
-5389 5391 0
c Var 'aux631' direct represents '5' with '5392'
5389 -5391 5392 0
-5392 5391 0
-5392 -5389 0
c Var 'aux631' order represents '6' with '5393'
-5391 5393 0
c Var 'aux631' direct represents '6' with '5394'
5391 -5393 5394 0
-5394 5393 0
-5394 -5391 0
c Var 'aux631' order represents '7' with '5395'
-5393 5395 0
c Var 'aux631' direct represents '7' with '5396'
5393 -5395 5396 0
-5396 5395 0
-5396 -5393 0
c Var 'aux631' direct represents '8' with '-5395'
5382 5384 5386 5388 5390 5392 5394 5396 -5395 0
c Encoding variable: aux632 with domain: int(0..8) (representing constraint (aux620 + aux621))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '5397'
c Var 'aux632' direct represents '0' with '5397'
c Var 'aux632' order represents '1' with '5398'
-5397 5398 0
c Var 'aux632' direct represents '1' with '5399'
5397 -5398 5399 0
-5399 5398 0
-5399 -5397 0
c Var 'aux632' order represents '2' with '5400'
-5398 5400 0
c Var 'aux632' direct represents '2' with '5401'
5398 -5400 5401 0
-5401 5400 0
-5401 -5398 0
c Var 'aux632' order represents '3' with '5402'
-5400 5402 0
c Var 'aux632' direct represents '3' with '5403'
5400 -5402 5403 0
-5403 5402 0
-5403 -5400 0
c Var 'aux632' order represents '4' with '5404'
-5402 5404 0
c Var 'aux632' direct represents '4' with '5405'
5402 -5404 5405 0
-5405 5404 0
-5405 -5402 0
c Var 'aux632' order represents '5' with '5406'
-5404 5406 0
c Var 'aux632' direct represents '5' with '5407'
5404 -5406 5407 0
-5407 5406 0
-5407 -5404 0
c Var 'aux632' order represents '6' with '5408'
-5406 5408 0
c Var 'aux632' direct represents '6' with '5409'
5406 -5408 5409 0
-5409 5408 0
-5409 -5406 0
c Var 'aux632' order represents '7' with '5410'
-5408 5410 0
c Var 'aux632' direct represents '7' with '5411'
5408 -5410 5411 0
-5411 5410 0
-5411 -5408 0
c Var 'aux632' direct represents '8' with '-5410'
5397 5399 5401 5403 5405 5407 5409 5411 -5410 0
c Encoding variable: aux633 with domain: int(0..8) (representing constraint (aux624 + aux625))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '5412'
c Var 'aux633' direct represents '0' with '5412'
c Var 'aux633' order represents '1' with '5413'
-5412 5413 0
c Var 'aux633' direct represents '1' with '5414'
5412 -5413 5414 0
-5414 5413 0
-5414 -5412 0
c Var 'aux633' order represents '2' with '5415'
-5413 5415 0
c Var 'aux633' direct represents '2' with '5416'
5413 -5415 5416 0
-5416 5415 0
-5416 -5413 0
c Var 'aux633' order represents '3' with '5417'
-5415 5417 0
c Var 'aux633' direct represents '3' with '5418'
5415 -5417 5418 0
-5418 5417 0
-5418 -5415 0
c Var 'aux633' order represents '4' with '5419'
-5417 5419 0
c Var 'aux633' direct represents '4' with '5420'
5417 -5419 5420 0
-5420 5419 0
-5420 -5417 0
c Var 'aux633' order represents '5' with '5421'
-5419 5421 0
c Var 'aux633' direct represents '5' with '5422'
5419 -5421 5422 0
-5422 5421 0
-5422 -5419 0
c Var 'aux633' order represents '6' with '5423'
-5421 5423 0
c Var 'aux633' direct represents '6' with '5424'
5421 -5423 5424 0
-5424 5423 0
-5424 -5421 0
c Var 'aux633' order represents '7' with '5425'
-5423 5425 0
c Var 'aux633' direct represents '7' with '5426'
5423 -5425 5426 0
-5426 5425 0
-5426 -5423 0
c Var 'aux633' direct represents '8' with '-5425'
5412 5414 5416 5418 5420 5422 5424 5426 -5425 0
c Encoding variable: aux634 with domain: int(0..8) (representing constraint (aux627 + aux628))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '5427'
c Var 'aux634' direct represents '0' with '5427'
c Var 'aux634' order represents '1' with '5428'
-5427 5428 0
c Var 'aux634' direct represents '1' with '5429'
5427 -5428 5429 0
-5429 5428 0
-5429 -5427 0
c Var 'aux634' order represents '2' with '5430'
-5428 5430 0
c Var 'aux634' direct represents '2' with '5431'
5428 -5430 5431 0
-5431 5430 0
-5431 -5428 0
c Var 'aux634' order represents '3' with '5432'
-5430 5432 0
c Var 'aux634' direct represents '3' with '5433'
5430 -5432 5433 0
-5433 5432 0
-5433 -5430 0
c Var 'aux634' order represents '4' with '5434'
-5432 5434 0
c Var 'aux634' direct represents '4' with '5435'
5432 -5434 5435 0
-5435 5434 0
-5435 -5432 0
c Var 'aux634' order represents '5' with '5436'
-5434 5436 0
c Var 'aux634' direct represents '5' with '5437'
5434 -5436 5437 0
-5437 5436 0
-5437 -5434 0
c Var 'aux634' order represents '6' with '5438'
-5436 5438 0
c Var 'aux634' direct represents '6' with '5439'
5436 -5438 5439 0
-5439 5438 0
-5439 -5436 0
c Var 'aux634' order represents '7' with '5440'
-5438 5440 0
c Var 'aux634' direct represents '7' with '5441'
5438 -5440 5441 0
-5441 5440 0
-5441 -5438 0
c Var 'aux634' direct represents '8' with '-5440'
5427 5429 5431 5433 5435 5437 5439 5441 -5440 0
c Encoding variable: aux635 with domain: int(0..16) (representing constraint (aux631 + aux634))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '5442'
c Var 'aux635' direct represents '0' with '5442'
c Var 'aux635' order represents '1' with '5443'
-5442 5443 0
c Var 'aux635' direct represents '1' with '5444'
5442 -5443 5444 0
-5444 5443 0
-5444 -5442 0
c Var 'aux635' order represents '2' with '5445'
-5443 5445 0
c Var 'aux635' direct represents '2' with '5446'
5443 -5445 5446 0
-5446 5445 0
-5446 -5443 0
c Var 'aux635' order represents '3' with '5447'
-5445 5447 0
c Var 'aux635' direct represents '3' with '5448'
5445 -5447 5448 0
-5448 5447 0
-5448 -5445 0
c Var 'aux635' order represents '4' with '5449'
-5447 5449 0
c Var 'aux635' direct represents '4' with '5450'
5447 -5449 5450 0
-5450 5449 0
-5450 -5447 0
c Var 'aux635' order represents '5' with '5451'
-5449 5451 0
c Var 'aux635' direct represents '5' with '5452'
5449 -5451 5452 0
-5452 5451 0
-5452 -5449 0
c Var 'aux635' order represents '6' with '5453'
-5451 5453 0
c Var 'aux635' direct represents '6' with '5454'
5451 -5453 5454 0
-5454 5453 0
-5454 -5451 0
c Var 'aux635' order represents '7' with '5455'
-5453 5455 0
c Var 'aux635' direct represents '7' with '5456'
5453 -5455 5456 0
-5456 5455 0
-5456 -5453 0
c Var 'aux635' order represents '8' with '5457'
-5455 5457 0
c Var 'aux635' direct represents '8' with '5458'
5455 -5457 5458 0
-5458 5457 0
-5458 -5455 0
c Var 'aux635' order represents '9' with '5459'
-5457 5459 0
c Var 'aux635' direct represents '9' with '5460'
5457 -5459 5460 0
-5460 5459 0
-5460 -5457 0
c Var 'aux635' order represents '10' with '5461'
-5459 5461 0
c Var 'aux635' direct represents '10' with '5462'
5459 -5461 5462 0
-5462 5461 0
-5462 -5459 0
c Var 'aux635' order represents '11' with '5463'
-5461 5463 0
c Var 'aux635' direct represents '11' with '5464'
5461 -5463 5464 0
-5464 5463 0
-5464 -5461 0
c Var 'aux635' order represents '12' with '5465'
-5463 5465 0
c Var 'aux635' direct represents '12' with '5466'
5463 -5465 5466 0
-5466 5465 0
-5466 -5463 0
c Var 'aux635' order represents '13' with '5467'
-5465 5467 0
c Var 'aux635' direct represents '13' with '5468'
5465 -5467 5468 0
-5468 5467 0
-5468 -5465 0
c Var 'aux635' order represents '14' with '5469'
-5467 5469 0
c Var 'aux635' direct represents '14' with '5470'
5467 -5469 5470 0
-5470 5469 0
-5470 -5467 0
c Var 'aux635' order represents '15' with '5471'
-5469 5471 0
c Var 'aux635' direct represents '15' with '5472'
5469 -5471 5472 0
-5472 5471 0
-5472 -5469 0
c Var 'aux635' direct represents '16' with '-5471'
5442 5444 5446 5448 5450 5452 5454 5456 5458 5460 5462 5464 5466 5468 5470 5472 -5471 0
c Encoding variable: aux636 with domain: int(0..16) (representing constraint (aux630 + aux632))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '5473'
c Var 'aux636' direct represents '0' with '5473'
c Var 'aux636' order represents '1' with '5474'
-5473 5474 0
c Var 'aux636' direct represents '1' with '5475'
5473 -5474 5475 0
-5475 5474 0
-5475 -5473 0
c Var 'aux636' order represents '2' with '5476'
-5474 5476 0
c Var 'aux636' direct represents '2' with '5477'
5474 -5476 5477 0
-5477 5476 0
-5477 -5474 0
c Var 'aux636' order represents '3' with '5478'
-5476 5478 0
c Var 'aux636' direct represents '3' with '5479'
5476 -5478 5479 0
-5479 5478 0
-5479 -5476 0
c Var 'aux636' order represents '4' with '5480'
-5478 5480 0
c Var 'aux636' direct represents '4' with '5481'
5478 -5480 5481 0
-5481 5480 0
-5481 -5478 0
c Var 'aux636' order represents '5' with '5482'
-5480 5482 0
c Var 'aux636' direct represents '5' with '5483'
5480 -5482 5483 0
-5483 5482 0
-5483 -5480 0
c Var 'aux636' order represents '6' with '5484'
-5482 5484 0
c Var 'aux636' direct represents '6' with '5485'
5482 -5484 5485 0
-5485 5484 0
-5485 -5482 0
c Var 'aux636' order represents '7' with '5486'
-5484 5486 0
c Var 'aux636' direct represents '7' with '5487'
5484 -5486 5487 0
-5487 5486 0
-5487 -5484 0
c Var 'aux636' order represents '8' with '5488'
-5486 5488 0
c Var 'aux636' direct represents '8' with '5489'
5486 -5488 5489 0
-5489 5488 0
-5489 -5486 0
c Var 'aux636' order represents '9' with '5490'
-5488 5490 0
c Var 'aux636' direct represents '9' with '5491'
5488 -5490 5491 0
-5491 5490 0
-5491 -5488 0
c Var 'aux636' order represents '10' with '5492'
-5490 5492 0
c Var 'aux636' direct represents '10' with '5493'
5490 -5492 5493 0
-5493 5492 0
-5493 -5490 0
c Var 'aux636' order represents '11' with '5494'
-5492 5494 0
c Var 'aux636' direct represents '11' with '5495'
5492 -5494 5495 0
-5495 5494 0
-5495 -5492 0
c Var 'aux636' order represents '12' with '5496'
-5494 5496 0
c Var 'aux636' direct represents '12' with '5497'
5494 -5496 5497 0
-5497 5496 0
-5497 -5494 0
c Var 'aux636' order represents '13' with '5498'
-5496 5498 0
c Var 'aux636' direct represents '13' with '5499'
5496 -5498 5499 0
-5499 5498 0
-5499 -5496 0
c Var 'aux636' order represents '14' with '5500'
-5498 5500 0
c Var 'aux636' direct represents '14' with '5501'
5498 -5500 5501 0
-5501 5500 0
-5501 -5498 0
c Var 'aux636' order represents '15' with '5502'
-5500 5502 0
c Var 'aux636' direct represents '15' with '5503'
5500 -5502 5503 0
-5503 5502 0
-5503 -5500 0
c Var 'aux636' direct represents '16' with '-5502'
5473 5475 5477 5479 5481 5483 5485 5487 5489 5491 5493 5495 5497 5499 5501 5503 -5502 0
c Encoding variable: aux637 with domain: int(0..2) (representing constraint ((8=grid_00005_00000) + (grid_00000_00006=8)))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '5504'
c Var 'aux637' direct represents '0' with '5504'
c Var 'aux637' order represents '1' with '5505'
-5504 5505 0
c Var 'aux637' direct represents '1' with '5506'
5504 -5505 5506 0
-5506 5505 0
-5506 -5504 0
c Var 'aux637' direct represents '2' with '-5505'
5504 5506 -5505 0
c Encoding variable: aux638 with domain: int(0..2) (representing constraint ((grid_00000_00005=8) + (8=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '5507'
c Var 'aux638' direct represents '0' with '5507'
c Var 'aux638' order represents '1' with '5508'
-5507 5508 0
c Var 'aux638' direct represents '1' with '5509'
5507 -5508 5509 0
-5509 5508 0
-5509 -5507 0
c Var 'aux638' direct represents '2' with '-5508'
5507 5509 -5508 0
c Encoding variable: aux639 with domain: int(0..2) (representing constraint ((grid_00000_00004=8) + (8=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '5510'
c Var 'aux639' direct represents '0' with '5510'
c Var 'aux639' order represents '1' with '5511'
-5510 5511 0
c Var 'aux639' direct represents '1' with '5512'
5510 -5511 5512 0
-5512 5511 0
-5512 -5510 0
c Var 'aux639' direct represents '2' with '-5511'
5510 5512 -5511 0
c Encoding variable: aux640 with domain: int(0..2) (representing constraint ((grid_00000_00003=8) + (grid_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '5513'
c Var 'aux640' direct represents '0' with '5513'
c Var 'aux640' order represents '1' with '5514'
-5513 5514 0
c Var 'aux640' direct represents '1' with '5515'
5513 -5514 5515 0
-5515 5514 0
-5515 -5513 0
c Var 'aux640' direct represents '2' with '-5514'
5513 5515 -5514 0
c Encoding variable: aux641 with domain: int(0..2) (representing constraint ((grid_00000_00002=8) + (8=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '5516'
c Var 'aux641' direct represents '0' with '5516'
c Var 'aux641' order represents '1' with '5517'
-5516 5517 0
c Var 'aux641' direct represents '1' with '5518'
5516 -5517 5518 0
-5518 5517 0
-5518 -5516 0
c Var 'aux641' direct represents '2' with '-5517'
5516 5518 -5517 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((grid_00000_00001=8) + (grid_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '5519'
c Var 'aux642' direct represents '0' with '5519'
c Var 'aux642' order represents '1' with '5520'
-5519 5520 0
c Var 'aux642' direct represents '1' with '5521'
5519 -5520 5521 0
-5521 5520 0
-5521 -5519 0
c Var 'aux642' direct represents '2' with '-5520'
5519 5521 -5520 0
c Encoding variable: aux643 with domain: int(0..2) (representing constraint ((grid_00004_00005=8) + (8=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '5522'
c Var 'aux643' direct represents '0' with '5522'
c Var 'aux643' order represents '1' with '5523'
-5522 5523 0
c Var 'aux643' direct represents '1' with '5524'
5522 -5523 5524 0
-5524 5523 0
-5524 -5522 0
c Var 'aux643' direct represents '2' with '-5523'
5522 5524 -5523 0
c Encoding variable: aux644 with domain: int(0..2) (representing constraint ((grid_00004_00006=8) + (grid_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '5525'
c Var 'aux644' direct represents '0' with '5525'
c Var 'aux644' order represents '1' with '5526'
-5525 5526 0
c Var 'aux644' direct represents '1' with '5527'
5525 -5526 5527 0
-5527 5526 0
-5527 -5525 0
c Var 'aux644' direct represents '2' with '-5526'
5525 5527 -5526 0
c Encoding variable: aux645 with domain: int(0..2) (representing constraint ((8=grid_00006_00004) + (8=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '5528'
c Var 'aux645' direct represents '0' with '5528'
c Var 'aux645' order represents '1' with '5529'
-5528 5529 0
c Var 'aux645' direct represents '1' with '5530'
5528 -5529 5530 0
-5530 5529 0
-5530 -5528 0
c Var 'aux645' direct represents '2' with '-5529'
5528 5530 -5529 0
c Encoding variable: aux646 with domain: int(0..2) (representing constraint ((grid_00004_00003=8) + (grid_00003_00000=8)))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '5531'
c Var 'aux646' direct represents '0' with '5531'
c Var 'aux646' order represents '1' with '5532'
-5531 5532 0
c Var 'aux646' direct represents '1' with '5533'
5531 -5532 5533 0
-5533 5532 0
-5533 -5531 0
c Var 'aux646' direct represents '2' with '-5532'
5531 5533 -5532 0
c Encoding variable: aux647 with domain: int(0..2) (representing constraint ((grid_00004_00002=8) + (8=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '5534'
c Var 'aux647' direct represents '0' with '5534'
c Var 'aux647' order represents '1' with '5535'
-5534 5535 0
c Var 'aux647' direct represents '1' with '5536'
5534 -5535 5536 0
-5536 5535 0
-5536 -5534 0
c Var 'aux647' direct represents '2' with '-5535'
5534 5536 -5535 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((grid_00004_00001=8) + (8=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '5537'
c Var 'aux648' direct represents '0' with '5537'
c Var 'aux648' order represents '1' with '5538'
-5537 5538 0
c Var 'aux648' direct represents '1' with '5539'
5537 -5538 5539 0
-5539 5538 0
-5539 -5537 0
c Var 'aux648' direct represents '2' with '-5538'
5537 5539 -5538 0
c Encoding variable: aux649 with domain: int(0..2) (representing constraint ((grid_00004_00000=8) + (8=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '5540'
c Var 'aux649' direct represents '0' with '5540'
c Var 'aux649' order represents '1' with '5541'
-5540 5541 0
c Var 'aux649' direct represents '1' with '5542'
5540 -5541 5542 0
-5542 5541 0
-5542 -5540 0
c Var 'aux649' direct represents '2' with '-5541'
5540 5542 -5541 0
c Encoding variable: aux650 with domain: int(0..2) (representing constraint ((8=grid_00002_00006) + (8=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '5543'
c Var 'aux650' direct represents '0' with '5543'
c Var 'aux650' order represents '1' with '5544'
-5543 5544 0
c Var 'aux650' direct represents '1' with '5545'
5543 -5544 5545 0
-5545 5544 0
-5545 -5543 0
c Var 'aux650' direct represents '2' with '-5544'
5543 5545 -5544 0
c Encoding variable: aux651 with domain: int(0..2) (representing constraint ((8=grid_00002_00005) + (8=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '5546'
c Var 'aux651' direct represents '0' with '5546'
c Var 'aux651' order represents '1' with '5547'
-5546 5547 0
c Var 'aux651' direct represents '1' with '5548'
5546 -5547 5548 0
-5548 5547 0
-5548 -5546 0
c Var 'aux651' direct represents '2' with '-5547'
5546 5548 -5547 0
c Encoding variable: aux652 with domain: int(0..2) (representing constraint ((8=grid_00002_00004) + (8=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '5549'
c Var 'aux652' direct represents '0' with '5549'
c Var 'aux652' order represents '1' with '5550'
-5549 5550 0
c Var 'aux652' direct represents '1' with '5551'
5549 -5550 5551 0
-5551 5550 0
-5551 -5549 0
c Var 'aux652' direct represents '2' with '-5550'
5549 5551 -5550 0
c Encoding variable: aux653 with domain: int(0..2) (representing constraint ((8=grid_00002_00003) + (8=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '5552'
c Var 'aux653' direct represents '0' with '5552'
c Var 'aux653' order represents '1' with '5553'
-5552 5553 0
c Var 'aux653' direct represents '1' with '5554'
5552 -5553 5554 0
-5554 5553 0
-5554 -5552 0
c Var 'aux653' direct represents '2' with '-5553'
5552 5554 -5553 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((grid_00003_00002=8) + (8=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '5555'
c Var 'aux654' direct represents '0' with '5555'
c Var 'aux654' order represents '1' with '5556'
-5555 5556 0
c Var 'aux654' direct represents '1' with '5557'
5555 -5556 5557 0
-5557 5556 0
-5557 -5555 0
c Var 'aux654' direct represents '2' with '-5556'
5555 5557 -5556 0
c Encoding variable: aux655 with domain: int(0..2) (representing constraint ((8=grid_00001_00005) + (grid_00003_00003=8)))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '5558'
c Var 'aux655' direct represents '0' with '5558'
c Var 'aux655' order represents '1' with '5559'
-5558 5559 0
c Var 'aux655' direct represents '1' with '5560'
5558 -5559 5560 0
-5560 5559 0
-5560 -5558 0
c Var 'aux655' direct represents '2' with '-5559'
5558 5560 -5559 0
c Encoding variable: aux656 with domain: int(0..2) (representing constraint ((8=grid_00006_00000) + (8=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '5561'
c Var 'aux656' direct represents '0' with '5561'
c Var 'aux656' order represents '1' with '5562'
-5561 5562 0
c Var 'aux656' direct represents '1' with '5563'
5561 -5562 5563 0
-5563 5562 0
-5563 -5561 0
c Var 'aux656' direct represents '2' with '-5562'
5561 5563 -5562 0
c Encoding variable: aux657 with domain: int(0..4) (representing constraint (aux644 + aux656))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '5564'
c Var 'aux657' direct represents '0' with '5564'
c Var 'aux657' order represents '1' with '5565'
-5564 5565 0
c Var 'aux657' direct represents '1' with '5566'
5564 -5565 5566 0
-5566 5565 0
-5566 -5564 0
c Var 'aux657' order represents '2' with '5567'
-5565 5567 0
c Var 'aux657' direct represents '2' with '5568'
5565 -5567 5568 0
-5568 5567 0
-5568 -5565 0
c Var 'aux657' order represents '3' with '5569'
-5567 5569 0
c Var 'aux657' direct represents '3' with '5570'
5567 -5569 5570 0
-5570 5569 0
-5570 -5567 0
c Var 'aux657' direct represents '4' with '-5569'
5564 5566 5568 5570 -5569 0
c Encoding variable: aux658 with domain: int(0..4) (representing constraint (aux638 + aux651))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '5571'
c Var 'aux658' direct represents '0' with '5571'
c Var 'aux658' order represents '1' with '5572'
-5571 5572 0
c Var 'aux658' direct represents '1' with '5573'
5571 -5572 5573 0
-5573 5572 0
-5573 -5571 0
c Var 'aux658' order represents '2' with '5574'
-5572 5574 0
c Var 'aux658' direct represents '2' with '5575'
5572 -5574 5575 0
-5575 5574 0
-5575 -5572 0
c Var 'aux658' order represents '3' with '5576'
-5574 5576 0
c Var 'aux658' direct represents '3' with '5577'
5574 -5576 5577 0
-5577 5576 0
-5577 -5574 0
c Var 'aux658' direct represents '4' with '-5576'
5571 5573 5575 5577 -5576 0
c Encoding variable: aux659 with domain: int(0..4) (representing constraint (aux642 + aux637))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '5578'
c Var 'aux659' direct represents '0' with '5578'
c Var 'aux659' order represents '1' with '5579'
-5578 5579 0
c Var 'aux659' direct represents '1' with '5580'
5578 -5579 5580 0
-5580 5579 0
-5580 -5578 0
c Var 'aux659' order represents '2' with '5581'
-5579 5581 0
c Var 'aux659' direct represents '2' with '5582'
5579 -5581 5582 0
-5582 5581 0
-5582 -5579 0
c Var 'aux659' order represents '3' with '5583'
-5581 5583 0
c Var 'aux659' direct represents '3' with '5584'
5581 -5583 5584 0
-5584 5583 0
-5584 -5581 0
c Var 'aux659' direct represents '4' with '-5583'
5578 5580 5582 5584 -5583 0
c Encoding variable: aux660 with domain: int(0..4) (representing constraint (aux640 + aux639))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '5585'
c Var 'aux660' direct represents '0' with '5585'
c Var 'aux660' order represents '1' with '5586'
-5585 5586 0
c Var 'aux660' direct represents '1' with '5587'
5585 -5586 5587 0
-5587 5586 0
-5587 -5585 0
c Var 'aux660' order represents '2' with '5588'
-5586 5588 0
c Var 'aux660' direct represents '2' with '5589'
5586 -5588 5589 0
-5589 5588 0
-5589 -5586 0
c Var 'aux660' order represents '3' with '5590'
-5588 5590 0
c Var 'aux660' direct represents '3' with '5591'
5588 -5590 5591 0
-5591 5590 0
-5591 -5588 0
c Var 'aux660' direct represents '4' with '-5590'
5585 5587 5589 5591 -5590 0
c Encoding variable: aux661 with domain: int(0..4) (representing constraint (aux641 + aux643))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '5592'
c Var 'aux661' direct represents '0' with '5592'
c Var 'aux661' order represents '1' with '5593'
-5592 5593 0
c Var 'aux661' direct represents '1' with '5594'
5592 -5593 5594 0
-5594 5593 0
-5594 -5592 0
c Var 'aux661' order represents '2' with '5595'
-5593 5595 0
c Var 'aux661' direct represents '2' with '5596'
5593 -5595 5596 0
-5596 5595 0
-5596 -5593 0
c Var 'aux661' order represents '3' with '5597'
-5595 5597 0
c Var 'aux661' direct represents '3' with '5598'
5595 -5597 5598 0
-5598 5597 0
-5598 -5595 0
c Var 'aux661' direct represents '4' with '-5597'
5592 5594 5596 5598 -5597 0
c Encoding variable: aux662 with domain: int(0..4) (representing constraint (aux654 + aux650))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '5599'
c Var 'aux662' direct represents '0' with '5599'
c Var 'aux662' order represents '1' with '5600'
-5599 5600 0
c Var 'aux662' direct represents '1' with '5601'
5599 -5600 5601 0
-5601 5600 0
-5601 -5599 0
c Var 'aux662' order represents '2' with '5602'
-5600 5602 0
c Var 'aux662' direct represents '2' with '5603'
5600 -5602 5603 0
-5603 5602 0
-5603 -5600 0
c Var 'aux662' order represents '3' with '5604'
-5602 5604 0
c Var 'aux662' direct represents '3' with '5605'
5602 -5604 5605 0
-5605 5604 0
-5605 -5602 0
c Var 'aux662' direct represents '4' with '-5604'
5599 5601 5603 5605 -5604 0
c Encoding variable: aux663 with domain: int(0..4) (representing constraint (aux647 + aux646))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '5606'
c Var 'aux663' direct represents '0' with '5606'
c Var 'aux663' order represents '1' with '5607'
-5606 5607 0
c Var 'aux663' direct represents '1' with '5608'
5606 -5607 5608 0
-5608 5607 0
-5608 -5606 0
c Var 'aux663' order represents '2' with '5609'
-5607 5609 0
c Var 'aux663' direct represents '2' with '5610'
5607 -5609 5610 0
-5610 5609 0
-5610 -5607 0
c Var 'aux663' order represents '3' with '5611'
-5609 5611 0
c Var 'aux663' direct represents '3' with '5612'
5609 -5611 5612 0
-5612 5611 0
-5612 -5609 0
c Var 'aux663' direct represents '4' with '-5611'
5606 5608 5610 5612 -5611 0
c Encoding variable: aux664 with domain: int(0..4) (representing constraint (aux648 + aux649))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '5613'
c Var 'aux664' direct represents '0' with '5613'
c Var 'aux664' order represents '1' with '5614'
-5613 5614 0
c Var 'aux664' direct represents '1' with '5615'
5613 -5614 5615 0
-5615 5614 0
-5615 -5613 0
c Var 'aux664' order represents '2' with '5616'
-5614 5616 0
c Var 'aux664' direct represents '2' with '5617'
5614 -5616 5617 0
-5617 5616 0
-5617 -5614 0
c Var 'aux664' order represents '3' with '5618'
-5616 5618 0
c Var 'aux664' direct represents '3' with '5619'
5616 -5618 5619 0
-5619 5618 0
-5619 -5616 0
c Var 'aux664' direct represents '4' with '-5618'
5613 5615 5617 5619 -5618 0
c Encoding variable: aux665 with domain: int(0..4) (representing constraint (aux652 + aux655))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '5620'
c Var 'aux665' direct represents '0' with '5620'
c Var 'aux665' order represents '1' with '5621'
-5620 5621 0
c Var 'aux665' direct represents '1' with '5622'
5620 -5621 5622 0
-5622 5621 0
-5622 -5620 0
c Var 'aux665' order represents '2' with '5623'
-5621 5623 0
c Var 'aux665' direct represents '2' with '5624'
5621 -5623 5624 0
-5624 5623 0
-5624 -5621 0
c Var 'aux665' order represents '3' with '5625'
-5623 5625 0
c Var 'aux665' direct represents '3' with '5626'
5623 -5625 5626 0
-5626 5625 0
-5626 -5623 0
c Var 'aux665' direct represents '4' with '-5625'
5620 5622 5624 5626 -5625 0
c Encoding variable: aux666 with domain: int(0..4) (representing constraint (aux653 + aux645))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '5627'
c Var 'aux666' direct represents '0' with '5627'
c Var 'aux666' order represents '1' with '5628'
-5627 5628 0
c Var 'aux666' direct represents '1' with '5629'
5627 -5628 5629 0
-5629 5628 0
-5629 -5627 0
c Var 'aux666' order represents '2' with '5630'
-5628 5630 0
c Var 'aux666' direct represents '2' with '5631'
5628 -5630 5631 0
-5631 5630 0
-5631 -5628 0
c Var 'aux666' order represents '3' with '5632'
-5630 5632 0
c Var 'aux666' direct represents '3' with '5633'
5630 -5632 5633 0
-5633 5632 0
-5633 -5630 0
c Var 'aux666' direct represents '4' with '-5632'
5627 5629 5631 5633 -5632 0
c Encoding variable: aux667 with domain: int(0..8) (representing constraint (aux660 + aux666))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '5634'
c Var 'aux667' direct represents '0' with '5634'
c Var 'aux667' order represents '1' with '5635'
-5634 5635 0
c Var 'aux667' direct represents '1' with '5636'
5634 -5635 5636 0
-5636 5635 0
-5636 -5634 0
c Var 'aux667' order represents '2' with '5637'
-5635 5637 0
c Var 'aux667' direct represents '2' with '5638'
5635 -5637 5638 0
-5638 5637 0
-5638 -5635 0
c Var 'aux667' order represents '3' with '5639'
-5637 5639 0
c Var 'aux667' direct represents '3' with '5640'
5637 -5639 5640 0
-5640 5639 0
-5640 -5637 0
c Var 'aux667' order represents '4' with '5641'
-5639 5641 0
c Var 'aux667' direct represents '4' with '5642'
5639 -5641 5642 0
-5642 5641 0
-5642 -5639 0
c Var 'aux667' order represents '5' with '5643'
-5641 5643 0
c Var 'aux667' direct represents '5' with '5644'
5641 -5643 5644 0
-5644 5643 0
-5644 -5641 0
c Var 'aux667' order represents '6' with '5645'
-5643 5645 0
c Var 'aux667' direct represents '6' with '5646'
5643 -5645 5646 0
-5646 5645 0
-5646 -5643 0
c Var 'aux667' order represents '7' with '5647'
-5645 5647 0
c Var 'aux667' direct represents '7' with '5648'
5645 -5647 5648 0
-5648 5647 0
-5648 -5645 0
c Var 'aux667' direct represents '8' with '-5647'
5634 5636 5638 5640 5642 5644 5646 5648 -5647 0
c Encoding variable: aux668 with domain: int(0..8) (representing constraint (aux659 + aux663))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '5649'
c Var 'aux668' direct represents '0' with '5649'
c Var 'aux668' order represents '1' with '5650'
-5649 5650 0
c Var 'aux668' direct represents '1' with '5651'
5649 -5650 5651 0
-5651 5650 0
-5651 -5649 0
c Var 'aux668' order represents '2' with '5652'
-5650 5652 0
c Var 'aux668' direct represents '2' with '5653'
5650 -5652 5653 0
-5653 5652 0
-5653 -5650 0
c Var 'aux668' order represents '3' with '5654'
-5652 5654 0
c Var 'aux668' direct represents '3' with '5655'
5652 -5654 5655 0
-5655 5654 0
-5655 -5652 0
c Var 'aux668' order represents '4' with '5656'
-5654 5656 0
c Var 'aux668' direct represents '4' with '5657'
5654 -5656 5657 0
-5657 5656 0
-5657 -5654 0
c Var 'aux668' order represents '5' with '5658'
-5656 5658 0
c Var 'aux668' direct represents '5' with '5659'
5656 -5658 5659 0
-5659 5658 0
-5659 -5656 0
c Var 'aux668' order represents '6' with '5660'
-5658 5660 0
c Var 'aux668' direct represents '6' with '5661'
5658 -5660 5661 0
-5661 5660 0
-5661 -5658 0
c Var 'aux668' order represents '7' with '5662'
-5660 5662 0
c Var 'aux668' direct represents '7' with '5663'
5660 -5662 5663 0
-5663 5662 0
-5663 -5660 0
c Var 'aux668' direct represents '8' with '-5662'
5649 5651 5653 5655 5657 5659 5661 5663 -5662 0
c Encoding variable: aux669 with domain: int(0..8) (representing constraint (aux657 + aux658))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '5664'
c Var 'aux669' direct represents '0' with '5664'
c Var 'aux669' order represents '1' with '5665'
-5664 5665 0
c Var 'aux669' direct represents '1' with '5666'
5664 -5665 5666 0
-5666 5665 0
-5666 -5664 0
c Var 'aux669' order represents '2' with '5667'
-5665 5667 0
c Var 'aux669' direct represents '2' with '5668'
5665 -5667 5668 0
-5668 5667 0
-5668 -5665 0
c Var 'aux669' order represents '3' with '5669'
-5667 5669 0
c Var 'aux669' direct represents '3' with '5670'
5667 -5669 5670 0
-5670 5669 0
-5670 -5667 0
c Var 'aux669' order represents '4' with '5671'
-5669 5671 0
c Var 'aux669' direct represents '4' with '5672'
5669 -5671 5672 0
-5672 5671 0
-5672 -5669 0
c Var 'aux669' order represents '5' with '5673'
-5671 5673 0
c Var 'aux669' direct represents '5' with '5674'
5671 -5673 5674 0
-5674 5673 0
-5674 -5671 0
c Var 'aux669' order represents '6' with '5675'
-5673 5675 0
c Var 'aux669' direct represents '6' with '5676'
5673 -5675 5676 0
-5676 5675 0
-5676 -5673 0
c Var 'aux669' order represents '7' with '5677'
-5675 5677 0
c Var 'aux669' direct represents '7' with '5678'
5675 -5677 5678 0
-5678 5677 0
-5678 -5675 0
c Var 'aux669' direct represents '8' with '-5677'
5664 5666 5668 5670 5672 5674 5676 5678 -5677 0
c Encoding variable: aux670 with domain: int(0..8) (representing constraint (aux661 + aux662))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '5679'
c Var 'aux670' direct represents '0' with '5679'
c Var 'aux670' order represents '1' with '5680'
-5679 5680 0
c Var 'aux670' direct represents '1' with '5681'
5679 -5680 5681 0
-5681 5680 0
-5681 -5679 0
c Var 'aux670' order represents '2' with '5682'
-5680 5682 0
c Var 'aux670' direct represents '2' with '5683'
5680 -5682 5683 0
-5683 5682 0
-5683 -5680 0
c Var 'aux670' order represents '3' with '5684'
-5682 5684 0
c Var 'aux670' direct represents '3' with '5685'
5682 -5684 5685 0
-5685 5684 0
-5685 -5682 0
c Var 'aux670' order represents '4' with '5686'
-5684 5686 0
c Var 'aux670' direct represents '4' with '5687'
5684 -5686 5687 0
-5687 5686 0
-5687 -5684 0
c Var 'aux670' order represents '5' with '5688'
-5686 5688 0
c Var 'aux670' direct represents '5' with '5689'
5686 -5688 5689 0
-5689 5688 0
-5689 -5686 0
c Var 'aux670' order represents '6' with '5690'
-5688 5690 0
c Var 'aux670' direct represents '6' with '5691'
5688 -5690 5691 0
-5691 5690 0
-5691 -5688 0
c Var 'aux670' order represents '7' with '5692'
-5690 5692 0
c Var 'aux670' direct represents '7' with '5693'
5690 -5692 5693 0
-5693 5692 0
-5693 -5690 0
c Var 'aux670' direct represents '8' with '-5692'
5679 5681 5683 5685 5687 5689 5691 5693 -5692 0
c Encoding variable: aux671 with domain: int(0..8) (representing constraint (aux664 + aux665))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '5694'
c Var 'aux671' direct represents '0' with '5694'
c Var 'aux671' order represents '1' with '5695'
-5694 5695 0
c Var 'aux671' direct represents '1' with '5696'
5694 -5695 5696 0
-5696 5695 0
-5696 -5694 0
c Var 'aux671' order represents '2' with '5697'
-5695 5697 0
c Var 'aux671' direct represents '2' with '5698'
5695 -5697 5698 0
-5698 5697 0
-5698 -5695 0
c Var 'aux671' order represents '3' with '5699'
-5697 5699 0
c Var 'aux671' direct represents '3' with '5700'
5697 -5699 5700 0
-5700 5699 0
-5700 -5697 0
c Var 'aux671' order represents '4' with '5701'
-5699 5701 0
c Var 'aux671' direct represents '4' with '5702'
5699 -5701 5702 0
-5702 5701 0
-5702 -5699 0
c Var 'aux671' order represents '5' with '5703'
-5701 5703 0
c Var 'aux671' direct represents '5' with '5704'
5701 -5703 5704 0
-5704 5703 0
-5704 -5701 0
c Var 'aux671' order represents '6' with '5705'
-5703 5705 0
c Var 'aux671' direct represents '6' with '5706'
5703 -5705 5706 0
-5706 5705 0
-5706 -5703 0
c Var 'aux671' order represents '7' with '5707'
-5705 5707 0
c Var 'aux671' direct represents '7' with '5708'
5705 -5707 5708 0
-5708 5707 0
-5708 -5705 0
c Var 'aux671' direct represents '8' with '-5707'
5694 5696 5698 5700 5702 5704 5706 5708 -5707 0
c Encoding variable: aux672 with domain: int(0..16) (representing constraint (aux668 + aux671))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '5709'
c Var 'aux672' direct represents '0' with '5709'
c Var 'aux672' order represents '1' with '5710'
-5709 5710 0
c Var 'aux672' direct represents '1' with '5711'
5709 -5710 5711 0
-5711 5710 0
-5711 -5709 0
c Var 'aux672' order represents '2' with '5712'
-5710 5712 0
c Var 'aux672' direct represents '2' with '5713'
5710 -5712 5713 0
-5713 5712 0
-5713 -5710 0
c Var 'aux672' order represents '3' with '5714'
-5712 5714 0
c Var 'aux672' direct represents '3' with '5715'
5712 -5714 5715 0
-5715 5714 0
-5715 -5712 0
c Var 'aux672' order represents '4' with '5716'
-5714 5716 0
c Var 'aux672' direct represents '4' with '5717'
5714 -5716 5717 0
-5717 5716 0
-5717 -5714 0
c Var 'aux672' order represents '5' with '5718'
-5716 5718 0
c Var 'aux672' direct represents '5' with '5719'
5716 -5718 5719 0
-5719 5718 0
-5719 -5716 0
c Var 'aux672' order represents '6' with '5720'
-5718 5720 0
c Var 'aux672' direct represents '6' with '5721'
5718 -5720 5721 0
-5721 5720 0
-5721 -5718 0
c Var 'aux672' order represents '7' with '5722'
-5720 5722 0
c Var 'aux672' direct represents '7' with '5723'
5720 -5722 5723 0
-5723 5722 0
-5723 -5720 0
c Var 'aux672' order represents '8' with '5724'
-5722 5724 0
c Var 'aux672' direct represents '8' with '5725'
5722 -5724 5725 0
-5725 5724 0
-5725 -5722 0
c Var 'aux672' order represents '9' with '5726'
-5724 5726 0
c Var 'aux672' direct represents '9' with '5727'
5724 -5726 5727 0
-5727 5726 0
-5727 -5724 0
c Var 'aux672' order represents '10' with '5728'
-5726 5728 0
c Var 'aux672' direct represents '10' with '5729'
5726 -5728 5729 0
-5729 5728 0
-5729 -5726 0
c Var 'aux672' order represents '11' with '5730'
-5728 5730 0
c Var 'aux672' direct represents '11' with '5731'
5728 -5730 5731 0
-5731 5730 0
-5731 -5728 0
c Var 'aux672' order represents '12' with '5732'
-5730 5732 0
c Var 'aux672' direct represents '12' with '5733'
5730 -5732 5733 0
-5733 5732 0
-5733 -5730 0
c Var 'aux672' order represents '13' with '5734'
-5732 5734 0
c Var 'aux672' direct represents '13' with '5735'
5732 -5734 5735 0
-5735 5734 0
-5735 -5732 0
c Var 'aux672' order represents '14' with '5736'
-5734 5736 0
c Var 'aux672' direct represents '14' with '5737'
5734 -5736 5737 0
-5737 5736 0
-5737 -5734 0
c Var 'aux672' order represents '15' with '5738'
-5736 5738 0
c Var 'aux672' direct represents '15' with '5739'
5736 -5738 5739 0
-5739 5738 0
-5739 -5736 0
c Var 'aux672' direct represents '16' with '-5738'
5709 5711 5713 5715 5717 5719 5721 5723 5725 5727 5729 5731 5733 5735 5737 5739 -5738 0
c Encoding variable: aux673 with domain: int(0..16) (representing constraint (aux667 + aux669))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '5740'
c Var 'aux673' direct represents '0' with '5740'
c Var 'aux673' order represents '1' with '5741'
-5740 5741 0
c Var 'aux673' direct represents '1' with '5742'
5740 -5741 5742 0
-5742 5741 0
-5742 -5740 0
c Var 'aux673' order represents '2' with '5743'
-5741 5743 0
c Var 'aux673' direct represents '2' with '5744'
5741 -5743 5744 0
-5744 5743 0
-5744 -5741 0
c Var 'aux673' order represents '3' with '5745'
-5743 5745 0
c Var 'aux673' direct represents '3' with '5746'
5743 -5745 5746 0
-5746 5745 0
-5746 -5743 0
c Var 'aux673' order represents '4' with '5747'
-5745 5747 0
c Var 'aux673' direct represents '4' with '5748'
5745 -5747 5748 0
-5748 5747 0
-5748 -5745 0
c Var 'aux673' order represents '5' with '5749'
-5747 5749 0
c Var 'aux673' direct represents '5' with '5750'
5747 -5749 5750 0
-5750 5749 0
-5750 -5747 0
c Var 'aux673' order represents '6' with '5751'
-5749 5751 0
c Var 'aux673' direct represents '6' with '5752'
5749 -5751 5752 0
-5752 5751 0
-5752 -5749 0
c Var 'aux673' order represents '7' with '5753'
-5751 5753 0
c Var 'aux673' direct represents '7' with '5754'
5751 -5753 5754 0
-5754 5753 0
-5754 -5751 0
c Var 'aux673' order represents '8' with '5755'
-5753 5755 0
c Var 'aux673' direct represents '8' with '5756'
5753 -5755 5756 0
-5756 5755 0
-5756 -5753 0
c Var 'aux673' order represents '9' with '5757'
-5755 5757 0
c Var 'aux673' direct represents '9' with '5758'
5755 -5757 5758 0
-5758 5757 0
-5758 -5755 0
c Var 'aux673' order represents '10' with '5759'
-5757 5759 0
c Var 'aux673' direct represents '10' with '5760'
5757 -5759 5760 0
-5760 5759 0
-5760 -5757 0
c Var 'aux673' order represents '11' with '5761'
-5759 5761 0
c Var 'aux673' direct represents '11' with '5762'
5759 -5761 5762 0
-5762 5761 0
-5762 -5759 0
c Var 'aux673' order represents '12' with '5763'
-5761 5763 0
c Var 'aux673' direct represents '12' with '5764'
5761 -5763 5764 0
-5764 5763 0
-5764 -5761 0
c Var 'aux673' order represents '13' with '5765'
-5763 5765 0
c Var 'aux673' direct represents '13' with '5766'
5763 -5765 5766 0
-5766 5765 0
-5766 -5763 0
c Var 'aux673' order represents '14' with '5767'
-5765 5767 0
c Var 'aux673' direct represents '14' with '5768'
5765 -5767 5768 0
-5768 5767 0
-5768 -5765 0
c Var 'aux673' order represents '15' with '5769'
-5767 5769 0
c Var 'aux673' direct represents '15' with '5770'
5767 -5769 5770 0
-5770 5769 0
-5770 -5767 0
c Var 'aux673' direct represents '16' with '-5769'
5740 5742 5744 5746 5748 5750 5752 5754 5756 5758 5760 5762 5764 5766 5768 5770 -5769 0
c Encoding variable: aux674 with domain: int(0..2) (representing constraint ((9=grid_00005_00000) + (grid_00000_00006=9)))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '5771'
c Var 'aux674' direct represents '0' with '5771'
c Var 'aux674' order represents '1' with '5772'
-5771 5772 0
c Var 'aux674' direct represents '1' with '5773'
5771 -5772 5773 0
-5773 5772 0
-5773 -5771 0
c Var 'aux674' direct represents '2' with '-5772'
5771 5773 -5772 0
c Encoding variable: aux675 with domain: int(0..2) (representing constraint ((grid_00000_00005=9) + (9=grid_00005_00002)))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '5774'
c Var 'aux675' direct represents '0' with '5774'
c Var 'aux675' order represents '1' with '5775'
-5774 5775 0
c Var 'aux675' direct represents '1' with '5776'
5774 -5775 5776 0
-5776 5775 0
-5776 -5774 0
c Var 'aux675' direct represents '2' with '-5775'
5774 5776 -5775 0
c Encoding variable: aux676 with domain: int(0..2) (representing constraint ((grid_00000_00004=9) + (9=grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '5777'
c Var 'aux676' direct represents '0' with '5777'
c Var 'aux676' order represents '1' with '5778'
-5777 5778 0
c Var 'aux676' direct represents '1' with '5779'
5777 -5778 5779 0
-5779 5778 0
-5779 -5777 0
c Var 'aux676' direct represents '2' with '-5778'
5777 5779 -5778 0
c Encoding variable: aux677 with domain: int(0..2) (representing constraint ((grid_00000_00003=9) + (grid_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '5780'
c Var 'aux677' direct represents '0' with '5780'
c Var 'aux677' order represents '1' with '5781'
-5780 5781 0
c Var 'aux677' direct represents '1' with '5782'
5780 -5781 5782 0
-5782 5781 0
-5782 -5780 0
c Var 'aux677' direct represents '2' with '-5781'
5780 5782 -5781 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((grid_00000_00002=9) + (9=grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '5783'
c Var 'aux678' direct represents '0' with '5783'
c Var 'aux678' order represents '1' with '5784'
-5783 5784 0
c Var 'aux678' direct represents '1' with '5785'
5783 -5784 5785 0
-5785 5784 0
-5785 -5783 0
c Var 'aux678' direct represents '2' with '-5784'
5783 5785 -5784 0
c Encoding variable: aux679 with domain: int(0..2) (representing constraint ((grid_00000_00001=9) + (grid_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '5786'
c Var 'aux679' direct represents '0' with '5786'
c Var 'aux679' order represents '1' with '5787'
-5786 5787 0
c Var 'aux679' direct represents '1' with '5788'
5786 -5787 5788 0
-5788 5787 0
-5788 -5786 0
c Var 'aux679' direct represents '2' with '-5787'
5786 5788 -5787 0
c Encoding variable: aux680 with domain: int(0..2) (representing constraint ((grid_00004_00005=9) + (9=grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '5789'
c Var 'aux680' direct represents '0' with '5789'
c Var 'aux680' order represents '1' with '5790'
-5789 5790 0
c Var 'aux680' direct represents '1' with '5791'
5789 -5790 5791 0
-5791 5790 0
-5791 -5789 0
c Var 'aux680' direct represents '2' with '-5790'
5789 5791 -5790 0
c Encoding variable: aux681 with domain: int(0..2) (representing constraint ((grid_00004_00006=9) + (grid_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '5792'
c Var 'aux681' direct represents '0' with '5792'
c Var 'aux681' order represents '1' with '5793'
-5792 5793 0
c Var 'aux681' direct represents '1' with '5794'
5792 -5793 5794 0
-5794 5793 0
-5794 -5792 0
c Var 'aux681' direct represents '2' with '-5793'
5792 5794 -5793 0
c Encoding variable: aux682 with domain: int(0..2) (representing constraint ((9=grid_00006_00004) + (9=grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '5795'
c Var 'aux682' direct represents '0' with '5795'
c Var 'aux682' order represents '1' with '5796'
-5795 5796 0
c Var 'aux682' direct represents '1' with '5797'
5795 -5796 5797 0
-5797 5796 0
-5797 -5795 0
c Var 'aux682' direct represents '2' with '-5796'
5795 5797 -5796 0
c Encoding variable: aux683 with domain: int(0..2) (representing constraint ((grid_00004_00003=9) + (grid_00003_00000=9)))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '5798'
c Var 'aux683' direct represents '0' with '5798'
c Var 'aux683' order represents '1' with '5799'
-5798 5799 0
c Var 'aux683' direct represents '1' with '5800'
5798 -5799 5800 0
-5800 5799 0
-5800 -5798 0
c Var 'aux683' direct represents '2' with '-5799'
5798 5800 -5799 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((grid_00004_00002=9) + (9=grid_00001_00000)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '5801'
c Var 'aux684' direct represents '0' with '5801'
c Var 'aux684' order represents '1' with '5802'
-5801 5802 0
c Var 'aux684' direct represents '1' with '5803'
5801 -5802 5803 0
-5803 5802 0
-5803 -5801 0
c Var 'aux684' direct represents '2' with '-5802'
5801 5803 -5802 0
c Encoding variable: aux685 with domain: int(0..2) (representing constraint ((grid_00004_00001=9) + (9=grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '5804'
c Var 'aux685' direct represents '0' with '5804'
c Var 'aux685' order represents '1' with '5805'
-5804 5805 0
c Var 'aux685' direct represents '1' with '5806'
5804 -5805 5806 0
-5806 5805 0
-5806 -5804 0
c Var 'aux685' direct represents '2' with '-5805'
5804 5806 -5805 0
c Encoding variable: aux686 with domain: int(0..2) (representing constraint ((grid_00004_00000=9) + (9=grid_00002_00000)))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '5807'
c Var 'aux686' direct represents '0' with '5807'
c Var 'aux686' order represents '1' with '5808'
-5807 5808 0
c Var 'aux686' direct represents '1' with '5809'
5807 -5808 5809 0
-5809 5808 0
-5809 -5807 0
c Var 'aux686' direct represents '2' with '-5808'
5807 5809 -5808 0
c Encoding variable: aux687 with domain: int(0..2) (representing constraint ((9=grid_00002_00006) + (9=grid_00001_00002)))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '5810'
c Var 'aux687' direct represents '0' with '5810'
c Var 'aux687' order represents '1' with '5811'
-5810 5811 0
c Var 'aux687' direct represents '1' with '5812'
5810 -5811 5812 0
-5812 5811 0
-5812 -5810 0
c Var 'aux687' direct represents '2' with '-5811'
5810 5812 -5811 0
c Encoding variable: aux688 with domain: int(0..2) (representing constraint ((9=grid_00002_00005) + (9=grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '5813'
c Var 'aux688' direct represents '0' with '5813'
c Var 'aux688' order represents '1' with '5814'
-5813 5814 0
c Var 'aux688' direct represents '1' with '5815'
5813 -5814 5815 0
-5815 5814 0
-5815 -5813 0
c Var 'aux688' direct represents '2' with '-5814'
5813 5815 -5814 0
c Encoding variable: aux689 with domain: int(0..2) (representing constraint ((9=grid_00002_00004) + (9=grid_00002_00002)))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '5816'
c Var 'aux689' direct represents '0' with '5816'
c Var 'aux689' order represents '1' with '5817'
-5816 5817 0
c Var 'aux689' direct represents '1' with '5818'
5816 -5817 5818 0
-5818 5817 0
-5818 -5816 0
c Var 'aux689' direct represents '2' with '-5817'
5816 5818 -5817 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((9=grid_00002_00003) + (9=grid_00005_00003)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '5819'
c Var 'aux690' direct represents '0' with '5819'
c Var 'aux690' order represents '1' with '5820'
-5819 5820 0
c Var 'aux690' direct represents '1' with '5821'
5819 -5820 5821 0
-5821 5820 0
-5821 -5819 0
c Var 'aux690' direct represents '2' with '-5820'
5819 5821 -5820 0
c Encoding variable: aux691 with domain: int(0..2) (representing constraint ((grid_00003_00002=9) + (9=grid_00001_00003)))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '5822'
c Var 'aux691' direct represents '0' with '5822'
c Var 'aux691' order represents '1' with '5823'
-5822 5823 0
c Var 'aux691' direct represents '1' with '5824'
5822 -5823 5824 0
-5824 5823 0
-5824 -5822 0
c Var 'aux691' direct represents '2' with '-5823'
5822 5824 -5823 0
c Encoding variable: aux692 with domain: int(0..2) (representing constraint ((9=grid_00001_00005) + (grid_00003_00003=9)))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '5825'
c Var 'aux692' direct represents '0' with '5825'
c Var 'aux692' order represents '1' with '5826'
-5825 5826 0
c Var 'aux692' direct represents '1' with '5827'
5825 -5826 5827 0
-5827 5826 0
-5827 -5825 0
c Var 'aux692' direct represents '2' with '-5826'
5825 5827 -5826 0
c Encoding variable: aux693 with domain: int(0..2) (representing constraint ((9=grid_00006_00000) + (9=grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '5828'
c Var 'aux693' direct represents '0' with '5828'
c Var 'aux693' order represents '1' with '5829'
-5828 5829 0
c Var 'aux693' direct represents '1' with '5830'
5828 -5829 5830 0
-5830 5829 0
-5830 -5828 0
c Var 'aux693' direct represents '2' with '-5829'
5828 5830 -5829 0
c Encoding variable: aux694 with domain: int(0..4) (representing constraint (aux681 + aux693))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '5831'
c Var 'aux694' direct represents '0' with '5831'
c Var 'aux694' order represents '1' with '5832'
-5831 5832 0
c Var 'aux694' direct represents '1' with '5833'
5831 -5832 5833 0
-5833 5832 0
-5833 -5831 0
c Var 'aux694' order represents '2' with '5834'
-5832 5834 0
c Var 'aux694' direct represents '2' with '5835'
5832 -5834 5835 0
-5835 5834 0
-5835 -5832 0
c Var 'aux694' order represents '3' with '5836'
-5834 5836 0
c Var 'aux694' direct represents '3' with '5837'
5834 -5836 5837 0
-5837 5836 0
-5837 -5834 0
c Var 'aux694' direct represents '4' with '-5836'
5831 5833 5835 5837 -5836 0
c Encoding variable: aux695 with domain: int(0..4) (representing constraint (aux675 + aux688))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '5838'
c Var 'aux695' direct represents '0' with '5838'
c Var 'aux695' order represents '1' with '5839'
-5838 5839 0
c Var 'aux695' direct represents '1' with '5840'
5838 -5839 5840 0
-5840 5839 0
-5840 -5838 0
c Var 'aux695' order represents '2' with '5841'
-5839 5841 0
c Var 'aux695' direct represents '2' with '5842'
5839 -5841 5842 0
-5842 5841 0
-5842 -5839 0
c Var 'aux695' order represents '3' with '5843'
-5841 5843 0
c Var 'aux695' direct represents '3' with '5844'
5841 -5843 5844 0
-5844 5843 0
-5844 -5841 0
c Var 'aux695' direct represents '4' with '-5843'
5838 5840 5842 5844 -5843 0
c Encoding variable: aux696 with domain: int(0..4) (representing constraint (aux679 + aux674))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '5845'
c Var 'aux696' direct represents '0' with '5845'
c Var 'aux696' order represents '1' with '5846'
-5845 5846 0
c Var 'aux696' direct represents '1' with '5847'
5845 -5846 5847 0
-5847 5846 0
-5847 -5845 0
c Var 'aux696' order represents '2' with '5848'
-5846 5848 0
c Var 'aux696' direct represents '2' with '5849'
5846 -5848 5849 0
-5849 5848 0
-5849 -5846 0
c Var 'aux696' order represents '3' with '5850'
-5848 5850 0
c Var 'aux696' direct represents '3' with '5851'
5848 -5850 5851 0
-5851 5850 0
-5851 -5848 0
c Var 'aux696' direct represents '4' with '-5850'
5845 5847 5849 5851 -5850 0
c Encoding variable: aux697 with domain: int(0..4) (representing constraint (aux677 + aux676))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '5852'
c Var 'aux697' direct represents '0' with '5852'
c Var 'aux697' order represents '1' with '5853'
-5852 5853 0
c Var 'aux697' direct represents '1' with '5854'
5852 -5853 5854 0
-5854 5853 0
-5854 -5852 0
c Var 'aux697' order represents '2' with '5855'
-5853 5855 0
c Var 'aux697' direct represents '2' with '5856'
5853 -5855 5856 0
-5856 5855 0
-5856 -5853 0
c Var 'aux697' order represents '3' with '5857'
-5855 5857 0
c Var 'aux697' direct represents '3' with '5858'
5855 -5857 5858 0
-5858 5857 0
-5858 -5855 0
c Var 'aux697' direct represents '4' with '-5857'
5852 5854 5856 5858 -5857 0
c Encoding variable: aux698 with domain: int(0..4) (representing constraint (aux678 + aux680))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '5859'
c Var 'aux698' direct represents '0' with '5859'
c Var 'aux698' order represents '1' with '5860'
-5859 5860 0
c Var 'aux698' direct represents '1' with '5861'
5859 -5860 5861 0
-5861 5860 0
-5861 -5859 0
c Var 'aux698' order represents '2' with '5862'
-5860 5862 0
c Var 'aux698' direct represents '2' with '5863'
5860 -5862 5863 0
-5863 5862 0
-5863 -5860 0
c Var 'aux698' order represents '3' with '5864'
-5862 5864 0
c Var 'aux698' direct represents '3' with '5865'
5862 -5864 5865 0
-5865 5864 0
-5865 -5862 0
c Var 'aux698' direct represents '4' with '-5864'
5859 5861 5863 5865 -5864 0
c Encoding variable: aux699 with domain: int(0..4) (representing constraint (aux691 + aux687))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '5866'
c Var 'aux699' direct represents '0' with '5866'
c Var 'aux699' order represents '1' with '5867'
-5866 5867 0
c Var 'aux699' direct represents '1' with '5868'
5866 -5867 5868 0
-5868 5867 0
-5868 -5866 0
c Var 'aux699' order represents '2' with '5869'
-5867 5869 0
c Var 'aux699' direct represents '2' with '5870'
5867 -5869 5870 0
-5870 5869 0
-5870 -5867 0
c Var 'aux699' order represents '3' with '5871'
-5869 5871 0
c Var 'aux699' direct represents '3' with '5872'
5869 -5871 5872 0
-5872 5871 0
-5872 -5869 0
c Var 'aux699' direct represents '4' with '-5871'
5866 5868 5870 5872 -5871 0
c Encoding variable: aux700 with domain: int(0..4) (representing constraint (aux684 + aux683))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '5873'
c Var 'aux700' direct represents '0' with '5873'
c Var 'aux700' order represents '1' with '5874'
-5873 5874 0
c Var 'aux700' direct represents '1' with '5875'
5873 -5874 5875 0
-5875 5874 0
-5875 -5873 0
c Var 'aux700' order represents '2' with '5876'
-5874 5876 0
c Var 'aux700' direct represents '2' with '5877'
5874 -5876 5877 0
-5877 5876 0
-5877 -5874 0
c Var 'aux700' order represents '3' with '5878'
-5876 5878 0
c Var 'aux700' direct represents '3' with '5879'
5876 -5878 5879 0
-5879 5878 0
-5879 -5876 0
c Var 'aux700' direct represents '4' with '-5878'
5873 5875 5877 5879 -5878 0
c Encoding variable: aux701 with domain: int(0..4) (representing constraint (aux685 + aux686))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '5880'
c Var 'aux701' direct represents '0' with '5880'
c Var 'aux701' order represents '1' with '5881'
-5880 5881 0
c Var 'aux701' direct represents '1' with '5882'
5880 -5881 5882 0
-5882 5881 0
-5882 -5880 0
c Var 'aux701' order represents '2' with '5883'
-5881 5883 0
c Var 'aux701' direct represents '2' with '5884'
5881 -5883 5884 0
-5884 5883 0
-5884 -5881 0
c Var 'aux701' order represents '3' with '5885'
-5883 5885 0
c Var 'aux701' direct represents '3' with '5886'
5883 -5885 5886 0
-5886 5885 0
-5886 -5883 0
c Var 'aux701' direct represents '4' with '-5885'
5880 5882 5884 5886 -5885 0
c Encoding variable: aux702 with domain: int(0..4) (representing constraint (aux689 + aux692))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '5887'
c Var 'aux702' direct represents '0' with '5887'
c Var 'aux702' order represents '1' with '5888'
-5887 5888 0
c Var 'aux702' direct represents '1' with '5889'
5887 -5888 5889 0
-5889 5888 0
-5889 -5887 0
c Var 'aux702' order represents '2' with '5890'
-5888 5890 0
c Var 'aux702' direct represents '2' with '5891'
5888 -5890 5891 0
-5891 5890 0
-5891 -5888 0
c Var 'aux702' order represents '3' with '5892'
-5890 5892 0
c Var 'aux702' direct represents '3' with '5893'
5890 -5892 5893 0
-5893 5892 0
-5893 -5890 0
c Var 'aux702' direct represents '4' with '-5892'
5887 5889 5891 5893 -5892 0
c Encoding variable: aux703 with domain: int(0..4) (representing constraint (aux690 + aux682))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '5894'
c Var 'aux703' direct represents '0' with '5894'
c Var 'aux703' order represents '1' with '5895'
-5894 5895 0
c Var 'aux703' direct represents '1' with '5896'
5894 -5895 5896 0
-5896 5895 0
-5896 -5894 0
c Var 'aux703' order represents '2' with '5897'
-5895 5897 0
c Var 'aux703' direct represents '2' with '5898'
5895 -5897 5898 0
-5898 5897 0
-5898 -5895 0
c Var 'aux703' order represents '3' with '5899'
-5897 5899 0
c Var 'aux703' direct represents '3' with '5900'
5897 -5899 5900 0
-5900 5899 0
-5900 -5897 0
c Var 'aux703' direct represents '4' with '-5899'
5894 5896 5898 5900 -5899 0
c Encoding variable: aux704 with domain: int(0..8) (representing constraint (aux697 + aux703))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '5901'
c Var 'aux704' direct represents '0' with '5901'
c Var 'aux704' order represents '1' with '5902'
-5901 5902 0
c Var 'aux704' direct represents '1' with '5903'
5901 -5902 5903 0
-5903 5902 0
-5903 -5901 0
c Var 'aux704' order represents '2' with '5904'
-5902 5904 0
c Var 'aux704' direct represents '2' with '5905'
5902 -5904 5905 0
-5905 5904 0
-5905 -5902 0
c Var 'aux704' order represents '3' with '5906'
-5904 5906 0
c Var 'aux704' direct represents '3' with '5907'
5904 -5906 5907 0
-5907 5906 0
-5907 -5904 0
c Var 'aux704' order represents '4' with '5908'
-5906 5908 0
c Var 'aux704' direct represents '4' with '5909'
5906 -5908 5909 0
-5909 5908 0
-5909 -5906 0
c Var 'aux704' order represents '5' with '5910'
-5908 5910 0
c Var 'aux704' direct represents '5' with '5911'
5908 -5910 5911 0
-5911 5910 0
-5911 -5908 0
c Var 'aux704' order represents '6' with '5912'
-5910 5912 0
c Var 'aux704' direct represents '6' with '5913'
5910 -5912 5913 0
-5913 5912 0
-5913 -5910 0
c Var 'aux704' order represents '7' with '5914'
-5912 5914 0
c Var 'aux704' direct represents '7' with '5915'
5912 -5914 5915 0
-5915 5914 0
-5915 -5912 0
c Var 'aux704' direct represents '8' with '-5914'
5901 5903 5905 5907 5909 5911 5913 5915 -5914 0
c Encoding variable: aux705 with domain: int(0..8) (representing constraint (aux696 + aux700))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '5916'
c Var 'aux705' direct represents '0' with '5916'
c Var 'aux705' order represents '1' with '5917'
-5916 5917 0
c Var 'aux705' direct represents '1' with '5918'
5916 -5917 5918 0
-5918 5917 0
-5918 -5916 0
c Var 'aux705' order represents '2' with '5919'
-5917 5919 0
c Var 'aux705' direct represents '2' with '5920'
5917 -5919 5920 0
-5920 5919 0
-5920 -5917 0
c Var 'aux705' order represents '3' with '5921'
-5919 5921 0
c Var 'aux705' direct represents '3' with '5922'
5919 -5921 5922 0
-5922 5921 0
-5922 -5919 0
c Var 'aux705' order represents '4' with '5923'
-5921 5923 0
c Var 'aux705' direct represents '4' with '5924'
5921 -5923 5924 0
-5924 5923 0
-5924 -5921 0
c Var 'aux705' order represents '5' with '5925'
-5923 5925 0
c Var 'aux705' direct represents '5' with '5926'
5923 -5925 5926 0
-5926 5925 0
-5926 -5923 0
c Var 'aux705' order represents '6' with '5927'
-5925 5927 0
c Var 'aux705' direct represents '6' with '5928'
5925 -5927 5928 0
-5928 5927 0
-5928 -5925 0
c Var 'aux705' order represents '7' with '5929'
-5927 5929 0
c Var 'aux705' direct represents '7' with '5930'
5927 -5929 5930 0
-5930 5929 0
-5930 -5927 0
c Var 'aux705' direct represents '8' with '-5929'
5916 5918 5920 5922 5924 5926 5928 5930 -5929 0
c Encoding variable: aux706 with domain: int(0..8) (representing constraint (aux694 + aux695))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '5931'
c Var 'aux706' direct represents '0' with '5931'
c Var 'aux706' order represents '1' with '5932'
-5931 5932 0
c Var 'aux706' direct represents '1' with '5933'
5931 -5932 5933 0
-5933 5932 0
-5933 -5931 0
c Var 'aux706' order represents '2' with '5934'
-5932 5934 0
c Var 'aux706' direct represents '2' with '5935'
5932 -5934 5935 0
-5935 5934 0
-5935 -5932 0
c Var 'aux706' order represents '3' with '5936'
-5934 5936 0
c Var 'aux706' direct represents '3' with '5937'
5934 -5936 5937 0
-5937 5936 0
-5937 -5934 0
c Var 'aux706' order represents '4' with '5938'
-5936 5938 0
c Var 'aux706' direct represents '4' with '5939'
5936 -5938 5939 0
-5939 5938 0
-5939 -5936 0
c Var 'aux706' order represents '5' with '5940'
-5938 5940 0
c Var 'aux706' direct represents '5' with '5941'
5938 -5940 5941 0
-5941 5940 0
-5941 -5938 0
c Var 'aux706' order represents '6' with '5942'
-5940 5942 0
c Var 'aux706' direct represents '6' with '5943'
5940 -5942 5943 0
-5943 5942 0
-5943 -5940 0
c Var 'aux706' order represents '7' with '5944'
-5942 5944 0
c Var 'aux706' direct represents '7' with '5945'
5942 -5944 5945 0
-5945 5944 0
-5945 -5942 0
c Var 'aux706' direct represents '8' with '-5944'
5931 5933 5935 5937 5939 5941 5943 5945 -5944 0
c Encoding variable: aux707 with domain: int(0..8) (representing constraint (aux698 + aux699))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '5946'
c Var 'aux707' direct represents '0' with '5946'
c Var 'aux707' order represents '1' with '5947'
-5946 5947 0
c Var 'aux707' direct represents '1' with '5948'
5946 -5947 5948 0
-5948 5947 0
-5948 -5946 0
c Var 'aux707' order represents '2' with '5949'
-5947 5949 0
c Var 'aux707' direct represents '2' with '5950'
5947 -5949 5950 0
-5950 5949 0
-5950 -5947 0
c Var 'aux707' order represents '3' with '5951'
-5949 5951 0
c Var 'aux707' direct represents '3' with '5952'
5949 -5951 5952 0
-5952 5951 0
-5952 -5949 0
c Var 'aux707' order represents '4' with '5953'
-5951 5953 0
c Var 'aux707' direct represents '4' with '5954'
5951 -5953 5954 0
-5954 5953 0
-5954 -5951 0
c Var 'aux707' order represents '5' with '5955'
-5953 5955 0
c Var 'aux707' direct represents '5' with '5956'
5953 -5955 5956 0
-5956 5955 0
-5956 -5953 0
c Var 'aux707' order represents '6' with '5957'
-5955 5957 0
c Var 'aux707' direct represents '6' with '5958'
5955 -5957 5958 0
-5958 5957 0
-5958 -5955 0
c Var 'aux707' order represents '7' with '5959'
-5957 5959 0
c Var 'aux707' direct represents '7' with '5960'
5957 -5959 5960 0
-5960 5959 0
-5960 -5957 0
c Var 'aux707' direct represents '8' with '-5959'
5946 5948 5950 5952 5954 5956 5958 5960 -5959 0
c Encoding variable: aux708 with domain: int(0..8) (representing constraint (aux701 + aux702))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '5961'
c Var 'aux708' direct represents '0' with '5961'
c Var 'aux708' order represents '1' with '5962'
-5961 5962 0
c Var 'aux708' direct represents '1' with '5963'
5961 -5962 5963 0
-5963 5962 0
-5963 -5961 0
c Var 'aux708' order represents '2' with '5964'
-5962 5964 0
c Var 'aux708' direct represents '2' with '5965'
5962 -5964 5965 0
-5965 5964 0
-5965 -5962 0
c Var 'aux708' order represents '3' with '5966'
-5964 5966 0
c Var 'aux708' direct represents '3' with '5967'
5964 -5966 5967 0
-5967 5966 0
-5967 -5964 0
c Var 'aux708' order represents '4' with '5968'
-5966 5968 0
c Var 'aux708' direct represents '4' with '5969'
5966 -5968 5969 0
-5969 5968 0
-5969 -5966 0
c Var 'aux708' order represents '5' with '5970'
-5968 5970 0
c Var 'aux708' direct represents '5' with '5971'
5968 -5970 5971 0
-5971 5970 0
-5971 -5968 0
c Var 'aux708' order represents '6' with '5972'
-5970 5972 0
c Var 'aux708' direct represents '6' with '5973'
5970 -5972 5973 0
-5973 5972 0
-5973 -5970 0
c Var 'aux708' order represents '7' with '5974'
-5972 5974 0
c Var 'aux708' direct represents '7' with '5975'
5972 -5974 5975 0
-5975 5974 0
-5975 -5972 0
c Var 'aux708' direct represents '8' with '-5974'
5961 5963 5965 5967 5969 5971 5973 5975 -5974 0
c Encoding variable: aux709 with domain: int(0..16) (representing constraint (aux705 + aux708))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '5976'
c Var 'aux709' direct represents '0' with '5976'
c Var 'aux709' order represents '1' with '5977'
-5976 5977 0
c Var 'aux709' direct represents '1' with '5978'
5976 -5977 5978 0
-5978 5977 0
-5978 -5976 0
c Var 'aux709' order represents '2' with '5979'
-5977 5979 0
c Var 'aux709' direct represents '2' with '5980'
5977 -5979 5980 0
-5980 5979 0
-5980 -5977 0
c Var 'aux709' order represents '3' with '5981'
-5979 5981 0
c Var 'aux709' direct represents '3' with '5982'
5979 -5981 5982 0
-5982 5981 0
-5982 -5979 0
c Var 'aux709' order represents '4' with '5983'
-5981 5983 0
c Var 'aux709' direct represents '4' with '5984'
5981 -5983 5984 0
-5984 5983 0
-5984 -5981 0
c Var 'aux709' order represents '5' with '5985'
-5983 5985 0
c Var 'aux709' direct represents '5' with '5986'
5983 -5985 5986 0
-5986 5985 0
-5986 -5983 0
c Var 'aux709' order represents '6' with '5987'
-5985 5987 0
c Var 'aux709' direct represents '6' with '5988'
5985 -5987 5988 0
-5988 5987 0
-5988 -5985 0
c Var 'aux709' order represents '7' with '5989'
-5987 5989 0
c Var 'aux709' direct represents '7' with '5990'
5987 -5989 5990 0
-5990 5989 0
-5990 -5987 0
c Var 'aux709' order represents '8' with '5991'
-5989 5991 0
c Var 'aux709' direct represents '8' with '5992'
5989 -5991 5992 0
-5992 5991 0
-5992 -5989 0
c Var 'aux709' order represents '9' with '5993'
-5991 5993 0
c Var 'aux709' direct represents '9' with '5994'
5991 -5993 5994 0
-5994 5993 0
-5994 -5991 0
c Var 'aux709' order represents '10' with '5995'
-5993 5995 0
c Var 'aux709' direct represents '10' with '5996'
5993 -5995 5996 0
-5996 5995 0
-5996 -5993 0
c Var 'aux709' order represents '11' with '5997'
-5995 5997 0
c Var 'aux709' direct represents '11' with '5998'
5995 -5997 5998 0
-5998 5997 0
-5998 -5995 0
c Var 'aux709' order represents '12' with '5999'
-5997 5999 0
c Var 'aux709' direct represents '12' with '6000'
5997 -5999 6000 0
-6000 5999 0
-6000 -5997 0
c Var 'aux709' order represents '13' with '6001'
-5999 6001 0
c Var 'aux709' direct represents '13' with '6002'
5999 -6001 6002 0
-6002 6001 0
-6002 -5999 0
c Var 'aux709' order represents '14' with '6003'
-6001 6003 0
c Var 'aux709' direct represents '14' with '6004'
6001 -6003 6004 0
-6004 6003 0
-6004 -6001 0
c Var 'aux709' order represents '15' with '6005'
-6003 6005 0
c Var 'aux709' direct represents '15' with '6006'
6003 -6005 6006 0
-6006 6005 0
-6006 -6003 0
c Var 'aux709' direct represents '16' with '-6005'
5976 5978 5980 5982 5984 5986 5988 5990 5992 5994 5996 5998 6000 6002 6004 6006 -6005 0
c Encoding variable: aux710 with domain: int(0..16) (representing constraint (aux704 + aux706))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '6007'
c Var 'aux710' direct represents '0' with '6007'
c Var 'aux710' order represents '1' with '6008'
-6007 6008 0
c Var 'aux710' direct represents '1' with '6009'
6007 -6008 6009 0
-6009 6008 0
-6009 -6007 0
c Var 'aux710' order represents '2' with '6010'
-6008 6010 0
c Var 'aux710' direct represents '2' with '6011'
6008 -6010 6011 0
-6011 6010 0
-6011 -6008 0
c Var 'aux710' order represents '3' with '6012'
-6010 6012 0
c Var 'aux710' direct represents '3' with '6013'
6010 -6012 6013 0
-6013 6012 0
-6013 -6010 0
c Var 'aux710' order represents '4' with '6014'
-6012 6014 0
c Var 'aux710' direct represents '4' with '6015'
6012 -6014 6015 0
-6015 6014 0
-6015 -6012 0
c Var 'aux710' order represents '5' with '6016'
-6014 6016 0
c Var 'aux710' direct represents '5' with '6017'
6014 -6016 6017 0
-6017 6016 0
-6017 -6014 0
c Var 'aux710' order represents '6' with '6018'
-6016 6018 0
c Var 'aux710' direct represents '6' with '6019'
6016 -6018 6019 0
-6019 6018 0
-6019 -6016 0
c Var 'aux710' order represents '7' with '6020'
-6018 6020 0
c Var 'aux710' direct represents '7' with '6021'
6018 -6020 6021 0
-6021 6020 0
-6021 -6018 0
c Var 'aux710' order represents '8' with '6022'
-6020 6022 0
c Var 'aux710' direct represents '8' with '6023'
6020 -6022 6023 0
-6023 6022 0
-6023 -6020 0
c Var 'aux710' order represents '9' with '6024'
-6022 6024 0
c Var 'aux710' direct represents '9' with '6025'
6022 -6024 6025 0
-6025 6024 0
-6025 -6022 0
c Var 'aux710' order represents '10' with '6026'
-6024 6026 0
c Var 'aux710' direct represents '10' with '6027'
6024 -6026 6027 0
-6027 6026 0
-6027 -6024 0
c Var 'aux710' order represents '11' with '6028'
-6026 6028 0
c Var 'aux710' direct represents '11' with '6029'
6026 -6028 6029 0
-6029 6028 0
-6029 -6026 0
c Var 'aux710' order represents '12' with '6030'
-6028 6030 0
c Var 'aux710' direct represents '12' with '6031'
6028 -6030 6031 0
-6031 6030 0
-6031 -6028 0
c Var 'aux710' order represents '13' with '6032'
-6030 6032 0
c Var 'aux710' direct represents '13' with '6033'
6030 -6032 6033 0
-6033 6032 0
-6033 -6030 0
c Var 'aux710' order represents '14' with '6034'
-6032 6034 0
c Var 'aux710' direct represents '14' with '6035'
6032 -6034 6035 0
-6035 6034 0
-6035 -6032 0
c Var 'aux710' order represents '15' with '6036'
-6034 6036 0
c Var 'aux710' direct represents '15' with '6037'
6034 -6036 6037 0
-6037 6036 0
-6037 -6034 0
c Var 'aux710' direct represents '16' with '-6036'
6007 6009 6011 6013 6015 6017 6019 6021 6023 6025 6027 6029 6031 6033 6035 6037 -6036 0
c Encoding variable: aux711 with domain: int(0..2) (representing constraint ((0<grid_00000_00001) + (0<grid_00000_00006)))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '6038'
c Var 'aux711' direct represents '0' with '6038'
c Var 'aux711' order represents '1' with '6039'
-6038 6039 0
c Var 'aux711' direct represents '1' with '6040'
6038 -6039 6040 0
-6040 6039 0
-6040 -6038 0
c Var 'aux711' direct represents '2' with '-6039'
6038 6040 -6039 0
c Encoding variable: aux712 with domain: int(0..2) (representing constraint ((0<grid_00000_00005) + (0<grid_00000_00002)))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '6041'
c Var 'aux712' direct represents '0' with '6041'
c Var 'aux712' order represents '1' with '6042'
-6041 6042 0
c Var 'aux712' direct represents '1' with '6043'
6041 -6042 6043 0
-6043 6042 0
-6043 -6041 0
c Var 'aux712' direct represents '2' with '-6042'
6041 6043 -6042 0
c Encoding variable: aux713 with domain: int(0..2) (representing constraint ((0<grid_00000_00004) + (0<grid_00000_00003)))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '6044'
c Var 'aux713' direct represents '0' with '6044'
c Var 'aux713' order represents '1' with '6045'
-6044 6045 0
c Var 'aux713' direct represents '1' with '6046'
6044 -6045 6046 0
-6046 6045 0
-6046 -6044 0
c Var 'aux713' direct represents '2' with '-6045'
6044 6046 -6045 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((0<grid_00001_00000) + (0<grid_00001_00005)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '6047'
c Var 'aux714' direct represents '0' with '6047'
c Var 'aux714' order represents '1' with '6048'
-6047 6048 0
c Var 'aux714' direct represents '1' with '6049'
6047 -6048 6049 0
-6049 6048 0
-6049 -6047 0
c Var 'aux714' direct represents '2' with '-6048'
6047 6049 -6048 0
c Encoding variable: aux715 with domain: int(0..2) (representing constraint ((0<grid_00002_00000) + (0<grid_00002_00006)))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '6050'
c Var 'aux715' direct represents '0' with '6050'
c Var 'aux715' order represents '1' with '6051'
-6050 6051 0
c Var 'aux715' direct represents '1' with '6052'
6050 -6051 6052 0
-6052 6051 0
-6052 -6050 0
c Var 'aux715' direct represents '2' with '-6051'
6050 6052 -6051 0
c Encoding variable: aux716 with domain: int(0..2) (representing constraint ((0<grid_00002_00005) + (0<grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '6053'
c Var 'aux716' direct represents '0' with '6053'
c Var 'aux716' order represents '1' with '6054'
-6053 6054 0
c Var 'aux716' direct represents '1' with '6055'
6053 -6054 6055 0
-6055 6054 0
-6055 -6053 0
c Var 'aux716' direct represents '2' with '-6054'
6053 6055 -6054 0
c Encoding variable: aux717 with domain: int(0..2) (representing constraint ((0<grid_00002_00004) + (0<grid_00002_00003)))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '6056'
c Var 'aux717' direct represents '0' with '6056'
c Var 'aux717' order represents '1' with '6057'
-6056 6057 0
c Var 'aux717' direct represents '1' with '6058'
6056 -6057 6058 0
-6058 6057 0
-6058 -6056 0
c Var 'aux717' direct represents '2' with '-6057'
6056 6058 -6057 0
c Encoding variable: aux718 with domain: int(0..3) (representing constraint ((0<grid_00002_00002) + aux717))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '6059'
c Var 'aux718' direct represents '0' with '6059'
c Var 'aux718' order represents '1' with '6060'
-6059 6060 0
c Var 'aux718' direct represents '1' with '6061'
6059 -6060 6061 0
-6061 6060 0
-6061 -6059 0
c Var 'aux718' order represents '2' with '6062'
-6060 6062 0
c Var 'aux718' direct represents '2' with '6063'
6060 -6062 6063 0
-6063 6062 0
-6063 -6060 0
c Var 'aux718' direct represents '3' with '-6062'
6059 6061 6063 -6062 0
c Encoding variable: aux719 with domain: int(0..2) (representing constraint ((0<grid_00004_00000) + (0<grid_00004_00006)))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '6064'
c Var 'aux719' direct represents '0' with '6064'
c Var 'aux719' order represents '1' with '6065'
-6064 6065 0
c Var 'aux719' direct represents '1' with '6066'
6064 -6065 6066 0
-6066 6065 0
-6066 -6064 0
c Var 'aux719' direct represents '2' with '-6065'
6064 6066 -6065 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((0<grid_00004_00005) + (0<grid_00004_00001)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '6067'
c Var 'aux720' direct represents '0' with '6067'
c Var 'aux720' order represents '1' with '6068'
-6067 6068 0
c Var 'aux720' direct represents '1' with '6069'
6067 -6068 6069 0
-6069 6068 0
-6069 -6067 0
c Var 'aux720' direct represents '2' with '-6068'
6067 6069 -6068 0
c Encoding variable: aux721 with domain: int(0..2) (representing constraint ((0<grid_00004_00004) + (0<grid_00004_00003)))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '6070'
c Var 'aux721' direct represents '0' with '6070'
c Var 'aux721' order represents '1' with '6071'
-6070 6071 0
c Var 'aux721' direct represents '1' with '6072'
6070 -6071 6072 0
-6072 6071 0
-6072 -6070 0
c Var 'aux721' direct represents '2' with '-6071'
6070 6072 -6071 0
c Encoding variable: aux722 with domain: int(0..3) (representing constraint ((0<grid_00004_00002) + aux721))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '6073'
c Var 'aux722' direct represents '0' with '6073'
c Var 'aux722' order represents '1' with '6074'
-6073 6074 0
c Var 'aux722' direct represents '1' with '6075'
6073 -6074 6075 0
-6075 6074 0
-6075 -6073 0
c Var 'aux722' order represents '2' with '6076'
-6074 6076 0
c Var 'aux722' direct represents '2' with '6077'
6074 -6076 6077 0
-6077 6076 0
-6077 -6074 0
c Var 'aux722' direct represents '3' with '-6076'
6073 6075 6077 -6076 0
c Encoding variable: aux723 with domain: int(0..2) (representing constraint ((0<grid_00005_00000) + (0<grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '6078'
c Var 'aux723' direct represents '0' with '6078'
c Var 'aux723' order represents '1' with '6079'
-6078 6079 0
c Var 'aux723' direct represents '1' with '6080'
6078 -6079 6080 0
-6080 6079 0
-6080 -6078 0
c Var 'aux723' direct represents '2' with '-6079'
6078 6080 -6079 0
c Encoding variable: aux724 with domain: int(0..2) (representing constraint ((0<grid_00006_00000) + (0<grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '6081'
c Var 'aux724' direct represents '0' with '6081'
c Var 'aux724' order represents '1' with '6082'
-6081 6082 0
c Var 'aux724' direct represents '1' with '6083'
6081 -6082 6083 0
-6083 6082 0
-6083 -6081 0
c Var 'aux724' direct represents '2' with '-6082'
6081 6083 -6082 0
c Encoding variable: aux725 with domain: int(0..2) (representing constraint ((0<grid_00006_00005) + (0<grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '6084'
c Var 'aux725' direct represents '0' with '6084'
c Var 'aux725' order represents '1' with '6085'
-6084 6085 0
c Var 'aux725' direct represents '1' with '6086'
6084 -6085 6086 0
-6086 6085 0
-6086 -6084 0
c Var 'aux725' direct represents '2' with '-6085'
6084 6086 -6085 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((0<grid_00006_00004) + (0<grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '6087'
c Var 'aux726' direct represents '0' with '6087'
c Var 'aux726' order represents '1' with '6088'
-6087 6088 0
c Var 'aux726' direct represents '1' with '6089'
6087 -6088 6089 0
-6089 6088 0
-6089 -6087 0
c Var 'aux726' direct represents '2' with '-6088'
6087 6089 -6088 0
c Encoding variable: aux727 with domain: int(0..3) (representing constraint ((0<grid_00006_00002) + aux726))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '6090'
c Var 'aux727' direct represents '0' with '6090'
c Var 'aux727' order represents '1' with '6091'
-6090 6091 0
c Var 'aux727' direct represents '1' with '6092'
6090 -6091 6092 0
-6092 6091 0
-6092 -6090 0
c Var 'aux727' order represents '2' with '6093'
-6091 6093 0
c Var 'aux727' direct represents '2' with '6094'
6091 -6093 6094 0
-6094 6093 0
-6094 -6091 0
c Var 'aux727' direct represents '3' with '-6093'
6090 6092 6094 -6093 0
c Encoding variable: aux728 with domain: int(0..2) (representing constraint ((0<grid_00000_00001) + (0<grid_00000_00006)))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '6095'
c Var 'aux728' direct represents '0' with '6095'
c Var 'aux728' order represents '1' with '6096'
-6095 6096 0
c Var 'aux728' direct represents '1' with '6097'
6095 -6096 6097 0
-6097 6096 0
-6097 -6095 0
c Var 'aux728' direct represents '2' with '-6096'
6095 6097 -6096 0
c Encoding variable: aux729 with domain: int(0..2) (representing constraint ((0<grid_00000_00005) + (0<grid_00000_00002)))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '6098'
c Var 'aux729' direct represents '0' with '6098'
c Var 'aux729' order represents '1' with '6099'
-6098 6099 0
c Var 'aux729' direct represents '1' with '6100'
6098 -6099 6100 0
-6100 6099 0
-6100 -6098 0
c Var 'aux729' direct represents '2' with '-6099'
6098 6100 -6099 0
c Encoding variable: aux730 with domain: int(0..2) (representing constraint ((0<grid_00000_00004) + (0<grid_00000_00003)))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '6101'
c Var 'aux730' direct represents '0' with '6101'
c Var 'aux730' order represents '1' with '6102'
-6101 6102 0
c Var 'aux730' direct represents '1' with '6103'
6101 -6102 6103 0
-6103 6102 0
-6103 -6101 0
c Var 'aux730' direct represents '2' with '-6102'
6101 6103 -6102 0
c Encoding variable: aux731 with domain: int(0..2) (representing constraint ((0<grid_00001_00000) + (0<grid_00001_00005)))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '6104'
c Var 'aux731' direct represents '0' with '6104'
c Var 'aux731' order represents '1' with '6105'
-6104 6105 0
c Var 'aux731' direct represents '1' with '6106'
6104 -6105 6106 0
-6106 6105 0
-6106 -6104 0
c Var 'aux731' direct represents '2' with '-6105'
6104 6106 -6105 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((0<grid_00002_00000) + (0<grid_00002_00006)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '6107'
c Var 'aux732' direct represents '0' with '6107'
c Var 'aux732' order represents '1' with '6108'
-6107 6108 0
c Var 'aux732' direct represents '1' with '6109'
6107 -6108 6109 0
-6109 6108 0
-6109 -6107 0
c Var 'aux732' direct represents '2' with '-6108'
6107 6109 -6108 0
c Encoding variable: aux733 with domain: int(0..2) (representing constraint ((0<grid_00002_00005) + (0<grid_00002_00001)))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '6110'
c Var 'aux733' direct represents '0' with '6110'
c Var 'aux733' order represents '1' with '6111'
-6110 6111 0
c Var 'aux733' direct represents '1' with '6112'
6110 -6111 6112 0
-6112 6111 0
-6112 -6110 0
c Var 'aux733' direct represents '2' with '-6111'
6110 6112 -6111 0
c Encoding variable: aux734 with domain: int(0..2) (representing constraint ((0<grid_00002_00004) + (0<grid_00002_00003)))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '6113'
c Var 'aux734' direct represents '0' with '6113'
c Var 'aux734' order represents '1' with '6114'
-6113 6114 0
c Var 'aux734' direct represents '1' with '6115'
6113 -6114 6115 0
-6115 6114 0
-6115 -6113 0
c Var 'aux734' direct represents '2' with '-6114'
6113 6115 -6114 0
c Encoding variable: aux735 with domain: int(0..3) (representing constraint ((0<grid_00002_00002) + aux734))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '6116'
c Var 'aux735' direct represents '0' with '6116'
c Var 'aux735' order represents '1' with '6117'
-6116 6117 0
c Var 'aux735' direct represents '1' with '6118'
6116 -6117 6118 0
-6118 6117 0
-6118 -6116 0
c Var 'aux735' order represents '2' with '6119'
-6117 6119 0
c Var 'aux735' direct represents '2' with '6120'
6117 -6119 6120 0
-6120 6119 0
-6120 -6117 0
c Var 'aux735' direct represents '3' with '-6119'
6116 6118 6120 -6119 0
c Encoding variable: aux736 with domain: int(0..2) (representing constraint ((0<grid_00003_00000) + (0<grid_00003_00005)))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '6121'
c Var 'aux736' direct represents '0' with '6121'
c Var 'aux736' order represents '1' with '6122'
-6121 6122 0
c Var 'aux736' direct represents '1' with '6123'
6121 -6122 6123 0
-6123 6122 0
-6123 -6121 0
c Var 'aux736' direct represents '2' with '-6122'
6121 6123 -6122 0
c Encoding variable: aux737 with domain: int(0..2) (representing constraint ((0<grid_00003_00004) + (0<grid_00003_00002)))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '6124'
c Var 'aux737' direct represents '0' with '6124'
c Var 'aux737' order represents '1' with '6125'
-6124 6125 0
c Var 'aux737' direct represents '1' with '6126'
6124 -6125 6126 0
-6126 6125 0
-6126 -6124 0
c Var 'aux737' direct represents '2' with '-6125'
6124 6126 -6125 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((0<grid_00004_00000) + (0<grid_00004_00006)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '6127'
c Var 'aux738' direct represents '0' with '6127'
c Var 'aux738' order represents '1' with '6128'
-6127 6128 0
c Var 'aux738' direct represents '1' with '6129'
6127 -6128 6129 0
-6129 6128 0
-6129 -6127 0
c Var 'aux738' direct represents '2' with '-6128'
6127 6129 -6128 0
c Encoding variable: aux739 with domain: int(0..2) (representing constraint ((0<grid_00004_00005) + (0<grid_00004_00001)))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '6130'
c Var 'aux739' direct represents '0' with '6130'
c Var 'aux739' order represents '1' with '6131'
-6130 6131 0
c Var 'aux739' direct represents '1' with '6132'
6130 -6131 6132 0
-6132 6131 0
-6132 -6130 0
c Var 'aux739' direct represents '2' with '-6131'
6130 6132 -6131 0
c Encoding variable: aux740 with domain: int(0..2) (representing constraint ((0<grid_00004_00004) + (0<grid_00004_00003)))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '6133'
c Var 'aux740' direct represents '0' with '6133'
c Var 'aux740' order represents '1' with '6134'
-6133 6134 0
c Var 'aux740' direct represents '1' with '6135'
6133 -6134 6135 0
-6135 6134 0
-6135 -6133 0
c Var 'aux740' direct represents '2' with '-6134'
6133 6135 -6134 0
c Encoding variable: aux741 with domain: int(0..3) (representing constraint ((0<grid_00004_00002) + aux740))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '6136'
c Var 'aux741' direct represents '0' with '6136'
c Var 'aux741' order represents '1' with '6137'
-6136 6137 0
c Var 'aux741' direct represents '1' with '6138'
6136 -6137 6138 0
-6138 6137 0
-6138 -6136 0
c Var 'aux741' order represents '2' with '6139'
-6137 6139 0
c Var 'aux741' direct represents '2' with '6140'
6137 -6139 6140 0
-6140 6139 0
-6140 -6137 0
c Var 'aux741' direct represents '3' with '-6139'
6136 6138 6140 -6139 0
c Encoding variable: aux742 with domain: int(0..2) (representing constraint ((0<grid_00005_00000) + (0<grid_00005_00005)))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '6141'
c Var 'aux742' direct represents '0' with '6141'
c Var 'aux742' order represents '1' with '6142'
-6141 6142 0
c Var 'aux742' direct represents '1' with '6143'
6141 -6142 6143 0
-6143 6142 0
-6143 -6141 0
c Var 'aux742' direct represents '2' with '-6142'
6141 6143 -6142 0
c Encoding variable: aux743 with domain: int(0..2) (representing constraint ((0<grid_00006_00000) + (0<grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '6144'
c Var 'aux743' direct represents '0' with '6144'
c Var 'aux743' order represents '1' with '6145'
-6144 6145 0
c Var 'aux743' direct represents '1' with '6146'
6144 -6145 6146 0
-6146 6145 0
-6146 -6144 0
c Var 'aux743' direct represents '2' with '-6145'
6144 6146 -6145 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((0<grid_00006_00005) + (0<grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '6147'
c Var 'aux744' direct represents '0' with '6147'
c Var 'aux744' order represents '1' with '6148'
-6147 6148 0
c Var 'aux744' direct represents '1' with '6149'
6147 -6148 6149 0
-6149 6148 0
-6149 -6147 0
c Var 'aux744' direct represents '2' with '-6148'
6147 6149 -6148 0
c Encoding variable: aux745 with domain: int(0..2) (representing constraint ((0<grid_00006_00004) + (0<grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '6150'
c Var 'aux745' direct represents '0' with '6150'
c Var 'aux745' order represents '1' with '6151'
-6150 6151 0
c Var 'aux745' direct represents '1' with '6152'
6150 -6151 6152 0
-6152 6151 0
-6152 -6150 0
c Var 'aux745' direct represents '2' with '-6151'
6150 6152 -6151 0
c Encoding variable: aux746 with domain: int(0..3) (representing constraint ((0<grid_00006_00002) + aux745))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '6153'
c Var 'aux746' direct represents '0' with '6153'
c Var 'aux746' order represents '1' with '6154'
-6153 6154 0
c Var 'aux746' direct represents '1' with '6155'
6153 -6154 6155 0
-6155 6154 0
-6155 -6153 0
c Var 'aux746' order represents '2' with '6156'
-6154 6156 0
c Var 'aux746' direct represents '2' with '6157'
6154 -6156 6157 0
-6157 6156 0
-6157 -6154 0
c Var 'aux746' direct represents '3' with '-6156'
6153 6155 6157 -6156 0
c Encoding variable: aux747 with domain: int(0..2) (representing constraint ((0<grid_00002_00000) + (0<grid_00006_00000)))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '6158'
c Var 'aux747' direct represents '0' with '6158'
c Var 'aux747' order represents '1' with '6159'
-6158 6159 0
c Var 'aux747' direct represents '1' with '6160'
6158 -6159 6160 0
-6160 6159 0
-6160 -6158 0
c Var 'aux747' direct represents '2' with '-6159'
6158 6160 -6159 0
c Encoding variable: aux748 with domain: int(0..2) (representing constraint ((0<grid_00001_00000) + (0<grid_00003_00000)))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '6161'
c Var 'aux748' direct represents '0' with '6161'
c Var 'aux748' order represents '1' with '6162'
-6161 6162 0
c Var 'aux748' direct represents '1' with '6163'
6161 -6162 6163 0
-6163 6162 0
-6163 -6161 0
c Var 'aux748' direct represents '2' with '-6162'
6161 6163 -6162 0
c Encoding variable: aux749 with domain: int(0..2) (representing constraint ((0<grid_00005_00000) + (0<grid_00004_00000)))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '6164'
c Var 'aux749' direct represents '0' with '6164'
c Var 'aux749' order represents '1' with '6165'
-6164 6165 0
c Var 'aux749' direct represents '1' with '6166'
6164 -6165 6166 0
-6166 6165 0
-6166 -6164 0
c Var 'aux749' direct represents '2' with '-6165'
6164 6166 -6165 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((0<grid_00002_00001) + (0<grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '6167'
c Var 'aux750' direct represents '0' with '6167'
c Var 'aux750' order represents '1' with '6168'
-6167 6168 0
c Var 'aux750' direct represents '1' with '6169'
6167 -6168 6169 0
-6169 6168 0
-6169 -6167 0
c Var 'aux750' direct represents '2' with '-6168'
6167 6169 -6168 0
c Encoding variable: aux751 with domain: int(0..2) (representing constraint ((0<grid_00002_00002) + (0<grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '6170'
c Var 'aux751' direct represents '0' with '6170'
c Var 'aux751' order represents '1' with '6171'
-6170 6171 0
c Var 'aux751' direct represents '1' with '6172'
6170 -6171 6172 0
-6172 6171 0
-6172 -6170 0
c Var 'aux751' direct represents '2' with '-6171'
6170 6172 -6171 0
c Encoding variable: aux752 with domain: int(0..2) (representing constraint ((0<grid_00001_00002) + (0<grid_00003_00002)))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '6173'
c Var 'aux752' direct represents '0' with '6173'
c Var 'aux752' order represents '1' with '6174'
-6173 6174 0
c Var 'aux752' direct represents '1' with '6175'
6173 -6174 6175 0
-6175 6174 0
-6175 -6173 0
c Var 'aux752' direct represents '2' with '-6174'
6173 6175 -6174 0
c Encoding variable: aux753 with domain: int(0..2) (representing constraint ((0<grid_00005_00002) + (0<grid_00000_00002)))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '6176'
c Var 'aux753' direct represents '0' with '6176'
c Var 'aux753' order represents '1' with '6177'
-6176 6177 0
c Var 'aux753' direct represents '1' with '6178'
6176 -6177 6178 0
-6178 6177 0
-6178 -6176 0
c Var 'aux753' direct represents '2' with '-6177'
6176 6178 -6177 0
c Encoding variable: aux754 with domain: int(0..3) (representing constraint ((0<grid_00004_00002) + aux753))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '6179'
c Var 'aux754' direct represents '0' with '6179'
c Var 'aux754' order represents '1' with '6180'
-6179 6180 0
c Var 'aux754' direct represents '1' with '6181'
6179 -6180 6181 0
-6181 6180 0
-6181 -6179 0
c Var 'aux754' order represents '2' with '6182'
-6180 6182 0
c Var 'aux754' direct represents '2' with '6183'
6180 -6182 6183 0
-6183 6182 0
-6183 -6180 0
c Var 'aux754' direct represents '3' with '-6182'
6179 6181 6183 -6182 0
c Encoding variable: aux755 with domain: int(0..2) (representing constraint ((0<grid_00002_00003) + (0<grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '6184'
c Var 'aux755' direct represents '0' with '6184'
c Var 'aux755' order represents '1' with '6185'
-6184 6185 0
c Var 'aux755' direct represents '1' with '6186'
6184 -6185 6186 0
-6186 6185 0
-6186 -6184 0
c Var 'aux755' direct represents '2' with '-6185'
6184 6186 -6185 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((0<grid_00001_00003) + (0<grid_00003_00003)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '6187'
c Var 'aux756' direct represents '0' with '6187'
c Var 'aux756' order represents '1' with '6188'
-6187 6188 0
c Var 'aux756' direct represents '1' with '6189'
6187 -6188 6189 0
-6189 6188 0
-6189 -6187 0
c Var 'aux756' direct represents '2' with '-6188'
6187 6189 -6188 0
c Encoding variable: aux757 with domain: int(0..2) (representing constraint ((0<grid_00005_00003) + (0<grid_00000_00003)))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '6190'
c Var 'aux757' direct represents '0' with '6190'
c Var 'aux757' order represents '1' with '6191'
-6190 6191 0
c Var 'aux757' direct represents '1' with '6192'
6190 -6191 6192 0
-6192 6191 0
-6192 -6190 0
c Var 'aux757' direct represents '2' with '-6191'
6190 6192 -6191 0
c Encoding variable: aux758 with domain: int(0..3) (representing constraint ((0<grid_00004_00003) + aux757))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '6193'
c Var 'aux758' direct represents '0' with '6193'
c Var 'aux758' order represents '1' with '6194'
-6193 6194 0
c Var 'aux758' direct represents '1' with '6195'
6193 -6194 6195 0
-6195 6194 0
-6195 -6193 0
c Var 'aux758' order represents '2' with '6196'
-6194 6196 0
c Var 'aux758' direct represents '2' with '6197'
6194 -6196 6197 0
-6197 6196 0
-6197 -6194 0
c Var 'aux758' direct represents '3' with '-6196'
6193 6195 6197 -6196 0
c Encoding variable: aux759 with domain: int(0..2) (representing constraint ((0<grid_00002_00004) + (0<grid_00006_00004)))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '6198'
c Var 'aux759' direct represents '0' with '6198'
c Var 'aux759' order represents '1' with '6199'
-6198 6199 0
c Var 'aux759' direct represents '1' with '6200'
6198 -6199 6200 0
-6200 6199 0
-6200 -6198 0
c Var 'aux759' direct represents '2' with '-6199'
6198 6200 -6199 0
c Encoding variable: aux760 with domain: int(0..2) (representing constraint ((0<grid_00000_00004) + (0<grid_00003_00004)))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '6201'
c Var 'aux760' direct represents '0' with '6201'
c Var 'aux760' order represents '1' with '6202'
-6201 6202 0
c Var 'aux760' direct represents '1' with '6203'
6201 -6202 6203 0
-6203 6202 0
-6203 -6201 0
c Var 'aux760' direct represents '2' with '-6202'
6201 6203 -6202 0
c Encoding variable: aux761 with domain: int(0..2) (representing constraint ((0<grid_00002_00005) + (0<grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '6204'
c Var 'aux761' direct represents '0' with '6204'
c Var 'aux761' order represents '1' with '6205'
-6204 6205 0
c Var 'aux761' direct represents '1' with '6206'
6204 -6205 6206 0
-6206 6205 0
-6206 -6204 0
c Var 'aux761' direct represents '2' with '-6205'
6204 6206 -6205 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((0<grid_00001_00005) + (0<grid_00003_00005)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '6207'
c Var 'aux762' direct represents '0' with '6207'
c Var 'aux762' order represents '1' with '6208'
-6207 6208 0
c Var 'aux762' direct represents '1' with '6209'
6207 -6208 6209 0
-6209 6208 0
-6209 -6207 0
c Var 'aux762' direct represents '2' with '-6208'
6207 6209 -6208 0
c Encoding variable: aux763 with domain: int(0..2) (representing constraint ((0<grid_00005_00005) + (0<grid_00000_00005)))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '6210'
c Var 'aux763' direct represents '0' with '6210'
c Var 'aux763' order represents '1' with '6211'
-6210 6211 0
c Var 'aux763' direct represents '1' with '6212'
6210 -6211 6212 0
-6212 6211 0
-6212 -6210 0
c Var 'aux763' direct represents '2' with '-6211'
6210 6212 -6211 0
c Encoding variable: aux764 with domain: int(0..3) (representing constraint ((0<grid_00004_00005) + aux763))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '6213'
c Var 'aux764' direct represents '0' with '6213'
c Var 'aux764' order represents '1' with '6214'
-6213 6214 0
c Var 'aux764' direct represents '1' with '6215'
6213 -6214 6215 0
-6215 6214 0
-6215 -6213 0
c Var 'aux764' order represents '2' with '6216'
-6214 6216 0
c Var 'aux764' direct represents '2' with '6217'
6214 -6216 6217 0
-6217 6216 0
-6217 -6214 0
c Var 'aux764' direct represents '3' with '-6216'
6213 6215 6217 -6216 0
c Encoding variable: aux765 with domain: int(0..2) (representing constraint ((0<grid_00002_00006) + (0<grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '6218'
c Var 'aux765' direct represents '0' with '6218'
c Var 'aux765' order represents '1' with '6219'
-6218 6219 0
c Var 'aux765' direct represents '1' with '6220'
6218 -6219 6220 0
-6220 6219 0
-6220 -6218 0
c Var 'aux765' direct represents '2' with '-6219'
6218 6220 -6219 0
c Encoding variable: aux766 with domain: int(0..2) (representing constraint ((0<grid_00002_00000) + (0<grid_00006_00000)))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '6221'
c Var 'aux766' direct represents '0' with '6221'
c Var 'aux766' order represents '1' with '6222'
-6221 6222 0
c Var 'aux766' direct represents '1' with '6223'
6221 -6222 6223 0
-6223 6222 0
-6223 -6221 0
c Var 'aux766' direct represents '2' with '-6222'
6221 6223 -6222 0
c Encoding variable: aux767 with domain: int(0..2) (representing constraint ((0<grid_00001_00000) + (0<grid_00003_00000)))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '6224'
c Var 'aux767' direct represents '0' with '6224'
c Var 'aux767' order represents '1' with '6225'
-6224 6225 0
c Var 'aux767' direct represents '1' with '6226'
6224 -6225 6226 0
-6226 6225 0
-6226 -6224 0
c Var 'aux767' direct represents '2' with '-6225'
6224 6226 -6225 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((0<grid_00005_00000) + (0<grid_00004_00000)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '6227'
c Var 'aux768' direct represents '0' with '6227'
c Var 'aux768' order represents '1' with '6228'
-6227 6228 0
c Var 'aux768' direct represents '1' with '6229'
6227 -6228 6229 0
-6229 6228 0
-6229 -6227 0
c Var 'aux768' direct represents '2' with '-6228'
6227 6229 -6228 0
c Encoding variable: aux769 with domain: int(0..2) (representing constraint ((0<grid_00002_00001) + (0<grid_00006_00001)))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '6230'
c Var 'aux769' direct represents '0' with '6230'
c Var 'aux769' order represents '1' with '6231'
-6230 6231 0
c Var 'aux769' direct represents '1' with '6232'
6230 -6231 6232 0
-6232 6231 0
-6232 -6230 0
c Var 'aux769' direct represents '2' with '-6231'
6230 6232 -6231 0
c Encoding variable: aux770 with domain: int(0..2) (representing constraint ((0<grid_00002_00002) + (0<grid_00006_00002)))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '6233'
c Var 'aux770' direct represents '0' with '6233'
c Var 'aux770' order represents '1' with '6234'
-6233 6234 0
c Var 'aux770' direct represents '1' with '6235'
6233 -6234 6235 0
-6235 6234 0
-6235 -6233 0
c Var 'aux770' direct represents '2' with '-6234'
6233 6235 -6234 0
c Encoding variable: aux771 with domain: int(0..2) (representing constraint ((0<grid_00001_00002) + (0<grid_00003_00002)))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '6236'
c Var 'aux771' direct represents '0' with '6236'
c Var 'aux771' order represents '1' with '6237'
-6236 6237 0
c Var 'aux771' direct represents '1' with '6238'
6236 -6237 6238 0
-6238 6237 0
-6238 -6236 0
c Var 'aux771' direct represents '2' with '-6237'
6236 6238 -6237 0
c Encoding variable: aux772 with domain: int(0..2) (representing constraint ((0<grid_00005_00002) + (0<grid_00000_00002)))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '6239'
c Var 'aux772' direct represents '0' with '6239'
c Var 'aux772' order represents '1' with '6240'
-6239 6240 0
c Var 'aux772' direct represents '1' with '6241'
6239 -6240 6241 0
-6241 6240 0
-6241 -6239 0
c Var 'aux772' direct represents '2' with '-6240'
6239 6241 -6240 0
c Encoding variable: aux773 with domain: int(0..3) (representing constraint ((0<grid_00004_00002) + aux772))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '6242'
c Var 'aux773' direct represents '0' with '6242'
c Var 'aux773' order represents '1' with '6243'
-6242 6243 0
c Var 'aux773' direct represents '1' with '6244'
6242 -6243 6244 0
-6244 6243 0
-6244 -6242 0
c Var 'aux773' order represents '2' with '6245'
-6243 6245 0
c Var 'aux773' direct represents '2' with '6246'
6243 -6245 6246 0
-6246 6245 0
-6246 -6243 0
c Var 'aux773' direct represents '3' with '-6245'
6242 6244 6246 -6245 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((0<grid_00002_00003) + (0<grid_00006_00003)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '6247'
c Var 'aux774' direct represents '0' with '6247'
c Var 'aux774' order represents '1' with '6248'
-6247 6248 0
c Var 'aux774' direct represents '1' with '6249'
6247 -6248 6249 0
-6249 6248 0
-6249 -6247 0
c Var 'aux774' direct represents '2' with '-6248'
6247 6249 -6248 0
c Encoding variable: aux775 with domain: int(0..2) (representing constraint ((0<grid_00001_00003) + (0<grid_00003_00003)))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '6250'
c Var 'aux775' direct represents '0' with '6250'
c Var 'aux775' order represents '1' with '6251'
-6250 6251 0
c Var 'aux775' direct represents '1' with '6252'
6250 -6251 6252 0
-6252 6251 0
-6252 -6250 0
c Var 'aux775' direct represents '2' with '-6251'
6250 6252 -6251 0
c Encoding variable: aux776 with domain: int(0..2) (representing constraint ((0<grid_00005_00003) + (0<grid_00000_00003)))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '6253'
c Var 'aux776' direct represents '0' with '6253'
c Var 'aux776' order represents '1' with '6254'
-6253 6254 0
c Var 'aux776' direct represents '1' with '6255'
6253 -6254 6255 0
-6255 6254 0
-6255 -6253 0
c Var 'aux776' direct represents '2' with '-6254'
6253 6255 -6254 0
c Encoding variable: aux777 with domain: int(0..3) (representing constraint ((0<grid_00004_00003) + aux776))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '6256'
c Var 'aux777' direct represents '0' with '6256'
c Var 'aux777' order represents '1' with '6257'
-6256 6257 0
c Var 'aux777' direct represents '1' with '6258'
6256 -6257 6258 0
-6258 6257 0
-6258 -6256 0
c Var 'aux777' order represents '2' with '6259'
-6257 6259 0
c Var 'aux777' direct represents '2' with '6260'
6257 -6259 6260 0
-6260 6259 0
-6260 -6257 0
c Var 'aux777' direct represents '3' with '-6259'
6256 6258 6260 -6259 0
c Encoding variable: aux778 with domain: int(0..2) (representing constraint ((0<grid_00002_00004) + (0<grid_00006_00004)))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '6261'
c Var 'aux778' direct represents '0' with '6261'
c Var 'aux778' order represents '1' with '6262'
-6261 6262 0
c Var 'aux778' direct represents '1' with '6263'
6261 -6262 6263 0
-6263 6262 0
-6263 -6261 0
c Var 'aux778' direct represents '2' with '-6262'
6261 6263 -6262 0
c Encoding variable: aux779 with domain: int(0..2) (representing constraint ((0<grid_00000_00004) + (0<grid_00003_00004)))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '6264'
c Var 'aux779' direct represents '0' with '6264'
c Var 'aux779' order represents '1' with '6265'
-6264 6265 0
c Var 'aux779' direct represents '1' with '6266'
6264 -6265 6266 0
-6266 6265 0
-6266 -6264 0
c Var 'aux779' direct represents '2' with '-6265'
6264 6266 -6265 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((0<grid_00002_00005) + (0<grid_00006_00005)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '6267'
c Var 'aux780' direct represents '0' with '6267'
c Var 'aux780' order represents '1' with '6268'
-6267 6268 0
c Var 'aux780' direct represents '1' with '6269'
6267 -6268 6269 0
-6269 6268 0
-6269 -6267 0
c Var 'aux780' direct represents '2' with '-6268'
6267 6269 -6268 0
c Encoding variable: aux781 with domain: int(0..2) (representing constraint ((0<grid_00001_00005) + (0<grid_00003_00005)))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '6270'
c Var 'aux781' direct represents '0' with '6270'
c Var 'aux781' order represents '1' with '6271'
-6270 6271 0
c Var 'aux781' direct represents '1' with '6272'
6270 -6271 6272 0
-6272 6271 0
-6272 -6270 0
c Var 'aux781' direct represents '2' with '-6271'
6270 6272 -6271 0
c Encoding variable: aux782 with domain: int(0..2) (representing constraint ((0<grid_00005_00005) + (0<grid_00000_00005)))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '6273'
c Var 'aux782' direct represents '0' with '6273'
c Var 'aux782' order represents '1' with '6274'
-6273 6274 0
c Var 'aux782' direct represents '1' with '6275'
6273 -6274 6275 0
-6275 6274 0
-6275 -6273 0
c Var 'aux782' direct represents '2' with '-6274'
6273 6275 -6274 0
c Encoding variable: aux783 with domain: int(0..3) (representing constraint ((0<grid_00004_00005) + aux782))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '6276'
c Var 'aux783' direct represents '0' with '6276'
c Var 'aux783' order represents '1' with '6277'
-6276 6277 0
c Var 'aux783' direct represents '1' with '6278'
6276 -6277 6278 0
-6278 6277 0
-6278 -6276 0
c Var 'aux783' order represents '2' with '6279'
-6277 6279 0
c Var 'aux783' direct represents '2' with '6280'
6277 -6279 6280 0
-6280 6279 0
-6280 -6277 0
c Var 'aux783' direct represents '3' with '-6279'
6276 6278 6280 -6279 0
c Encoding variable: aux784 with domain: int(0..2) (representing constraint ((0<grid_00002_00006) + (0<grid_00006_00006)))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '6281'
c Var 'aux784' direct represents '0' with '6281'
c Var 'aux784' order represents '1' with '6282'
-6281 6282 0
c Var 'aux784' direct represents '1' with '6283'
6281 -6282 6283 0
-6283 6282 0
-6283 -6281 0
c Var 'aux784' direct represents '2' with '-6282'
6281 6283 -6282 0
c ((1<=(aux78 + aux80 + aux81))=tv=SATLiteral(1187))
-1187 -1407 -1437 -1468 0
1187 1468 0
1187 1437 0
1187 1438 0
1187 1440 0
1187 1442 0
1187 1444 0
1187 1446 0
1187 1448 0
1187 1450 0
1187 1452 0
1187 1454 0
1187 1456 0
1187 1458 0
1187 1460 0
1187 1462 0
1187 1464 0
1187 1466 0
1187 1407 0
1187 1407 1437 0
1187 1407 1438 0
1187 1407 1440 0
1187 1407 1442 0
1187 1407 1444 0
1187 1407 1446 0
1187 1407 1448 0
1187 1407 1450 0
1187 1407 1452 0
1187 1407 1454 0
1187 1407 1456 0
1187 1407 1458 0
1187 1407 1460 0
1187 1407 1462 0
1187 1407 1464 0
1187 1407 1466 0
1187 1408 0
1187 1408 1437 0
1187 1408 1438 0
1187 1408 1440 0
1187 1408 1442 0
1187 1408 1444 0
1187 1408 1446 0
1187 1408 1448 0
1187 1408 1450 0
1187 1408 1452 0
1187 1408 1454 0
1187 1408 1456 0
1187 1408 1458 0
1187 1408 1460 0
1187 1408 1462 0
1187 1408 1464 0
1187 1408 1466 0
1187 1410 0
1187 1410 1437 0
1187 1410 1438 0
1187 1410 1440 0
1187 1410 1442 0
1187 1410 1444 0
1187 1410 1446 0
1187 1410 1448 0
1187 1410 1450 0
1187 1410 1452 0
1187 1410 1454 0
1187 1410 1456 0
1187 1410 1458 0
1187 1410 1460 0
1187 1410 1462 0
1187 1410 1464 0
1187 1410 1466 0
1187 1412 0
1187 1412 1437 0
1187 1412 1438 0
1187 1412 1440 0
1187 1412 1442 0
1187 1412 1444 0
1187 1412 1446 0
1187 1412 1448 0
1187 1412 1450 0
1187 1412 1452 0
1187 1412 1454 0
1187 1412 1456 0
1187 1412 1458 0
1187 1412 1460 0
1187 1412 1462 0
1187 1412 1464 0
1187 1412 1466 0
1187 1414 0
1187 1414 1437 0
1187 1414 1438 0
1187 1414 1440 0
1187 1414 1442 0
1187 1414 1444 0
1187 1414 1446 0
1187 1414 1448 0
1187 1414 1450 0
1187 1414 1452 0
1187 1414 1454 0
1187 1414 1456 0
1187 1414 1458 0
1187 1414 1460 0
1187 1414 1462 0
1187 1414 1464 0
1187 1414 1466 0
1187 1416 0
1187 1416 1437 0
1187 1416 1438 0
1187 1416 1440 0
1187 1416 1442 0
1187 1416 1444 0
1187 1416 1446 0
1187 1416 1448 0
1187 1416 1450 0
1187 1416 1452 0
1187 1416 1454 0
1187 1416 1456 0
1187 1416 1458 0
1187 1416 1460 0
1187 1416 1462 0
1187 1416 1464 0
1187 1416 1466 0
1187 1418 0
1187 1418 1437 0
1187 1418 1438 0
1187 1418 1440 0
1187 1418 1442 0
1187 1418 1444 0
1187 1418 1446 0
1187 1418 1448 0
1187 1418 1450 0
1187 1418 1452 0
1187 1418 1454 0
1187 1418 1456 0
1187 1418 1458 0
1187 1418 1460 0
1187 1418 1462 0
1187 1418 1464 0
1187 1418 1466 0
1187 1420 0
1187 1420 1437 0
1187 1420 1438 0
1187 1420 1440 0
1187 1420 1442 0
1187 1420 1444 0
1187 1420 1446 0
1187 1420 1448 0
1187 1420 1450 0
1187 1420 1452 0
1187 1420 1454 0
1187 1420 1456 0
1187 1420 1458 0
1187 1420 1460 0
1187 1420 1462 0
1187 1420 1464 0
1187 1420 1466 0
c ((1<=(aux115 + aux117 + aux118))=tv=SATLiteral(1188))
-1188 -1674 -1704 -1735 0
1188 1735 0
1188 1704 0
1188 1705 0
1188 1707 0
1188 1709 0
1188 1711 0
1188 1713 0
1188 1715 0
1188 1717 0
1188 1719 0
1188 1721 0
1188 1723 0
1188 1725 0
1188 1727 0
1188 1729 0
1188 1731 0
1188 1733 0
1188 1674 0
1188 1674 1704 0
1188 1674 1705 0
1188 1674 1707 0
1188 1674 1709 0
1188 1674 1711 0
1188 1674 1713 0
1188 1674 1715 0
1188 1674 1717 0
1188 1674 1719 0
1188 1674 1721 0
1188 1674 1723 0
1188 1674 1725 0
1188 1674 1727 0
1188 1674 1729 0
1188 1674 1731 0
1188 1674 1733 0
1188 1675 0
1188 1675 1704 0
1188 1675 1705 0
1188 1675 1707 0
1188 1675 1709 0
1188 1675 1711 0
1188 1675 1713 0
1188 1675 1715 0
1188 1675 1717 0
1188 1675 1719 0
1188 1675 1721 0
1188 1675 1723 0
1188 1675 1725 0
1188 1675 1727 0
1188 1675 1729 0
1188 1675 1731 0
1188 1675 1733 0
1188 1677 0
1188 1677 1704 0
1188 1677 1705 0
1188 1677 1707 0
1188 1677 1709 0
1188 1677 1711 0
1188 1677 1713 0
1188 1677 1715 0
1188 1677 1717 0
1188 1677 1719 0
1188 1677 1721 0
1188 1677 1723 0
1188 1677 1725 0
1188 1677 1727 0
1188 1677 1729 0
1188 1677 1731 0
1188 1677 1733 0
1188 1679 0
1188 1679 1704 0
1188 1679 1705 0
1188 1679 1707 0
1188 1679 1709 0
1188 1679 1711 0
1188 1679 1713 0
1188 1679 1715 0
1188 1679 1717 0
1188 1679 1719 0
1188 1679 1721 0
1188 1679 1723 0
1188 1679 1725 0
1188 1679 1727 0
1188 1679 1729 0
1188 1679 1731 0
1188 1679 1733 0
1188 1681 0
1188 1681 1704 0
1188 1681 1705 0
1188 1681 1707 0
1188 1681 1709 0
1188 1681 1711 0
1188 1681 1713 0
1188 1681 1715 0
1188 1681 1717 0
1188 1681 1719 0
1188 1681 1721 0
1188 1681 1723 0
1188 1681 1725 0
1188 1681 1727 0
1188 1681 1729 0
1188 1681 1731 0
1188 1681 1733 0
1188 1683 0
1188 1683 1704 0
1188 1683 1705 0
1188 1683 1707 0
1188 1683 1709 0
1188 1683 1711 0
1188 1683 1713 0
1188 1683 1715 0
1188 1683 1717 0
1188 1683 1719 0
1188 1683 1721 0
1188 1683 1723 0
1188 1683 1725 0
1188 1683 1727 0
1188 1683 1729 0
1188 1683 1731 0
1188 1683 1733 0
1188 1685 0
1188 1685 1704 0
1188 1685 1705 0
1188 1685 1707 0
1188 1685 1709 0
1188 1685 1711 0
1188 1685 1713 0
1188 1685 1715 0
1188 1685 1717 0
1188 1685 1719 0
1188 1685 1721 0
1188 1685 1723 0
1188 1685 1725 0
1188 1685 1727 0
1188 1685 1729 0
1188 1685 1731 0
1188 1685 1733 0
1188 1687 0
1188 1687 1704 0
1188 1687 1705 0
1188 1687 1707 0
1188 1687 1709 0
1188 1687 1711 0
1188 1687 1713 0
1188 1687 1715 0
1188 1687 1717 0
1188 1687 1719 0
1188 1687 1721 0
1188 1687 1723 0
1188 1687 1725 0
1188 1687 1727 0
1188 1687 1729 0
1188 1687 1731 0
1188 1687 1733 0
c ((1<=(aux152 + aux154 + aux155))=tv=SATLiteral(1189))
-1189 -1941 -1971 -2002 0
1189 2002 0
1189 1971 0
1189 1972 0
1189 1974 0
1189 1976 0
1189 1978 0
1189 1980 0
1189 1982 0
1189 1984 0
1189 1986 0
1189 1988 0
1189 1990 0
1189 1992 0
1189 1994 0
1189 1996 0
1189 1998 0
1189 2000 0
1189 1941 0
1189 1941 1971 0
1189 1941 1972 0
1189 1941 1974 0
1189 1941 1976 0
1189 1941 1978 0
1189 1941 1980 0
1189 1941 1982 0
1189 1941 1984 0
1189 1941 1986 0
1189 1941 1988 0
1189 1941 1990 0
1189 1941 1992 0
1189 1941 1994 0
1189 1941 1996 0
1189 1941 1998 0
1189 1941 2000 0
1189 1942 0
1189 1942 1971 0
1189 1942 1972 0
1189 1942 1974 0
1189 1942 1976 0
1189 1942 1978 0
1189 1942 1980 0
1189 1942 1982 0
1189 1942 1984 0
1189 1942 1986 0
1189 1942 1988 0
1189 1942 1990 0
1189 1942 1992 0
1189 1942 1994 0
1189 1942 1996 0
1189 1942 1998 0
1189 1942 2000 0
1189 1944 0
1189 1944 1971 0
1189 1944 1972 0
1189 1944 1974 0
1189 1944 1976 0
1189 1944 1978 0
1189 1944 1980 0
1189 1944 1982 0
1189 1944 1984 0
1189 1944 1986 0
1189 1944 1988 0
1189 1944 1990 0
1189 1944 1992 0
1189 1944 1994 0
1189 1944 1996 0
1189 1944 1998 0
1189 1944 2000 0
1189 1946 0
1189 1946 1971 0
1189 1946 1972 0
1189 1946 1974 0
1189 1946 1976 0
1189 1946 1978 0
1189 1946 1980 0
1189 1946 1982 0
1189 1946 1984 0
1189 1946 1986 0
1189 1946 1988 0
1189 1946 1990 0
1189 1946 1992 0
1189 1946 1994 0
1189 1946 1996 0
1189 1946 1998 0
1189 1946 2000 0
1189 1948 0
1189 1948 1971 0
1189 1948 1972 0
1189 1948 1974 0
1189 1948 1976 0
1189 1948 1978 0
1189 1948 1980 0
1189 1948 1982 0
1189 1948 1984 0
1189 1948 1986 0
1189 1948 1988 0
1189 1948 1990 0
1189 1948 1992 0
1189 1948 1994 0
1189 1948 1996 0
1189 1948 1998 0
1189 1948 2000 0
1189 1950 0
1189 1950 1971 0
1189 1950 1972 0
1189 1950 1974 0
1189 1950 1976 0
1189 1950 1978 0
1189 1950 1980 0
1189 1950 1982 0
1189 1950 1984 0
1189 1950 1986 0
1189 1950 1988 0
1189 1950 1990 0
1189 1950 1992 0
1189 1950 1994 0
1189 1950 1996 0
1189 1950 1998 0
1189 1950 2000 0
1189 1952 0
1189 1952 1971 0
1189 1952 1972 0
1189 1952 1974 0
1189 1952 1976 0
1189 1952 1978 0
1189 1952 1980 0
1189 1952 1982 0
1189 1952 1984 0
1189 1952 1986 0
1189 1952 1988 0
1189 1952 1990 0
1189 1952 1992 0
1189 1952 1994 0
1189 1952 1996 0
1189 1952 1998 0
1189 1952 2000 0
1189 1954 0
1189 1954 1971 0
1189 1954 1972 0
1189 1954 1974 0
1189 1954 1976 0
1189 1954 1978 0
1189 1954 1980 0
1189 1954 1982 0
1189 1954 1984 0
1189 1954 1986 0
1189 1954 1988 0
1189 1954 1990 0
1189 1954 1992 0
1189 1954 1994 0
1189 1954 1996 0
1189 1954 1998 0
1189 1954 2000 0
c ((1<=(aux189 + aux191 + aux192))=tv=SATLiteral(1190))
-1190 -2208 -2238 -2269 0
1190 2269 0
1190 2238 0
1190 2239 0
1190 2241 0
1190 2243 0
1190 2245 0
1190 2247 0
1190 2249 0
1190 2251 0
1190 2253 0
1190 2255 0
1190 2257 0
1190 2259 0
1190 2261 0
1190 2263 0
1190 2265 0
1190 2267 0
1190 2208 0
1190 2208 2238 0
1190 2208 2239 0
1190 2208 2241 0
1190 2208 2243 0
1190 2208 2245 0
1190 2208 2247 0
1190 2208 2249 0
1190 2208 2251 0
1190 2208 2253 0
1190 2208 2255 0
1190 2208 2257 0
1190 2208 2259 0
1190 2208 2261 0
1190 2208 2263 0
1190 2208 2265 0
1190 2208 2267 0
1190 2209 0
1190 2209 2238 0
1190 2209 2239 0
1190 2209 2241 0
1190 2209 2243 0
1190 2209 2245 0
1190 2209 2247 0
1190 2209 2249 0
1190 2209 2251 0
1190 2209 2253 0
1190 2209 2255 0
1190 2209 2257 0
1190 2209 2259 0
1190 2209 2261 0
1190 2209 2263 0
1190 2209 2265 0
1190 2209 2267 0
1190 2211 0
1190 2211 2238 0
1190 2211 2239 0
1190 2211 2241 0
1190 2211 2243 0
1190 2211 2245 0
1190 2211 2247 0
1190 2211 2249 0
1190 2211 2251 0
1190 2211 2253 0
1190 2211 2255 0
1190 2211 2257 0
1190 2211 2259 0
1190 2211 2261 0
1190 2211 2263 0
1190 2211 2265 0
1190 2211 2267 0
1190 2213 0
1190 2213 2238 0
1190 2213 2239 0
1190 2213 2241 0
1190 2213 2243 0
1190 2213 2245 0
1190 2213 2247 0
1190 2213 2249 0
1190 2213 2251 0
1190 2213 2253 0
1190 2213 2255 0
1190 2213 2257 0
1190 2213 2259 0
1190 2213 2261 0
1190 2213 2263 0
1190 2213 2265 0
1190 2213 2267 0
1190 2215 0
1190 2215 2238 0
1190 2215 2239 0
1190 2215 2241 0
1190 2215 2243 0
1190 2215 2245 0
1190 2215 2247 0
1190 2215 2249 0
1190 2215 2251 0
1190 2215 2253 0
1190 2215 2255 0
1190 2215 2257 0
1190 2215 2259 0
1190 2215 2261 0
1190 2215 2263 0
1190 2215 2265 0
1190 2215 2267 0
1190 2217 0
1190 2217 2238 0
1190 2217 2239 0
1190 2217 2241 0
1190 2217 2243 0
1190 2217 2245 0
1190 2217 2247 0
1190 2217 2249 0
1190 2217 2251 0
1190 2217 2253 0
1190 2217 2255 0
1190 2217 2257 0
1190 2217 2259 0
1190 2217 2261 0
1190 2217 2263 0
1190 2217 2265 0
1190 2217 2267 0
1190 2219 0
1190 2219 2238 0
1190 2219 2239 0
1190 2219 2241 0
1190 2219 2243 0
1190 2219 2245 0
1190 2219 2247 0
1190 2219 2249 0
1190 2219 2251 0
1190 2219 2253 0
1190 2219 2255 0
1190 2219 2257 0
1190 2219 2259 0
1190 2219 2261 0
1190 2219 2263 0
1190 2219 2265 0
1190 2219 2267 0
1190 2221 0
1190 2221 2238 0
1190 2221 2239 0
1190 2221 2241 0
1190 2221 2243 0
1190 2221 2245 0
1190 2221 2247 0
1190 2221 2249 0
1190 2221 2251 0
1190 2221 2253 0
1190 2221 2255 0
1190 2221 2257 0
1190 2221 2259 0
1190 2221 2261 0
1190 2221 2263 0
1190 2221 2265 0
1190 2221 2267 0
c ((1<=(aux226 + aux228 + aux229))=tv=SATLiteral(1191))
-1191 -2475 -2505 -2536 0
1191 2536 0
1191 2505 0
1191 2506 0
1191 2508 0
1191 2510 0
1191 2512 0
1191 2514 0
1191 2516 0
1191 2518 0
1191 2520 0
1191 2522 0
1191 2524 0
1191 2526 0
1191 2528 0
1191 2530 0
1191 2532 0
1191 2534 0
1191 2475 0
1191 2475 2505 0
1191 2475 2506 0
1191 2475 2508 0
1191 2475 2510 0
1191 2475 2512 0
1191 2475 2514 0
1191 2475 2516 0
1191 2475 2518 0
1191 2475 2520 0
1191 2475 2522 0
1191 2475 2524 0
1191 2475 2526 0
1191 2475 2528 0
1191 2475 2530 0
1191 2475 2532 0
1191 2475 2534 0
1191 2476 0
1191 2476 2505 0
1191 2476 2506 0
1191 2476 2508 0
1191 2476 2510 0
1191 2476 2512 0
1191 2476 2514 0
1191 2476 2516 0
1191 2476 2518 0
1191 2476 2520 0
1191 2476 2522 0
1191 2476 2524 0
1191 2476 2526 0
1191 2476 2528 0
1191 2476 2530 0
1191 2476 2532 0
1191 2476 2534 0
1191 2478 0
1191 2478 2505 0
1191 2478 2506 0
1191 2478 2508 0
1191 2478 2510 0
1191 2478 2512 0
1191 2478 2514 0
1191 2478 2516 0
1191 2478 2518 0
1191 2478 2520 0
1191 2478 2522 0
1191 2478 2524 0
1191 2478 2526 0
1191 2478 2528 0
1191 2478 2530 0
1191 2478 2532 0
1191 2478 2534 0
1191 2480 0
1191 2480 2505 0
1191 2480 2506 0
1191 2480 2508 0
1191 2480 2510 0
1191 2480 2512 0
1191 2480 2514 0
1191 2480 2516 0
1191 2480 2518 0
1191 2480 2520 0
1191 2480 2522 0
1191 2480 2524 0
1191 2480 2526 0
1191 2480 2528 0
1191 2480 2530 0
1191 2480 2532 0
1191 2480 2534 0
1191 2482 0
1191 2482 2505 0
1191 2482 2506 0
1191 2482 2508 0
1191 2482 2510 0
1191 2482 2512 0
1191 2482 2514 0
1191 2482 2516 0
1191 2482 2518 0
1191 2482 2520 0
1191 2482 2522 0
1191 2482 2524 0
1191 2482 2526 0
1191 2482 2528 0
1191 2482 2530 0
1191 2482 2532 0
1191 2482 2534 0
1191 2484 0
1191 2484 2505 0
1191 2484 2506 0
1191 2484 2508 0
1191 2484 2510 0
1191 2484 2512 0
1191 2484 2514 0
1191 2484 2516 0
1191 2484 2518 0
1191 2484 2520 0
1191 2484 2522 0
1191 2484 2524 0
1191 2484 2526 0
1191 2484 2528 0
1191 2484 2530 0
1191 2484 2532 0
1191 2484 2534 0
1191 2486 0
1191 2486 2505 0
1191 2486 2506 0
1191 2486 2508 0
1191 2486 2510 0
1191 2486 2512 0
1191 2486 2514 0
1191 2486 2516 0
1191 2486 2518 0
1191 2486 2520 0
1191 2486 2522 0
1191 2486 2524 0
1191 2486 2526 0
1191 2486 2528 0
1191 2486 2530 0
1191 2486 2532 0
1191 2486 2534 0
1191 2488 0
1191 2488 2505 0
1191 2488 2506 0
1191 2488 2508 0
1191 2488 2510 0
1191 2488 2512 0
1191 2488 2514 0
1191 2488 2516 0
1191 2488 2518 0
1191 2488 2520 0
1191 2488 2522 0
1191 2488 2524 0
1191 2488 2526 0
1191 2488 2528 0
1191 2488 2530 0
1191 2488 2532 0
1191 2488 2534 0
c ((1<=(aux263 + aux265 + aux266))=tv=SATLiteral(1192))
-1192 -2742 -2772 -2803 0
1192 2803 0
1192 2772 0
1192 2773 0
1192 2775 0
1192 2777 0
1192 2779 0
1192 2781 0
1192 2783 0
1192 2785 0
1192 2787 0
1192 2789 0
1192 2791 0
1192 2793 0
1192 2795 0
1192 2797 0
1192 2799 0
1192 2801 0
1192 2742 0
1192 2742 2772 0
1192 2742 2773 0
1192 2742 2775 0
1192 2742 2777 0
1192 2742 2779 0
1192 2742 2781 0
1192 2742 2783 0
1192 2742 2785 0
1192 2742 2787 0
1192 2742 2789 0
1192 2742 2791 0
1192 2742 2793 0
1192 2742 2795 0
1192 2742 2797 0
1192 2742 2799 0
1192 2742 2801 0
1192 2743 0
1192 2743 2772 0
1192 2743 2773 0
1192 2743 2775 0
1192 2743 2777 0
1192 2743 2779 0
1192 2743 2781 0
1192 2743 2783 0
1192 2743 2785 0
1192 2743 2787 0
1192 2743 2789 0
1192 2743 2791 0
1192 2743 2793 0
1192 2743 2795 0
1192 2743 2797 0
1192 2743 2799 0
1192 2743 2801 0
1192 2745 0
1192 2745 2772 0
1192 2745 2773 0
1192 2745 2775 0
1192 2745 2777 0
1192 2745 2779 0
1192 2745 2781 0
1192 2745 2783 0
1192 2745 2785 0
1192 2745 2787 0
1192 2745 2789 0
1192 2745 2791 0
1192 2745 2793 0
1192 2745 2795 0
1192 2745 2797 0
1192 2745 2799 0
1192 2745 2801 0
1192 2747 0
1192 2747 2772 0
1192 2747 2773 0
1192 2747 2775 0
1192 2747 2777 0
1192 2747 2779 0
1192 2747 2781 0
1192 2747 2783 0
1192 2747 2785 0
1192 2747 2787 0
1192 2747 2789 0
1192 2747 2791 0
1192 2747 2793 0
1192 2747 2795 0
1192 2747 2797 0
1192 2747 2799 0
1192 2747 2801 0
1192 2749 0
1192 2749 2772 0
1192 2749 2773 0
1192 2749 2775 0
1192 2749 2777 0
1192 2749 2779 0
1192 2749 2781 0
1192 2749 2783 0
1192 2749 2785 0
1192 2749 2787 0
1192 2749 2789 0
1192 2749 2791 0
1192 2749 2793 0
1192 2749 2795 0
1192 2749 2797 0
1192 2749 2799 0
1192 2749 2801 0
1192 2751 0
1192 2751 2772 0
1192 2751 2773 0
1192 2751 2775 0
1192 2751 2777 0
1192 2751 2779 0
1192 2751 2781 0
1192 2751 2783 0
1192 2751 2785 0
1192 2751 2787 0
1192 2751 2789 0
1192 2751 2791 0
1192 2751 2793 0
1192 2751 2795 0
1192 2751 2797 0
1192 2751 2799 0
1192 2751 2801 0
1192 2753 0
1192 2753 2772 0
1192 2753 2773 0
1192 2753 2775 0
1192 2753 2777 0
1192 2753 2779 0
1192 2753 2781 0
1192 2753 2783 0
1192 2753 2785 0
1192 2753 2787 0
1192 2753 2789 0
1192 2753 2791 0
1192 2753 2793 0
1192 2753 2795 0
1192 2753 2797 0
1192 2753 2799 0
1192 2753 2801 0
1192 2755 0
1192 2755 2772 0
1192 2755 2773 0
1192 2755 2775 0
1192 2755 2777 0
1192 2755 2779 0
1192 2755 2781 0
1192 2755 2783 0
1192 2755 2785 0
1192 2755 2787 0
1192 2755 2789 0
1192 2755 2791 0
1192 2755 2793 0
1192 2755 2795 0
1192 2755 2797 0
1192 2755 2799 0
1192 2755 2801 0
c ((1<=(aux300 + aux302 + aux303))=tv=SATLiteral(1193))
-1193 -3009 -3039 -3070 0
1193 3070 0
1193 3039 0
1193 3040 0
1193 3042 0
1193 3044 0
1193 3046 0
1193 3048 0
1193 3050 0
1193 3052 0
1193 3054 0
1193 3056 0
1193 3058 0
1193 3060 0
1193 3062 0
1193 3064 0
1193 3066 0
1193 3068 0
1193 3009 0
1193 3009 3039 0
1193 3009 3040 0
1193 3009 3042 0
1193 3009 3044 0
1193 3009 3046 0
1193 3009 3048 0
1193 3009 3050 0
1193 3009 3052 0
1193 3009 3054 0
1193 3009 3056 0
1193 3009 3058 0
1193 3009 3060 0
1193 3009 3062 0
1193 3009 3064 0
1193 3009 3066 0
1193 3009 3068 0
1193 3010 0
1193 3010 3039 0
1193 3010 3040 0
1193 3010 3042 0
1193 3010 3044 0
1193 3010 3046 0
1193 3010 3048 0
1193 3010 3050 0
1193 3010 3052 0
1193 3010 3054 0
1193 3010 3056 0
1193 3010 3058 0
1193 3010 3060 0
1193 3010 3062 0
1193 3010 3064 0
1193 3010 3066 0
1193 3010 3068 0
1193 3012 0
1193 3012 3039 0
1193 3012 3040 0
1193 3012 3042 0
1193 3012 3044 0
1193 3012 3046 0
1193 3012 3048 0
1193 3012 3050 0
1193 3012 3052 0
1193 3012 3054 0
1193 3012 3056 0
1193 3012 3058 0
1193 3012 3060 0
1193 3012 3062 0
1193 3012 3064 0
1193 3012 3066 0
1193 3012 3068 0
1193 3014 0
1193 3014 3039 0
1193 3014 3040 0
1193 3014 3042 0
1193 3014 3044 0
1193 3014 3046 0
1193 3014 3048 0
1193 3014 3050 0
1193 3014 3052 0
1193 3014 3054 0
1193 3014 3056 0
1193 3014 3058 0
1193 3014 3060 0
1193 3014 3062 0
1193 3014 3064 0
1193 3014 3066 0
1193 3014 3068 0
1193 3016 0
1193 3016 3039 0
1193 3016 3040 0
1193 3016 3042 0
1193 3016 3044 0
1193 3016 3046 0
1193 3016 3048 0
1193 3016 3050 0
1193 3016 3052 0
1193 3016 3054 0
1193 3016 3056 0
1193 3016 3058 0
1193 3016 3060 0
1193 3016 3062 0
1193 3016 3064 0
1193 3016 3066 0
1193 3016 3068 0
1193 3018 0
1193 3018 3039 0
1193 3018 3040 0
1193 3018 3042 0
1193 3018 3044 0
1193 3018 3046 0
1193 3018 3048 0
1193 3018 3050 0
1193 3018 3052 0
1193 3018 3054 0
1193 3018 3056 0
1193 3018 3058 0
1193 3018 3060 0
1193 3018 3062 0
1193 3018 3064 0
1193 3018 3066 0
1193 3018 3068 0
1193 3020 0
1193 3020 3039 0
1193 3020 3040 0
1193 3020 3042 0
1193 3020 3044 0
1193 3020 3046 0
1193 3020 3048 0
1193 3020 3050 0
1193 3020 3052 0
1193 3020 3054 0
1193 3020 3056 0
1193 3020 3058 0
1193 3020 3060 0
1193 3020 3062 0
1193 3020 3064 0
1193 3020 3066 0
1193 3020 3068 0
1193 3022 0
1193 3022 3039 0
1193 3022 3040 0
1193 3022 3042 0
1193 3022 3044 0
1193 3022 3046 0
1193 3022 3048 0
1193 3022 3050 0
1193 3022 3052 0
1193 3022 3054 0
1193 3022 3056 0
1193 3022 3058 0
1193 3022 3060 0
1193 3022 3062 0
1193 3022 3064 0
1193 3022 3066 0
1193 3022 3068 0
c ((1<=(aux337 + aux339 + aux340))=tv=SATLiteral(1194))
-1194 -3276 -3306 -3337 0
1194 3337 0
1194 3306 0
1194 3307 0
1194 3309 0
1194 3311 0
1194 3313 0
1194 3315 0
1194 3317 0
1194 3319 0
1194 3321 0
1194 3323 0
1194 3325 0
1194 3327 0
1194 3329 0
1194 3331 0
1194 3333 0
1194 3335 0
1194 3276 0
1194 3276 3306 0
1194 3276 3307 0
1194 3276 3309 0
1194 3276 3311 0
1194 3276 3313 0
1194 3276 3315 0
1194 3276 3317 0
1194 3276 3319 0
1194 3276 3321 0
1194 3276 3323 0
1194 3276 3325 0
1194 3276 3327 0
1194 3276 3329 0
1194 3276 3331 0
1194 3276 3333 0
1194 3276 3335 0
1194 3277 0
1194 3277 3306 0
1194 3277 3307 0
1194 3277 3309 0
1194 3277 3311 0
1194 3277 3313 0
1194 3277 3315 0
1194 3277 3317 0
1194 3277 3319 0
1194 3277 3321 0
1194 3277 3323 0
1194 3277 3325 0
1194 3277 3327 0
1194 3277 3329 0
1194 3277 3331 0
1194 3277 3333 0
1194 3277 3335 0
1194 3279 0
1194 3279 3306 0
1194 3279 3307 0
1194 3279 3309 0
1194 3279 3311 0
1194 3279 3313 0
1194 3279 3315 0
1194 3279 3317 0
1194 3279 3319 0
1194 3279 3321 0
1194 3279 3323 0
1194 3279 3325 0
1194 3279 3327 0
1194 3279 3329 0
1194 3279 3331 0
1194 3279 3333 0
1194 3279 3335 0
1194 3281 0
1194 3281 3306 0
1194 3281 3307 0
1194 3281 3309 0
1194 3281 3311 0
1194 3281 3313 0
1194 3281 3315 0
1194 3281 3317 0
1194 3281 3319 0
1194 3281 3321 0
1194 3281 3323 0
1194 3281 3325 0
1194 3281 3327 0
1194 3281 3329 0
1194 3281 3331 0
1194 3281 3333 0
1194 3281 3335 0
1194 3283 0
1194 3283 3306 0
1194 3283 3307 0
1194 3283 3309 0
1194 3283 3311 0
1194 3283 3313 0
1194 3283 3315 0
1194 3283 3317 0
1194 3283 3319 0
1194 3283 3321 0
1194 3283 3323 0
1194 3283 3325 0
1194 3283 3327 0
1194 3283 3329 0
1194 3283 3331 0
1194 3283 3333 0
1194 3283 3335 0
1194 3285 0
1194 3285 3306 0
1194 3285 3307 0
1194 3285 3309 0
1194 3285 3311 0
1194 3285 3313 0
1194 3285 3315 0
1194 3285 3317 0
1194 3285 3319 0
1194 3285 3321 0
1194 3285 3323 0
1194 3285 3325 0
1194 3285 3327 0
1194 3285 3329 0
1194 3285 3331 0
1194 3285 3333 0
1194 3285 3335 0
1194 3287 0
1194 3287 3306 0
1194 3287 3307 0
1194 3287 3309 0
1194 3287 3311 0
1194 3287 3313 0
1194 3287 3315 0
1194 3287 3317 0
1194 3287 3319 0
1194 3287 3321 0
1194 3287 3323 0
1194 3287 3325 0
1194 3287 3327 0
1194 3287 3329 0
1194 3287 3331 0
1194 3287 3333 0
1194 3287 3335 0
1194 3289 0
1194 3289 3306 0
1194 3289 3307 0
1194 3289 3309 0
1194 3289 3311 0
1194 3289 3313 0
1194 3289 3315 0
1194 3289 3317 0
1194 3289 3319 0
1194 3289 3321 0
1194 3289 3323 0
1194 3289 3325 0
1194 3289 3327 0
1194 3289 3329 0
1194 3289 3331 0
1194 3289 3333 0
1194 3289 3335 0
c ((1<=(aux374 + aux376 + aux377))=tv=SATLiteral(1195))
-1195 -3543 -3573 -3604 0
1195 3604 0
1195 3573 0
1195 3574 0
1195 3576 0
1195 3578 0
1195 3580 0
1195 3582 0
1195 3584 0
1195 3586 0
1195 3588 0
1195 3590 0
1195 3592 0
1195 3594 0
1195 3596 0
1195 3598 0
1195 3600 0
1195 3602 0
1195 3543 0
1195 3543 3573 0
1195 3543 3574 0
1195 3543 3576 0
1195 3543 3578 0
1195 3543 3580 0
1195 3543 3582 0
1195 3543 3584 0
1195 3543 3586 0
1195 3543 3588 0
1195 3543 3590 0
1195 3543 3592 0
1195 3543 3594 0
1195 3543 3596 0
1195 3543 3598 0
1195 3543 3600 0
1195 3543 3602 0
1195 3544 0
1195 3544 3573 0
1195 3544 3574 0
1195 3544 3576 0
1195 3544 3578 0
1195 3544 3580 0
1195 3544 3582 0
1195 3544 3584 0
1195 3544 3586 0
1195 3544 3588 0
1195 3544 3590 0
1195 3544 3592 0
1195 3544 3594 0
1195 3544 3596 0
1195 3544 3598 0
1195 3544 3600 0
1195 3544 3602 0
1195 3546 0
1195 3546 3573 0
1195 3546 3574 0
1195 3546 3576 0
1195 3546 3578 0
1195 3546 3580 0
1195 3546 3582 0
1195 3546 3584 0
1195 3546 3586 0
1195 3546 3588 0
1195 3546 3590 0
1195 3546 3592 0
1195 3546 3594 0
1195 3546 3596 0
1195 3546 3598 0
1195 3546 3600 0
1195 3546 3602 0
1195 3548 0
1195 3548 3573 0
1195 3548 3574 0
1195 3548 3576 0
1195 3548 3578 0
1195 3548 3580 0
1195 3548 3582 0
1195 3548 3584 0
1195 3548 3586 0
1195 3548 3588 0
1195 3548 3590 0
1195 3548 3592 0
1195 3548 3594 0
1195 3548 3596 0
1195 3548 3598 0
1195 3548 3600 0
1195 3548 3602 0
1195 3550 0
1195 3550 3573 0
1195 3550 3574 0
1195 3550 3576 0
1195 3550 3578 0
1195 3550 3580 0
1195 3550 3582 0
1195 3550 3584 0
1195 3550 3586 0
1195 3550 3588 0
1195 3550 3590 0
1195 3550 3592 0
1195 3550 3594 0
1195 3550 3596 0
1195 3550 3598 0
1195 3550 3600 0
1195 3550 3602 0
1195 3552 0
1195 3552 3573 0
1195 3552 3574 0
1195 3552 3576 0
1195 3552 3578 0
1195 3552 3580 0
1195 3552 3582 0
1195 3552 3584 0
1195 3552 3586 0
1195 3552 3588 0
1195 3552 3590 0
1195 3552 3592 0
1195 3552 3594 0
1195 3552 3596 0
1195 3552 3598 0
1195 3552 3600 0
1195 3552 3602 0
1195 3554 0
1195 3554 3573 0
1195 3554 3574 0
1195 3554 3576 0
1195 3554 3578 0
1195 3554 3580 0
1195 3554 3582 0
1195 3554 3584 0
1195 3554 3586 0
1195 3554 3588 0
1195 3554 3590 0
1195 3554 3592 0
1195 3554 3594 0
1195 3554 3596 0
1195 3554 3598 0
1195 3554 3600 0
1195 3554 3602 0
1195 3556 0
1195 3556 3573 0
1195 3556 3574 0
1195 3556 3576 0
1195 3556 3578 0
1195 3556 3580 0
1195 3556 3582 0
1195 3556 3584 0
1195 3556 3586 0
1195 3556 3588 0
1195 3556 3590 0
1195 3556 3592 0
1195 3556 3594 0
1195 3556 3596 0
1195 3556 3598 0
1195 3556 3600 0
1195 3556 3602 0
c (((aux411 + aux413 + aux414)<=1)=tv=SATLiteral(1196))
-1196 3872 0
-1196 3840 3871 0
-1196 3841 0
-1196 3843 0
-1196 3845 0
-1196 3847 0
-1196 3849 0
-1196 3851 0
-1196 3853 0
-1196 3855 0
-1196 3857 0
-1196 3859 0
-1196 3861 0
-1196 3863 0
-1196 3865 0
-1196 3867 0
-1196 3869 0
-1196 3810 3871 0
-1196 3810 3840 0
-1196 3810 3841 0
-1196 3810 3843 0
-1196 3810 3845 0
-1196 3810 3847 0
-1196 3810 3849 0
-1196 3810 3851 0
-1196 3810 3853 0
-1196 3810 3855 0
-1196 3810 3857 0
-1196 3810 3859 0
-1196 3810 3861 0
-1196 3810 3863 0
-1196 3810 3865 0
-1196 3810 3867 0
-1196 3810 3869 0
-1196 3811 0
-1196 3811 3840 0
-1196 3811 3841 0
-1196 3811 3843 0
-1196 3811 3845 0
-1196 3811 3847 0
-1196 3811 3849 0
-1196 3811 3851 0
-1196 3811 3853 0
-1196 3811 3855 0
-1196 3811 3857 0
-1196 3811 3859 0
-1196 3811 3861 0
-1196 3811 3863 0
-1196 3811 3865 0
-1196 3811 3867 0
-1196 3811 3869 0
-1196 3813 0
-1196 3813 3840 0
-1196 3813 3841 0
-1196 3813 3843 0
-1196 3813 3845 0
-1196 3813 3847 0
-1196 3813 3849 0
-1196 3813 3851 0
-1196 3813 3853 0
-1196 3813 3855 0
-1196 3813 3857 0
-1196 3813 3859 0
-1196 3813 3861 0
-1196 3813 3863 0
-1196 3813 3865 0
-1196 3813 3867 0
-1196 3813 3869 0
-1196 3815 0
-1196 3815 3840 0
-1196 3815 3841 0
-1196 3815 3843 0
-1196 3815 3845 0
-1196 3815 3847 0
-1196 3815 3849 0
-1196 3815 3851 0
-1196 3815 3853 0
-1196 3815 3855 0
-1196 3815 3857 0
-1196 3815 3859 0
-1196 3815 3861 0
-1196 3815 3863 0
-1196 3815 3865 0
-1196 3815 3867 0
-1196 3815 3869 0
-1196 3817 0
-1196 3817 3840 0
-1196 3817 3841 0
-1196 3817 3843 0
-1196 3817 3845 0
-1196 3817 3847 0
-1196 3817 3849 0
-1196 3817 3851 0
-1196 3817 3853 0
-1196 3817 3855 0
-1196 3817 3857 0
-1196 3817 3859 0
-1196 3817 3861 0
-1196 3817 3863 0
-1196 3817 3865 0
-1196 3817 3867 0
-1196 3817 3869 0
-1196 3819 0
-1196 3819 3840 0
-1196 3819 3841 0
-1196 3819 3843 0
-1196 3819 3845 0
-1196 3819 3847 0
-1196 3819 3849 0
-1196 3819 3851 0
-1196 3819 3853 0
-1196 3819 3855 0
-1196 3819 3857 0
-1196 3819 3859 0
-1196 3819 3861 0
-1196 3819 3863 0
-1196 3819 3865 0
-1196 3819 3867 0
-1196 3819 3869 0
-1196 3821 0
-1196 3821 3840 0
-1196 3821 3841 0
-1196 3821 3843 0
-1196 3821 3845 0
-1196 3821 3847 0
-1196 3821 3849 0
-1196 3821 3851 0
-1196 3821 3853 0
-1196 3821 3855 0
-1196 3821 3857 0
-1196 3821 3859 0
-1196 3821 3861 0
-1196 3821 3863 0
-1196 3821 3865 0
-1196 3821 3867 0
-1196 3821 3869 0
-1196 3823 0
-1196 3823 3840 0
-1196 3823 3841 0
-1196 3823 3843 0
-1196 3823 3845 0
-1196 3823 3847 0
-1196 3823 3849 0
-1196 3823 3851 0
-1196 3823 3853 0
-1196 3823 3855 0
-1196 3823 3857 0
-1196 3823 3859 0
-1196 3823 3861 0
-1196 3823 3863 0
-1196 3823 3865 0
-1196 3823 3867 0
-1196 3823 3869 0
1196 -3811 -3840 -3871 0
1196 -3810 -3841 -3871 0
1196 -3810 -3840 -3872 0
c (((aux448 + aux450 + aux451)<=1)=tv=SATLiteral(1197))
-1197 4139 0
-1197 4107 4138 0
-1197 4108 0
-1197 4110 0
-1197 4112 0
-1197 4114 0
-1197 4116 0
-1197 4118 0
-1197 4120 0
-1197 4122 0
-1197 4124 0
-1197 4126 0
-1197 4128 0
-1197 4130 0
-1197 4132 0
-1197 4134 0
-1197 4136 0
-1197 4077 4138 0
-1197 4077 4107 0
-1197 4077 4108 0
-1197 4077 4110 0
-1197 4077 4112 0
-1197 4077 4114 0
-1197 4077 4116 0
-1197 4077 4118 0
-1197 4077 4120 0
-1197 4077 4122 0
-1197 4077 4124 0
-1197 4077 4126 0
-1197 4077 4128 0
-1197 4077 4130 0
-1197 4077 4132 0
-1197 4077 4134 0
-1197 4077 4136 0
-1197 4078 0
-1197 4078 4107 0
-1197 4078 4108 0
-1197 4078 4110 0
-1197 4078 4112 0
-1197 4078 4114 0
-1197 4078 4116 0
-1197 4078 4118 0
-1197 4078 4120 0
-1197 4078 4122 0
-1197 4078 4124 0
-1197 4078 4126 0
-1197 4078 4128 0
-1197 4078 4130 0
-1197 4078 4132 0
-1197 4078 4134 0
-1197 4078 4136 0
-1197 4080 0
-1197 4080 4107 0
-1197 4080 4108 0
-1197 4080 4110 0
-1197 4080 4112 0
-1197 4080 4114 0
-1197 4080 4116 0
-1197 4080 4118 0
-1197 4080 4120 0
-1197 4080 4122 0
-1197 4080 4124 0
-1197 4080 4126 0
-1197 4080 4128 0
-1197 4080 4130 0
-1197 4080 4132 0
-1197 4080 4134 0
-1197 4080 4136 0
-1197 4082 0
-1197 4082 4107 0
-1197 4082 4108 0
-1197 4082 4110 0
-1197 4082 4112 0
-1197 4082 4114 0
-1197 4082 4116 0
-1197 4082 4118 0
-1197 4082 4120 0
-1197 4082 4122 0
-1197 4082 4124 0
-1197 4082 4126 0
-1197 4082 4128 0
-1197 4082 4130 0
-1197 4082 4132 0
-1197 4082 4134 0
-1197 4082 4136 0
-1197 4084 0
-1197 4084 4107 0
-1197 4084 4108 0
-1197 4084 4110 0
-1197 4084 4112 0
-1197 4084 4114 0
-1197 4084 4116 0
-1197 4084 4118 0
-1197 4084 4120 0
-1197 4084 4122 0
-1197 4084 4124 0
-1197 4084 4126 0
-1197 4084 4128 0
-1197 4084 4130 0
-1197 4084 4132 0
-1197 4084 4134 0
-1197 4084 4136 0
-1197 4086 0
-1197 4086 4107 0
-1197 4086 4108 0
-1197 4086 4110 0
-1197 4086 4112 0
-1197 4086 4114 0
-1197 4086 4116 0
-1197 4086 4118 0
-1197 4086 4120 0
-1197 4086 4122 0
-1197 4086 4124 0
-1197 4086 4126 0
-1197 4086 4128 0
-1197 4086 4130 0
-1197 4086 4132 0
-1197 4086 4134 0
-1197 4086 4136 0
-1197 4088 0
-1197 4088 4107 0
-1197 4088 4108 0
-1197 4088 4110 0
-1197 4088 4112 0
-1197 4088 4114 0
-1197 4088 4116 0
-1197 4088 4118 0
-1197 4088 4120 0
-1197 4088 4122 0
-1197 4088 4124 0
-1197 4088 4126 0
-1197 4088 4128 0
-1197 4088 4130 0
-1197 4088 4132 0
-1197 4088 4134 0
-1197 4088 4136 0
-1197 4090 0
-1197 4090 4107 0
-1197 4090 4108 0
-1197 4090 4110 0
-1197 4090 4112 0
-1197 4090 4114 0
-1197 4090 4116 0
-1197 4090 4118 0
-1197 4090 4120 0
-1197 4090 4122 0
-1197 4090 4124 0
-1197 4090 4126 0
-1197 4090 4128 0
-1197 4090 4130 0
-1197 4090 4132 0
-1197 4090 4134 0
-1197 4090 4136 0
1197 -4078 -4107 -4138 0
1197 -4077 -4108 -4138 0
1197 -4077 -4107 -4139 0
c (((aux485 + aux487 + aux488)<=1)=tv=SATLiteral(1198))
-1198 4406 0
-1198 4374 4405 0
-1198 4375 0
-1198 4377 0
-1198 4379 0
-1198 4381 0
-1198 4383 0
-1198 4385 0
-1198 4387 0
-1198 4389 0
-1198 4391 0
-1198 4393 0
-1198 4395 0
-1198 4397 0
-1198 4399 0
-1198 4401 0
-1198 4403 0
-1198 4344 4405 0
-1198 4344 4374 0
-1198 4344 4375 0
-1198 4344 4377 0
-1198 4344 4379 0
-1198 4344 4381 0
-1198 4344 4383 0
-1198 4344 4385 0
-1198 4344 4387 0
-1198 4344 4389 0
-1198 4344 4391 0
-1198 4344 4393 0
-1198 4344 4395 0
-1198 4344 4397 0
-1198 4344 4399 0
-1198 4344 4401 0
-1198 4344 4403 0
-1198 4345 0
-1198 4345 4374 0
-1198 4345 4375 0
-1198 4345 4377 0
-1198 4345 4379 0
-1198 4345 4381 0
-1198 4345 4383 0
-1198 4345 4385 0
-1198 4345 4387 0
-1198 4345 4389 0
-1198 4345 4391 0
-1198 4345 4393 0
-1198 4345 4395 0
-1198 4345 4397 0
-1198 4345 4399 0
-1198 4345 4401 0
-1198 4345 4403 0
-1198 4347 0
-1198 4347 4374 0
-1198 4347 4375 0
-1198 4347 4377 0
-1198 4347 4379 0
-1198 4347 4381 0
-1198 4347 4383 0
-1198 4347 4385 0
-1198 4347 4387 0
-1198 4347 4389 0
-1198 4347 4391 0
-1198 4347 4393 0
-1198 4347 4395 0
-1198 4347 4397 0
-1198 4347 4399 0
-1198 4347 4401 0
-1198 4347 4403 0
-1198 4349 0
-1198 4349 4374 0
-1198 4349 4375 0
-1198 4349 4377 0
-1198 4349 4379 0
-1198 4349 4381 0
-1198 4349 4383 0
-1198 4349 4385 0
-1198 4349 4387 0
-1198 4349 4389 0
-1198 4349 4391 0
-1198 4349 4393 0
-1198 4349 4395 0
-1198 4349 4397 0
-1198 4349 4399 0
-1198 4349 4401 0
-1198 4349 4403 0
-1198 4351 0
-1198 4351 4374 0
-1198 4351 4375 0
-1198 4351 4377 0
-1198 4351 4379 0
-1198 4351 4381 0
-1198 4351 4383 0
-1198 4351 4385 0
-1198 4351 4387 0
-1198 4351 4389 0
-1198 4351 4391 0
-1198 4351 4393 0
-1198 4351 4395 0
-1198 4351 4397 0
-1198 4351 4399 0
-1198 4351 4401 0
-1198 4351 4403 0
-1198 4353 0
-1198 4353 4374 0
-1198 4353 4375 0
-1198 4353 4377 0
-1198 4353 4379 0
-1198 4353 4381 0
-1198 4353 4383 0
-1198 4353 4385 0
-1198 4353 4387 0
-1198 4353 4389 0
-1198 4353 4391 0
-1198 4353 4393 0
-1198 4353 4395 0
-1198 4353 4397 0
-1198 4353 4399 0
-1198 4353 4401 0
-1198 4353 4403 0
-1198 4355 0
-1198 4355 4374 0
-1198 4355 4375 0
-1198 4355 4377 0
-1198 4355 4379 0
-1198 4355 4381 0
-1198 4355 4383 0
-1198 4355 4385 0
-1198 4355 4387 0
-1198 4355 4389 0
-1198 4355 4391 0
-1198 4355 4393 0
-1198 4355 4395 0
-1198 4355 4397 0
-1198 4355 4399 0
-1198 4355 4401 0
-1198 4355 4403 0
-1198 4357 0
-1198 4357 4374 0
-1198 4357 4375 0
-1198 4357 4377 0
-1198 4357 4379 0
-1198 4357 4381 0
-1198 4357 4383 0
-1198 4357 4385 0
-1198 4357 4387 0
-1198 4357 4389 0
-1198 4357 4391 0
-1198 4357 4393 0
-1198 4357 4395 0
-1198 4357 4397 0
-1198 4357 4399 0
-1198 4357 4401 0
-1198 4357 4403 0
1198 -4345 -4374 -4405 0
1198 -4344 -4375 -4405 0
1198 -4344 -4374 -4406 0
c (((aux522 + aux524 + aux525)<=1)=tv=SATLiteral(1199))
-1199 4673 0
-1199 4641 4672 0
-1199 4642 0
-1199 4644 0
-1199 4646 0
-1199 4648 0
-1199 4650 0
-1199 4652 0
-1199 4654 0
-1199 4656 0
-1199 4658 0
-1199 4660 0
-1199 4662 0
-1199 4664 0
-1199 4666 0
-1199 4668 0
-1199 4670 0
-1199 4611 4672 0
-1199 4611 4641 0
-1199 4611 4642 0
-1199 4611 4644 0
-1199 4611 4646 0
-1199 4611 4648 0
-1199 4611 4650 0
-1199 4611 4652 0
-1199 4611 4654 0
-1199 4611 4656 0
-1199 4611 4658 0
-1199 4611 4660 0
-1199 4611 4662 0
-1199 4611 4664 0
-1199 4611 4666 0
-1199 4611 4668 0
-1199 4611 4670 0
-1199 4612 0
-1199 4612 4641 0
-1199 4612 4642 0
-1199 4612 4644 0
-1199 4612 4646 0
-1199 4612 4648 0
-1199 4612 4650 0
-1199 4612 4652 0
-1199 4612 4654 0
-1199 4612 4656 0
-1199 4612 4658 0
-1199 4612 4660 0
-1199 4612 4662 0
-1199 4612 4664 0
-1199 4612 4666 0
-1199 4612 4668 0
-1199 4612 4670 0
-1199 4614 0
-1199 4614 4641 0
-1199 4614 4642 0
-1199 4614 4644 0
-1199 4614 4646 0
-1199 4614 4648 0
-1199 4614 4650 0
-1199 4614 4652 0
-1199 4614 4654 0
-1199 4614 4656 0
-1199 4614 4658 0
-1199 4614 4660 0
-1199 4614 4662 0
-1199 4614 4664 0
-1199 4614 4666 0
-1199 4614 4668 0
-1199 4614 4670 0
-1199 4616 0
-1199 4616 4641 0
-1199 4616 4642 0
-1199 4616 4644 0
-1199 4616 4646 0
-1199 4616 4648 0
-1199 4616 4650 0
-1199 4616 4652 0
-1199 4616 4654 0
-1199 4616 4656 0
-1199 4616 4658 0
-1199 4616 4660 0
-1199 4616 4662 0
-1199 4616 4664 0
-1199 4616 4666 0
-1199 4616 4668 0
-1199 4616 4670 0
-1199 4618 0
-1199 4618 4641 0
-1199 4618 4642 0
-1199 4618 4644 0
-1199 4618 4646 0
-1199 4618 4648 0
-1199 4618 4650 0
-1199 4618 4652 0
-1199 4618 4654 0
-1199 4618 4656 0
-1199 4618 4658 0
-1199 4618 4660 0
-1199 4618 4662 0
-1199 4618 4664 0
-1199 4618 4666 0
-1199 4618 4668 0
-1199 4618 4670 0
-1199 4620 0
-1199 4620 4641 0
-1199 4620 4642 0
-1199 4620 4644 0
-1199 4620 4646 0
-1199 4620 4648 0
-1199 4620 4650 0
-1199 4620 4652 0
-1199 4620 4654 0
-1199 4620 4656 0
-1199 4620 4658 0
-1199 4620 4660 0
-1199 4620 4662 0
-1199 4620 4664 0
-1199 4620 4666 0
-1199 4620 4668 0
-1199 4620 4670 0
-1199 4622 0
-1199 4622 4641 0
-1199 4622 4642 0
-1199 4622 4644 0
-1199 4622 4646 0
-1199 4622 4648 0
-1199 4622 4650 0
-1199 4622 4652 0
-1199 4622 4654 0
-1199 4622 4656 0
-1199 4622 4658 0
-1199 4622 4660 0
-1199 4622 4662 0
-1199 4622 4664 0
-1199 4622 4666 0
-1199 4622 4668 0
-1199 4622 4670 0
-1199 4624 0
-1199 4624 4641 0
-1199 4624 4642 0
-1199 4624 4644 0
-1199 4624 4646 0
-1199 4624 4648 0
-1199 4624 4650 0
-1199 4624 4652 0
-1199 4624 4654 0
-1199 4624 4656 0
-1199 4624 4658 0
-1199 4624 4660 0
-1199 4624 4662 0
-1199 4624 4664 0
-1199 4624 4666 0
-1199 4624 4668 0
-1199 4624 4670 0
1199 -4612 -4641 -4672 0
1199 -4611 -4642 -4672 0
1199 -4611 -4641 -4673 0
c (((aux559 + aux561 + aux562)<=1)=tv=SATLiteral(1200))
-1200 4940 0
-1200 4908 4939 0
-1200 4909 0
-1200 4911 0
-1200 4913 0
-1200 4915 0
-1200 4917 0
-1200 4919 0
-1200 4921 0
-1200 4923 0
-1200 4925 0
-1200 4927 0
-1200 4929 0
-1200 4931 0
-1200 4933 0
-1200 4935 0
-1200 4937 0
-1200 4878 4939 0
-1200 4878 4908 0
-1200 4878 4909 0
-1200 4878 4911 0
-1200 4878 4913 0
-1200 4878 4915 0
-1200 4878 4917 0
-1200 4878 4919 0
-1200 4878 4921 0
-1200 4878 4923 0
-1200 4878 4925 0
-1200 4878 4927 0
-1200 4878 4929 0
-1200 4878 4931 0
-1200 4878 4933 0
-1200 4878 4935 0
-1200 4878 4937 0
-1200 4879 0
-1200 4879 4908 0
-1200 4879 4909 0
-1200 4879 4911 0
-1200 4879 4913 0
-1200 4879 4915 0
-1200 4879 4917 0
-1200 4879 4919 0
-1200 4879 4921 0
-1200 4879 4923 0
-1200 4879 4925 0
-1200 4879 4927 0
-1200 4879 4929 0
-1200 4879 4931 0
-1200 4879 4933 0
-1200 4879 4935 0
-1200 4879 4937 0
-1200 4881 0
-1200 4881 4908 0
-1200 4881 4909 0
-1200 4881 4911 0
-1200 4881 4913 0
-1200 4881 4915 0
-1200 4881 4917 0
-1200 4881 4919 0
-1200 4881 4921 0
-1200 4881 4923 0
-1200 4881 4925 0
-1200 4881 4927 0
-1200 4881 4929 0
-1200 4881 4931 0
-1200 4881 4933 0
-1200 4881 4935 0
-1200 4881 4937 0
-1200 4883 0
-1200 4883 4908 0
-1200 4883 4909 0
-1200 4883 4911 0
-1200 4883 4913 0
-1200 4883 4915 0
-1200 4883 4917 0
-1200 4883 4919 0
-1200 4883 4921 0
-1200 4883 4923 0
-1200 4883 4925 0
-1200 4883 4927 0
-1200 4883 4929 0
-1200 4883 4931 0
-1200 4883 4933 0
-1200 4883 4935 0
-1200 4883 4937 0
-1200 4885 0
-1200 4885 4908 0
-1200 4885 4909 0
-1200 4885 4911 0
-1200 4885 4913 0
-1200 4885 4915 0
-1200 4885 4917 0
-1200 4885 4919 0
-1200 4885 4921 0
-1200 4885 4923 0
-1200 4885 4925 0
-1200 4885 4927 0
-1200 4885 4929 0
-1200 4885 4931 0
-1200 4885 4933 0
-1200 4885 4935 0
-1200 4885 4937 0
-1200 4887 0
-1200 4887 4908 0
-1200 4887 4909 0
-1200 4887 4911 0
-1200 4887 4913 0
-1200 4887 4915 0
-1200 4887 4917 0
-1200 4887 4919 0
-1200 4887 4921 0
-1200 4887 4923 0
-1200 4887 4925 0
-1200 4887 4927 0
-1200 4887 4929 0
-1200 4887 4931 0
-1200 4887 4933 0
-1200 4887 4935 0
-1200 4887 4937 0
-1200 4889 0
-1200 4889 4908 0
-1200 4889 4909 0
-1200 4889 4911 0
-1200 4889 4913 0
-1200 4889 4915 0
-1200 4889 4917 0
-1200 4889 4919 0
-1200 4889 4921 0
-1200 4889 4923 0
-1200 4889 4925 0
-1200 4889 4927 0
-1200 4889 4929 0
-1200 4889 4931 0
-1200 4889 4933 0
-1200 4889 4935 0
-1200 4889 4937 0
-1200 4891 0
-1200 4891 4908 0
-1200 4891 4909 0
-1200 4891 4911 0
-1200 4891 4913 0
-1200 4891 4915 0
-1200 4891 4917 0
-1200 4891 4919 0
-1200 4891 4921 0
-1200 4891 4923 0
-1200 4891 4925 0
-1200 4891 4927 0
-1200 4891 4929 0
-1200 4891 4931 0
-1200 4891 4933 0
-1200 4891 4935 0
-1200 4891 4937 0
1200 -4879 -4908 -4939 0
1200 -4878 -4909 -4939 0
1200 -4878 -4908 -4940 0
c (((aux596 + aux598 + aux599)<=1)=tv=SATLiteral(1201))
-1201 5207 0
-1201 5175 5206 0
-1201 5176 0
-1201 5178 0
-1201 5180 0
-1201 5182 0
-1201 5184 0
-1201 5186 0
-1201 5188 0
-1201 5190 0
-1201 5192 0
-1201 5194 0
-1201 5196 0
-1201 5198 0
-1201 5200 0
-1201 5202 0
-1201 5204 0
-1201 5145 5206 0
-1201 5145 5175 0
-1201 5145 5176 0
-1201 5145 5178 0
-1201 5145 5180 0
-1201 5145 5182 0
-1201 5145 5184 0
-1201 5145 5186 0
-1201 5145 5188 0
-1201 5145 5190 0
-1201 5145 5192 0
-1201 5145 5194 0
-1201 5145 5196 0
-1201 5145 5198 0
-1201 5145 5200 0
-1201 5145 5202 0
-1201 5145 5204 0
-1201 5146 0
-1201 5146 5175 0
-1201 5146 5176 0
-1201 5146 5178 0
-1201 5146 5180 0
-1201 5146 5182 0
-1201 5146 5184 0
-1201 5146 5186 0
-1201 5146 5188 0
-1201 5146 5190 0
-1201 5146 5192 0
-1201 5146 5194 0
-1201 5146 5196 0
-1201 5146 5198 0
-1201 5146 5200 0
-1201 5146 5202 0
-1201 5146 5204 0
-1201 5148 0
-1201 5148 5175 0
-1201 5148 5176 0
-1201 5148 5178 0
-1201 5148 5180 0
-1201 5148 5182 0
-1201 5148 5184 0
-1201 5148 5186 0
-1201 5148 5188 0
-1201 5148 5190 0
-1201 5148 5192 0
-1201 5148 5194 0
-1201 5148 5196 0
-1201 5148 5198 0
-1201 5148 5200 0
-1201 5148 5202 0
-1201 5148 5204 0
-1201 5150 0
-1201 5150 5175 0
-1201 5150 5176 0
-1201 5150 5178 0
-1201 5150 5180 0
-1201 5150 5182 0
-1201 5150 5184 0
-1201 5150 5186 0
-1201 5150 5188 0
-1201 5150 5190 0
-1201 5150 5192 0
-1201 5150 5194 0
-1201 5150 5196 0
-1201 5150 5198 0
-1201 5150 5200 0
-1201 5150 5202 0
-1201 5150 5204 0
-1201 5152 0
-1201 5152 5175 0
-1201 5152 5176 0
-1201 5152 5178 0
-1201 5152 5180 0
-1201 5152 5182 0
-1201 5152 5184 0
-1201 5152 5186 0
-1201 5152 5188 0
-1201 5152 5190 0
-1201 5152 5192 0
-1201 5152 5194 0
-1201 5152 5196 0
-1201 5152 5198 0
-1201 5152 5200 0
-1201 5152 5202 0
-1201 5152 5204 0
-1201 5154 0
-1201 5154 5175 0
-1201 5154 5176 0
-1201 5154 5178 0
-1201 5154 5180 0
-1201 5154 5182 0
-1201 5154 5184 0
-1201 5154 5186 0
-1201 5154 5188 0
-1201 5154 5190 0
-1201 5154 5192 0
-1201 5154 5194 0
-1201 5154 5196 0
-1201 5154 5198 0
-1201 5154 5200 0
-1201 5154 5202 0
-1201 5154 5204 0
-1201 5156 0
-1201 5156 5175 0
-1201 5156 5176 0
-1201 5156 5178 0
-1201 5156 5180 0
-1201 5156 5182 0
-1201 5156 5184 0
-1201 5156 5186 0
-1201 5156 5188 0
-1201 5156 5190 0
-1201 5156 5192 0
-1201 5156 5194 0
-1201 5156 5196 0
-1201 5156 5198 0
-1201 5156 5200 0
-1201 5156 5202 0
-1201 5156 5204 0
-1201 5158 0
-1201 5158 5175 0
-1201 5158 5176 0
-1201 5158 5178 0
-1201 5158 5180 0
-1201 5158 5182 0
-1201 5158 5184 0
-1201 5158 5186 0
-1201 5158 5188 0
-1201 5158 5190 0
-1201 5158 5192 0
-1201 5158 5194 0
-1201 5158 5196 0
-1201 5158 5198 0
-1201 5158 5200 0
-1201 5158 5202 0
-1201 5158 5204 0
1201 -5146 -5175 -5206 0
1201 -5145 -5176 -5206 0
1201 -5145 -5175 -5207 0
c (((aux633 + aux635 + aux636)<=1)=tv=SATLiteral(1202))
-1202 5474 0
-1202 5442 5473 0
-1202 5443 0
-1202 5445 0
-1202 5447 0
-1202 5449 0
-1202 5451 0
-1202 5453 0
-1202 5455 0
-1202 5457 0
-1202 5459 0
-1202 5461 0
-1202 5463 0
-1202 5465 0
-1202 5467 0
-1202 5469 0
-1202 5471 0
-1202 5412 5473 0
-1202 5412 5442 0
-1202 5412 5443 0
-1202 5412 5445 0
-1202 5412 5447 0
-1202 5412 5449 0
-1202 5412 5451 0
-1202 5412 5453 0
-1202 5412 5455 0
-1202 5412 5457 0
-1202 5412 5459 0
-1202 5412 5461 0
-1202 5412 5463 0
-1202 5412 5465 0
-1202 5412 5467 0
-1202 5412 5469 0
-1202 5412 5471 0
-1202 5413 0
-1202 5413 5442 0
-1202 5413 5443 0
-1202 5413 5445 0
-1202 5413 5447 0
-1202 5413 5449 0
-1202 5413 5451 0
-1202 5413 5453 0
-1202 5413 5455 0
-1202 5413 5457 0
-1202 5413 5459 0
-1202 5413 5461 0
-1202 5413 5463 0
-1202 5413 5465 0
-1202 5413 5467 0
-1202 5413 5469 0
-1202 5413 5471 0
-1202 5415 0
-1202 5415 5442 0
-1202 5415 5443 0
-1202 5415 5445 0
-1202 5415 5447 0
-1202 5415 5449 0
-1202 5415 5451 0
-1202 5415 5453 0
-1202 5415 5455 0
-1202 5415 5457 0
-1202 5415 5459 0
-1202 5415 5461 0
-1202 5415 5463 0
-1202 5415 5465 0
-1202 5415 5467 0
-1202 5415 5469 0
-1202 5415 5471 0
-1202 5417 0
-1202 5417 5442 0
-1202 5417 5443 0
-1202 5417 5445 0
-1202 5417 5447 0
-1202 5417 5449 0
-1202 5417 5451 0
-1202 5417 5453 0
-1202 5417 5455 0
-1202 5417 5457 0
-1202 5417 5459 0
-1202 5417 5461 0
-1202 5417 5463 0
-1202 5417 5465 0
-1202 5417 5467 0
-1202 5417 5469 0
-1202 5417 5471 0
-1202 5419 0
-1202 5419 5442 0
-1202 5419 5443 0
-1202 5419 5445 0
-1202 5419 5447 0
-1202 5419 5449 0
-1202 5419 5451 0
-1202 5419 5453 0
-1202 5419 5455 0
-1202 5419 5457 0
-1202 5419 5459 0
-1202 5419 5461 0
-1202 5419 5463 0
-1202 5419 5465 0
-1202 5419 5467 0
-1202 5419 5469 0
-1202 5419 5471 0
-1202 5421 0
-1202 5421 5442 0
-1202 5421 5443 0
-1202 5421 5445 0
-1202 5421 5447 0
-1202 5421 5449 0
-1202 5421 5451 0
-1202 5421 5453 0
-1202 5421 5455 0
-1202 5421 5457 0
-1202 5421 5459 0
-1202 5421 5461 0
-1202 5421 5463 0
-1202 5421 5465 0
-1202 5421 5467 0
-1202 5421 5469 0
-1202 5421 5471 0
-1202 5423 0
-1202 5423 5442 0
-1202 5423 5443 0
-1202 5423 5445 0
-1202 5423 5447 0
-1202 5423 5449 0
-1202 5423 5451 0
-1202 5423 5453 0
-1202 5423 5455 0
-1202 5423 5457 0
-1202 5423 5459 0
-1202 5423 5461 0
-1202 5423 5463 0
-1202 5423 5465 0
-1202 5423 5467 0
-1202 5423 5469 0
-1202 5423 5471 0
-1202 5425 0
-1202 5425 5442 0
-1202 5425 5443 0
-1202 5425 5445 0
-1202 5425 5447 0
-1202 5425 5449 0
-1202 5425 5451 0
-1202 5425 5453 0
-1202 5425 5455 0
-1202 5425 5457 0
-1202 5425 5459 0
-1202 5425 5461 0
-1202 5425 5463 0
-1202 5425 5465 0
-1202 5425 5467 0
-1202 5425 5469 0
-1202 5425 5471 0
1202 -5413 -5442 -5473 0
1202 -5412 -5443 -5473 0
1202 -5412 -5442 -5474 0
c (((aux670 + aux672 + aux673)<=1)=tv=SATLiteral(1203))
-1203 5741 0
-1203 5709 5740 0
-1203 5710 0
-1203 5712 0
-1203 5714 0
-1203 5716 0
-1203 5718 0
-1203 5720 0
-1203 5722 0
-1203 5724 0
-1203 5726 0
-1203 5728 0
-1203 5730 0
-1203 5732 0
-1203 5734 0
-1203 5736 0
-1203 5738 0
-1203 5679 5740 0
-1203 5679 5709 0
-1203 5679 5710 0
-1203 5679 5712 0
-1203 5679 5714 0
-1203 5679 5716 0
-1203 5679 5718 0
-1203 5679 5720 0
-1203 5679 5722 0
-1203 5679 5724 0
-1203 5679 5726 0
-1203 5679 5728 0
-1203 5679 5730 0
-1203 5679 5732 0
-1203 5679 5734 0
-1203 5679 5736 0
-1203 5679 5738 0
-1203 5680 0
-1203 5680 5709 0
-1203 5680 5710 0
-1203 5680 5712 0
-1203 5680 5714 0
-1203 5680 5716 0
-1203 5680 5718 0
-1203 5680 5720 0
-1203 5680 5722 0
-1203 5680 5724 0
-1203 5680 5726 0
-1203 5680 5728 0
-1203 5680 5730 0
-1203 5680 5732 0
-1203 5680 5734 0
-1203 5680 5736 0
-1203 5680 5738 0
-1203 5682 0
-1203 5682 5709 0
-1203 5682 5710 0
-1203 5682 5712 0
-1203 5682 5714 0
-1203 5682 5716 0
-1203 5682 5718 0
-1203 5682 5720 0
-1203 5682 5722 0
-1203 5682 5724 0
-1203 5682 5726 0
-1203 5682 5728 0
-1203 5682 5730 0
-1203 5682 5732 0
-1203 5682 5734 0
-1203 5682 5736 0
-1203 5682 5738 0
-1203 5684 0
-1203 5684 5709 0
-1203 5684 5710 0
-1203 5684 5712 0
-1203 5684 5714 0
-1203 5684 5716 0
-1203 5684 5718 0
-1203 5684 5720 0
-1203 5684 5722 0
-1203 5684 5724 0
-1203 5684 5726 0
-1203 5684 5728 0
-1203 5684 5730 0
-1203 5684 5732 0
-1203 5684 5734 0
-1203 5684 5736 0
-1203 5684 5738 0
-1203 5686 0
-1203 5686 5709 0
-1203 5686 5710 0
-1203 5686 5712 0
-1203 5686 5714 0
-1203 5686 5716 0
-1203 5686 5718 0
-1203 5686 5720 0
-1203 5686 5722 0
-1203 5686 5724 0
-1203 5686 5726 0
-1203 5686 5728 0
-1203 5686 5730 0
-1203 5686 5732 0
-1203 5686 5734 0
-1203 5686 5736 0
-1203 5686 5738 0
-1203 5688 0
-1203 5688 5709 0
-1203 5688 5710 0
-1203 5688 5712 0
-1203 5688 5714 0
-1203 5688 5716 0
-1203 5688 5718 0
-1203 5688 5720 0
-1203 5688 5722 0
-1203 5688 5724 0
-1203 5688 5726 0
-1203 5688 5728 0
-1203 5688 5730 0
-1203 5688 5732 0
-1203 5688 5734 0
-1203 5688 5736 0
-1203 5688 5738 0
-1203 5690 0
-1203 5690 5709 0
-1203 5690 5710 0
-1203 5690 5712 0
-1203 5690 5714 0
-1203 5690 5716 0
-1203 5690 5718 0
-1203 5690 5720 0
-1203 5690 5722 0
-1203 5690 5724 0
-1203 5690 5726 0
-1203 5690 5728 0
-1203 5690 5730 0
-1203 5690 5732 0
-1203 5690 5734 0
-1203 5690 5736 0
-1203 5690 5738 0
-1203 5692 0
-1203 5692 5709 0
-1203 5692 5710 0
-1203 5692 5712 0
-1203 5692 5714 0
-1203 5692 5716 0
-1203 5692 5718 0
-1203 5692 5720 0
-1203 5692 5722 0
-1203 5692 5724 0
-1203 5692 5726 0
-1203 5692 5728 0
-1203 5692 5730 0
-1203 5692 5732 0
-1203 5692 5734 0
-1203 5692 5736 0
-1203 5692 5738 0
1203 -5680 -5709 -5740 0
1203 -5679 -5710 -5740 0
1203 -5679 -5709 -5741 0
c (((aux707 + aux709 + aux710)<=1)=tv=SATLiteral(1204))
-1204 6008 0
-1204 5976 6007 0
-1204 5977 0
-1204 5979 0
-1204 5981 0
-1204 5983 0
-1204 5985 0
-1204 5987 0
-1204 5989 0
-1204 5991 0
-1204 5993 0
-1204 5995 0
-1204 5997 0
-1204 5999 0
-1204 6001 0
-1204 6003 0
-1204 6005 0
-1204 5946 6007 0
-1204 5946 5976 0
-1204 5946 5977 0
-1204 5946 5979 0
-1204 5946 5981 0
-1204 5946 5983 0
-1204 5946 5985 0
-1204 5946 5987 0
-1204 5946 5989 0
-1204 5946 5991 0
-1204 5946 5993 0
-1204 5946 5995 0
-1204 5946 5997 0
-1204 5946 5999 0
-1204 5946 6001 0
-1204 5946 6003 0
-1204 5946 6005 0
-1204 5947 0
-1204 5947 5976 0
-1204 5947 5977 0
-1204 5947 5979 0
-1204 5947 5981 0
-1204 5947 5983 0
-1204 5947 5985 0
-1204 5947 5987 0
-1204 5947 5989 0
-1204 5947 5991 0
-1204 5947 5993 0
-1204 5947 5995 0
-1204 5947 5997 0
-1204 5947 5999 0
-1204 5947 6001 0
-1204 5947 6003 0
-1204 5947 6005 0
-1204 5949 0
-1204 5949 5976 0
-1204 5949 5977 0
-1204 5949 5979 0
-1204 5949 5981 0
-1204 5949 5983 0
-1204 5949 5985 0
-1204 5949 5987 0
-1204 5949 5989 0
-1204 5949 5991 0
-1204 5949 5993 0
-1204 5949 5995 0
-1204 5949 5997 0
-1204 5949 5999 0
-1204 5949 6001 0
-1204 5949 6003 0
-1204 5949 6005 0
-1204 5951 0
-1204 5951 5976 0
-1204 5951 5977 0
-1204 5951 5979 0
-1204 5951 5981 0
-1204 5951 5983 0
-1204 5951 5985 0
-1204 5951 5987 0
-1204 5951 5989 0
-1204 5951 5991 0
-1204 5951 5993 0
-1204 5951 5995 0
-1204 5951 5997 0
-1204 5951 5999 0
-1204 5951 6001 0
-1204 5951 6003 0
-1204 5951 6005 0
-1204 5953 0
-1204 5953 5976 0
-1204 5953 5977 0
-1204 5953 5979 0
-1204 5953 5981 0
-1204 5953 5983 0
-1204 5953 5985 0
-1204 5953 5987 0
-1204 5953 5989 0
-1204 5953 5991 0
-1204 5953 5993 0
-1204 5953 5995 0
-1204 5953 5997 0
-1204 5953 5999 0
-1204 5953 6001 0
-1204 5953 6003 0
-1204 5953 6005 0
-1204 5955 0
-1204 5955 5976 0
-1204 5955 5977 0
-1204 5955 5979 0
-1204 5955 5981 0
-1204 5955 5983 0
-1204 5955 5985 0
-1204 5955 5987 0
-1204 5955 5989 0
-1204 5955 5991 0
-1204 5955 5993 0
-1204 5955 5995 0
-1204 5955 5997 0
-1204 5955 5999 0
-1204 5955 6001 0
-1204 5955 6003 0
-1204 5955 6005 0
-1204 5957 0
-1204 5957 5976 0
-1204 5957 5977 0
-1204 5957 5979 0
-1204 5957 5981 0
-1204 5957 5983 0
-1204 5957 5985 0
-1204 5957 5987 0
-1204 5957 5989 0
-1204 5957 5991 0
-1204 5957 5993 0
-1204 5957 5995 0
-1204 5957 5997 0
-1204 5957 5999 0
-1204 5957 6001 0
-1204 5957 6003 0
-1204 5957 6005 0
-1204 5959 0
-1204 5959 5976 0
-1204 5959 5977 0
-1204 5959 5979 0
-1204 5959 5981 0
-1204 5959 5983 0
-1204 5959 5985 0
-1204 5959 5987 0
-1204 5959 5989 0
-1204 5959 5991 0
-1204 5959 5993 0
-1204 5959 5995 0
-1204 5959 5997 0
-1204 5959 5999 0
-1204 5959 6001 0
-1204 5959 6003 0
-1204 5959 6005 0
1204 -5947 -5976 -6007 0
1204 -5946 -5977 -6007 0
1204 -5946 -5976 -6008 0
c ((1<=(aux711 + aux712 + aux713))=tv=SATLiteral(1205))
-1205 -6038 -6041 -6044 0
1205 6044 0
1205 6041 0
1205 6042 0
1205 6038 0
1205 6038 6041 0
1205 6038 6042 0
1205 6039 0
1205 6039 6041 0
1205 6039 6042 0
c ((2<=(aux714 + SATLiteral(-123) + SATLiteral(-140)))=tv=SATLiteral(1206))
-1206 -140 -6047 0
-1206 -123 -6047 0
-1206 -123 -140 -6048 0
1206 6048 0
1206 140 6047 0
1206 123 6047 0
1206 123 140 0
c ((2<=(aux715 + aux716 + aux718))=tv=SATLiteral(1207))
-1207 -6051 -6053 -6059 0
-1207 -6050 -6054 -6059 0
-1207 -6050 -6053 -6060 0
1207 6060 0
1207 6053 6059 0
1207 6054 0
1207 6050 6059 0
1207 6050 6053 0
1207 6050 6054 0
1207 6051 0
1207 6051 6053 0
1207 6051 6054 0
c ((1<=(aux719 + aux720 + aux722))=tv=SATLiteral(1208))
-1208 -6064 -6067 -6073 0
1208 6073 0
1208 6067 0
1208 6068 0
1208 6064 0
1208 6064 6067 0
1208 6064 6068 0
1208 6065 0
1208 6065 6067 0
1208 6065 6068 0
c ((2<=(aux723 + SATLiteral(-519) + SATLiteral(-536)))=tv=SATLiteral(1209))
-1209 -536 -6078 0
-1209 -519 -6078 0
-1209 -519 -536 -6079 0
1209 6079 0
1209 536 6078 0
1209 519 6078 0
1209 519 536 0
c ((1<=(aux724 + aux725 + aux727))=tv=SATLiteral(1210))
-1210 -6081 -6084 -6090 0
1210 6090 0
1210 6084 0
1210 6085 0
1210 6081 0
1210 6081 6084 0
1210 6081 6085 0
1210 6082 0
1210 6082 6084 0
1210 6082 6085 0
c (((aux728 + aux729 + aux730)<=1)=tv=SATLiteral(1211))
-1211 6102 0
-1211 6098 6101 0
-1211 6099 0
-1211 6095 6101 0
-1211 6095 6098 0
-1211 6095 6099 0
-1211 6096 0
-1211 6096 6098 0
-1211 6096 6099 0
1211 -6096 -6098 -6101 0
1211 -6095 -6099 -6101 0
1211 -6095 -6098 -6102 0
c (((aux731 + SATLiteral(-123) + SATLiteral(-140))<=2)=tv=SATLiteral(1212))
-1212 140 6105 0
-1212 123 6105 0
-1212 123 140 6104 0
1212 -6104 0
1212 -140 -6105 0
1212 -123 -6105 0
1212 -123 -140 0
c (((aux732 + aux733 + aux735)<=2)=tv=SATLiteral(1213))
-1213 6119 0
-1213 6110 6117 0
-1213 6111 6116 0
-1213 6107 6117 0
-1213 6107 6110 6116 0
-1213 6107 6111 0
-1213 6108 6116 0
-1213 6108 6110 0
-1213 6108 6111 0
1213 -6110 -6116 0
1213 -6108 -6111 -6116 0
1213 -6108 -6110 -6117 0
1213 -6107 -6116 0
1213 -6107 -6111 -6117 0
1213 -6107 -6110 -6119 0
c (((aux736 + aux737 + SATLiteral(-330))<=0)=tv=SATLiteral(1214))
-1214 6124 0
-1214 6121 0
-1214 6122 0
-1214 330 0
-1214 330 6121 0
-1214 330 6122 0
1214 -330 -6121 -6124 0
c (((aux738 + aux739 + aux741)<=1)=tv=SATLiteral(1215))
-1215 6137 0
-1215 6130 6136 0
-1215 6131 0
-1215 6127 6136 0
-1215 6127 6130 0
-1215 6127 6131 0
-1215 6128 0
-1215 6128 6130 0
-1215 6128 6131 0
1215 -6128 -6130 -6136 0
1215 -6127 -6131 -6136 0
1215 -6127 -6130 -6137 0
c (((aux742 + SATLiteral(-519) + SATLiteral(-536))<=2)=tv=SATLiteral(1216))
-1216 536 6142 0
-1216 519 6142 0
-1216 519 536 6141 0
1216 -6141 0
1216 -536 -6142 0
1216 -519 -6142 0
1216 -519 -536 0
c (((aux743 + aux744 + aux746)<=1)=tv=SATLiteral(1217))
-1217 6154 0
-1217 6147 6153 0
-1217 6148 0
-1217 6144 6153 0
-1217 6144 6147 0
-1217 6144 6148 0
-1217 6145 0
-1217 6145 6147 0
-1217 6145 6148 0
1217 -6145 -6147 -6153 0
1217 -6144 -6148 -6153 0
1217 -6144 -6147 -6154 0
c ((1<=(aux747 + aux748 + aux749))=tv=SATLiteral(1218))
-1218 -6158 -6161 -6164 0
1218 6164 0
1218 6161 0
1218 6162 0
1218 6158 0
1218 6158 6161 0
1218 6158 6162 0
1218 6159 0
1218 6159 6161 0
1218 6159 6162 0
c ((2<=(aux750 + SATLiteral(-399) + SATLiteral(-3)))=tv=SATLiteral(1219))
-1219 -3 -6167 0
-1219 -399 -6167 0
-1219 -399 -3 -6168 0
1219 6168 0
1219 3 6167 0
1219 399 6167 0
1219 399 3 0
c ((1<=(aux751 + aux752 + aux754))=tv=SATLiteral(1220))
-1220 -6170 -6173 -6179 0
1220 6179 0
1220 6173 0
1220 6174 0
1220 6170 0
1220 6170 6173 0
1220 6170 6174 0
1220 6171 0
1220 6171 6173 0
1220 6171 6174 0
c ((1<=(aux755 + aux756 + aux758))=tv=SATLiteral(1221))
-1221 -6184 -6187 -6193 0
1221 6193 0
1221 6187 0
1221 6188 0
1221 6184 0
1221 6184 6187 0
1221 6184 6188 0
1221 6185 0
1221 6185 6187 0
1221 6185 6188 0
c ((1<=(aux759 + aux760 + SATLiteral(-450)))=tv=SATLiteral(1222))
-1222 -450 -6198 -6201 0
1222 6201 0
1222 6198 0
1222 6199 0
1222 450 0
1222 450 6198 0
1222 450 6199 0
c ((1<=(aux761 + aux762 + aux764))=tv=SATLiteral(1223))
-1223 -6204 -6207 -6213 0
1223 6213 0
1223 6207 0
1223 6208 0
1223 6204 0
1223 6204 6207 0
1223 6204 6208 0
1223 6205 0
1223 6205 6207 0
1223 6205 6208 0
c ((2<=(aux765 + SATLiteral(-484) + SATLiteral(-88)))=tv=SATLiteral(1224))
-1224 -88 -6218 0
-1224 -484 -6218 0
-1224 -484 -88 -6219 0
1224 6219 0
1224 88 6218 0
1224 484 6218 0
1224 484 88 0
c (((aux766 + aux767 + aux768)<=1)=tv=SATLiteral(1225))
-1225 6228 0
-1225 6224 6227 0
-1225 6225 0
-1225 6221 6227 0
-1225 6221 6224 0
-1225 6221 6225 0
-1225 6222 0
-1225 6222 6224 0
-1225 6222 6225 0
1225 -6222 -6224 -6227 0
1225 -6221 -6225 -6227 0
1225 -6221 -6224 -6228 0
c (((aux769 + SATLiteral(-399) + SATLiteral(-3))<=2)=tv=SATLiteral(1226))
-1226 3 6231 0
-1226 399 6231 0
-1226 399 3 6230 0
1226 -6230 0
1226 -3 -6231 0
1226 -399 -6231 0
1226 -399 -3 0
c (((aux770 + aux771 + aux773)<=1)=tv=SATLiteral(1227))
-1227 6243 0
-1227 6236 6242 0
-1227 6237 0
-1227 6233 6242 0
-1227 6233 6236 0
-1227 6233 6237 0
-1227 6234 0
-1227 6234 6236 0
-1227 6234 6237 0
1227 -6234 -6236 -6242 0
1227 -6233 -6237 -6242 0
1227 -6233 -6236 -6243 0
c (((aux774 + aux775 + aux777)<=1)=tv=SATLiteral(1228))
-1228 6257 0
-1228 6250 6256 0
-1228 6251 0
-1228 6247 6256 0
-1228 6247 6250 0
-1228 6247 6251 0
-1228 6248 0
-1228 6248 6250 0
-1228 6248 6251 0
1228 -6248 -6250 -6256 0
1228 -6247 -6251 -6256 0
1228 -6247 -6250 -6257 0
c (((aux778 + aux779 + SATLiteral(-450))<=1)=tv=SATLiteral(1229))
-1229 6265 0
-1229 6261 6264 0
-1229 6262 0
-1229 450 6264 0
-1229 450 6261 0
-1229 450 6262 0
1229 -6261 -6264 0
1229 -450 -6262 -6264 0
1229 -450 -6261 -6265 0
c (((aux780 + aux781 + aux783)<=1)=tv=SATLiteral(1230))
-1230 6277 0
-1230 6270 6276 0
-1230 6271 0
-1230 6267 6276 0
-1230 6267 6270 0
-1230 6267 6271 0
-1230 6268 0
-1230 6268 6270 0
-1230 6268 6271 0
1230 -6268 -6270 -6276 0
1230 -6267 -6271 -6276 0
1230 -6267 -6270 -6277 0
c (((aux784 + SATLiteral(-484) + SATLiteral(-88))<=2)=tv=SATLiteral(1231))
-1231 88 6282 0
-1231 484 6282 0
-1231 484 88 6281 0
1231 -6281 0
1231 -88 -6282 0
1231 -484 -6282 0
1231 -484 -88 0
c SATLiteral(2)
2 0
c SATLiteral(122)
122 0
c SATLiteral(157)
157 0
c SATLiteral(175)
175 0
c SATLiteral(312)
312 0
c SATLiteral(381)
381 0
c SATLiteral(518)
518 0
c SATLiteral(553)
553 0
c SATLiteral(571)
571 0
c (SATLiteral(-9) \/ SATLiteral(-1180))
-9 -1180 0
c (SATLiteral(-11) \/ SATLiteral(-1181))
-11 -1181 0
c (SATLiteral(-13) \/ SATLiteral(-1182))
-13 -1182 0
c (SATLiteral(-15) \/ SATLiteral(-1183))
-15 -1183 0
c (SATLiteral(-17) \/ SATLiteral(-1184))
-17 -1184 0
c (SATLiteral(-19) \/ SATLiteral(-1185))
-19 -1185 0
c (SATLiteral(18) \/ SATLiteral(-1186))
18 -1186 0
c (SATLiteral(-22) \/ SATLiteral(-1178))
-22 -1178 0
c (SATLiteral(-24) \/ SATLiteral(-1179))
-24 -1179 0
c (SATLiteral(-26) \/ SATLiteral(-1180))
-26 -1180 0
c (SATLiteral(-28) \/ SATLiteral(-1181))
-28 -1181 0
c (SATLiteral(-30) \/ SATLiteral(-1182))
-30 -1182 0
c (SATLiteral(-32) \/ SATLiteral(-1183))
-32 -1183 0
c (SATLiteral(-34) \/ SATLiteral(-1184))
-34 -1184 0
c (SATLiteral(-36) \/ SATLiteral(-1185))
-36 -1185 0
c (SATLiteral(35) \/ SATLiteral(-1186))
35 -1186 0
c (SATLiteral(-39) \/ SATLiteral(-1178))
-39 -1178 0
c (SATLiteral(-41) \/ SATLiteral(-1179))
-41 -1179 0
c (SATLiteral(-43) \/ SATLiteral(-1180))
-43 -1180 0
c (SATLiteral(-45) \/ SATLiteral(-1181))
-45 -1181 0
c (SATLiteral(-47) \/ SATLiteral(-1182))
-47 -1182 0
c (SATLiteral(-49) \/ SATLiteral(-1183))
-49 -1183 0
c (SATLiteral(-51) \/ SATLiteral(-1184))
-51 -1184 0
c (SATLiteral(-53) \/ SATLiteral(-1185))
-53 -1185 0
c (SATLiteral(52) \/ SATLiteral(-1186))
52 -1186 0
c (SATLiteral(-56) \/ SATLiteral(-1178))
-56 -1178 0
c (SATLiteral(-58) \/ SATLiteral(-1179))
-58 -1179 0
c (SATLiteral(-62) \/ SATLiteral(-1181))
-62 -1181 0
c (SATLiteral(-64) \/ SATLiteral(-1182))
-64 -1182 0
c (SATLiteral(-66) \/ SATLiteral(-1183))
-66 -1183 0
c (SATLiteral(-68) \/ SATLiteral(-1184))
-68 -1184 0
c (SATLiteral(-70) \/ SATLiteral(-1185))
-70 -1185 0
c (SATLiteral(69) \/ SATLiteral(-1186))
69 -1186 0
c (SATLiteral(-73) \/ SATLiteral(-1178))
-73 -1178 0
c (SATLiteral(-75) \/ SATLiteral(-1179))
-75 -1179 0
c (SATLiteral(-77) \/ SATLiteral(-1180))
-77 -1180 0
c (SATLiteral(-79) \/ SATLiteral(-1181))
-79 -1181 0
c (SATLiteral(-81) \/ SATLiteral(-1182))
-81 -1182 0
c (SATLiteral(-83) \/ SATLiteral(-1183))
-83 -1183 0
c (SATLiteral(-85) \/ SATLiteral(-1184))
-85 -1184 0
c (SATLiteral(-87) \/ SATLiteral(-1185))
-87 -1185 0
c (SATLiteral(86) \/ SATLiteral(-1186))
86 -1186 0
c (SATLiteral(-90) \/ SATLiteral(-1178))
-90 -1178 0
c (SATLiteral(-92) \/ SATLiteral(-1179))
-92 -1179 0
c (SATLiteral(-94) \/ SATLiteral(-1180))
-94 -1180 0
c (SATLiteral(-98) \/ SATLiteral(-1182))
-98 -1182 0
c (SATLiteral(-100) \/ SATLiteral(-1183))
-100 -1183 0
c (SATLiteral(-102) \/ SATLiteral(-1184))
-102 -1184 0
c (SATLiteral(-104) \/ SATLiteral(-1185))
-104 -1185 0
c (SATLiteral(103) \/ SATLiteral(-1186))
103 -1186 0
c (SATLiteral(-111) \/ SATLiteral(-1180))
-111 -1180 0
c (SATLiteral(-113) \/ SATLiteral(-1181))
-113 -1181 0
c (SATLiteral(-115) \/ SATLiteral(-1182))
-115 -1182 0
c (SATLiteral(-117) \/ SATLiteral(-1183))
-117 -1183 0
c (SATLiteral(-119) \/ SATLiteral(-1184))
-119 -1184 0
c (SATLiteral(-121) \/ SATLiteral(-1185))
-121 -1185 0
c (SATLiteral(120) \/ SATLiteral(-1186))
120 -1186 0
c (SATLiteral(-125) \/ SATLiteral(-1178))
-125 -1178 0
c (SATLiteral(-129) \/ SATLiteral(-1180))
-129 -1180 0
c (SATLiteral(-131) \/ SATLiteral(-1181))
-131 -1181 0
c (SATLiteral(-133) \/ SATLiteral(-1182))
-133 -1182 0
c (SATLiteral(-135) \/ SATLiteral(-1183))
-135 -1183 0
c (SATLiteral(-137) \/ SATLiteral(-1184))
-137 -1184 0
c (SATLiteral(-139) \/ SATLiteral(-1185))
-139 -1185 0
c (SATLiteral(138) \/ SATLiteral(-1186))
138 -1186 0
c (SATLiteral(-142) \/ SATLiteral(-1178))
-142 -1178 0
c (SATLiteral(-144) \/ SATLiteral(-1179))
-144 -1179 0
c (SATLiteral(-148) \/ SATLiteral(-1181))
-148 -1181 0
c (SATLiteral(-150) \/ SATLiteral(-1182))
-150 -1182 0
c (SATLiteral(-152) \/ SATLiteral(-1183))
-152 -1183 0
c (SATLiteral(-154) \/ SATLiteral(-1184))
-154 -1184 0
c (SATLiteral(-156) \/ SATLiteral(-1185))
-156 -1185 0
c (SATLiteral(155) \/ SATLiteral(-1186))
155 -1186 0
c (SATLiteral(-160) \/ SATLiteral(-1178))
-160 -1178 0
c (SATLiteral(-162) \/ SATLiteral(-1179))
-162 -1179 0
c (SATLiteral(-168) \/ SATLiteral(-1182))
-168 -1182 0
c (SATLiteral(-170) \/ SATLiteral(-1183))
-170 -1183 0
c (SATLiteral(-172) \/ SATLiteral(-1184))
-172 -1184 0
c (SATLiteral(-174) \/ SATLiteral(-1185))
-174 -1185 0
c (SATLiteral(173) \/ SATLiteral(-1186))
173 -1186 0
c (SATLiteral(-178) \/ SATLiteral(-1178))
-178 -1178 0
c (SATLiteral(-180) \/ SATLiteral(-1179))
-180 -1179 0
c (SATLiteral(-182) \/ SATLiteral(-1180))
-182 -1180 0
c (SATLiteral(-184) \/ SATLiteral(-1181))
-184 -1181 0
c (SATLiteral(-186) \/ SATLiteral(-1182))
-186 -1182 0
c (SATLiteral(-188) \/ SATLiteral(-1183))
-188 -1183 0
c (SATLiteral(-190) \/ SATLiteral(-1184))
-190 -1184 0
c (SATLiteral(-192) \/ SATLiteral(-1185))
-192 -1185 0
c (SATLiteral(191) \/ SATLiteral(-1186))
191 -1186 0
c (SATLiteral(-195) \/ SATLiteral(-1178))
-195 -1178 0
c (SATLiteral(-199) \/ SATLiteral(-1180))
-199 -1180 0
c (SATLiteral(-201) \/ SATLiteral(-1181))
-201 -1181 0
c (SATLiteral(-205) \/ SATLiteral(-1183))
-205 -1183 0
c (SATLiteral(-207) \/ SATLiteral(-1184))
-207 -1184 0
c (SATLiteral(-209) \/ SATLiteral(-1185))
-209 -1185 0
c (SATLiteral(208) \/ SATLiteral(-1186))
208 -1186 0
c (SATLiteral(-212) \/ SATLiteral(-1178))
-212 -1178 0
c (SATLiteral(-214) \/ SATLiteral(-1179))
-214 -1179 0
c (SATLiteral(-216) \/ SATLiteral(-1180))
-216 -1180 0
c (SATLiteral(-218) \/ SATLiteral(-1181))
-218 -1181 0
c (SATLiteral(-220) \/ SATLiteral(-1182))
-220 -1182 0
c (SATLiteral(-222) \/ SATLiteral(-1183))
-222 -1183 0
c (SATLiteral(-224) \/ SATLiteral(-1184))
-224 -1184 0
c (SATLiteral(-226) \/ SATLiteral(-1185))
-226 -1185 0
c (SATLiteral(225) \/ SATLiteral(-1186))
225 -1186 0
c (SATLiteral(-229) \/ SATLiteral(-1178))
-229 -1178 0
c (SATLiteral(-231) \/ SATLiteral(-1179))
-231 -1179 0
c (SATLiteral(-233) \/ SATLiteral(-1180))
-233 -1180 0
c (SATLiteral(-235) \/ SATLiteral(-1181))
-235 -1181 0
c (SATLiteral(-237) \/ SATLiteral(-1182))
-237 -1182 0
c (SATLiteral(-239) \/ SATLiteral(-1183))
-239 -1183 0
c (SATLiteral(-241) \/ SATLiteral(-1184))
-241 -1184 0
c (SATLiteral(-243) \/ SATLiteral(-1185))
-243 -1185 0
c (SATLiteral(242) \/ SATLiteral(-1186))
242 -1186 0
c (SATLiteral(-246) \/ SATLiteral(-1178))
-246 -1178 0
c (SATLiteral(-248) \/ SATLiteral(-1179))
-248 -1179 0
c (SATLiteral(-252) \/ SATLiteral(-1181))
-252 -1181 0
c (SATLiteral(-254) \/ SATLiteral(-1182))
-254 -1182 0
c (SATLiteral(-256) \/ SATLiteral(-1183))
-256 -1183 0
c (SATLiteral(-258) \/ SATLiteral(-1184))
-258 -1184 0
c (SATLiteral(-260) \/ SATLiteral(-1185))
-260 -1185 0
c (SATLiteral(259) \/ SATLiteral(-1186))
259 -1186 0
c (SATLiteral(-263) \/ SATLiteral(-1178))
-263 -1178 0
c (SATLiteral(-265) \/ SATLiteral(-1179))
-265 -1179 0
c (SATLiteral(-267) \/ SATLiteral(-1180))
-267 -1180 0
c (SATLiteral(-269) \/ SATLiteral(-1181))
-269 -1181 0
c (SATLiteral(-271) \/ SATLiteral(-1182))
-271 -1182 0
c (SATLiteral(-273) \/ SATLiteral(-1183))
-273 -1183 0
c (SATLiteral(-275) \/ SATLiteral(-1184))
-275 -1184 0
c (SATLiteral(-277) \/ SATLiteral(-1185))
-277 -1185 0
c (SATLiteral(276) \/ SATLiteral(-1186))
276 -1186 0
c (SATLiteral(-280) \/ SATLiteral(-1178))
-280 -1178 0
c (SATLiteral(-282) \/ SATLiteral(-1179))
-282 -1179 0
c (SATLiteral(-284) \/ SATLiteral(-1180))
-284 -1180 0
c (SATLiteral(-288) \/ SATLiteral(-1182))
-288 -1182 0
c (SATLiteral(-292) \/ SATLiteral(-1184))
-292 -1184 0
c (SATLiteral(-294) \/ SATLiteral(-1185))
-294 -1185 0
c (SATLiteral(293) \/ SATLiteral(-1186))
293 -1186 0
c (SATLiteral(-297) \/ SATLiteral(-1178))
-297 -1178 0
c (SATLiteral(-299) \/ SATLiteral(-1179))
-299 -1179 0
c (SATLiteral(-301) \/ SATLiteral(-1180))
-301 -1180 0
c (SATLiteral(-303) \/ SATLiteral(-1181))
-303 -1181 0
c (SATLiteral(-307) \/ SATLiteral(-1183))
-307 -1183 0
c (SATLiteral(-309) \/ SATLiteral(-1184))
-309 -1184 0
c (SATLiteral(-311) \/ SATLiteral(-1185))
-311 -1185 0
c (SATLiteral(310) \/ SATLiteral(-1186))
310 -1186 0
c (SATLiteral(-315) \/ SATLiteral(-1178))
-315 -1178 0
c (SATLiteral(-317) \/ SATLiteral(-1179))
-317 -1179 0
c (SATLiteral(-319) \/ SATLiteral(-1180))
-319 -1180 0
c (SATLiteral(-321) \/ SATLiteral(-1181))
-321 -1181 0
c (SATLiteral(-325) \/ SATLiteral(-1183))
-325 -1183 0
c (SATLiteral(-327) \/ SATLiteral(-1184))
-327 -1184 0
c (SATLiteral(-329) \/ SATLiteral(-1185))
-329 -1185 0
c (SATLiteral(328) \/ SATLiteral(-1186))
328 -1186 0
c (SATLiteral(-332) \/ SATLiteral(-1178))
-332 -1178 0
c (SATLiteral(-334) \/ SATLiteral(-1179))
-334 -1179 0
c (SATLiteral(-336) \/ SATLiteral(-1180))
-336 -1180 0
c (SATLiteral(-338) \/ SATLiteral(-1181))
-338 -1181 0
c (SATLiteral(-340) \/ SATLiteral(-1182))
-340 -1182 0
c (SATLiteral(-342) \/ SATLiteral(-1183))
-342 -1183 0
c (SATLiteral(-344) \/ SATLiteral(-1184))
-344 -1184 0
c (SATLiteral(-346) \/ SATLiteral(-1185))
-346 -1185 0
c (SATLiteral(345) \/ SATLiteral(-1186))
345 -1186 0
c (SATLiteral(-349) \/ SATLiteral(-1178))
-349 -1178 0
c (SATLiteral(-351) \/ SATLiteral(-1179))
-351 -1179 0
c (SATLiteral(-353) \/ SATLiteral(-1180))
-353 -1180 0
c (SATLiteral(-355) \/ SATLiteral(-1181))
-355 -1181 0
c (SATLiteral(-357) \/ SATLiteral(-1182))
-357 -1182 0
c (SATLiteral(-359) \/ SATLiteral(-1183))
-359 -1183 0
c (SATLiteral(-361) \/ SATLiteral(-1184))
-361 -1184 0
c (SATLiteral(-363) \/ SATLiteral(-1185))
-363 -1185 0
c (SATLiteral(362) \/ SATLiteral(-1186))
362 -1186 0
c (SATLiteral(-366) \/ SATLiteral(-1178))
-366 -1178 0
c (SATLiteral(-368) \/ SATLiteral(-1179))
-368 -1179 0
c (SATLiteral(-370) \/ SATLiteral(-1180))
-370 -1180 0
c (SATLiteral(-372) \/ SATLiteral(-1181))
-372 -1181 0
c (SATLiteral(-374) \/ SATLiteral(-1182))
-374 -1182 0
c (SATLiteral(-378) \/ SATLiteral(-1184))
-378 -1184 0
c (SATLiteral(-380) \/ SATLiteral(-1185))
-380 -1185 0
c (SATLiteral(379) \/ SATLiteral(-1186))
379 -1186 0
c (SATLiteral(-384) \/ SATLiteral(-1178))
-384 -1178 0
c (SATLiteral(-386) \/ SATLiteral(-1179))
-386 -1179 0
c (SATLiteral(-388) \/ SATLiteral(-1180))
-388 -1180 0
c (SATLiteral(-390) \/ SATLiteral(-1181))
-390 -1181 0
c (SATLiteral(-392) \/ SATLiteral(-1182))
-392 -1182 0
c (SATLiteral(-394) \/ SATLiteral(-1183))
-394 -1183 0
c (SATLiteral(-396) \/ SATLiteral(-1184))
-396 -1184 0
c (SATLiteral(-398) \/ SATLiteral(-1185))
-398 -1185 0
c (SATLiteral(397) \/ SATLiteral(-1186))
397 -1186 0
c (SATLiteral(-401) \/ SATLiteral(-1178))
-401 -1178 0
c (SATLiteral(-403) \/ SATLiteral(-1179))
-403 -1179 0
c (SATLiteral(-405) \/ SATLiteral(-1180))
-405 -1180 0
c (SATLiteral(-407) \/ SATLiteral(-1181))
-407 -1181 0
c (SATLiteral(-411) \/ SATLiteral(-1183))
-411 -1183 0
c (SATLiteral(-415) \/ SATLiteral(-1185))
-415 -1185 0
c (SATLiteral(414) \/ SATLiteral(-1186))
414 -1186 0
c (SATLiteral(-418) \/ SATLiteral(-1178))
-418 -1178 0
c (SATLiteral(-420) \/ SATLiteral(-1179))
-420 -1179 0
c (SATLiteral(-422) \/ SATLiteral(-1180))
-422 -1180 0
c (SATLiteral(-424) \/ SATLiteral(-1181))
-424 -1181 0
c (SATLiteral(-426) \/ SATLiteral(-1182))
-426 -1182 0
c (SATLiteral(-428) \/ SATLiteral(-1183))
-428 -1183 0
c (SATLiteral(-430) \/ SATLiteral(-1184))
-430 -1184 0
c (SATLiteral(-432) \/ SATLiteral(-1185))
-432 -1185 0
c (SATLiteral(431) \/ SATLiteral(-1186))
431 -1186 0
c (SATLiteral(-435) \/ SATLiteral(-1178))
-435 -1178 0
c (SATLiteral(-437) \/ SATLiteral(-1179))
-437 -1179 0
c (SATLiteral(-439) \/ SATLiteral(-1180))
-439 -1180 0
c (SATLiteral(-441) \/ SATLiteral(-1181))
-441 -1181 0
c (SATLiteral(-443) \/ SATLiteral(-1182))
-443 -1182 0
c (SATLiteral(-445) \/ SATLiteral(-1183))
-445 -1183 0
c (SATLiteral(-447) \/ SATLiteral(-1184))
-447 -1184 0
c (SATLiteral(-449) \/ SATLiteral(-1185))
-449 -1185 0
c (SATLiteral(448) \/ SATLiteral(-1186))
448 -1186 0
c (SATLiteral(-452) \/ SATLiteral(-1178))
-452 -1178 0
c (SATLiteral(-454) \/ SATLiteral(-1179))
-454 -1179 0
c (SATLiteral(-456) \/ SATLiteral(-1180))
-456 -1180 0
c (SATLiteral(-458) \/ SATLiteral(-1181))
-458 -1181 0
c (SATLiteral(-460) \/ SATLiteral(-1182))
-460 -1182 0
c (SATLiteral(-462) \/ SATLiteral(-1183))
-462 -1183 0
c (SATLiteral(-464) \/ SATLiteral(-1184))
-464 -1184 0
c (SATLiteral(465) \/ SATLiteral(-1186))
465 -1186 0
c (SATLiteral(-469) \/ SATLiteral(-1178))
-469 -1178 0
c (SATLiteral(-471) \/ SATLiteral(-1179))
-471 -1179 0
c (SATLiteral(-473) \/ SATLiteral(-1180))
-473 -1180 0
c (SATLiteral(-475) \/ SATLiteral(-1181))
-475 -1181 0
c (SATLiteral(-477) \/ SATLiteral(-1182))
-477 -1182 0
c (SATLiteral(-479) \/ SATLiteral(-1183))
-479 -1183 0
c (SATLiteral(-481) \/ SATLiteral(-1184))
-481 -1184 0
c (SATLiteral(-483) \/ SATLiteral(-1185))
-483 -1185 0
c (SATLiteral(482) \/ SATLiteral(-1186))
482 -1186 0
c (SATLiteral(-486) \/ SATLiteral(-1178))
-486 -1178 0
c (SATLiteral(-488) \/ SATLiteral(-1179))
-488 -1179 0
c (SATLiteral(-490) \/ SATLiteral(-1180))
-490 -1180 0
c (SATLiteral(-492) \/ SATLiteral(-1181))
-492 -1181 0
c (SATLiteral(-494) \/ SATLiteral(-1182))
-494 -1182 0
c (SATLiteral(-498) \/ SATLiteral(-1184))
-498 -1184 0
c (SATLiteral(-500) \/ SATLiteral(-1185))
-500 -1185 0
c (SATLiteral(-1178) \/ SATLiteral(-503))
-1178 -503 0
c (SATLiteral(-1179) \/ SATLiteral(-505))
-1179 -505 0
c (SATLiteral(-1180) \/ SATLiteral(-507))
-1180 -507 0
c (SATLiteral(-1181) \/ SATLiteral(-509))
-1181 -509 0
c (SATLiteral(-1182) \/ SATLiteral(-511))
-1182 -511 0
c (SATLiteral(-1183) \/ SATLiteral(-513))
-1183 -513 0
c (SATLiteral(-1185) \/ SATLiteral(-517))
-1185 -517 0
c (SATLiteral(-1186) \/ SATLiteral(516))
-1186 516 0
c (SATLiteral(-1178) \/ SATLiteral(-521))
-1178 -521 0
c (SATLiteral(-1179) \/ SATLiteral(-523))
-1179 -523 0
c (SATLiteral(-1180) \/ SATLiteral(-525))
-1180 -525 0
c (SATLiteral(-1181) \/ SATLiteral(-527))
-1181 -527 0
c (SATLiteral(-1182) \/ SATLiteral(-529))
-1182 -529 0
c (SATLiteral(-1183) \/ SATLiteral(-531))
-1183 -531 0
c (SATLiteral(-1185) \/ SATLiteral(-535))
-1185 -535 0
c (SATLiteral(-1186) \/ SATLiteral(534))
-1186 534 0
c (SATLiteral(-1178) \/ SATLiteral(-538))
-1178 -538 0
c (SATLiteral(-1179) \/ SATLiteral(-540))
-1179 -540 0
c (SATLiteral(-1180) \/ SATLiteral(-542))
-1180 -542 0
c (SATLiteral(-1181) \/ SATLiteral(-544))
-1181 -544 0
c (SATLiteral(-1182) \/ SATLiteral(-546))
-1182 -546 0
c (SATLiteral(-1183) \/ SATLiteral(-548))
-1183 -548 0
c (SATLiteral(-1184) \/ SATLiteral(-550))
-1184 -550 0
c (SATLiteral(-1186) \/ SATLiteral(551))
-1186 551 0
c (SATLiteral(-1178) \/ SATLiteral(-556))
-1178 -556 0
c (SATLiteral(-1179) \/ SATLiteral(-558))
-1179 -558 0
c (SATLiteral(-1180) \/ SATLiteral(-560))
-1180 -560 0
c (SATLiteral(-1181) \/ SATLiteral(-562))
-1181 -562 0
c (SATLiteral(-1182) \/ SATLiteral(-564))
-1182 -564 0
c (SATLiteral(-1183) \/ SATLiteral(-566))
-1183 -566 0
c (SATLiteral(-1184) \/ SATLiteral(-568))
-1184 -568 0
c (SATLiteral(-574) \/ SATLiteral(-1178))
-574 -1178 0
c (SATLiteral(-576) \/ SATLiteral(-1179))
-576 -1179 0
c (SATLiteral(-578) \/ SATLiteral(-1180))
-578 -1180 0
c (SATLiteral(-580) \/ SATLiteral(-1181))
-580 -1181 0
c (SATLiteral(-582) \/ SATLiteral(-1182))
-582 -1182 0
c (SATLiteral(-584) \/ SATLiteral(-1183))
-584 -1183 0
c (SATLiteral(-586) \/ SATLiteral(-1184))
-586 -1184 0
c (SATLiteral(-588) \/ SATLiteral(-1185))
-588 -1185 0
c (SATLiteral(587) \/ SATLiteral(-1186))
587 -1186 0
c (SATLiteral(-591) \/ SATLiteral(-1178))
-591 -1178 0
c (SATLiteral(-593) \/ SATLiteral(-1179))
-593 -1179 0
c (SATLiteral(-595) \/ SATLiteral(-1180))
-595 -1180 0
c (SATLiteral(-597) \/ SATLiteral(-1181))
-597 -1181 0
c (SATLiteral(-599) \/ SATLiteral(-1182))
-599 -1182 0
c (SATLiteral(-601) \/ SATLiteral(-1183))
-601 -1183 0
c (SATLiteral(-605) \/ SATLiteral(-1185))
-605 -1185 0
c (SATLiteral(604) \/ SATLiteral(-1186))
604 -1186 0
c (SATLiteral(-608) \/ SATLiteral(-1178))
-608 -1178 0
c (SATLiteral(-610) \/ SATLiteral(-1179))
-610 -1179 0
c (SATLiteral(-612) \/ SATLiteral(-1180))
-612 -1180 0
c (SATLiteral(-614) \/ SATLiteral(-1181))
-614 -1181 0
c (SATLiteral(-616) \/ SATLiteral(-1182))
-616 -1182 0
c (SATLiteral(-618) \/ SATLiteral(-1183))
-618 -1183 0
c (SATLiteral(-620) \/ SATLiteral(-1184))
-620 -1184 0
c (SATLiteral(-622) \/ SATLiteral(-1185))
-622 -1185 0
c (SATLiteral(621) \/ SATLiteral(-1186))
621 -1186 0
c (SATLiteral(-625) \/ SATLiteral(-1178))
-625 -1178 0
c (SATLiteral(-627) \/ SATLiteral(-1179))
-627 -1179 0
c (SATLiteral(-629) \/ SATLiteral(-1180))
-629 -1180 0
c (SATLiteral(-631) \/ SATLiteral(-1181))
-631 -1181 0
c (SATLiteral(-633) \/ SATLiteral(-1182))
-633 -1182 0
c (SATLiteral(-635) \/ SATLiteral(-1183))
-635 -1183 0
c (SATLiteral(-637) \/ SATLiteral(-1184))
-637 -1184 0
c (SATLiteral(-639) \/ SATLiteral(-1185))
-639 -1185 0
c (SATLiteral(638) \/ SATLiteral(-1186))
638 -1186 0
c (SATLiteral(-642) \/ SATLiteral(-1178))
-642 -1178 0
c (SATLiteral(-644) \/ SATLiteral(-1179))
-644 -1179 0
c (SATLiteral(-646) \/ SATLiteral(-1180))
-646 -1180 0
c (SATLiteral(-648) \/ SATLiteral(-1181))
-648 -1181 0
c (SATLiteral(-650) \/ SATLiteral(-1182))
-650 -1182 0
c (SATLiteral(-652) \/ SATLiteral(-1183))
-652 -1183 0
c (SATLiteral(-654) \/ SATLiteral(-1184))
-654 -1184 0
c (SATLiteral(655) \/ SATLiteral(-1186))
655 -1186 0
c (SATLiteral(-659) \/ SATLiteral(-1178))
-659 -1178 0
c (SATLiteral(-661) \/ SATLiteral(-1179))
-661 -1179 0
c (SATLiteral(-663) \/ SATLiteral(-1180))
-663 -1180 0
c (SATLiteral(-665) \/ SATLiteral(-1181))
-665 -1181 0
c (SATLiteral(-667) \/ SATLiteral(-1182))
-667 -1182 0
c (SATLiteral(-669) \/ SATLiteral(-1183))
-669 -1183 0
c (SATLiteral(-671) \/ SATLiteral(-1184))
-671 -1184 0
c (SATLiteral(-673) \/ SATLiteral(-1185))
-673 -1185 0
c (SATLiteral(672) \/ SATLiteral(-1186))
672 -1186 0
c (SATLiteral(-676) \/ SATLiteral(-1178))
-676 -1178 0
c (SATLiteral(-678) \/ SATLiteral(-1179))
-678 -1179 0
c (SATLiteral(-680) \/ SATLiteral(-1180))
-680 -1180 0
c (SATLiteral(-682) \/ SATLiteral(-1181))
-682 -1181 0
c (SATLiteral(-684) \/ SATLiteral(-1182))
-684 -1182 0
c (SATLiteral(-686) \/ SATLiteral(-1183))
-686 -1183 0
c (SATLiteral(-688) \/ SATLiteral(-1184))
-688 -1184 0
c (SATLiteral(-690) \/ SATLiteral(-1185))
-690 -1185 0
c (SATLiteral(1160) -> SATLiteral(1187))
-1160 1187 0
c (SATLiteral(1161) -> SATLiteral(1188))
-1161 1188 0
c (SATLiteral(1162) -> SATLiteral(1189))
-1162 1189 0
c (SATLiteral(1163) -> SATLiteral(1190))
-1163 1190 0
c (SATLiteral(1164) -> SATLiteral(1191))
-1164 1191 0
c (SATLiteral(1165) -> SATLiteral(1192))
-1165 1192 0
c (SATLiteral(1166) -> SATLiteral(1193))
-1166 1193 0
c (SATLiteral(1167) -> SATLiteral(1194))
-1167 1194 0
c (SATLiteral(1168) -> SATLiteral(1195))
-1168 1195 0
c (SATLiteral(1169) -> SATLiteral(1196))
-1169 1196 0
c (SATLiteral(1170) -> SATLiteral(1197))
-1170 1197 0
c (SATLiteral(1171) -> SATLiteral(1198))
-1171 1198 0
c (SATLiteral(1172) -> SATLiteral(1199))
-1172 1199 0
c (SATLiteral(1173) -> SATLiteral(1200))
-1173 1200 0
c (SATLiteral(1174) -> SATLiteral(1201))
-1174 1201 0
c (SATLiteral(1175) -> SATLiteral(1202))
-1175 1202 0
c (SATLiteral(1176) -> SATLiteral(1203))
-1176 1203 0
c (SATLiteral(1177) -> SATLiteral(1204))
-1177 1204 0
c (SATLiteral(105) \/ SATLiteral(3) \/ SATLiteral(-706))
105 3 -706 0
c (SATLiteral(123) \/ SATLiteral(3) \/ SATLiteral(-708))
123 3 -708 0
c (SATLiteral(-712) \/ SATLiteral(3) \/ SATLiteral(20))
-712 3 20 0
c (SATLiteral(123) \/ SATLiteral(20) \/ SATLiteral(-716))
123 20 -716 0
c (SATLiteral(140) \/ SATLiteral(20) \/ SATLiteral(-717))
140 20 -717 0
c (SATLiteral(-721) \/ SATLiteral(20) \/ SATLiteral(37))
-721 20 37 0
c (SATLiteral(123) \/ SATLiteral(-724) \/ SATLiteral(37))
123 -724 37 0
c (SATLiteral(140) \/ SATLiteral(-725) \/ SATLiteral(37))
140 -725 37 0
c (SATLiteral(-730) \/ SATLiteral(37) \/ SATLiteral(54))
-730 37 54 0
c (SATLiteral(140) \/ SATLiteral(-733) \/ SATLiteral(54))
140 -733 54 0
c (SATLiteral(158) \/ SATLiteral(-735) \/ SATLiteral(54))
158 -735 54 0
c (SATLiteral(54) \/ SATLiteral(71) \/ SATLiteral(-739))
54 71 -739 0
c (SATLiteral(158) \/ SATLiteral(-743) \/ SATLiteral(71))
158 -743 71 0
c (SATLiteral(71) \/ SATLiteral(88) \/ SATLiteral(-748))
71 88 -748 0
c (SATLiteral(158) \/ SATLiteral(-751) \/ SATLiteral(88))
158 -751 88 0
c (SATLiteral(105) \/ SATLiteral(176) \/ SATLiteral(-761))
105 176 -761 0
c (SATLiteral(105) \/ SATLiteral(193) \/ SATLiteral(-762))
105 193 -762 0
c (SATLiteral(123) \/ SATLiteral(193) \/ SATLiteral(-778))
123 193 -778 0
c (SATLiteral(123) \/ SATLiteral(-779) \/ SATLiteral(210))
123 -779 210 0
c (SATLiteral(123) \/ SATLiteral(-780) \/ SATLiteral(227))
123 -780 227 0
c (SATLiteral(-784) \/ SATLiteral(123) \/ SATLiteral(140))
-784 123 140 0
c (SATLiteral(140) \/ SATLiteral(-787) \/ SATLiteral(210))
140 -787 210 0
c (SATLiteral(140) \/ SATLiteral(-788) \/ SATLiteral(227))
140 -788 227 0
c (SATLiteral(140) \/ SATLiteral(-789) \/ SATLiteral(244))
140 -789 244 0
c (SATLiteral(158) \/ SATLiteral(-805) \/ SATLiteral(244))
158 -805 244 0
c (SATLiteral(158) \/ SATLiteral(-806) \/ SATLiteral(261))
158 -806 261 0
c (SATLiteral(158) \/ SATLiteral(-807) \/ SATLiteral(278))
158 -807 278 0
c (SATLiteral(-824) \/ SATLiteral(176) \/ SATLiteral(295))
-824 176 295 0
c (SATLiteral(-829) \/ SATLiteral(176) \/ SATLiteral(193))
-829 176 193 0
c (SATLiteral(193) \/ SATLiteral(-832) \/ SATLiteral(295))
193 -832 295 0
c (SATLiteral(-834) \/ SATLiteral(193) \/ SATLiteral(313))
-834 193 313 0
c (SATLiteral(-838) \/ SATLiteral(193) \/ SATLiteral(210))
-838 193 210 0
c (SATLiteral(-842) \/ SATLiteral(210) \/ SATLiteral(313))
-842 210 313 0
c (SATLiteral(-843) \/ SATLiteral(210) \/ SATLiteral(330))
-843 210 330 0
c (SATLiteral(210) \/ SATLiteral(227) \/ SATLiteral(-847))
210 227 -847 0
c (SATLiteral(-850) \/ SATLiteral(227) \/ SATLiteral(313))
-850 227 313 0
c (SATLiteral(-851) \/ SATLiteral(227) \/ SATLiteral(330))
-851 227 330 0
c (SATLiteral(-852) \/ SATLiteral(227) \/ SATLiteral(347))
-852 227 347 0
c (SATLiteral(227) \/ SATLiteral(244) \/ SATLiteral(-856))
227 244 -856 0
c (SATLiteral(-859) \/ SATLiteral(244) \/ SATLiteral(330))
-859 244 330 0
c (SATLiteral(-860) \/ SATLiteral(244) \/ SATLiteral(347))
-860 244 347 0
c (SATLiteral(-861) \/ SATLiteral(244) \/ SATLiteral(364))
-861 244 364 0
c (SATLiteral(244) \/ SATLiteral(261) \/ SATLiteral(-865))
244 261 -865 0
c (SATLiteral(-868) \/ SATLiteral(261) \/ SATLiteral(347))
-868 261 347 0
c (SATLiteral(-869) \/ SATLiteral(261) \/ SATLiteral(364))
-869 261 364 0
c (SATLiteral(261) \/ SATLiteral(278) \/ SATLiteral(-874))
261 278 -874 0
c (SATLiteral(-877) \/ SATLiteral(278) \/ SATLiteral(364))
-877 278 364 0
c (SATLiteral(-887) \/ SATLiteral(382) \/ SATLiteral(295))
-887 382 295 0
c (SATLiteral(-888) \/ SATLiteral(399) \/ SATLiteral(295))
-888 399 295 0
c (SATLiteral(399) \/ SATLiteral(-904) \/ SATLiteral(313))
399 -904 313 0
c (SATLiteral(-905) \/ SATLiteral(416) \/ SATLiteral(313))
-905 416 313 0
c (SATLiteral(-906) \/ SATLiteral(433) \/ SATLiteral(313))
-906 433 313 0
c (SATLiteral(-910) \/ SATLiteral(313) \/ SATLiteral(330))
-910 313 330 0
c (SATLiteral(-913) \/ SATLiteral(416) \/ SATLiteral(330))
-913 416 330 0
c (SATLiteral(-914) \/ SATLiteral(433) \/ SATLiteral(330))
-914 433 330 0
c (SATLiteral(-915) \/ SATLiteral(450) \/ SATLiteral(330))
-915 450 330 0
c (SATLiteral(-919) \/ SATLiteral(330) \/ SATLiteral(347))
-919 330 347 0
c (SATLiteral(-922) \/ SATLiteral(433) \/ SATLiteral(347))
-922 433 347 0
c (SATLiteral(450) \/ SATLiteral(347) \/ SATLiteral(-923))
450 347 -923 0
c (SATLiteral(467) \/ SATLiteral(347) \/ SATLiteral(-924))
467 347 -924 0
c (SATLiteral(-928) \/ SATLiteral(347) \/ SATLiteral(364))
-928 347 364 0
c (SATLiteral(-931) \/ SATLiteral(450) \/ SATLiteral(364))
-931 450 364 0
c (SATLiteral(467) \/ SATLiteral(-932) \/ SATLiteral(364))
467 -932 364 0
c (SATLiteral(484) \/ SATLiteral(-933) \/ SATLiteral(364))
484 -933 364 0
c (SATLiteral(-950) \/ SATLiteral(382) \/ SATLiteral(501))
-950 382 501 0
c (SATLiteral(-955) \/ SATLiteral(382) \/ SATLiteral(399))
-955 382 399 0
c (SATLiteral(399) \/ SATLiteral(-958) \/ SATLiteral(501))
399 -958 501 0
c (SATLiteral(399) \/ SATLiteral(519) \/ SATLiteral(-960))
399 519 -960 0
c (SATLiteral(399) \/ SATLiteral(416) \/ SATLiteral(-964))
399 416 -964 0
c (SATLiteral(416) \/ SATLiteral(519) \/ SATLiteral(-968))
416 519 -968 0
c (SATLiteral(416) \/ SATLiteral(536) \/ SATLiteral(-969))
416 536 -969 0
c (SATLiteral(416) \/ SATLiteral(433) \/ SATLiteral(-973))
416 433 -973 0
c (SATLiteral(-976) \/ SATLiteral(433) \/ SATLiteral(519))
-976 433 519 0
c (SATLiteral(433) \/ SATLiteral(536) \/ SATLiteral(-977))
433 536 -977 0
c (SATLiteral(433) \/ SATLiteral(450) \/ SATLiteral(-982))
433 450 -982 0
c (SATLiteral(-985) \/ SATLiteral(450) \/ SATLiteral(536))
-985 450 536 0
c (SATLiteral(450) \/ SATLiteral(554) \/ SATLiteral(-987))
450 554 -987 0
c (SATLiteral(450) \/ SATLiteral(467) \/ SATLiteral(-991))
450 467 -991 0
c (SATLiteral(467) \/ SATLiteral(-995) \/ SATLiteral(554))
467 -995 554 0
c (SATLiteral(467) \/ SATLiteral(484) \/ SATLiteral(-1000))
467 484 -1000 0
c (SATLiteral(484) \/ SATLiteral(554) \/ SATLiteral(-1003))
484 554 -1003 0
c (SATLiteral(572) \/ SATLiteral(501) \/ SATLiteral(-1013))
572 501 -1013 0
c (SATLiteral(589) \/ SATLiteral(501) \/ SATLiteral(-1014))
589 501 -1014 0
c (SATLiteral(589) \/ SATLiteral(-1030) \/ SATLiteral(519))
589 -1030 519 0
c (SATLiteral(606) \/ SATLiteral(-1031) \/ SATLiteral(519))
606 -1031 519 0
c (SATLiteral(623) \/ SATLiteral(-1032) \/ SATLiteral(519))
623 -1032 519 0
c (SATLiteral(-1036) \/ SATLiteral(519) \/ SATLiteral(536))
-1036 519 536 0
c (SATLiteral(-1039) \/ SATLiteral(606) \/ SATLiteral(536))
-1039 606 536 0
c (SATLiteral(623) \/ SATLiteral(-1040) \/ SATLiteral(536))
623 -1040 536 0
c (SATLiteral(640) \/ SATLiteral(-1041) \/ SATLiteral(536))
640 -1041 536 0
c (SATLiteral(640) \/ SATLiteral(554) \/ SATLiteral(-1057))
640 554 -1057 0
c (SATLiteral(657) \/ SATLiteral(-1058) \/ SATLiteral(554))
657 -1058 554 0
c (SATLiteral(674) \/ SATLiteral(-1059) \/ SATLiteral(554))
674 -1059 554 0
c (SATLiteral(572) \/ SATLiteral(589) \/ SATLiteral(-1081))
572 589 -1081 0
c (SATLiteral(589) \/ SATLiteral(606) \/ SATLiteral(-1090))
589 606 -1090 0
c (SATLiteral(606) \/ SATLiteral(623) \/ SATLiteral(-1099))
606 623 -1099 0
c (SATLiteral(623) \/ SATLiteral(640) \/ SATLiteral(-1108))
623 640 -1108 0
c (SATLiteral(640) \/ SATLiteral(657) \/ SATLiteral(-1117))
640 657 -1117 0
c (SATLiteral(657) \/ SATLiteral(674) \/ SATLiteral(-1126))
657 674 -1126 0
c (SATLiteral(1132) -> SATLiteral(1205))
-1132 1205 0
c (SATLiteral(1133) -> SATLiteral(1206))
-1133 1206 0
c (SATLiteral(1134) -> SATLiteral(1207))
-1134 1207 0
c (SATLiteral(1136) -> SATLiteral(1208))
-1136 1208 0
c (SATLiteral(1137) -> SATLiteral(1209))
-1137 1209 0
c (SATLiteral(1138) -> SATLiteral(1210))
-1138 1210 0
c (SATLiteral(1139) -> SATLiteral(1211))
-1139 1211 0
c (SATLiteral(1140) -> SATLiteral(1212))
-1140 1212 0
c (SATLiteral(1141) -> SATLiteral(1213))
-1141 1213 0
c (SATLiteral(1142) -> SATLiteral(1214))
-1142 1214 0
c (SATLiteral(1143) -> SATLiteral(1215))
-1143 1215 0
c (SATLiteral(1144) -> SATLiteral(1216))
-1144 1216 0
c (SATLiteral(1145) -> SATLiteral(1217))
-1145 1217 0
c (SATLiteral(1146) -> SATLiteral(1218))
-1146 1218 0
c (SATLiteral(1147) -> SATLiteral(1219))
-1147 1219 0
c (SATLiteral(1148) -> SATLiteral(1220))
-1148 1220 0
c (SATLiteral(1149) -> SATLiteral(1221))
-1149 1221 0
c (SATLiteral(1150) -> SATLiteral(1222))
-1150 1222 0
c (SATLiteral(1151) -> SATLiteral(1223))
-1151 1223 0
c (SATLiteral(1152) -> SATLiteral(1224))
-1152 1224 0
c (SATLiteral(1153) -> SATLiteral(1225))
-1153 1225 0
c (SATLiteral(1154) -> SATLiteral(1226))
-1154 1226 0
c (SATLiteral(1155) -> SATLiteral(1227))
-1155 1227 0
c (SATLiteral(1156) -> SATLiteral(1228))
-1156 1228 0
c (SATLiteral(1157) -> SATLiteral(1229))
-1157 1229 0
c (SATLiteral(1158) -> SATLiteral(1230))
-1158 1230 0
c (SATLiteral(1159) -> SATLiteral(1231))
-1159 1231 0
c (( - aux714 + SATLiteral(-105) + SATLiteral(-158))<=0)
158 -6047 0
105 -6047 0
105 158 -6048 0
c (0<=( - aux714 + SATLiteral(-105) + SATLiteral(-158)))
-158 6048 0
-105 6048 0
-105 -158 6047 0
c (( - aux723 + SATLiteral(-501) + SATLiteral(-554))<=0)
554 -6078 0
501 -6078 0
501 554 -6079 0
c (0<=( - aux723 + SATLiteral(-501) + SATLiteral(-554)))
-554 6079 0
-501 6079 0
-501 -554 6078 0
c (( - aux731 + SATLiteral(-105) + SATLiteral(-158))<=0)
158 -6104 0
105 -6104 0
105 158 -6105 0
c (0<=( - aux731 + SATLiteral(-105) + SATLiteral(-158)))
-158 6105 0
-105 6105 0
-105 -158 6104 0
c (( - aux742 + SATLiteral(-501) + SATLiteral(-554))<=0)
554 -6141 0
501 -6141 0
501 554 -6142 0
c (0<=( - aux742 + SATLiteral(-501) + SATLiteral(-554)))
-554 6142 0
-501 6142 0
-501 -554 6141 0
c ((SATLiteral(-193) - aux750 + SATLiteral(-589))<=0)
589 -6167 0
193 -6167 0
193 589 -6168 0
c (0<=(SATLiteral(-193) - aux750 + SATLiteral(-589)))
-589 6168 0
-193 6168 0
-193 -589 6167 0
c ((SATLiteral(-278) - aux765 + SATLiteral(-674))<=0)
674 -6218 0
278 -6218 0
278 674 -6219 0
c (0<=(SATLiteral(-278) - aux765 + SATLiteral(-674)))
-674 6219 0
-278 6219 0
-278 -674 6218 0
c ((SATLiteral(-193) - aux769 + SATLiteral(-589))<=0)
589 -6230 0
193 -6230 0
193 589 -6231 0
c (0<=(SATLiteral(-193) - aux769 + SATLiteral(-589)))
-589 6231 0
-193 6231 0
-193 -589 6230 0
c ((SATLiteral(-278) - aux784 + SATLiteral(-674))<=0)
674 -6281 0
278 -6281 0
278 674 -6282 0
c (0<=(SATLiteral(-278) - aux784 + SATLiteral(-674)))
-674 6282 0
-278 6282 0
-278 -674 6281 0
c ((SATLiteral(503) - aux45 + SATLiteral(90))<=0)
-90 -1232 0
-503 -1232 0
-503 -90 -1233 0
c (0<=(SATLiteral(503) - aux45 + SATLiteral(90)))
90 1233 0
503 1233 0
503 90 1232 0
c ((SATLiteral(521) - aux46 + SATLiteral(73))<=0)
-73 -1235 0
-521 -1235 0
-521 -73 -1236 0
c (0<=(SATLiteral(521) - aux46 + SATLiteral(73)))
73 1236 0
521 1236 0
521 73 1235 0
c ((SATLiteral(556) - aux47 + SATLiteral(56))<=0)
-56 -1238 0
-556 -1238 0
-556 -56 -1239 0
c (0<=(SATLiteral(556) - aux47 + SATLiteral(56)))
56 1239 0
556 1239 0
556 56 1238 0
c ((SATLiteral(349) - aux48 + SATLiteral(39))<=0)
-39 -1241 0
-349 -1241 0
-349 -39 -1242 0
c (0<=(SATLiteral(349) - aux48 + SATLiteral(39)))
39 1242 0
349 1242 0
349 39 1241 0
c ((SATLiteral(608) - aux49 + SATLiteral(22))<=0)
-22 -1244 0
-608 -1244 0
-608 -22 -1245 0
c (0<=(SATLiteral(608) - aux49 + SATLiteral(22)))
22 1245 0
608 1245 0
608 22 1244 0
c (( - aux50 + SATLiteral(452) + SATLiteral(5))<=0)
-5 -1247 0
-452 -1247 0
-452 -5 -1248 0
c (0<=( - aux50 + SATLiteral(452) + SATLiteral(5)))
5 1248 0
452 1248 0
452 5 1247 0
c ((SATLiteral(625) - aux51 + SATLiteral(469))<=0)
-469 -1250 0
-625 -1250 0
-625 -469 -1251 0
c (0<=(SATLiteral(625) - aux51 + SATLiteral(469)))
469 1251 0
625 1251 0
625 469 1250 0
c ((SATLiteral(366) - aux52 + SATLiteral(486))<=0)
-486 -1253 0
-366 -1253 0
-366 -486 -1254 0
c (0<=(SATLiteral(366) - aux52 + SATLiteral(486)))
486 1254 0
366 1254 0
366 486 1253 0
c ((SATLiteral(642) + SATLiteral(659) - aux53)<=0)
-659 -1256 0
-642 -1256 0
-642 -659 -1257 0
c (0<=(SATLiteral(642) + SATLiteral(659) - aux53))
659 1257 0
642 1257 0
642 659 1256 0
c ((SATLiteral(297) - aux54 + SATLiteral(435))<=0)
-435 -1259 0
-297 -1259 0
-297 -435 -1260 0
c (0<=(SATLiteral(297) - aux54 + SATLiteral(435)))
435 1260 0
297 1260 0
297 435 1259 0
c ((SATLiteral(107) - aux55 + SATLiteral(418))<=0)
-418 -1262 0
-107 -1262 0
-107 -418 -1263 0
c (0<=(SATLiteral(107) - aux55 + SATLiteral(418)))
418 1263 0
107 1263 0
107 418 1262 0
c ((SATLiteral(676) - aux56 + SATLiteral(401))<=0)
-401 -1265 0
-676 -1265 0
-676 -401 -1266 0
c (0<=(SATLiteral(676) - aux56 + SATLiteral(401)))
401 1266 0
676 1266 0
676 401 1265 0
c ((SATLiteral(178) - aux57 + SATLiteral(384))<=0)
-384 -1268 0
-178 -1268 0
-178 -384 -1269 0
c (0<=(SATLiteral(178) - aux57 + SATLiteral(384)))
384 1269 0
178 1269 0
178 384 1268 0
c ((SATLiteral(125) + SATLiteral(280) - aux58)<=0)
-280 -1271 0
-125 -1271 0
-125 -280 -1272 0
c (0<=(SATLiteral(125) + SATLiteral(280) - aux58))
280 1272 0
125 1272 0
125 280 1271 0
c ((SATLiteral(195) + SATLiteral(263) - aux59)<=0)
-263 -1274 0
-195 -1274 0
-195 -263 -1275 0
c (0<=(SATLiteral(195) + SATLiteral(263) - aux59))
263 1275 0
195 1275 0
195 263 1274 0
c ((SATLiteral(212) + SATLiteral(246) - aux60)<=0)
-246 -1277 0
-212 -1277 0
-212 -246 -1278 0
c (0<=(SATLiteral(212) + SATLiteral(246) - aux60))
246 1278 0
212 1278 0
212 246 1277 0
c ((SATLiteral(538) + SATLiteral(229) - aux61)<=0)
-229 -1280 0
-538 -1280 0
-538 -229 -1281 0
c (0<=(SATLiteral(538) + SATLiteral(229) - aux61))
229 1281 0
538 1281 0
538 229 1280 0
c ((SATLiteral(315) + SATLiteral(142) - aux62)<=0)
-142 -1283 0
-315 -1283 0
-315 -142 -1284 0
c (0<=(SATLiteral(315) + SATLiteral(142) - aux62))
142 1284 0
315 1284 0
315 142 1283 0
c ((SATLiteral(332) + SATLiteral(160) - aux63)<=0)
-160 -1286 0
-332 -1286 0
-332 -160 -1287 0
c (0<=(SATLiteral(332) + SATLiteral(160) - aux63))
160 1287 0
332 1287 0
332 160 1286 0
c ((SATLiteral(574) + SATLiteral(591) - aux64)<=0)
-591 -1289 0
-574 -1289 0
-574 -591 -1290 0
c (0<=(SATLiteral(574) + SATLiteral(591) - aux64))
591 1290 0
574 1290 0
574 591 1289 0
c ((aux52 + aux64 - aux65)<=0)
1289 -1292 0
1290 -1293 0
1253 -1292 0
1253 1289 -1293 0
1253 1290 -1295 0
1254 -1293 0
1254 1289 -1295 0
1254 1290 -1297 0
c (0<=(aux52 + aux64 - aux65))
-1290 1297 0
-1289 1295 0
-1254 1297 0
-1254 -1290 1295 0
-1254 -1289 1293 0
-1253 1295 0
-1253 -1290 1293 0
-1253 -1289 1292 0
c ((aux46 + aux59 - aux66)<=0)
1274 -1299 0
1275 -1300 0
1235 -1299 0
1235 1274 -1300 0
1235 1275 -1302 0
1236 -1300 0
1236 1274 -1302 0
1236 1275 -1304 0
c (0<=(aux46 + aux59 - aux66))
-1275 1304 0
-1274 1302 0
-1236 1304 0
-1236 -1275 1302 0
-1236 -1274 1300 0
-1235 1302 0
-1235 -1275 1300 0
-1235 -1274 1299 0
c ((aux45 + aux50 - aux67)<=0)
1247 -1306 0
1248 -1307 0
1232 -1306 0
1232 1247 -1307 0
1232 1248 -1309 0
1233 -1307 0
1233 1247 -1309 0
1233 1248 -1311 0
c (0<=(aux45 + aux50 - aux67))
-1248 1311 0
-1247 1309 0
-1233 1311 0
-1233 -1248 1309 0
-1233 -1247 1307 0
-1232 1309 0
-1232 -1248 1307 0
-1232 -1247 1306 0
c ((aux47 + aux48 - aux68)<=0)
1241 -1313 0
1242 -1314 0
1238 -1313 0
1238 1241 -1314 0
1238 1242 -1316 0
1239 -1314 0
1239 1241 -1316 0
1239 1242 -1318 0
c (0<=(aux47 + aux48 - aux68))
-1242 1318 0
-1241 1316 0
-1239 1318 0
-1239 -1242 1316 0
-1239 -1241 1314 0
-1238 1316 0
-1238 -1242 1314 0
-1238 -1241 1313 0
c ((aux49 + aux51 - aux69)<=0)
1250 -1320 0
1251 -1321 0
1244 -1320 0
1244 1250 -1321 0
1244 1251 -1323 0
1245 -1321 0
1245 1250 -1323 0
1245 1251 -1325 0
c (0<=(aux49 + aux51 - aux69))
-1251 1325 0
-1250 1323 0
-1245 1325 0
-1245 -1251 1323 0
-1245 -1250 1321 0
-1244 1323 0
-1244 -1251 1321 0
-1244 -1250 1320 0
c ((aux58 + aux62 - aux70)<=0)
1283 -1327 0
1284 -1328 0
1271 -1327 0
1271 1283 -1328 0
1271 1284 -1330 0
1272 -1328 0
1272 1283 -1330 0
1272 1284 -1332 0
c (0<=(aux58 + aux62 - aux70))
-1284 1332 0
-1283 1330 0
-1272 1332 0
-1272 -1284 1330 0
-1272 -1283 1328 0
-1271 1330 0
-1271 -1284 1328 0
-1271 -1283 1327 0
c ((aux54 + aux55 - aux71)<=0)
1262 -1334 0
1263 -1335 0
1259 -1334 0
1259 1262 -1335 0
1259 1263 -1337 0
1260 -1335 0
1260 1262 -1337 0
1260 1263 -1339 0
c (0<=(aux54 + aux55 - aux71))
-1263 1339 0
-1262 1337 0
-1260 1339 0
-1260 -1263 1337 0
-1260 -1262 1335 0
-1259 1337 0
-1259 -1263 1335 0
-1259 -1262 1334 0
c ((aux56 + aux57 - aux72)<=0)
1268 -1341 0
1269 -1342 0
1265 -1341 0
1265 1268 -1342 0
1265 1269 -1344 0
1266 -1342 0
1266 1268 -1344 0
1266 1269 -1346 0
c (0<=(aux56 + aux57 - aux72))
-1269 1346 0
-1268 1344 0
-1266 1346 0
-1266 -1269 1344 0
-1266 -1268 1342 0
-1265 1344 0
-1265 -1269 1342 0
-1265 -1268 1341 0
c ((aux60 + aux63 - aux73)<=0)
1286 -1348 0
1287 -1349 0
1277 -1348 0
1277 1286 -1349 0
1277 1287 -1351 0
1278 -1349 0
1278 1286 -1351 0
1278 1287 -1353 0
c (0<=(aux60 + aux63 - aux73))
-1287 1353 0
-1286 1351 0
-1278 1353 0
-1278 -1287 1351 0
-1278 -1286 1349 0
-1277 1351 0
-1277 -1287 1349 0
-1277 -1286 1348 0
c ((aux53 + aux61 - aux74)<=0)
1280 -1355 0
1281 -1356 0
1256 -1355 0
1256 1280 -1356 0
1256 1281 -1358 0
1257 -1356 0
1257 1280 -1358 0
1257 1281 -1360 0
c (0<=(aux53 + aux61 - aux74))
-1281 1360 0
-1280 1358 0
-1257 1360 0
-1257 -1281 1358 0
-1257 -1280 1356 0
-1256 1358 0
-1256 -1281 1356 0
-1256 -1280 1355 0
c ((aux68 + aux74 - aux75)<=0)
1355 -1362 0
1356 -1363 0
1358 -1365 0
1360 -1367 0
1313 -1362 0
1313 1355 -1363 0
1313 1356 -1365 0
1313 1358 -1367 0
1313 1360 -1369 0
1314 -1363 0
1314 1355 -1365 0
1314 1356 -1367 0
1314 1358 -1369 0
1314 1360 -1371 0
1316 -1365 0
1316 1355 -1367 0
1316 1356 -1369 0
1316 1358 -1371 0
1316 1360 -1373 0
1318 -1367 0
1318 1355 -1369 0
1318 1356 -1371 0
1318 1358 -1373 0
1318 1360 -1375 0
c (0<=(aux68 + aux74 - aux75))
-1360 1375 0
-1358 1373 0
-1356 1371 0
-1355 1369 0
-1318 1375 0
-1318 -1360 1373 0
-1318 -1358 1371 0
-1318 -1356 1369 0
-1318 -1355 1367 0
-1316 1373 0
-1316 -1360 1371 0
-1316 -1358 1369 0
-1316 -1356 1367 0
-1316 -1355 1365 0
-1314 1371 0
-1314 -1360 1369 0
-1314 -1358 1367 0
-1314 -1356 1365 0
-1314 -1355 1363 0
-1313 1369 0
-1313 -1360 1367 0
-1313 -1358 1365 0
-1313 -1356 1363 0
-1313 -1355 1362 0
c ((aux67 + aux71 - aux76)<=0)
1334 -1377 0
1335 -1378 0
1337 -1380 0
1339 -1382 0
1306 -1377 0
1306 1334 -1378 0
1306 1335 -1380 0
1306 1337 -1382 0
1306 1339 -1384 0
1307 -1378 0
1307 1334 -1380 0
1307 1335 -1382 0
1307 1337 -1384 0
1307 1339 -1386 0
1309 -1380 0
1309 1334 -1382 0
1309 1335 -1384 0
1309 1337 -1386 0
1309 1339 -1388 0
1311 -1382 0
1311 1334 -1384 0
1311 1335 -1386 0
1311 1337 -1388 0
1311 1339 -1390 0
c (0<=(aux67 + aux71 - aux76))
-1339 1390 0
-1337 1388 0
-1335 1386 0
-1334 1384 0
-1311 1390 0
-1311 -1339 1388 0
-1311 -1337 1386 0
-1311 -1335 1384 0
-1311 -1334 1382 0
-1309 1388 0
-1309 -1339 1386 0
-1309 -1337 1384 0
-1309 -1335 1382 0
-1309 -1334 1380 0
-1307 1386 0
-1307 -1339 1384 0
-1307 -1337 1382 0
-1307 -1335 1380 0
-1307 -1334 1378 0
-1306 1384 0
-1306 -1339 1382 0
-1306 -1337 1380 0
-1306 -1335 1378 0
-1306 -1334 1377 0
c ((aux65 + aux66 - aux77)<=0)
1299 -1392 0
1300 -1393 0
1302 -1395 0
1304 -1397 0
1292 -1392 0
1292 1299 -1393 0
1292 1300 -1395 0
1292 1302 -1397 0
1292 1304 -1399 0
1293 -1393 0
1293 1299 -1395 0
1293 1300 -1397 0
1293 1302 -1399 0
1293 1304 -1401 0
1295 -1395 0
1295 1299 -1397 0
1295 1300 -1399 0
1295 1302 -1401 0
1295 1304 -1403 0
1297 -1397 0
1297 1299 -1399 0
1297 1300 -1401 0
1297 1302 -1403 0
1297 1304 -1405 0
c (0<=(aux65 + aux66 - aux77))
-1304 1405 0
-1302 1403 0
-1300 1401 0
-1299 1399 0
-1297 1405 0
-1297 -1304 1403 0
-1297 -1302 1401 0
-1297 -1300 1399 0
-1297 -1299 1397 0
-1295 1403 0
-1295 -1304 1401 0
-1295 -1302 1399 0
-1295 -1300 1397 0
-1295 -1299 1395 0
-1293 1401 0
-1293 -1304 1399 0
-1293 -1302 1397 0
-1293 -1300 1395 0
-1293 -1299 1393 0
-1292 1399 0
-1292 -1304 1397 0
-1292 -1302 1395 0
-1292 -1300 1393 0
-1292 -1299 1392 0
c ((aux69 + aux70 - aux78)<=0)
1327 -1407 0
1328 -1408 0
1330 -1410 0
1332 -1412 0
1320 -1407 0
1320 1327 -1408 0
1320 1328 -1410 0
1320 1330 -1412 0
1320 1332 -1414 0
1321 -1408 0
1321 1327 -1410 0
1321 1328 -1412 0
1321 1330 -1414 0
1321 1332 -1416 0
1323 -1410 0
1323 1327 -1412 0
1323 1328 -1414 0
1323 1330 -1416 0
1323 1332 -1418 0
1325 -1412 0
1325 1327 -1414 0
1325 1328 -1416 0
1325 1330 -1418 0
1325 1332 -1420 0
c (0<=(aux69 + aux70 - aux78))
-1332 1420 0
-1330 1418 0
-1328 1416 0
-1327 1414 0
-1325 1420 0
-1325 -1332 1418 0
-1325 -1330 1416 0
-1325 -1328 1414 0
-1325 -1327 1412 0
-1323 1418 0
-1323 -1332 1416 0
-1323 -1330 1414 0
-1323 -1328 1412 0
-1323 -1327 1410 0
-1321 1416 0
-1321 -1332 1414 0
-1321 -1330 1412 0
-1321 -1328 1410 0
-1321 -1327 1408 0
-1320 1414 0
-1320 -1332 1412 0
-1320 -1330 1410 0
-1320 -1328 1408 0
-1320 -1327 1407 0
c ((aux72 + aux73 - aux79)<=0)
1348 -1422 0
1349 -1423 0
1351 -1425 0
1353 -1427 0
1341 -1422 0
1341 1348 -1423 0
1341 1349 -1425 0
1341 1351 -1427 0
1341 1353 -1429 0
1342 -1423 0
1342 1348 -1425 0
1342 1349 -1427 0
1342 1351 -1429 0
1342 1353 -1431 0
1344 -1425 0
1344 1348 -1427 0
1344 1349 -1429 0
1344 1351 -1431 0
1344 1353 -1433 0
1346 -1427 0
1346 1348 -1429 0
1346 1349 -1431 0
1346 1351 -1433 0
1346 1353 -1435 0
c (0<=(aux72 + aux73 - aux79))
-1353 1435 0
-1351 1433 0
-1349 1431 0
-1348 1429 0
-1346 1435 0
-1346 -1353 1433 0
-1346 -1351 1431 0
-1346 -1349 1429 0
-1346 -1348 1427 0
-1344 1433 0
-1344 -1353 1431 0
-1344 -1351 1429 0
-1344 -1349 1427 0
-1344 -1348 1425 0
-1342 1431 0
-1342 -1353 1429 0
-1342 -1351 1427 0
-1342 -1349 1425 0
-1342 -1348 1423 0
-1341 1429 0
-1341 -1353 1427 0
-1341 -1351 1425 0
-1341 -1349 1423 0
-1341 -1348 1422 0
c ((aux76 + aux79 - aux80)<=0)
1422 -1437 0
1423 -1438 0
1425 -1440 0
1427 -1442 0
1429 -1444 0
1431 -1446 0
1433 -1448 0
1435 -1450 0
1377 -1437 0
1377 1422 -1438 0
1377 1423 -1440 0
1377 1425 -1442 0
1377 1427 -1444 0
1377 1429 -1446 0
1377 1431 -1448 0
1377 1433 -1450 0
1377 1435 -1452 0
1378 -1438 0
1378 1422 -1440 0
1378 1423 -1442 0
1378 1425 -1444 0
1378 1427 -1446 0
1378 1429 -1448 0
1378 1431 -1450 0
1378 1433 -1452 0
1378 1435 -1454 0
1380 -1440 0
1380 1422 -1442 0
1380 1423 -1444 0
1380 1425 -1446 0
1380 1427 -1448 0
1380 1429 -1450 0
1380 1431 -1452 0
1380 1433 -1454 0
1380 1435 -1456 0
1382 -1442 0
1382 1422 -1444 0
1382 1423 -1446 0
1382 1425 -1448 0
1382 1427 -1450 0
1382 1429 -1452 0
1382 1431 -1454 0
1382 1433 -1456 0
1382 1435 -1458 0
1384 -1444 0
1384 1422 -1446 0
1384 1423 -1448 0
1384 1425 -1450 0
1384 1427 -1452 0
1384 1429 -1454 0
1384 1431 -1456 0
1384 1433 -1458 0
1384 1435 -1460 0
1386 -1446 0
1386 1422 -1448 0
1386 1423 -1450 0
1386 1425 -1452 0
1386 1427 -1454 0
1386 1429 -1456 0
1386 1431 -1458 0
1386 1433 -1460 0
1386 1435 -1462 0
1388 -1448 0
1388 1422 -1450 0
1388 1423 -1452 0
1388 1425 -1454 0
1388 1427 -1456 0
1388 1429 -1458 0
1388 1431 -1460 0
1388 1433 -1462 0
1388 1435 -1464 0
1390 -1450 0
1390 1422 -1452 0
1390 1423 -1454 0
1390 1425 -1456 0
1390 1427 -1458 0
1390 1429 -1460 0
1390 1431 -1462 0
1390 1433 -1464 0
1390 1435 -1466 0
c (0<=(aux76 + aux79 - aux80))
-1435 1466 0
-1433 1464 0
-1431 1462 0
-1429 1460 0
-1427 1458 0
-1425 1456 0
-1423 1454 0
-1422 1452 0
-1390 1466 0
-1390 -1435 1464 0
-1390 -1433 1462 0
-1390 -1431 1460 0
-1390 -1429 1458 0
-1390 -1427 1456 0
-1390 -1425 1454 0
-1390 -1423 1452 0
-1390 -1422 1450 0
-1388 1464 0
-1388 -1435 1462 0
-1388 -1433 1460 0
-1388 -1431 1458 0
-1388 -1429 1456 0
-1388 -1427 1454 0
-1388 -1425 1452 0
-1388 -1423 1450 0
-1388 -1422 1448 0
-1386 1462 0
-1386 -1435 1460 0
-1386 -1433 1458 0
-1386 -1431 1456 0
-1386 -1429 1454 0
-1386 -1427 1452 0
-1386 -1425 1450 0
-1386 -1423 1448 0
-1386 -1422 1446 0
-1384 1460 0
-1384 -1435 1458 0
-1384 -1433 1456 0
-1384 -1431 1454 0
-1384 -1429 1452 0
-1384 -1427 1450 0
-1384 -1425 1448 0
-1384 -1423 1446 0
-1384 -1422 1444 0
-1382 1458 0
-1382 -1435 1456 0
-1382 -1433 1454 0
-1382 -1431 1452 0
-1382 -1429 1450 0
-1382 -1427 1448 0
-1382 -1425 1446 0
-1382 -1423 1444 0
-1382 -1422 1442 0
-1380 1456 0
-1380 -1435 1454 0
-1380 -1433 1452 0
-1380 -1431 1450 0
-1380 -1429 1448 0
-1380 -1427 1446 0
-1380 -1425 1444 0
-1380 -1423 1442 0
-1380 -1422 1440 0
-1378 1454 0
-1378 -1435 1452 0
-1378 -1433 1450 0
-1378 -1431 1448 0
-1378 -1429 1446 0
-1378 -1427 1444 0
-1378 -1425 1442 0
-1378 -1423 1440 0
-1378 -1422 1438 0
-1377 1452 0
-1377 -1435 1450 0
-1377 -1433 1448 0
-1377 -1431 1446 0
-1377 -1429 1444 0
-1377 -1427 1442 0
-1377 -1425 1440 0
-1377 -1423 1438 0
-1377 -1422 1437 0
c ((aux75 + aux77 - aux81)<=0)
1392 -1468 0
1393 -1469 0
1395 -1471 0
1397 -1473 0
1399 -1475 0
1401 -1477 0
1403 -1479 0
1405 -1481 0
1362 -1468 0
1362 1392 -1469 0
1362 1393 -1471 0
1362 1395 -1473 0
1362 1397 -1475 0
1362 1399 -1477 0
1362 1401 -1479 0
1362 1403 -1481 0
1362 1405 -1483 0
1363 -1469 0
1363 1392 -1471 0
1363 1393 -1473 0
1363 1395 -1475 0
1363 1397 -1477 0
1363 1399 -1479 0
1363 1401 -1481 0
1363 1403 -1483 0
1363 1405 -1485 0
1365 -1471 0
1365 1392 -1473 0
1365 1393 -1475 0
1365 1395 -1477 0
1365 1397 -1479 0
1365 1399 -1481 0
1365 1401 -1483 0
1365 1403 -1485 0
1365 1405 -1487 0
1367 -1473 0
1367 1392 -1475 0
1367 1393 -1477 0
1367 1395 -1479 0
1367 1397 -1481 0
1367 1399 -1483 0
1367 1401 -1485 0
1367 1403 -1487 0
1367 1405 -1489 0
1369 -1475 0
1369 1392 -1477 0
1369 1393 -1479 0
1369 1395 -1481 0
1369 1397 -1483 0
1369 1399 -1485 0
1369 1401 -1487 0
1369 1403 -1489 0
1369 1405 -1491 0
1371 -1477 0
1371 1392 -1479 0
1371 1393 -1481 0
1371 1395 -1483 0
1371 1397 -1485 0
1371 1399 -1487 0
1371 1401 -1489 0
1371 1403 -1491 0
1371 1405 -1493 0
1373 -1479 0
1373 1392 -1481 0
1373 1393 -1483 0
1373 1395 -1485 0
1373 1397 -1487 0
1373 1399 -1489 0
1373 1401 -1491 0
1373 1403 -1493 0
1373 1405 -1495 0
1375 -1481 0
1375 1392 -1483 0
1375 1393 -1485 0
1375 1395 -1487 0
1375 1397 -1489 0
1375 1399 -1491 0
1375 1401 -1493 0
1375 1403 -1495 0
1375 1405 -1497 0
c (0<=(aux75 + aux77 - aux81))
-1405 1497 0
-1403 1495 0
-1401 1493 0
-1399 1491 0
-1397 1489 0
-1395 1487 0
-1393 1485 0
-1392 1483 0
-1375 1497 0
-1375 -1405 1495 0
-1375 -1403 1493 0
-1375 -1401 1491 0
-1375 -1399 1489 0
-1375 -1397 1487 0
-1375 -1395 1485 0
-1375 -1393 1483 0
-1375 -1392 1481 0
-1373 1495 0
-1373 -1405 1493 0
-1373 -1403 1491 0
-1373 -1401 1489 0
-1373 -1399 1487 0
-1373 -1397 1485 0
-1373 -1395 1483 0
-1373 -1393 1481 0
-1373 -1392 1479 0
-1371 1493 0
-1371 -1405 1491 0
-1371 -1403 1489 0
-1371 -1401 1487 0
-1371 -1399 1485 0
-1371 -1397 1483 0
-1371 -1395 1481 0
-1371 -1393 1479 0
-1371 -1392 1477 0
-1369 1491 0
-1369 -1405 1489 0
-1369 -1403 1487 0
-1369 -1401 1485 0
-1369 -1399 1483 0
-1369 -1397 1481 0
-1369 -1395 1479 0
-1369 -1393 1477 0
-1369 -1392 1475 0
-1367 1489 0
-1367 -1405 1487 0
-1367 -1403 1485 0
-1367 -1401 1483 0
-1367 -1399 1481 0
-1367 -1397 1479 0
-1367 -1395 1477 0
-1367 -1393 1475 0
-1367 -1392 1473 0
-1365 1487 0
-1365 -1405 1485 0
-1365 -1403 1483 0
-1365 -1401 1481 0
-1365 -1399 1479 0
-1365 -1397 1477 0
-1365 -1395 1475 0
-1365 -1393 1473 0
-1365 -1392 1471 0
-1363 1485 0
-1363 -1405 1483 0
-1363 -1403 1481 0
-1363 -1401 1479 0
-1363 -1399 1477 0
-1363 -1397 1475 0
-1363 -1395 1473 0
-1363 -1393 1471 0
-1363 -1392 1469 0
-1362 1483 0
-1362 -1405 1481 0
-1362 -1403 1479 0
-1362 -1401 1477 0
-1362 -1399 1475 0
-1362 -1397 1473 0
-1362 -1395 1471 0
-1362 -1393 1469 0
-1362 -1392 1468 0
c ((SATLiteral(505) - aux82 + SATLiteral(92))<=0)
-92 -1499 0
-505 -1499 0
-505 -92 -1500 0
c (0<=(SATLiteral(505) - aux82 + SATLiteral(92)))
92 1500 0
505 1500 0
505 92 1499 0
c ((SATLiteral(523) - aux83 + SATLiteral(75))<=0)
-75 -1502 0
-523 -1502 0
-523 -75 -1503 0
c (0<=(SATLiteral(523) - aux83 + SATLiteral(75)))
75 1503 0
523 1503 0
523 75 1502 0
c ((SATLiteral(558) - aux84 + SATLiteral(58))<=0)
-58 -1505 0
-558 -1505 0
-558 -58 -1506 0
c (0<=(SATLiteral(558) - aux84 + SATLiteral(58)))
58 1506 0
558 1506 0
558 58 1505 0
c ((SATLiteral(351) - aux85 + SATLiteral(41))<=0)
-41 -1508 0
-351 -1508 0
-351 -41 -1509 0
c (0<=(SATLiteral(351) - aux85 + SATLiteral(41)))
41 1509 0
351 1509 0
351 41 1508 0
c ((SATLiteral(610) - aux86 + SATLiteral(24))<=0)
-24 -1511 0
-610 -1511 0
-610 -24 -1512 0
c (0<=(SATLiteral(610) - aux86 + SATLiteral(24)))
24 1512 0
610 1512 0
610 24 1511 0
c (( - aux87 + SATLiteral(454) + SATLiteral(7))<=0)
-7 -1514 0
-454 -1514 0
-454 -7 -1515 0
c (0<=( - aux87 + SATLiteral(454) + SATLiteral(7)))
7 1515 0
454 1515 0
454 7 1514 0
c ((SATLiteral(627) - aux88 + SATLiteral(471))<=0)
-471 -1517 0
-627 -1517 0
-627 -471 -1518 0
c (0<=(SATLiteral(627) - aux88 + SATLiteral(471)))
471 1518 0
627 1518 0
627 471 1517 0
c ((SATLiteral(368) - aux89 + SATLiteral(488))<=0)
-488 -1520 0
-368 -1520 0
-368 -488 -1521 0
c (0<=(SATLiteral(368) - aux89 + SATLiteral(488)))
488 1521 0
368 1521 0
368 488 1520 0
c ((SATLiteral(644) + SATLiteral(661) - aux90)<=0)
-661 -1523 0
-644 -1523 0
-644 -661 -1524 0
c (0<=(SATLiteral(644) + SATLiteral(661) - aux90))
661 1524 0
644 1524 0
644 661 1523 0
c ((SATLiteral(299) - aux91 + SATLiteral(437))<=0)
-437 -1526 0
-299 -1526 0
-299 -437 -1527 0
c (0<=(SATLiteral(299) - aux91 + SATLiteral(437)))
437 1527 0
299 1527 0
299 437 1526 0
c ((SATLiteral(109) - aux92 + SATLiteral(420))<=0)
-420 -1529 0
-109 -1529 0
-109 -420 -1530 0
c (0<=(SATLiteral(109) - aux92 + SATLiteral(420)))
420 1530 0
109 1530 0
109 420 1529 0
c ((SATLiteral(678) - aux93 + SATLiteral(403))<=0)
-403 -1532 0
-678 -1532 0
-678 -403 -1533 0
c (0<=(SATLiteral(678) - aux93 + SATLiteral(403)))
403 1533 0
678 1533 0
678 403 1532 0
c ((SATLiteral(180) - aux94 + SATLiteral(386))<=0)
-386 -1535 0
-180 -1535 0
-180 -386 -1536 0
c (0<=(SATLiteral(180) - aux94 + SATLiteral(386)))
386 1536 0
180 1536 0
180 386 1535 0
c ((SATLiteral(127) + SATLiteral(282) - aux95)<=0)
-282 -1538 0
-127 -1538 0
-127 -282 -1539 0
c (0<=(SATLiteral(127) + SATLiteral(282) - aux95))
282 1539 0
127 1539 0
127 282 1538 0
c ((SATLiteral(197) + SATLiteral(265) - aux96)<=0)
-265 -1541 0
-197 -1541 0
-197 -265 -1542 0
c (0<=(SATLiteral(197) + SATLiteral(265) - aux96))
265 1542 0
197 1542 0
197 265 1541 0
c ((SATLiteral(214) + SATLiteral(248) - aux97)<=0)
-248 -1544 0
-214 -1544 0
-214 -248 -1545 0
c (0<=(SATLiteral(214) + SATLiteral(248) - aux97))
248 1545 0
214 1545 0
214 248 1544 0
c ((SATLiteral(540) + SATLiteral(231) - aux98)<=0)
-231 -1547 0
-540 -1547 0
-540 -231 -1548 0
c (0<=(SATLiteral(540) + SATLiteral(231) - aux98))
231 1548 0
540 1548 0
540 231 1547 0
c ((SATLiteral(317) + SATLiteral(144) - aux99)<=0)
-144 -1550 0
-317 -1550 0
-317 -144 -1551 0
c (0<=(SATLiteral(317) + SATLiteral(144) - aux99))
144 1551 0
317 1551 0
317 144 1550 0
c ((SATLiteral(334) - aux100 + SATLiteral(162))<=0)
-162 -1553 0
-334 -1553 0
-334 -162 -1554 0
c (0<=(SATLiteral(334) - aux100 + SATLiteral(162)))
162 1554 0
334 1554 0
334 162 1553 0
c (( - aux101 + SATLiteral(576) + SATLiteral(593))<=0)
-593 -1556 0
-576 -1556 0
-576 -593 -1557 0
c (0<=( - aux101 + SATLiteral(576) + SATLiteral(593)))
593 1557 0
576 1557 0
576 593 1556 0
c ((aux101 - aux102 + aux89)<=0)
1520 -1559 0
1521 -1560 0
1556 -1559 0
1556 1520 -1560 0
1556 1521 -1562 0
1557 -1560 0
1557 1520 -1562 0
1557 1521 -1564 0
c (0<=(aux101 - aux102 + aux89))
-1521 1564 0
-1520 1562 0
-1557 1564 0
-1557 -1521 1562 0
-1557 -1520 1560 0
-1556 1562 0
-1556 -1521 1560 0
-1556 -1520 1559 0
c (( - aux103 + aux83 + aux96)<=0)
1541 -1566 0
1542 -1567 0
1502 -1566 0
1502 1541 -1567 0
1502 1542 -1569 0
1503 -1567 0
1503 1541 -1569 0
1503 1542 -1571 0
c (0<=( - aux103 + aux83 + aux96))
-1542 1571 0
-1541 1569 0
-1503 1571 0
-1503 -1542 1569 0
-1503 -1541 1567 0
-1502 1569 0
-1502 -1542 1567 0
-1502 -1541 1566 0
c (( - aux104 + aux82 + aux87)<=0)
1514 -1573 0
1515 -1574 0
1499 -1573 0
1499 1514 -1574 0
1499 1515 -1576 0
1500 -1574 0
1500 1514 -1576 0
1500 1515 -1578 0
c (0<=( - aux104 + aux82 + aux87))
-1515 1578 0
-1514 1576 0
-1500 1578 0
-1500 -1515 1576 0
-1500 -1514 1574 0
-1499 1576 0
-1499 -1515 1574 0
-1499 -1514 1573 0
c (( - aux105 + aux84 + aux85)<=0)
1508 -1580 0
1509 -1581 0
1505 -1580 0
1505 1508 -1581 0
1505 1509 -1583 0
1506 -1581 0
1506 1508 -1583 0
1506 1509 -1585 0
c (0<=( - aux105 + aux84 + aux85))
-1509 1585 0
-1508 1583 0
-1506 1585 0
-1506 -1509 1583 0
-1506 -1508 1581 0
-1505 1583 0
-1505 -1509 1581 0
-1505 -1508 1580 0
c (( - aux106 + aux86 + aux88)<=0)
1517 -1587 0
1518 -1588 0
1511 -1587 0
1511 1517 -1588 0
1511 1518 -1590 0
1512 -1588 0
1512 1517 -1590 0
1512 1518 -1592 0
c (0<=( - aux106 + aux86 + aux88))
-1518 1592 0
-1517 1590 0
-1512 1592 0
-1512 -1518 1590 0
-1512 -1517 1588 0
-1511 1590 0
-1511 -1518 1588 0
-1511 -1517 1587 0
c (( - aux107 + aux95 + aux99)<=0)
1550 -1594 0
1551 -1595 0
1538 -1594 0
1538 1550 -1595 0
1538 1551 -1597 0
1539 -1595 0
1539 1550 -1597 0
1539 1551 -1599 0
c (0<=( - aux107 + aux95 + aux99))
-1551 1599 0
-1550 1597 0
-1539 1599 0
-1539 -1551 1597 0
-1539 -1550 1595 0
-1538 1597 0
-1538 -1551 1595 0
-1538 -1550 1594 0
c (( - aux108 + aux91 + aux92)<=0)
1529 -1601 0
1530 -1602 0
1526 -1601 0
1526 1529 -1602 0
1526 1530 -1604 0
1527 -1602 0
1527 1529 -1604 0
1527 1530 -1606 0
c (0<=( - aux108 + aux91 + aux92))
-1530 1606 0
-1529 1604 0
-1527 1606 0
-1527 -1530 1604 0
-1527 -1529 1602 0
-1526 1604 0
-1526 -1530 1602 0
-1526 -1529 1601 0
c (( - aux109 + aux93 + aux94)<=0)
1535 -1608 0
1536 -1609 0
1532 -1608 0
1532 1535 -1609 0
1532 1536 -1611 0
1533 -1609 0
1533 1535 -1611 0
1533 1536 -1613 0
c (0<=( - aux109 + aux93 + aux94))
-1536 1613 0
-1535 1611 0
-1533 1613 0
-1533 -1536 1611 0
-1533 -1535 1609 0
-1532 1611 0
-1532 -1536 1609 0
-1532 -1535 1608 0
c ((aux100 - aux110 + aux97)<=0)
1544 -1615 0
1545 -1616 0
1553 -1615 0
1553 1544 -1616 0
1553 1545 -1618 0
1554 -1616 0
1554 1544 -1618 0
1554 1545 -1620 0
c (0<=(aux100 - aux110 + aux97))
-1545 1620 0
-1544 1618 0
-1554 1620 0
-1554 -1545 1618 0
-1554 -1544 1616 0
-1553 1618 0
-1553 -1545 1616 0
-1553 -1544 1615 0
c (( - aux111 + aux90 + aux98)<=0)
1547 -1622 0
1548 -1623 0
1523 -1622 0
1523 1547 -1623 0
1523 1548 -1625 0
1524 -1623 0
1524 1547 -1625 0
1524 1548 -1627 0
c (0<=( - aux111 + aux90 + aux98))
-1548 1627 0
-1547 1625 0
-1524 1627 0
-1524 -1548 1625 0
-1524 -1547 1623 0
-1523 1625 0
-1523 -1548 1623 0
-1523 -1547 1622 0
c ((aux105 + aux111 - aux112)<=0)
1622 -1629 0
1623 -1630 0
1625 -1632 0
1627 -1634 0
1580 -1629 0
1580 1622 -1630 0
1580 1623 -1632 0
1580 1625 -1634 0
1580 1627 -1636 0
1581 -1630 0
1581 1622 -1632 0
1581 1623 -1634 0
1581 1625 -1636 0
1581 1627 -1638 0
1583 -1632 0
1583 1622 -1634 0
1583 1623 -1636 0
1583 1625 -1638 0
1583 1627 -1640 0
1585 -1634 0
1585 1622 -1636 0
1585 1623 -1638 0
1585 1625 -1640 0
1585 1627 -1642 0
c (0<=(aux105 + aux111 - aux112))
-1627 1642 0
-1625 1640 0
-1623 1638 0
-1622 1636 0
-1585 1642 0
-1585 -1627 1640 0
-1585 -1625 1638 0
-1585 -1623 1636 0
-1585 -1622 1634 0
-1583 1640 0
-1583 -1627 1638 0
-1583 -1625 1636 0
-1583 -1623 1634 0
-1583 -1622 1632 0
-1581 1638 0
-1581 -1627 1636 0
-1581 -1625 1634 0
-1581 -1623 1632 0
-1581 -1622 1630 0
-1580 1636 0
-1580 -1627 1634 0
-1580 -1625 1632 0
-1580 -1623 1630 0
-1580 -1622 1629 0
c ((aux104 + aux108 - aux113)<=0)
1601 -1644 0
1602 -1645 0
1604 -1647 0
1606 -1649 0
1573 -1644 0
1573 1601 -1645 0
1573 1602 -1647 0
1573 1604 -1649 0
1573 1606 -1651 0
1574 -1645 0
1574 1601 -1647 0
1574 1602 -1649 0
1574 1604 -1651 0
1574 1606 -1653 0
1576 -1647 0
1576 1601 -1649 0
1576 1602 -1651 0
1576 1604 -1653 0
1576 1606 -1655 0
1578 -1649 0
1578 1601 -1651 0
1578 1602 -1653 0
1578 1604 -1655 0
1578 1606 -1657 0
c (0<=(aux104 + aux108 - aux113))
-1606 1657 0
-1604 1655 0
-1602 1653 0
-1601 1651 0
-1578 1657 0
-1578 -1606 1655 0
-1578 -1604 1653 0
-1578 -1602 1651 0
-1578 -1601 1649 0
-1576 1655 0
-1576 -1606 1653 0
-1576 -1604 1651 0
-1576 -1602 1649 0
-1576 -1601 1647 0
-1574 1653 0
-1574 -1606 1651 0
-1574 -1604 1649 0
-1574 -1602 1647 0
-1574 -1601 1645 0
-1573 1651 0
-1573 -1606 1649 0
-1573 -1604 1647 0
-1573 -1602 1645 0
-1573 -1601 1644 0
c ((aux102 + aux103 - aux114)<=0)
1566 -1659 0
1567 -1660 0
1569 -1662 0
1571 -1664 0
1559 -1659 0
1559 1566 -1660 0
1559 1567 -1662 0
1559 1569 -1664 0
1559 1571 -1666 0
1560 -1660 0
1560 1566 -1662 0
1560 1567 -1664 0
1560 1569 -1666 0
1560 1571 -1668 0
1562 -1662 0
1562 1566 -1664 0
1562 1567 -1666 0
1562 1569 -1668 0
1562 1571 -1670 0
1564 -1664 0
1564 1566 -1666 0
1564 1567 -1668 0
1564 1569 -1670 0
1564 1571 -1672 0
c (0<=(aux102 + aux103 - aux114))
-1571 1672 0
-1569 1670 0
-1567 1668 0
-1566 1666 0
-1564 1672 0
-1564 -1571 1670 0
-1564 -1569 1668 0
-1564 -1567 1666 0
-1564 -1566 1664 0
-1562 1670 0
-1562 -1571 1668 0
-1562 -1569 1666 0
-1562 -1567 1664 0
-1562 -1566 1662 0
-1560 1668 0
-1560 -1571 1666 0
-1560 -1569 1664 0
-1560 -1567 1662 0
-1560 -1566 1660 0
-1559 1666 0
-1559 -1571 1664 0
-1559 -1569 1662 0
-1559 -1567 1660 0
-1559 -1566 1659 0
c ((aux106 + aux107 - aux115)<=0)
1594 -1674 0
1595 -1675 0
1597 -1677 0
1599 -1679 0
1587 -1674 0
1587 1594 -1675 0
1587 1595 -1677 0
1587 1597 -1679 0
1587 1599 -1681 0
1588 -1675 0
1588 1594 -1677 0
1588 1595 -1679 0
1588 1597 -1681 0
1588 1599 -1683 0
1590 -1677 0
1590 1594 -1679 0
1590 1595 -1681 0
1590 1597 -1683 0
1590 1599 -1685 0
1592 -1679 0
1592 1594 -1681 0
1592 1595 -1683 0
1592 1597 -1685 0
1592 1599 -1687 0
c (0<=(aux106 + aux107 - aux115))
-1599 1687 0
-1597 1685 0
-1595 1683 0
-1594 1681 0
-1592 1687 0
-1592 -1599 1685 0
-1592 -1597 1683 0
-1592 -1595 1681 0
-1592 -1594 1679 0
-1590 1685 0
-1590 -1599 1683 0
-1590 -1597 1681 0
-1590 -1595 1679 0
-1590 -1594 1677 0
-1588 1683 0
-1588 -1599 1681 0
-1588 -1597 1679 0
-1588 -1595 1677 0
-1588 -1594 1675 0
-1587 1681 0
-1587 -1599 1679 0
-1587 -1597 1677 0
-1587 -1595 1675 0
-1587 -1594 1674 0
c ((aux109 + aux110 - aux116)<=0)
1615 -1689 0
1616 -1690 0
1618 -1692 0
1620 -1694 0
1608 -1689 0
1608 1615 -1690 0
1608 1616 -1692 0
1608 1618 -1694 0
1608 1620 -1696 0
1609 -1690 0
1609 1615 -1692 0
1609 1616 -1694 0
1609 1618 -1696 0
1609 1620 -1698 0
1611 -1692 0
1611 1615 -1694 0
1611 1616 -1696 0
1611 1618 -1698 0
1611 1620 -1700 0
1613 -1694 0
1613 1615 -1696 0
1613 1616 -1698 0
1613 1618 -1700 0
1613 1620 -1702 0
c (0<=(aux109 + aux110 - aux116))
-1620 1702 0
-1618 1700 0
-1616 1698 0
-1615 1696 0
-1613 1702 0
-1613 -1620 1700 0
-1613 -1618 1698 0
-1613 -1616 1696 0
-1613 -1615 1694 0
-1611 1700 0
-1611 -1620 1698 0
-1611 -1618 1696 0
-1611 -1616 1694 0
-1611 -1615 1692 0
-1609 1698 0
-1609 -1620 1696 0
-1609 -1618 1694 0
-1609 -1616 1692 0
-1609 -1615 1690 0
-1608 1696 0
-1608 -1620 1694 0
-1608 -1618 1692 0
-1608 -1616 1690 0
-1608 -1615 1689 0
c ((aux113 + aux116 - aux117)<=0)
1689 -1704 0
1690 -1705 0
1692 -1707 0
1694 -1709 0
1696 -1711 0
1698 -1713 0
1700 -1715 0
1702 -1717 0
1644 -1704 0
1644 1689 -1705 0
1644 1690 -1707 0
1644 1692 -1709 0
1644 1694 -1711 0
1644 1696 -1713 0
1644 1698 -1715 0
1644 1700 -1717 0
1644 1702 -1719 0
1645 -1705 0
1645 1689 -1707 0
1645 1690 -1709 0
1645 1692 -1711 0
1645 1694 -1713 0
1645 1696 -1715 0
1645 1698 -1717 0
1645 1700 -1719 0
1645 1702 -1721 0
1647 -1707 0
1647 1689 -1709 0
1647 1690 -1711 0
1647 1692 -1713 0
1647 1694 -1715 0
1647 1696 -1717 0
1647 1698 -1719 0
1647 1700 -1721 0
1647 1702 -1723 0
1649 -1709 0
1649 1689 -1711 0
1649 1690 -1713 0
1649 1692 -1715 0
1649 1694 -1717 0
1649 1696 -1719 0
1649 1698 -1721 0
1649 1700 -1723 0
1649 1702 -1725 0
1651 -1711 0
1651 1689 -1713 0
1651 1690 -1715 0
1651 1692 -1717 0
1651 1694 -1719 0
1651 1696 -1721 0
1651 1698 -1723 0
1651 1700 -1725 0
1651 1702 -1727 0
1653 -1713 0
1653 1689 -1715 0
1653 1690 -1717 0
1653 1692 -1719 0
1653 1694 -1721 0
1653 1696 -1723 0
1653 1698 -1725 0
1653 1700 -1727 0
1653 1702 -1729 0
1655 -1715 0
1655 1689 -1717 0
1655 1690 -1719 0
1655 1692 -1721 0
1655 1694 -1723 0
1655 1696 -1725 0
1655 1698 -1727 0
1655 1700 -1729 0
1655 1702 -1731 0
1657 -1717 0
1657 1689 -1719 0
1657 1690 -1721 0
1657 1692 -1723 0
1657 1694 -1725 0
1657 1696 -1727 0
1657 1698 -1729 0
1657 1700 -1731 0
1657 1702 -1733 0
c (0<=(aux113 + aux116 - aux117))
-1702 1733 0
-1700 1731 0
-1698 1729 0
-1696 1727 0
-1694 1725 0
-1692 1723 0
-1690 1721 0
-1689 1719 0
-1657 1733 0
-1657 -1702 1731 0
-1657 -1700 1729 0
-1657 -1698 1727 0
-1657 -1696 1725 0
-1657 -1694 1723 0
-1657 -1692 1721 0
-1657 -1690 1719 0
-1657 -1689 1717 0
-1655 1731 0
-1655 -1702 1729 0
-1655 -1700 1727 0
-1655 -1698 1725 0
-1655 -1696 1723 0
-1655 -1694 1721 0
-1655 -1692 1719 0
-1655 -1690 1717 0
-1655 -1689 1715 0
-1653 1729 0
-1653 -1702 1727 0
-1653 -1700 1725 0
-1653 -1698 1723 0
-1653 -1696 1721 0
-1653 -1694 1719 0
-1653 -1692 1717 0
-1653 -1690 1715 0
-1653 -1689 1713 0
-1651 1727 0
-1651 -1702 1725 0
-1651 -1700 1723 0
-1651 -1698 1721 0
-1651 -1696 1719 0
-1651 -1694 1717 0
-1651 -1692 1715 0
-1651 -1690 1713 0
-1651 -1689 1711 0
-1649 1725 0
-1649 -1702 1723 0
-1649 -1700 1721 0
-1649 -1698 1719 0
-1649 -1696 1717 0
-1649 -1694 1715 0
-1649 -1692 1713 0
-1649 -1690 1711 0
-1649 -1689 1709 0
-1647 1723 0
-1647 -1702 1721 0
-1647 -1700 1719 0
-1647 -1698 1717 0
-1647 -1696 1715 0
-1647 -1694 1713 0
-1647 -1692 1711 0
-1647 -1690 1709 0
-1647 -1689 1707 0
-1645 1721 0
-1645 -1702 1719 0
-1645 -1700 1717 0
-1645 -1698 1715 0
-1645 -1696 1713 0
-1645 -1694 1711 0
-1645 -1692 1709 0
-1645 -1690 1707 0
-1645 -1689 1705 0
-1644 1719 0
-1644 -1702 1717 0
-1644 -1700 1715 0
-1644 -1698 1713 0
-1644 -1696 1711 0
-1644 -1694 1709 0
-1644 -1692 1707 0
-1644 -1690 1705 0
-1644 -1689 1704 0
c ((aux112 + aux114 - aux118)<=0)
1659 -1735 0
1660 -1736 0
1662 -1738 0
1664 -1740 0
1666 -1742 0
1668 -1744 0
1670 -1746 0
1672 -1748 0
1629 -1735 0
1629 1659 -1736 0
1629 1660 -1738 0
1629 1662 -1740 0
1629 1664 -1742 0
1629 1666 -1744 0
1629 1668 -1746 0
1629 1670 -1748 0
1629 1672 -1750 0
1630 -1736 0
1630 1659 -1738 0
1630 1660 -1740 0
1630 1662 -1742 0
1630 1664 -1744 0
1630 1666 -1746 0
1630 1668 -1748 0
1630 1670 -1750 0
1630 1672 -1752 0
1632 -1738 0
1632 1659 -1740 0
1632 1660 -1742 0
1632 1662 -1744 0
1632 1664 -1746 0
1632 1666 -1748 0
1632 1668 -1750 0
1632 1670 -1752 0
1632 1672 -1754 0
1634 -1740 0
1634 1659 -1742 0
1634 1660 -1744 0
1634 1662 -1746 0
1634 1664 -1748 0
1634 1666 -1750 0
1634 1668 -1752 0
1634 1670 -1754 0
1634 1672 -1756 0
1636 -1742 0
1636 1659 -1744 0
1636 1660 -1746 0
1636 1662 -1748 0
1636 1664 -1750 0
1636 1666 -1752 0
1636 1668 -1754 0
1636 1670 -1756 0
1636 1672 -1758 0
1638 -1744 0
1638 1659 -1746 0
1638 1660 -1748 0
1638 1662 -1750 0
1638 1664 -1752 0
1638 1666 -1754 0
1638 1668 -1756 0
1638 1670 -1758 0
1638 1672 -1760 0
1640 -1746 0
1640 1659 -1748 0
1640 1660 -1750 0
1640 1662 -1752 0
1640 1664 -1754 0
1640 1666 -1756 0
1640 1668 -1758 0
1640 1670 -1760 0
1640 1672 -1762 0
1642 -1748 0
1642 1659 -1750 0
1642 1660 -1752 0
1642 1662 -1754 0
1642 1664 -1756 0
1642 1666 -1758 0
1642 1668 -1760 0
1642 1670 -1762 0
1642 1672 -1764 0
c (0<=(aux112 + aux114 - aux118))
-1672 1764 0
-1670 1762 0
-1668 1760 0
-1666 1758 0
-1664 1756 0
-1662 1754 0
-1660 1752 0
-1659 1750 0
-1642 1764 0
-1642 -1672 1762 0
-1642 -1670 1760 0
-1642 -1668 1758 0
-1642 -1666 1756 0
-1642 -1664 1754 0
-1642 -1662 1752 0
-1642 -1660 1750 0
-1642 -1659 1748 0
-1640 1762 0
-1640 -1672 1760 0
-1640 -1670 1758 0
-1640 -1668 1756 0
-1640 -1666 1754 0
-1640 -1664 1752 0
-1640 -1662 1750 0
-1640 -1660 1748 0
-1640 -1659 1746 0
-1638 1760 0
-1638 -1672 1758 0
-1638 -1670 1756 0
-1638 -1668 1754 0
-1638 -1666 1752 0
-1638 -1664 1750 0
-1638 -1662 1748 0
-1638 -1660 1746 0
-1638 -1659 1744 0
-1636 1758 0
-1636 -1672 1756 0
-1636 -1670 1754 0
-1636 -1668 1752 0
-1636 -1666 1750 0
-1636 -1664 1748 0
-1636 -1662 1746 0
-1636 -1660 1744 0
-1636 -1659 1742 0
-1634 1756 0
-1634 -1672 1754 0
-1634 -1670 1752 0
-1634 -1668 1750 0
-1634 -1666 1748 0
-1634 -1664 1746 0
-1634 -1662 1744 0
-1634 -1660 1742 0
-1634 -1659 1740 0
-1632 1754 0
-1632 -1672 1752 0
-1632 -1670 1750 0
-1632 -1668 1748 0
-1632 -1666 1746 0
-1632 -1664 1744 0
-1632 -1662 1742 0
-1632 -1660 1740 0
-1632 -1659 1738 0
-1630 1752 0
-1630 -1672 1750 0
-1630 -1670 1748 0
-1630 -1668 1746 0
-1630 -1666 1744 0
-1630 -1664 1742 0
-1630 -1662 1740 0
-1630 -1660 1738 0
-1630 -1659 1736 0
-1629 1750 0
-1629 -1672 1748 0
-1629 -1670 1746 0
-1629 -1668 1744 0
-1629 -1666 1742 0
-1629 -1664 1740 0
-1629 -1662 1738 0
-1629 -1660 1736 0
-1629 -1659 1735 0
c ((SATLiteral(507) - aux119 + SATLiteral(94))<=0)
-94 -1766 0
-507 -1766 0
-507 -94 -1767 0
c (0<=(SATLiteral(507) - aux119 + SATLiteral(94)))
94 1767 0
507 1767 0
507 94 1766 0
c ((SATLiteral(525) - aux120 + SATLiteral(77))<=0)
-77 -1769 0
-525 -1769 0
-525 -77 -1770 0
c (0<=(SATLiteral(525) - aux120 + SATLiteral(77)))
77 1770 0
525 1770 0
525 77 1769 0
c ((SATLiteral(560) - aux121 + SATLiteral(60))<=0)
-60 -1772 0
-560 -1772 0
-560 -60 -1773 0
c (0<=(SATLiteral(560) - aux121 + SATLiteral(60)))
60 1773 0
560 1773 0
560 60 1772 0
c ((SATLiteral(353) - aux122 + SATLiteral(43))<=0)
-43 -1775 0
-353 -1775 0
-353 -43 -1776 0
c (0<=(SATLiteral(353) - aux122 + SATLiteral(43)))
43 1776 0
353 1776 0
353 43 1775 0
c (( - aux123 + SATLiteral(612) + SATLiteral(26))<=0)
-26 -1778 0
-612 -1778 0
-612 -26 -1779 0
c (0<=( - aux123 + SATLiteral(612) + SATLiteral(26)))
26 1779 0
612 1779 0
612 26 1778 0
c (( - aux124 + SATLiteral(456) + SATLiteral(9))<=0)
-9 -1781 0
-456 -1781 0
-456 -9 -1782 0
c (0<=( - aux124 + SATLiteral(456) + SATLiteral(9)))
9 1782 0
456 1782 0
456 9 1781 0
c (( - aux125 + SATLiteral(629) + SATLiteral(473))<=0)
-473 -1784 0
-629 -1784 0
-629 -473 -1785 0
c (0<=( - aux125 + SATLiteral(629) + SATLiteral(473)))
473 1785 0
629 1785 0
629 473 1784 0
c ((SATLiteral(370) - aux126 + SATLiteral(490))<=0)
-490 -1787 0
-370 -1787 0
-370 -490 -1788 0
c (0<=(SATLiteral(370) - aux126 + SATLiteral(490)))
490 1788 0
370 1788 0
370 490 1787 0
c (( - aux127 + SATLiteral(646) + SATLiteral(663))<=0)
-663 -1790 0
-646 -1790 0
-646 -663 -1791 0
c (0<=( - aux127 + SATLiteral(646) + SATLiteral(663)))
663 1791 0
646 1791 0
646 663 1790 0
c ((SATLiteral(301) - aux128 + SATLiteral(439))<=0)
-439 -1793 0
-301 -1793 0
-301 -439 -1794 0
c (0<=(SATLiteral(301) - aux128 + SATLiteral(439)))
439 1794 0
301 1794 0
301 439 1793 0
c (( - aux129 + SATLiteral(111) + SATLiteral(422))<=0)
-422 -1796 0
-111 -1796 0
-111 -422 -1797 0
c (0<=( - aux129 + SATLiteral(111) + SATLiteral(422)))
422 1797 0
111 1797 0
111 422 1796 0
c (( - aux130 + SATLiteral(680) + SATLiteral(405))<=0)
-405 -1799 0
-680 -1799 0
-680 -405 -1800 0
c (0<=( - aux130 + SATLiteral(680) + SATLiteral(405)))
405 1800 0
680 1800 0
680 405 1799 0
c (( - aux131 + SATLiteral(182) + SATLiteral(388))<=0)
-388 -1802 0
-182 -1802 0
-182 -388 -1803 0
c (0<=( - aux131 + SATLiteral(182) + SATLiteral(388)))
388 1803 0
182 1803 0
182 388 1802 0
c (( - aux132 + SATLiteral(129) + SATLiteral(284))<=0)
-284 -1805 0
-129 -1805 0
-129 -284 -1806 0
c (0<=( - aux132 + SATLiteral(129) + SATLiteral(284)))
284 1806 0
129 1806 0
129 284 1805 0
c (( - aux133 + SATLiteral(199) + SATLiteral(267))<=0)
-267 -1808 0
-199 -1808 0
-199 -267 -1809 0
c (0<=( - aux133 + SATLiteral(199) + SATLiteral(267)))
267 1809 0
199 1809 0
199 267 1808 0
c (( - aux134 + SATLiteral(216) + SATLiteral(250))<=0)
-250 -1811 0
-216 -1811 0
-216 -250 -1812 0
c (0<=( - aux134 + SATLiteral(216) + SATLiteral(250)))
250 1812 0
216 1812 0
216 250 1811 0
c ((SATLiteral(542) - aux135 + SATLiteral(233))<=0)
-233 -1814 0
-542 -1814 0
-542 -233 -1815 0
c (0<=(SATLiteral(542) - aux135 + SATLiteral(233)))
233 1815 0
542 1815 0
542 233 1814 0
c ((SATLiteral(319) - aux136 + SATLiteral(146))<=0)
-146 -1817 0
-319 -1817 0
-319 -146 -1818 0
c (0<=(SATLiteral(319) - aux136 + SATLiteral(146)))
146 1818 0
319 1818 0
319 146 1817 0
c ((SATLiteral(336) - aux137 + SATLiteral(164))<=0)
-164 -1820 0
-336 -1820 0
-336 -164 -1821 0
c (0<=(SATLiteral(336) - aux137 + SATLiteral(164)))
164 1821 0
336 1821 0
336 164 1820 0
c (( - aux138 + SATLiteral(578) + SATLiteral(595))<=0)
-595 -1823 0
-578 -1823 0
-578 -595 -1824 0
c (0<=( - aux138 + SATLiteral(578) + SATLiteral(595)))
595 1824 0
578 1824 0
578 595 1823 0
c ((aux126 + aux138 - aux139)<=0)
1823 -1826 0
1824 -1827 0
1787 -1826 0
1787 1823 -1827 0
1787 1824 -1829 0
1788 -1827 0
1788 1823 -1829 0
1788 1824 -1831 0
c (0<=(aux126 + aux138 - aux139))
-1824 1831 0
-1823 1829 0
-1788 1831 0
-1788 -1824 1829 0
-1788 -1823 1827 0
-1787 1829 0
-1787 -1824 1827 0
-1787 -1823 1826 0
c ((aux120 + aux133 - aux140)<=0)
1808 -1833 0
1809 -1834 0
1769 -1833 0
1769 1808 -1834 0
1769 1809 -1836 0
1770 -1834 0
1770 1808 -1836 0
1770 1809 -1838 0
c (0<=(aux120 + aux133 - aux140))
-1809 1838 0
-1808 1836 0
-1770 1838 0
-1770 -1809 1836 0
-1770 -1808 1834 0
-1769 1836 0
-1769 -1809 1834 0
-1769 -1808 1833 0
c ((aux119 + aux124 - aux141)<=0)
1781 -1840 0
1782 -1841 0
1766 -1840 0
1766 1781 -1841 0
1766 1782 -1843 0
1767 -1841 0
1767 1781 -1843 0
1767 1782 -1845 0
c (0<=(aux119 + aux124 - aux141))
-1782 1845 0
-1781 1843 0
-1767 1845 0
-1767 -1782 1843 0
-1767 -1781 1841 0
-1766 1843 0
-1766 -1782 1841 0
-1766 -1781 1840 0
c ((aux121 + aux122 - aux142)<=0)
1775 -1847 0
1776 -1848 0
1772 -1847 0
1772 1775 -1848 0
1772 1776 -1850 0
1773 -1848 0
1773 1775 -1850 0
1773 1776 -1852 0
c (0<=(aux121 + aux122 - aux142))
-1776 1852 0
-1775 1850 0
-1773 1852 0
-1773 -1776 1850 0
-1773 -1775 1848 0
-1772 1850 0
-1772 -1776 1848 0
-1772 -1775 1847 0
c ((aux123 + aux125 - aux143)<=0)
1784 -1854 0
1785 -1855 0
1778 -1854 0
1778 1784 -1855 0
1778 1785 -1857 0
1779 -1855 0
1779 1784 -1857 0
1779 1785 -1859 0
c (0<=(aux123 + aux125 - aux143))
-1785 1859 0
-1784 1857 0
-1779 1859 0
-1779 -1785 1857 0
-1779 -1784 1855 0
-1778 1857 0
-1778 -1785 1855 0
-1778 -1784 1854 0
c ((aux132 + aux136 - aux144)<=0)
1817 -1861 0
1818 -1862 0
1805 -1861 0
1805 1817 -1862 0
1805 1818 -1864 0
1806 -1862 0
1806 1817 -1864 0
1806 1818 -1866 0
c (0<=(aux132 + aux136 - aux144))
-1818 1866 0
-1817 1864 0
-1806 1866 0
-1806 -1818 1864 0
-1806 -1817 1862 0
-1805 1864 0
-1805 -1818 1862 0
-1805 -1817 1861 0
c ((aux128 + aux129 - aux145)<=0)
1796 -1868 0
1797 -1869 0
1793 -1868 0
1793 1796 -1869 0
1793 1797 -1871 0
1794 -1869 0
1794 1796 -1871 0
1794 1797 -1873 0
c (0<=(aux128 + aux129 - aux145))
-1797 1873 0
-1796 1871 0
-1794 1873 0
-1794 -1797 1871 0
-1794 -1796 1869 0
-1793 1871 0
-1793 -1797 1869 0
-1793 -1796 1868 0
c ((aux130 + aux131 - aux146)<=0)
1802 -1875 0
1803 -1876 0
1799 -1875 0
1799 1802 -1876 0
1799 1803 -1878 0
1800 -1876 0
1800 1802 -1878 0
1800 1803 -1880 0
c (0<=(aux130 + aux131 - aux146))
-1803 1880 0
-1802 1878 0
-1800 1880 0
-1800 -1803 1878 0
-1800 -1802 1876 0
-1799 1878 0
-1799 -1803 1876 0
-1799 -1802 1875 0
c ((aux134 + aux137 - aux147)<=0)
1820 -1882 0
1821 -1883 0
1811 -1882 0
1811 1820 -1883 0
1811 1821 -1885 0
1812 -1883 0
1812 1820 -1885 0
1812 1821 -1887 0
c (0<=(aux134 + aux137 - aux147))
-1821 1887 0
-1820 1885 0
-1812 1887 0
-1812 -1821 1885 0
-1812 -1820 1883 0
-1811 1885 0
-1811 -1821 1883 0
-1811 -1820 1882 0
c ((aux127 + aux135 - aux148)<=0)
1814 -1889 0
1815 -1890 0
1790 -1889 0
1790 1814 -1890 0
1790 1815 -1892 0
1791 -1890 0
1791 1814 -1892 0
1791 1815 -1894 0
c (0<=(aux127 + aux135 - aux148))
-1815 1894 0
-1814 1892 0
-1791 1894 0
-1791 -1815 1892 0
-1791 -1814 1890 0
-1790 1892 0
-1790 -1815 1890 0
-1790 -1814 1889 0
c ((aux142 + aux148 - aux149)<=0)
1889 -1896 0
1890 -1897 0
1892 -1899 0
1894 -1901 0
1847 -1896 0
1847 1889 -1897 0
1847 1890 -1899 0
1847 1892 -1901 0
1847 1894 -1903 0
1848 -1897 0
1848 1889 -1899 0
1848 1890 -1901 0
1848 1892 -1903 0
1848 1894 -1905 0
1850 -1899 0
1850 1889 -1901 0
1850 1890 -1903 0
1850 1892 -1905 0
1850 1894 -1907 0
1852 -1901 0
1852 1889 -1903 0
1852 1890 -1905 0
1852 1892 -1907 0
1852 1894 -1909 0
c (0<=(aux142 + aux148 - aux149))
-1894 1909 0
-1892 1907 0
-1890 1905 0
-1889 1903 0
-1852 1909 0
-1852 -1894 1907 0
-1852 -1892 1905 0
-1852 -1890 1903 0
-1852 -1889 1901 0
-1850 1907 0
-1850 -1894 1905 0
-1850 -1892 1903 0
-1850 -1890 1901 0
-1850 -1889 1899 0
-1848 1905 0
-1848 -1894 1903 0
-1848 -1892 1901 0
-1848 -1890 1899 0
-1848 -1889 1897 0
-1847 1903 0
-1847 -1894 1901 0
-1847 -1892 1899 0
-1847 -1890 1897 0
-1847 -1889 1896 0
c ((aux141 + aux145 - aux150)<=0)
1868 -1911 0
1869 -1912 0
1871 -1914 0
1873 -1916 0
1840 -1911 0
1840 1868 -1912 0
1840 1869 -1914 0
1840 1871 -1916 0
1840 1873 -1918 0
1841 -1912 0
1841 1868 -1914 0
1841 1869 -1916 0
1841 1871 -1918 0
1841 1873 -1920 0
1843 -1914 0
1843 1868 -1916 0
1843 1869 -1918 0
1843 1871 -1920 0
1843 1873 -1922 0
1845 -1916 0
1845 1868 -1918 0
1845 1869 -1920 0
1845 1871 -1922 0
1845 1873 -1924 0
c (0<=(aux141 + aux145 - aux150))
-1873 1924 0
-1871 1922 0
-1869 1920 0
-1868 1918 0
-1845 1924 0
-1845 -1873 1922 0
-1845 -1871 1920 0
-1845 -1869 1918 0
-1845 -1868 1916 0
-1843 1922 0
-1843 -1873 1920 0
-1843 -1871 1918 0
-1843 -1869 1916 0
-1843 -1868 1914 0
-1841 1920 0
-1841 -1873 1918 0
-1841 -1871 1916 0
-1841 -1869 1914 0
-1841 -1868 1912 0
-1840 1918 0
-1840 -1873 1916 0
-1840 -1871 1914 0
-1840 -1869 1912 0
-1840 -1868 1911 0
c ((aux139 + aux140 - aux151)<=0)
1833 -1926 0
1834 -1927 0
1836 -1929 0
1838 -1931 0
1826 -1926 0
1826 1833 -1927 0
1826 1834 -1929 0
1826 1836 -1931 0
1826 1838 -1933 0
1827 -1927 0
1827 1833 -1929 0
1827 1834 -1931 0
1827 1836 -1933 0
1827 1838 -1935 0
1829 -1929 0
1829 1833 -1931 0
1829 1834 -1933 0
1829 1836 -1935 0
1829 1838 -1937 0
1831 -1931 0
1831 1833 -1933 0
1831 1834 -1935 0
1831 1836 -1937 0
1831 1838 -1939 0
c (0<=(aux139 + aux140 - aux151))
-1838 1939 0
-1836 1937 0
-1834 1935 0
-1833 1933 0
-1831 1939 0
-1831 -1838 1937 0
-1831 -1836 1935 0
-1831 -1834 1933 0
-1831 -1833 1931 0
-1829 1937 0
-1829 -1838 1935 0
-1829 -1836 1933 0
-1829 -1834 1931 0
-1829 -1833 1929 0
-1827 1935 0
-1827 -1838 1933 0
-1827 -1836 1931 0
-1827 -1834 1929 0
-1827 -1833 1927 0
-1826 1933 0
-1826 -1838 1931 0
-1826 -1836 1929 0
-1826 -1834 1927 0
-1826 -1833 1926 0
c ((aux143 + aux144 - aux152)<=0)
1861 -1941 0
1862 -1942 0
1864 -1944 0
1866 -1946 0
1854 -1941 0
1854 1861 -1942 0
1854 1862 -1944 0
1854 1864 -1946 0
1854 1866 -1948 0
1855 -1942 0
1855 1861 -1944 0
1855 1862 -1946 0
1855 1864 -1948 0
1855 1866 -1950 0
1857 -1944 0
1857 1861 -1946 0
1857 1862 -1948 0
1857 1864 -1950 0
1857 1866 -1952 0
1859 -1946 0
1859 1861 -1948 0
1859 1862 -1950 0
1859 1864 -1952 0
1859 1866 -1954 0
c (0<=(aux143 + aux144 - aux152))
-1866 1954 0
-1864 1952 0
-1862 1950 0
-1861 1948 0
-1859 1954 0
-1859 -1866 1952 0
-1859 -1864 1950 0
-1859 -1862 1948 0
-1859 -1861 1946 0
-1857 1952 0
-1857 -1866 1950 0
-1857 -1864 1948 0
-1857 -1862 1946 0
-1857 -1861 1944 0
-1855 1950 0
-1855 -1866 1948 0
-1855 -1864 1946 0
-1855 -1862 1944 0
-1855 -1861 1942 0
-1854 1948 0
-1854 -1866 1946 0
-1854 -1864 1944 0
-1854 -1862 1942 0
-1854 -1861 1941 0
c ((aux146 + aux147 - aux153)<=0)
1882 -1956 0
1883 -1957 0
1885 -1959 0
1887 -1961 0
1875 -1956 0
1875 1882 -1957 0
1875 1883 -1959 0
1875 1885 -1961 0
1875 1887 -1963 0
1876 -1957 0
1876 1882 -1959 0
1876 1883 -1961 0
1876 1885 -1963 0
1876 1887 -1965 0
1878 -1959 0
1878 1882 -1961 0
1878 1883 -1963 0
1878 1885 -1965 0
1878 1887 -1967 0
1880 -1961 0
1880 1882 -1963 0
1880 1883 -1965 0
1880 1885 -1967 0
1880 1887 -1969 0
c (0<=(aux146 + aux147 - aux153))
-1887 1969 0
-1885 1967 0
-1883 1965 0
-1882 1963 0
-1880 1969 0
-1880 -1887 1967 0
-1880 -1885 1965 0
-1880 -1883 1963 0
-1880 -1882 1961 0
-1878 1967 0
-1878 -1887 1965 0
-1878 -1885 1963 0
-1878 -1883 1961 0
-1878 -1882 1959 0
-1876 1965 0
-1876 -1887 1963 0
-1876 -1885 1961 0
-1876 -1883 1959 0
-1876 -1882 1957 0
-1875 1963 0
-1875 -1887 1961 0
-1875 -1885 1959 0
-1875 -1883 1957 0
-1875 -1882 1956 0
c ((aux150 + aux153 - aux154)<=0)
1956 -1971 0
1957 -1972 0
1959 -1974 0
1961 -1976 0
1963 -1978 0
1965 -1980 0
1967 -1982 0
1969 -1984 0
1911 -1971 0
1911 1956 -1972 0
1911 1957 -1974 0
1911 1959 -1976 0
1911 1961 -1978 0
1911 1963 -1980 0
1911 1965 -1982 0
1911 1967 -1984 0
1911 1969 -1986 0
1912 -1972 0
1912 1956 -1974 0
1912 1957 -1976 0
1912 1959 -1978 0
1912 1961 -1980 0
1912 1963 -1982 0
1912 1965 -1984 0
1912 1967 -1986 0
1912 1969 -1988 0
1914 -1974 0
1914 1956 -1976 0
1914 1957 -1978 0
1914 1959 -1980 0
1914 1961 -1982 0
1914 1963 -1984 0
1914 1965 -1986 0
1914 1967 -1988 0
1914 1969 -1990 0
1916 -1976 0
1916 1956 -1978 0
1916 1957 -1980 0
1916 1959 -1982 0
1916 1961 -1984 0
1916 1963 -1986 0
1916 1965 -1988 0
1916 1967 -1990 0
1916 1969 -1992 0
1918 -1978 0
1918 1956 -1980 0
1918 1957 -1982 0
1918 1959 -1984 0
1918 1961 -1986 0
1918 1963 -1988 0
1918 1965 -1990 0
1918 1967 -1992 0
1918 1969 -1994 0
1920 -1980 0
1920 1956 -1982 0
1920 1957 -1984 0
1920 1959 -1986 0
1920 1961 -1988 0
1920 1963 -1990 0
1920 1965 -1992 0
1920 1967 -1994 0
1920 1969 -1996 0
1922 -1982 0
1922 1956 -1984 0
1922 1957 -1986 0
1922 1959 -1988 0
1922 1961 -1990 0
1922 1963 -1992 0
1922 1965 -1994 0
1922 1967 -1996 0
1922 1969 -1998 0
1924 -1984 0
1924 1956 -1986 0
1924 1957 -1988 0
1924 1959 -1990 0
1924 1961 -1992 0
1924 1963 -1994 0
1924 1965 -1996 0
1924 1967 -1998 0
1924 1969 -2000 0
c (0<=(aux150 + aux153 - aux154))
-1969 2000 0
-1967 1998 0
-1965 1996 0
-1963 1994 0
-1961 1992 0
-1959 1990 0
-1957 1988 0
-1956 1986 0
-1924 2000 0
-1924 -1969 1998 0
-1924 -1967 1996 0
-1924 -1965 1994 0
-1924 -1963 1992 0
-1924 -1961 1990 0
-1924 -1959 1988 0
-1924 -1957 1986 0
-1924 -1956 1984 0
-1922 1998 0
-1922 -1969 1996 0
-1922 -1967 1994 0
-1922 -1965 1992 0
-1922 -1963 1990 0
-1922 -1961 1988 0
-1922 -1959 1986 0
-1922 -1957 1984 0
-1922 -1956 1982 0
-1920 1996 0
-1920 -1969 1994 0
-1920 -1967 1992 0
-1920 -1965 1990 0
-1920 -1963 1988 0
-1920 -1961 1986 0
-1920 -1959 1984 0
-1920 -1957 1982 0
-1920 -1956 1980 0
-1918 1994 0
-1918 -1969 1992 0
-1918 -1967 1990 0
-1918 -1965 1988 0
-1918 -1963 1986 0
-1918 -1961 1984 0
-1918 -1959 1982 0
-1918 -1957 1980 0
-1918 -1956 1978 0
-1916 1992 0
-1916 -1969 1990 0
-1916 -1967 1988 0
-1916 -1965 1986 0
-1916 -1963 1984 0
-1916 -1961 1982 0
-1916 -1959 1980 0
-1916 -1957 1978 0
-1916 -1956 1976 0
-1914 1990 0
-1914 -1969 1988 0
-1914 -1967 1986 0
-1914 -1965 1984 0
-1914 -1963 1982 0
-1914 -1961 1980 0
-1914 -1959 1978 0
-1914 -1957 1976 0
-1914 -1956 1974 0
-1912 1988 0
-1912 -1969 1986 0
-1912 -1967 1984 0
-1912 -1965 1982 0
-1912 -1963 1980 0
-1912 -1961 1978 0
-1912 -1959 1976 0
-1912 -1957 1974 0
-1912 -1956 1972 0
-1911 1986 0
-1911 -1969 1984 0
-1911 -1967 1982 0
-1911 -1965 1980 0
-1911 -1963 1978 0
-1911 -1961 1976 0
-1911 -1959 1974 0
-1911 -1957 1972 0
-1911 -1956 1971 0
c ((aux149 + aux151 - aux155)<=0)
1926 -2002 0
1927 -2003 0
1929 -2005 0
1931 -2007 0
1933 -2009 0
1935 -2011 0
1937 -2013 0
1939 -2015 0
1896 -2002 0
1896 1926 -2003 0
1896 1927 -2005 0
1896 1929 -2007 0
1896 1931 -2009 0
1896 1933 -2011 0
1896 1935 -2013 0
1896 1937 -2015 0
1896 1939 -2017 0
1897 -2003 0
1897 1926 -2005 0
1897 1927 -2007 0
1897 1929 -2009 0
1897 1931 -2011 0
1897 1933 -2013 0
1897 1935 -2015 0
1897 1937 -2017 0
1897 1939 -2019 0
1899 -2005 0
1899 1926 -2007 0
1899 1927 -2009 0
1899 1929 -2011 0
1899 1931 -2013 0
1899 1933 -2015 0
1899 1935 -2017 0
1899 1937 -2019 0
1899 1939 -2021 0
1901 -2007 0
1901 1926 -2009 0
1901 1927 -2011 0
1901 1929 -2013 0
1901 1931 -2015 0
1901 1933 -2017 0
1901 1935 -2019 0
1901 1937 -2021 0
1901 1939 -2023 0
1903 -2009 0
1903 1926 -2011 0
1903 1927 -2013 0
1903 1929 -2015 0
1903 1931 -2017 0
1903 1933 -2019 0
1903 1935 -2021 0
1903 1937 -2023 0
1903 1939 -2025 0
1905 -2011 0
1905 1926 -2013 0
1905 1927 -2015 0
1905 1929 -2017 0
1905 1931 -2019 0
1905 1933 -2021 0
1905 1935 -2023 0
1905 1937 -2025 0
1905 1939 -2027 0
1907 -2013 0
1907 1926 -2015 0
1907 1927 -2017 0
1907 1929 -2019 0
1907 1931 -2021 0
1907 1933 -2023 0
1907 1935 -2025 0
1907 1937 -2027 0
1907 1939 -2029 0
1909 -2015 0
1909 1926 -2017 0
1909 1927 -2019 0
1909 1929 -2021 0
1909 1931 -2023 0
1909 1933 -2025 0
1909 1935 -2027 0
1909 1937 -2029 0
1909 1939 -2031 0
c (0<=(aux149 + aux151 - aux155))
-1939 2031 0
-1937 2029 0
-1935 2027 0
-1933 2025 0
-1931 2023 0
-1929 2021 0
-1927 2019 0
-1926 2017 0
-1909 2031 0
-1909 -1939 2029 0
-1909 -1937 2027 0
-1909 -1935 2025 0
-1909 -1933 2023 0
-1909 -1931 2021 0
-1909 -1929 2019 0
-1909 -1927 2017 0
-1909 -1926 2015 0
-1907 2029 0
-1907 -1939 2027 0
-1907 -1937 2025 0
-1907 -1935 2023 0
-1907 -1933 2021 0
-1907 -1931 2019 0
-1907 -1929 2017 0
-1907 -1927 2015 0
-1907 -1926 2013 0
-1905 2027 0
-1905 -1939 2025 0
-1905 -1937 2023 0
-1905 -1935 2021 0
-1905 -1933 2019 0
-1905 -1931 2017 0
-1905 -1929 2015 0
-1905 -1927 2013 0
-1905 -1926 2011 0
-1903 2025 0
-1903 -1939 2023 0
-1903 -1937 2021 0
-1903 -1935 2019 0
-1903 -1933 2017 0
-1903 -1931 2015 0
-1903 -1929 2013 0
-1903 -1927 2011 0
-1903 -1926 2009 0
-1901 2023 0
-1901 -1939 2021 0
-1901 -1937 2019 0
-1901 -1935 2017 0
-1901 -1933 2015 0
-1901 -1931 2013 0
-1901 -1929 2011 0
-1901 -1927 2009 0
-1901 -1926 2007 0
-1899 2021 0
-1899 -1939 2019 0
-1899 -1937 2017 0
-1899 -1935 2015 0
-1899 -1933 2013 0
-1899 -1931 2011 0
-1899 -1929 2009 0
-1899 -1927 2007 0
-1899 -1926 2005 0
-1897 2019 0
-1897 -1939 2017 0
-1897 -1937 2015 0
-1897 -1935 2013 0
-1897 -1933 2011 0
-1897 -1931 2009 0
-1897 -1929 2007 0
-1897 -1927 2005 0
-1897 -1926 2003 0
-1896 2017 0
-1896 -1939 2015 0
-1896 -1937 2013 0
-1896 -1935 2011 0
-1896 -1933 2009 0
-1896 -1931 2007 0
-1896 -1929 2005 0
-1896 -1927 2003 0
-1896 -1926 2002 0
c ((SATLiteral(509) - aux156 + SATLiteral(96))<=0)
-96 -2033 0
-509 -2033 0
-509 -96 -2034 0
c (0<=(SATLiteral(509) - aux156 + SATLiteral(96)))
96 2034 0
509 2034 0
509 96 2033 0
c ((SATLiteral(527) - aux157 + SATLiteral(79))<=0)
-79 -2036 0
-527 -2036 0
-527 -79 -2037 0
c (0<=(SATLiteral(527) - aux157 + SATLiteral(79)))
79 2037 0
527 2037 0
527 79 2036 0
c ((SATLiteral(562) - aux158 + SATLiteral(62))<=0)
-62 -2039 0
-562 -2039 0
-562 -62 -2040 0
c (0<=(SATLiteral(562) - aux158 + SATLiteral(62)))
62 2040 0
562 2040 0
562 62 2039 0
c ((SATLiteral(355) - aux159 + SATLiteral(45))<=0)
-45 -2042 0
-355 -2042 0
-355 -45 -2043 0
c (0<=(SATLiteral(355) - aux159 + SATLiteral(45)))
45 2043 0
355 2043 0
355 45 2042 0
c (( - aux160 + SATLiteral(614) + SATLiteral(28))<=0)
-28 -2045 0
-614 -2045 0
-614 -28 -2046 0
c (0<=( - aux160 + SATLiteral(614) + SATLiteral(28)))
28 2046 0
614 2046 0
614 28 2045 0
c (( - aux161 + SATLiteral(458) + SATLiteral(11))<=0)
-11 -2048 0
-458 -2048 0
-458 -11 -2049 0
c (0<=( - aux161 + SATLiteral(458) + SATLiteral(11)))
11 2049 0
458 2049 0
458 11 2048 0
c (( - aux162 + SATLiteral(631) + SATLiteral(475))<=0)
-475 -2051 0
-631 -2051 0
-631 -475 -2052 0
c (0<=( - aux162 + SATLiteral(631) + SATLiteral(475)))
475 2052 0
631 2052 0
631 475 2051 0
c ((SATLiteral(372) - aux163 + SATLiteral(492))<=0)
-492 -2054 0
-372 -2054 0
-372 -492 -2055 0
c (0<=(SATLiteral(372) - aux163 + SATLiteral(492)))
492 2055 0
372 2055 0
372 492 2054 0
c (( - aux164 + SATLiteral(648) + SATLiteral(665))<=0)
-665 -2057 0
-648 -2057 0
-648 -665 -2058 0
c (0<=( - aux164 + SATLiteral(648) + SATLiteral(665)))
665 2058 0
648 2058 0
648 665 2057 0
c ((SATLiteral(303) - aux165 + SATLiteral(441))<=0)
-441 -2060 0
-303 -2060 0
-303 -441 -2061 0
c (0<=(SATLiteral(303) - aux165 + SATLiteral(441)))
441 2061 0
303 2061 0
303 441 2060 0
c (( - aux166 + SATLiteral(113) + SATLiteral(424))<=0)
-424 -2063 0
-113 -2063 0
-113 -424 -2064 0
c (0<=( - aux166 + SATLiteral(113) + SATLiteral(424)))
424 2064 0
113 2064 0
113 424 2063 0
c (( - aux167 + SATLiteral(682) + SATLiteral(407))<=0)
-407 -2066 0
-682 -2066 0
-682 -407 -2067 0
c (0<=( - aux167 + SATLiteral(682) + SATLiteral(407)))
407 2067 0
682 2067 0
682 407 2066 0
c (( - aux168 + SATLiteral(184) + SATLiteral(390))<=0)
-390 -2069 0
-184 -2069 0
-184 -390 -2070 0
c (0<=( - aux168 + SATLiteral(184) + SATLiteral(390)))
390 2070 0
184 2070 0
184 390 2069 0
c (( - aux169 + SATLiteral(131) + SATLiteral(286))<=0)
-286 -2072 0
-131 -2072 0
-131 -286 -2073 0
c (0<=( - aux169 + SATLiteral(131) + SATLiteral(286)))
286 2073 0
131 2073 0
131 286 2072 0
c (( - aux170 + SATLiteral(201) + SATLiteral(269))<=0)
-269 -2075 0
-201 -2075 0
-201 -269 -2076 0
c (0<=( - aux170 + SATLiteral(201) + SATLiteral(269)))
269 2076 0
201 2076 0
201 269 2075 0
c (( - aux171 + SATLiteral(218) + SATLiteral(252))<=0)
-252 -2078 0
-218 -2078 0
-218 -252 -2079 0
c (0<=( - aux171 + SATLiteral(218) + SATLiteral(252)))
252 2079 0
218 2079 0
218 252 2078 0
c ((SATLiteral(544) - aux172 + SATLiteral(235))<=0)
-235 -2081 0
-544 -2081 0
-544 -235 -2082 0
c (0<=(SATLiteral(544) - aux172 + SATLiteral(235)))
235 2082 0
544 2082 0
544 235 2081 0
c ((SATLiteral(321) - aux173 + SATLiteral(148))<=0)
-148 -2084 0
-321 -2084 0
-321 -148 -2085 0
c (0<=(SATLiteral(321) - aux173 + SATLiteral(148)))
148 2085 0
321 2085 0
321 148 2084 0
c ((SATLiteral(338) - aux174 + SATLiteral(166))<=0)
-166 -2087 0
-338 -2087 0
-338 -166 -2088 0
c (0<=(SATLiteral(338) - aux174 + SATLiteral(166)))
166 2088 0
338 2088 0
338 166 2087 0
c (( - aux175 + SATLiteral(580) + SATLiteral(597))<=0)
-597 -2090 0
-580 -2090 0
-580 -597 -2091 0
c (0<=( - aux175 + SATLiteral(580) + SATLiteral(597)))
597 2091 0
580 2091 0
580 597 2090 0
c ((aux163 + aux175 - aux176)<=0)
2090 -2093 0
2091 -2094 0
2054 -2093 0
2054 2090 -2094 0
2054 2091 -2096 0
2055 -2094 0
2055 2090 -2096 0
2055 2091 -2098 0
c (0<=(aux163 + aux175 - aux176))
-2091 2098 0
-2090 2096 0
-2055 2098 0
-2055 -2091 2096 0
-2055 -2090 2094 0
-2054 2096 0
-2054 -2091 2094 0
-2054 -2090 2093 0
c ((aux157 + aux170 - aux177)<=0)
2075 -2100 0
2076 -2101 0
2036 -2100 0
2036 2075 -2101 0
2036 2076 -2103 0
2037 -2101 0
2037 2075 -2103 0
2037 2076 -2105 0
c (0<=(aux157 + aux170 - aux177))
-2076 2105 0
-2075 2103 0
-2037 2105 0
-2037 -2076 2103 0
-2037 -2075 2101 0
-2036 2103 0
-2036 -2076 2101 0
-2036 -2075 2100 0
c ((aux156 + aux161 - aux178)<=0)
2048 -2107 0
2049 -2108 0
2033 -2107 0
2033 2048 -2108 0
2033 2049 -2110 0
2034 -2108 0
2034 2048 -2110 0
2034 2049 -2112 0
c (0<=(aux156 + aux161 - aux178))
-2049 2112 0
-2048 2110 0
-2034 2112 0
-2034 -2049 2110 0
-2034 -2048 2108 0
-2033 2110 0
-2033 -2049 2108 0
-2033 -2048 2107 0
c ((aux158 + aux159 - aux179)<=0)
2042 -2114 0
2043 -2115 0
2039 -2114 0
2039 2042 -2115 0
2039 2043 -2117 0
2040 -2115 0
2040 2042 -2117 0
2040 2043 -2119 0
c (0<=(aux158 + aux159 - aux179))
-2043 2119 0
-2042 2117 0
-2040 2119 0
-2040 -2043 2117 0
-2040 -2042 2115 0
-2039 2117 0
-2039 -2043 2115 0
-2039 -2042 2114 0
c ((aux160 + aux162 - aux180)<=0)
2051 -2121 0
2052 -2122 0
2045 -2121 0
2045 2051 -2122 0
2045 2052 -2124 0
2046 -2122 0
2046 2051 -2124 0
2046 2052 -2126 0
c (0<=(aux160 + aux162 - aux180))
-2052 2126 0
-2051 2124 0
-2046 2126 0
-2046 -2052 2124 0
-2046 -2051 2122 0
-2045 2124 0
-2045 -2052 2122 0
-2045 -2051 2121 0
c ((aux169 + aux173 - aux181)<=0)
2084 -2128 0
2085 -2129 0
2072 -2128 0
2072 2084 -2129 0
2072 2085 -2131 0
2073 -2129 0
2073 2084 -2131 0
2073 2085 -2133 0
c (0<=(aux169 + aux173 - aux181))
-2085 2133 0
-2084 2131 0
-2073 2133 0
-2073 -2085 2131 0
-2073 -2084 2129 0
-2072 2131 0
-2072 -2085 2129 0
-2072 -2084 2128 0
c ((aux165 + aux166 - aux182)<=0)
2063 -2135 0
2064 -2136 0
2060 -2135 0
2060 2063 -2136 0
2060 2064 -2138 0
2061 -2136 0
2061 2063 -2138 0
2061 2064 -2140 0
c (0<=(aux165 + aux166 - aux182))
-2064 2140 0
-2063 2138 0
-2061 2140 0
-2061 -2064 2138 0
-2061 -2063 2136 0
-2060 2138 0
-2060 -2064 2136 0
-2060 -2063 2135 0
c ((aux167 + aux168 - aux183)<=0)
2069 -2142 0
2070 -2143 0
2066 -2142 0
2066 2069 -2143 0
2066 2070 -2145 0
2067 -2143 0
2067 2069 -2145 0
2067 2070 -2147 0
c (0<=(aux167 + aux168 - aux183))
-2070 2147 0
-2069 2145 0
-2067 2147 0
-2067 -2070 2145 0
-2067 -2069 2143 0
-2066 2145 0
-2066 -2070 2143 0
-2066 -2069 2142 0
c ((aux171 + aux174 - aux184)<=0)
2087 -2149 0
2088 -2150 0
2078 -2149 0
2078 2087 -2150 0
2078 2088 -2152 0
2079 -2150 0
2079 2087 -2152 0
2079 2088 -2154 0
c (0<=(aux171 + aux174 - aux184))
-2088 2154 0
-2087 2152 0
-2079 2154 0
-2079 -2088 2152 0
-2079 -2087 2150 0
-2078 2152 0
-2078 -2088 2150 0
-2078 -2087 2149 0
c ((aux164 + aux172 - aux185)<=0)
2081 -2156 0
2082 -2157 0
2057 -2156 0
2057 2081 -2157 0
2057 2082 -2159 0
2058 -2157 0
2058 2081 -2159 0
2058 2082 -2161 0
c (0<=(aux164 + aux172 - aux185))
-2082 2161 0
-2081 2159 0
-2058 2161 0
-2058 -2082 2159 0
-2058 -2081 2157 0
-2057 2159 0
-2057 -2082 2157 0
-2057 -2081 2156 0
c ((aux179 + aux185 - aux186)<=0)
2156 -2163 0
2157 -2164 0
2159 -2166 0
2161 -2168 0
2114 -2163 0
2114 2156 -2164 0
2114 2157 -2166 0
2114 2159 -2168 0
2114 2161 -2170 0
2115 -2164 0
2115 2156 -2166 0
2115 2157 -2168 0
2115 2159 -2170 0
2115 2161 -2172 0
2117 -2166 0
2117 2156 -2168 0
2117 2157 -2170 0
2117 2159 -2172 0
2117 2161 -2174 0
2119 -2168 0
2119 2156 -2170 0
2119 2157 -2172 0
2119 2159 -2174 0
2119 2161 -2176 0
c (0<=(aux179 + aux185 - aux186))
-2161 2176 0
-2159 2174 0
-2157 2172 0
-2156 2170 0
-2119 2176 0
-2119 -2161 2174 0
-2119 -2159 2172 0
-2119 -2157 2170 0
-2119 -2156 2168 0
-2117 2174 0
-2117 -2161 2172 0
-2117 -2159 2170 0
-2117 -2157 2168 0
-2117 -2156 2166 0
-2115 2172 0
-2115 -2161 2170 0
-2115 -2159 2168 0
-2115 -2157 2166 0
-2115 -2156 2164 0
-2114 2170 0
-2114 -2161 2168 0
-2114 -2159 2166 0
-2114 -2157 2164 0
-2114 -2156 2163 0
c ((aux178 + aux182 - aux187)<=0)
2135 -2178 0
2136 -2179 0
2138 -2181 0
2140 -2183 0
2107 -2178 0
2107 2135 -2179 0
2107 2136 -2181 0
2107 2138 -2183 0
2107 2140 -2185 0
2108 -2179 0
2108 2135 -2181 0
2108 2136 -2183 0
2108 2138 -2185 0
2108 2140 -2187 0
2110 -2181 0
2110 2135 -2183 0
2110 2136 -2185 0
2110 2138 -2187 0
2110 2140 -2189 0
2112 -2183 0
2112 2135 -2185 0
2112 2136 -2187 0
2112 2138 -2189 0
2112 2140 -2191 0
c (0<=(aux178 + aux182 - aux187))
-2140 2191 0
-2138 2189 0
-2136 2187 0
-2135 2185 0
-2112 2191 0
-2112 -2140 2189 0
-2112 -2138 2187 0
-2112 -2136 2185 0
-2112 -2135 2183 0
-2110 2189 0
-2110 -2140 2187 0
-2110 -2138 2185 0
-2110 -2136 2183 0
-2110 -2135 2181 0
-2108 2187 0
-2108 -2140 2185 0
-2108 -2138 2183 0
-2108 -2136 2181 0
-2108 -2135 2179 0
-2107 2185 0
-2107 -2140 2183 0
-2107 -2138 2181 0
-2107 -2136 2179 0
-2107 -2135 2178 0
c ((aux176 + aux177 - aux188)<=0)
2100 -2193 0
2101 -2194 0
2103 -2196 0
2105 -2198 0
2093 -2193 0
2093 2100 -2194 0
2093 2101 -2196 0
2093 2103 -2198 0
2093 2105 -2200 0
2094 -2194 0
2094 2100 -2196 0
2094 2101 -2198 0
2094 2103 -2200 0
2094 2105 -2202 0
2096 -2196 0
2096 2100 -2198 0
2096 2101 -2200 0
2096 2103 -2202 0
2096 2105 -2204 0
2098 -2198 0
2098 2100 -2200 0
2098 2101 -2202 0
2098 2103 -2204 0
2098 2105 -2206 0
c (0<=(aux176 + aux177 - aux188))
-2105 2206 0
-2103 2204 0
-2101 2202 0
-2100 2200 0
-2098 2206 0
-2098 -2105 2204 0
-2098 -2103 2202 0
-2098 -2101 2200 0
-2098 -2100 2198 0
-2096 2204 0
-2096 -2105 2202 0
-2096 -2103 2200 0
-2096 -2101 2198 0
-2096 -2100 2196 0
-2094 2202 0
-2094 -2105 2200 0
-2094 -2103 2198 0
-2094 -2101 2196 0
-2094 -2100 2194 0
-2093 2200 0
-2093 -2105 2198 0
-2093 -2103 2196 0
-2093 -2101 2194 0
-2093 -2100 2193 0
c ((aux180 + aux181 - aux189)<=0)
2128 -2208 0
2129 -2209 0
2131 -2211 0
2133 -2213 0
2121 -2208 0
2121 2128 -2209 0
2121 2129 -2211 0
2121 2131 -2213 0
2121 2133 -2215 0
2122 -2209 0
2122 2128 -2211 0
2122 2129 -2213 0
2122 2131 -2215 0
2122 2133 -2217 0
2124 -2211 0
2124 2128 -2213 0
2124 2129 -2215 0
2124 2131 -2217 0
2124 2133 -2219 0
2126 -2213 0
2126 2128 -2215 0
2126 2129 -2217 0
2126 2131 -2219 0
2126 2133 -2221 0
c (0<=(aux180 + aux181 - aux189))
-2133 2221 0
-2131 2219 0
-2129 2217 0
-2128 2215 0
-2126 2221 0
-2126 -2133 2219 0
-2126 -2131 2217 0
-2126 -2129 2215 0
-2126 -2128 2213 0
-2124 2219 0
-2124 -2133 2217 0
-2124 -2131 2215 0
-2124 -2129 2213 0
-2124 -2128 2211 0
-2122 2217 0
-2122 -2133 2215 0
-2122 -2131 2213 0
-2122 -2129 2211 0
-2122 -2128 2209 0
-2121 2215 0
-2121 -2133 2213 0
-2121 -2131 2211 0
-2121 -2129 2209 0
-2121 -2128 2208 0
c ((aux183 + aux184 - aux190)<=0)
2149 -2223 0
2150 -2224 0
2152 -2226 0
2154 -2228 0
2142 -2223 0
2142 2149 -2224 0
2142 2150 -2226 0
2142 2152 -2228 0
2142 2154 -2230 0
2143 -2224 0
2143 2149 -2226 0
2143 2150 -2228 0
2143 2152 -2230 0
2143 2154 -2232 0
2145 -2226 0
2145 2149 -2228 0
2145 2150 -2230 0
2145 2152 -2232 0
2145 2154 -2234 0
2147 -2228 0
2147 2149 -2230 0
2147 2150 -2232 0
2147 2152 -2234 0
2147 2154 -2236 0
c (0<=(aux183 + aux184 - aux190))
-2154 2236 0
-2152 2234 0
-2150 2232 0
-2149 2230 0
-2147 2236 0
-2147 -2154 2234 0
-2147 -2152 2232 0
-2147 -2150 2230 0
-2147 -2149 2228 0
-2145 2234 0
-2145 -2154 2232 0
-2145 -2152 2230 0
-2145 -2150 2228 0
-2145 -2149 2226 0
-2143 2232 0
-2143 -2154 2230 0
-2143 -2152 2228 0
-2143 -2150 2226 0
-2143 -2149 2224 0
-2142 2230 0
-2142 -2154 2228 0
-2142 -2152 2226 0
-2142 -2150 2224 0
-2142 -2149 2223 0
c ((aux187 + aux190 - aux191)<=0)
2223 -2238 0
2224 -2239 0
2226 -2241 0
2228 -2243 0
2230 -2245 0
2232 -2247 0
2234 -2249 0
2236 -2251 0
2178 -2238 0
2178 2223 -2239 0
2178 2224 -2241 0
2178 2226 -2243 0
2178 2228 -2245 0
2178 2230 -2247 0
2178 2232 -2249 0
2178 2234 -2251 0
2178 2236 -2253 0
2179 -2239 0
2179 2223 -2241 0
2179 2224 -2243 0
2179 2226 -2245 0
2179 2228 -2247 0
2179 2230 -2249 0
2179 2232 -2251 0
2179 2234 -2253 0
2179 2236 -2255 0
2181 -2241 0
2181 2223 -2243 0
2181 2224 -2245 0
2181 2226 -2247 0
2181 2228 -2249 0
2181 2230 -2251 0
2181 2232 -2253 0
2181 2234 -2255 0
2181 2236 -2257 0
2183 -2243 0
2183 2223 -2245 0
2183 2224 -2247 0
2183 2226 -2249 0
2183 2228 -2251 0
2183 2230 -2253 0
2183 2232 -2255 0
2183 2234 -2257 0
2183 2236 -2259 0
2185 -2245 0
2185 2223 -2247 0
2185 2224 -2249 0
2185 2226 -2251 0
2185 2228 -2253 0
2185 2230 -2255 0
2185 2232 -2257 0
2185 2234 -2259 0
2185 2236 -2261 0
2187 -2247 0
2187 2223 -2249 0
2187 2224 -2251 0
2187 2226 -2253 0
2187 2228 -2255 0
2187 2230 -2257 0
2187 2232 -2259 0
2187 2234 -2261 0
2187 2236 -2263 0
2189 -2249 0
2189 2223 -2251 0
2189 2224 -2253 0
2189 2226 -2255 0
2189 2228 -2257 0
2189 2230 -2259 0
2189 2232 -2261 0
2189 2234 -2263 0
2189 2236 -2265 0
2191 -2251 0
2191 2223 -2253 0
2191 2224 -2255 0
2191 2226 -2257 0
2191 2228 -2259 0
2191 2230 -2261 0
2191 2232 -2263 0
2191 2234 -2265 0
2191 2236 -2267 0
c (0<=(aux187 + aux190 - aux191))
-2236 2267 0
-2234 2265 0
-2232 2263 0
-2230 2261 0
-2228 2259 0
-2226 2257 0
-2224 2255 0
-2223 2253 0
-2191 2267 0
-2191 -2236 2265 0
-2191 -2234 2263 0
-2191 -2232 2261 0
-2191 -2230 2259 0
-2191 -2228 2257 0
-2191 -2226 2255 0
-2191 -2224 2253 0
-2191 -2223 2251 0
-2189 2265 0
-2189 -2236 2263 0
-2189 -2234 2261 0
-2189 -2232 2259 0
-2189 -2230 2257 0
-2189 -2228 2255 0
-2189 -2226 2253 0
-2189 -2224 2251 0
-2189 -2223 2249 0
-2187 2263 0
-2187 -2236 2261 0
-2187 -2234 2259 0
-2187 -2232 2257 0
-2187 -2230 2255 0
-2187 -2228 2253 0
-2187 -2226 2251 0
-2187 -2224 2249 0
-2187 -2223 2247 0
-2185 2261 0
-2185 -2236 2259 0
-2185 -2234 2257 0
-2185 -2232 2255 0
-2185 -2230 2253 0
-2185 -2228 2251 0
-2185 -2226 2249 0
-2185 -2224 2247 0
-2185 -2223 2245 0
-2183 2259 0
-2183 -2236 2257 0
-2183 -2234 2255 0
-2183 -2232 2253 0
-2183 -2230 2251 0
-2183 -2228 2249 0
-2183 -2226 2247 0
-2183 -2224 2245 0
-2183 -2223 2243 0
-2181 2257 0
-2181 -2236 2255 0
-2181 -2234 2253 0
-2181 -2232 2251 0
-2181 -2230 2249 0
-2181 -2228 2247 0
-2181 -2226 2245 0
-2181 -2224 2243 0
-2181 -2223 2241 0
-2179 2255 0
-2179 -2236 2253 0
-2179 -2234 2251 0
-2179 -2232 2249 0
-2179 -2230 2247 0
-2179 -2228 2245 0
-2179 -2226 2243 0
-2179 -2224 2241 0
-2179 -2223 2239 0
-2178 2253 0
-2178 -2236 2251 0
-2178 -2234 2249 0
-2178 -2232 2247 0
-2178 -2230 2245 0
-2178 -2228 2243 0
-2178 -2226 2241 0
-2178 -2224 2239 0
-2178 -2223 2238 0
c ((aux186 + aux188 - aux192)<=0)
2193 -2269 0
2194 -2270 0
2196 -2272 0
2198 -2274 0
2200 -2276 0
2202 -2278 0
2204 -2280 0
2206 -2282 0
2163 -2269 0
2163 2193 -2270 0
2163 2194 -2272 0
2163 2196 -2274 0
2163 2198 -2276 0
2163 2200 -2278 0
2163 2202 -2280 0
2163 2204 -2282 0
2163 2206 -2284 0
2164 -2270 0
2164 2193 -2272 0
2164 2194 -2274 0
2164 2196 -2276 0
2164 2198 -2278 0
2164 2200 -2280 0
2164 2202 -2282 0
2164 2204 -2284 0
2164 2206 -2286 0
2166 -2272 0
2166 2193 -2274 0
2166 2194 -2276 0
2166 2196 -2278 0
2166 2198 -2280 0
2166 2200 -2282 0
2166 2202 -2284 0
2166 2204 -2286 0
2166 2206 -2288 0
2168 -2274 0
2168 2193 -2276 0
2168 2194 -2278 0
2168 2196 -2280 0
2168 2198 -2282 0
2168 2200 -2284 0
2168 2202 -2286 0
2168 2204 -2288 0
2168 2206 -2290 0
2170 -2276 0
2170 2193 -2278 0
2170 2194 -2280 0
2170 2196 -2282 0
2170 2198 -2284 0
2170 2200 -2286 0
2170 2202 -2288 0
2170 2204 -2290 0
2170 2206 -2292 0
2172 -2278 0
2172 2193 -2280 0
2172 2194 -2282 0
2172 2196 -2284 0
2172 2198 -2286 0
2172 2200 -2288 0
2172 2202 -2290 0
2172 2204 -2292 0
2172 2206 -2294 0
2174 -2280 0
2174 2193 -2282 0
2174 2194 -2284 0
2174 2196 -2286 0
2174 2198 -2288 0
2174 2200 -2290 0
2174 2202 -2292 0
2174 2204 -2294 0
2174 2206 -2296 0
2176 -2282 0
2176 2193 -2284 0
2176 2194 -2286 0
2176 2196 -2288 0
2176 2198 -2290 0
2176 2200 -2292 0
2176 2202 -2294 0
2176 2204 -2296 0
2176 2206 -2298 0
c (0<=(aux186 + aux188 - aux192))
-2206 2298 0
-2204 2296 0
-2202 2294 0
-2200 2292 0
-2198 2290 0
-2196 2288 0
-2194 2286 0
-2193 2284 0
-2176 2298 0
-2176 -2206 2296 0
-2176 -2204 2294 0
-2176 -2202 2292 0
-2176 -2200 2290 0
-2176 -2198 2288 0
-2176 -2196 2286 0
-2176 -2194 2284 0
-2176 -2193 2282 0
-2174 2296 0
-2174 -2206 2294 0
-2174 -2204 2292 0
-2174 -2202 2290 0
-2174 -2200 2288 0
-2174 -2198 2286 0
-2174 -2196 2284 0
-2174 -2194 2282 0
-2174 -2193 2280 0
-2172 2294 0
-2172 -2206 2292 0
-2172 -2204 2290 0
-2172 -2202 2288 0
-2172 -2200 2286 0
-2172 -2198 2284 0
-2172 -2196 2282 0
-2172 -2194 2280 0
-2172 -2193 2278 0
-2170 2292 0
-2170 -2206 2290 0
-2170 -2204 2288 0
-2170 -2202 2286 0
-2170 -2200 2284 0
-2170 -2198 2282 0
-2170 -2196 2280 0
-2170 -2194 2278 0
-2170 -2193 2276 0
-2168 2290 0
-2168 -2206 2288 0
-2168 -2204 2286 0
-2168 -2202 2284 0
-2168 -2200 2282 0
-2168 -2198 2280 0
-2168 -2196 2278 0
-2168 -2194 2276 0
-2168 -2193 2274 0
-2166 2288 0
-2166 -2206 2286 0
-2166 -2204 2284 0
-2166 -2202 2282 0
-2166 -2200 2280 0
-2166 -2198 2278 0
-2166 -2196 2276 0
-2166 -2194 2274 0
-2166 -2193 2272 0
-2164 2286 0
-2164 -2206 2284 0
-2164 -2204 2282 0
-2164 -2202 2280 0
-2164 -2200 2278 0
-2164 -2198 2276 0
-2164 -2196 2274 0
-2164 -2194 2272 0
-2164 -2193 2270 0
-2163 2284 0
-2163 -2206 2282 0
-2163 -2204 2280 0
-2163 -2202 2278 0
-2163 -2200 2276 0
-2163 -2198 2274 0
-2163 -2196 2272 0
-2163 -2194 2270 0
-2163 -2193 2269 0
c ((SATLiteral(511) - aux193 + SATLiteral(98))<=0)
-98 -2300 0
-511 -2300 0
-511 -98 -2301 0
c (0<=(SATLiteral(511) - aux193 + SATLiteral(98)))
98 2301 0
511 2301 0
511 98 2300 0
c ((SATLiteral(529) - aux194 + SATLiteral(81))<=0)
-81 -2303 0
-529 -2303 0
-529 -81 -2304 0
c (0<=(SATLiteral(529) - aux194 + SATLiteral(81)))
81 2304 0
529 2304 0
529 81 2303 0
c ((SATLiteral(564) - aux195 + SATLiteral(64))<=0)
-64 -2306 0
-564 -2306 0
-564 -64 -2307 0
c (0<=(SATLiteral(564) - aux195 + SATLiteral(64)))
64 2307 0
564 2307 0
564 64 2306 0
c ((SATLiteral(357) - aux196 + SATLiteral(47))<=0)
-47 -2309 0
-357 -2309 0
-357 -47 -2310 0
c (0<=(SATLiteral(357) - aux196 + SATLiteral(47)))
47 2310 0
357 2310 0
357 47 2309 0
c (( - aux197 + SATLiteral(616) + SATLiteral(30))<=0)
-30 -2312 0
-616 -2312 0
-616 -30 -2313 0
c (0<=( - aux197 + SATLiteral(616) + SATLiteral(30)))
30 2313 0
616 2313 0
616 30 2312 0
c (( - aux198 + SATLiteral(460) + SATLiteral(13))<=0)
-13 -2315 0
-460 -2315 0
-460 -13 -2316 0
c (0<=( - aux198 + SATLiteral(460) + SATLiteral(13)))
13 2316 0
460 2316 0
460 13 2315 0
c (( - aux199 + SATLiteral(633) + SATLiteral(477))<=0)
-477 -2318 0
-633 -2318 0
-633 -477 -2319 0
c (0<=( - aux199 + SATLiteral(633) + SATLiteral(477)))
477 2319 0
633 2319 0
633 477 2318 0
c ((SATLiteral(374) - aux200 + SATLiteral(494))<=0)
-494 -2321 0
-374 -2321 0
-374 -494 -2322 0
c (0<=(SATLiteral(374) - aux200 + SATLiteral(494)))
494 2322 0
374 2322 0
374 494 2321 0
c (( - aux201 + SATLiteral(650) + SATLiteral(667))<=0)
-667 -2324 0
-650 -2324 0
-650 -667 -2325 0
c (0<=( - aux201 + SATLiteral(650) + SATLiteral(667)))
667 2325 0
650 2325 0
650 667 2324 0
c ((SATLiteral(305) - aux202 + SATLiteral(443))<=0)
-443 -2327 0
-305 -2327 0
-305 -443 -2328 0
c (0<=(SATLiteral(305) - aux202 + SATLiteral(443)))
443 2328 0
305 2328 0
305 443 2327 0
c (( - aux203 + SATLiteral(115) + SATLiteral(426))<=0)
-426 -2330 0
-115 -2330 0
-115 -426 -2331 0
c (0<=( - aux203 + SATLiteral(115) + SATLiteral(426)))
426 2331 0
115 2331 0
115 426 2330 0
c (( - aux204 + SATLiteral(684) + SATLiteral(409))<=0)
-409 -2333 0
-684 -2333 0
-684 -409 -2334 0
c (0<=( - aux204 + SATLiteral(684) + SATLiteral(409)))
409 2334 0
684 2334 0
684 409 2333 0
c (( - aux205 + SATLiteral(186) + SATLiteral(392))<=0)
-392 -2336 0
-186 -2336 0
-186 -392 -2337 0
c (0<=( - aux205 + SATLiteral(186) + SATLiteral(392)))
392 2337 0
186 2337 0
186 392 2336 0
c (( - aux206 + SATLiteral(133) + SATLiteral(288))<=0)
-288 -2339 0
-133 -2339 0
-133 -288 -2340 0
c (0<=( - aux206 + SATLiteral(133) + SATLiteral(288)))
288 2340 0
133 2340 0
133 288 2339 0
c (( - aux207 + SATLiteral(203) + SATLiteral(271))<=0)
-271 -2342 0
-203 -2342 0
-203 -271 -2343 0
c (0<=( - aux207 + SATLiteral(203) + SATLiteral(271)))
271 2343 0
203 2343 0
203 271 2342 0
c (( - aux208 + SATLiteral(220) + SATLiteral(254))<=0)
-254 -2345 0
-220 -2345 0
-220 -254 -2346 0
c (0<=( - aux208 + SATLiteral(220) + SATLiteral(254)))
254 2346 0
220 2346 0
220 254 2345 0
c ((SATLiteral(546) - aux209 + SATLiteral(237))<=0)
-237 -2348 0
-546 -2348 0
-546 -237 -2349 0
c (0<=(SATLiteral(546) - aux209 + SATLiteral(237)))
237 2349 0
546 2349 0
546 237 2348 0
c ((SATLiteral(323) - aux210 + SATLiteral(150))<=0)
-150 -2351 0
-323 -2351 0
-323 -150 -2352 0
c (0<=(SATLiteral(323) - aux210 + SATLiteral(150)))
150 2352 0
323 2352 0
323 150 2351 0
c ((SATLiteral(340) - aux211 + SATLiteral(168))<=0)
-168 -2354 0
-340 -2354 0
-340 -168 -2355 0
c (0<=(SATLiteral(340) - aux211 + SATLiteral(168)))
168 2355 0
340 2355 0
340 168 2354 0
c (( - aux212 + SATLiteral(582) + SATLiteral(599))<=0)
-599 -2357 0
-582 -2357 0
-582 -599 -2358 0
c (0<=( - aux212 + SATLiteral(582) + SATLiteral(599)))
599 2358 0
582 2358 0
582 599 2357 0
c ((aux200 + aux212 - aux213)<=0)
2357 -2360 0
2358 -2361 0
2321 -2360 0
2321 2357 -2361 0
2321 2358 -2363 0
2322 -2361 0
2322 2357 -2363 0
2322 2358 -2365 0
c (0<=(aux200 + aux212 - aux213))
-2358 2365 0
-2357 2363 0
-2322 2365 0
-2322 -2358 2363 0
-2322 -2357 2361 0
-2321 2363 0
-2321 -2358 2361 0
-2321 -2357 2360 0
c ((aux194 + aux207 - aux214)<=0)
2342 -2367 0
2343 -2368 0
2303 -2367 0
2303 2342 -2368 0
2303 2343 -2370 0
2304 -2368 0
2304 2342 -2370 0
2304 2343 -2372 0
c (0<=(aux194 + aux207 - aux214))
-2343 2372 0
-2342 2370 0
-2304 2372 0
-2304 -2343 2370 0
-2304 -2342 2368 0
-2303 2370 0
-2303 -2343 2368 0
-2303 -2342 2367 0
c ((aux193 + aux198 - aux215)<=0)
2315 -2374 0
2316 -2375 0
2300 -2374 0
2300 2315 -2375 0
2300 2316 -2377 0
2301 -2375 0
2301 2315 -2377 0
2301 2316 -2379 0
c (0<=(aux193 + aux198 - aux215))
-2316 2379 0
-2315 2377 0
-2301 2379 0
-2301 -2316 2377 0
-2301 -2315 2375 0
-2300 2377 0
-2300 -2316 2375 0
-2300 -2315 2374 0
c ((aux195 + aux196 - aux216)<=0)
2309 -2381 0
2310 -2382 0
2306 -2381 0
2306 2309 -2382 0
2306 2310 -2384 0
2307 -2382 0
2307 2309 -2384 0
2307 2310 -2386 0
c (0<=(aux195 + aux196 - aux216))
-2310 2386 0
-2309 2384 0
-2307 2386 0
-2307 -2310 2384 0
-2307 -2309 2382 0
-2306 2384 0
-2306 -2310 2382 0
-2306 -2309 2381 0
c ((aux197 + aux199 - aux217)<=0)
2318 -2388 0
2319 -2389 0
2312 -2388 0
2312 2318 -2389 0
2312 2319 -2391 0
2313 -2389 0
2313 2318 -2391 0
2313 2319 -2393 0
c (0<=(aux197 + aux199 - aux217))
-2319 2393 0
-2318 2391 0
-2313 2393 0
-2313 -2319 2391 0
-2313 -2318 2389 0
-2312 2391 0
-2312 -2319 2389 0
-2312 -2318 2388 0
c ((aux206 + aux210 - aux218)<=0)
2351 -2395 0
2352 -2396 0
2339 -2395 0
2339 2351 -2396 0
2339 2352 -2398 0
2340 -2396 0
2340 2351 -2398 0
2340 2352 -2400 0
c (0<=(aux206 + aux210 - aux218))
-2352 2400 0
-2351 2398 0
-2340 2400 0
-2340 -2352 2398 0
-2340 -2351 2396 0
-2339 2398 0
-2339 -2352 2396 0
-2339 -2351 2395 0
c ((aux202 + aux203 - aux219)<=0)
2330 -2402 0
2331 -2403 0
2327 -2402 0
2327 2330 -2403 0
2327 2331 -2405 0
2328 -2403 0
2328 2330 -2405 0
2328 2331 -2407 0
c (0<=(aux202 + aux203 - aux219))
-2331 2407 0
-2330 2405 0
-2328 2407 0
-2328 -2331 2405 0
-2328 -2330 2403 0
-2327 2405 0
-2327 -2331 2403 0
-2327 -2330 2402 0
c ((aux204 + aux205 - aux220)<=0)
2336 -2409 0
2337 -2410 0
2333 -2409 0
2333 2336 -2410 0
2333 2337 -2412 0
2334 -2410 0
2334 2336 -2412 0
2334 2337 -2414 0
c (0<=(aux204 + aux205 - aux220))
-2337 2414 0
-2336 2412 0
-2334 2414 0
-2334 -2337 2412 0
-2334 -2336 2410 0
-2333 2412 0
-2333 -2337 2410 0
-2333 -2336 2409 0
c ((aux208 + aux211 - aux221)<=0)
2354 -2416 0
2355 -2417 0
2345 -2416 0
2345 2354 -2417 0
2345 2355 -2419 0
2346 -2417 0
2346 2354 -2419 0
2346 2355 -2421 0
c (0<=(aux208 + aux211 - aux221))
-2355 2421 0
-2354 2419 0
-2346 2421 0
-2346 -2355 2419 0
-2346 -2354 2417 0
-2345 2419 0
-2345 -2355 2417 0
-2345 -2354 2416 0
c ((aux201 + aux209 - aux222)<=0)
2348 -2423 0
2349 -2424 0
2324 -2423 0
2324 2348 -2424 0
2324 2349 -2426 0
2325 -2424 0
2325 2348 -2426 0
2325 2349 -2428 0
c (0<=(aux201 + aux209 - aux222))
-2349 2428 0
-2348 2426 0
-2325 2428 0
-2325 -2349 2426 0
-2325 -2348 2424 0
-2324 2426 0
-2324 -2349 2424 0
-2324 -2348 2423 0
c ((aux216 + aux222 - aux223)<=0)
2423 -2430 0
2424 -2431 0
2426 -2433 0
2428 -2435 0
2381 -2430 0
2381 2423 -2431 0
2381 2424 -2433 0
2381 2426 -2435 0
2381 2428 -2437 0
2382 -2431 0
2382 2423 -2433 0
2382 2424 -2435 0
2382 2426 -2437 0
2382 2428 -2439 0
2384 -2433 0
2384 2423 -2435 0
2384 2424 -2437 0
2384 2426 -2439 0
2384 2428 -2441 0
2386 -2435 0
2386 2423 -2437 0
2386 2424 -2439 0
2386 2426 -2441 0
2386 2428 -2443 0
c (0<=(aux216 + aux222 - aux223))
-2428 2443 0
-2426 2441 0
-2424 2439 0
-2423 2437 0
-2386 2443 0
-2386 -2428 2441 0
-2386 -2426 2439 0
-2386 -2424 2437 0
-2386 -2423 2435 0
-2384 2441 0
-2384 -2428 2439 0
-2384 -2426 2437 0
-2384 -2424 2435 0
-2384 -2423 2433 0
-2382 2439 0
-2382 -2428 2437 0
-2382 -2426 2435 0
-2382 -2424 2433 0
-2382 -2423 2431 0
-2381 2437 0
-2381 -2428 2435 0
-2381 -2426 2433 0
-2381 -2424 2431 0
-2381 -2423 2430 0
c ((aux215 + aux219 - aux224)<=0)
2402 -2445 0
2403 -2446 0
2405 -2448 0
2407 -2450 0
2374 -2445 0
2374 2402 -2446 0
2374 2403 -2448 0
2374 2405 -2450 0
2374 2407 -2452 0
2375 -2446 0
2375 2402 -2448 0
2375 2403 -2450 0
2375 2405 -2452 0
2375 2407 -2454 0
2377 -2448 0
2377 2402 -2450 0
2377 2403 -2452 0
2377 2405 -2454 0
2377 2407 -2456 0
2379 -2450 0
2379 2402 -2452 0
2379 2403 -2454 0
2379 2405 -2456 0
2379 2407 -2458 0
c (0<=(aux215 + aux219 - aux224))
-2407 2458 0
-2405 2456 0
-2403 2454 0
-2402 2452 0
-2379 2458 0
-2379 -2407 2456 0
-2379 -2405 2454 0
-2379 -2403 2452 0
-2379 -2402 2450 0
-2377 2456 0
-2377 -2407 2454 0
-2377 -2405 2452 0
-2377 -2403 2450 0
-2377 -2402 2448 0
-2375 2454 0
-2375 -2407 2452 0
-2375 -2405 2450 0
-2375 -2403 2448 0
-2375 -2402 2446 0
-2374 2452 0
-2374 -2407 2450 0
-2374 -2405 2448 0
-2374 -2403 2446 0
-2374 -2402 2445 0
c ((aux213 + aux214 - aux225)<=0)
2367 -2460 0
2368 -2461 0
2370 -2463 0
2372 -2465 0
2360 -2460 0
2360 2367 -2461 0
2360 2368 -2463 0
2360 2370 -2465 0
2360 2372 -2467 0
2361 -2461 0
2361 2367 -2463 0
2361 2368 -2465 0
2361 2370 -2467 0
2361 2372 -2469 0
2363 -2463 0
2363 2367 -2465 0
2363 2368 -2467 0
2363 2370 -2469 0
2363 2372 -2471 0
2365 -2465 0
2365 2367 -2467 0
2365 2368 -2469 0
2365 2370 -2471 0
2365 2372 -2473 0
c (0<=(aux213 + aux214 - aux225))
-2372 2473 0
-2370 2471 0
-2368 2469 0
-2367 2467 0
-2365 2473 0
-2365 -2372 2471 0
-2365 -2370 2469 0
-2365 -2368 2467 0
-2365 -2367 2465 0
-2363 2471 0
-2363 -2372 2469 0
-2363 -2370 2467 0
-2363 -2368 2465 0
-2363 -2367 2463 0
-2361 2469 0
-2361 -2372 2467 0
-2361 -2370 2465 0
-2361 -2368 2463 0
-2361 -2367 2461 0
-2360 2467 0
-2360 -2372 2465 0
-2360 -2370 2463 0
-2360 -2368 2461 0
-2360 -2367 2460 0
c ((aux217 + aux218 - aux226)<=0)
2395 -2475 0
2396 -2476 0
2398 -2478 0
2400 -2480 0
2388 -2475 0
2388 2395 -2476 0
2388 2396 -2478 0
2388 2398 -2480 0
2388 2400 -2482 0
2389 -2476 0
2389 2395 -2478 0
2389 2396 -2480 0
2389 2398 -2482 0
2389 2400 -2484 0
2391 -2478 0
2391 2395 -2480 0
2391 2396 -2482 0
2391 2398 -2484 0
2391 2400 -2486 0
2393 -2480 0
2393 2395 -2482 0
2393 2396 -2484 0
2393 2398 -2486 0
2393 2400 -2488 0
c (0<=(aux217 + aux218 - aux226))
-2400 2488 0
-2398 2486 0
-2396 2484 0
-2395 2482 0
-2393 2488 0
-2393 -2400 2486 0
-2393 -2398 2484 0
-2393 -2396 2482 0
-2393 -2395 2480 0
-2391 2486 0
-2391 -2400 2484 0
-2391 -2398 2482 0
-2391 -2396 2480 0
-2391 -2395 2478 0
-2389 2484 0
-2389 -2400 2482 0
-2389 -2398 2480 0
-2389 -2396 2478 0
-2389 -2395 2476 0
-2388 2482 0
-2388 -2400 2480 0
-2388 -2398 2478 0
-2388 -2396 2476 0
-2388 -2395 2475 0
c ((aux220 + aux221 - aux227)<=0)
2416 -2490 0
2417 -2491 0
2419 -2493 0
2421 -2495 0
2409 -2490 0
2409 2416 -2491 0
2409 2417 -2493 0
2409 2419 -2495 0
2409 2421 -2497 0
2410 -2491 0
2410 2416 -2493 0
2410 2417 -2495 0
2410 2419 -2497 0
2410 2421 -2499 0
2412 -2493 0
2412 2416 -2495 0
2412 2417 -2497 0
2412 2419 -2499 0
2412 2421 -2501 0
2414 -2495 0
2414 2416 -2497 0
2414 2417 -2499 0
2414 2419 -2501 0
2414 2421 -2503 0
c (0<=(aux220 + aux221 - aux227))
-2421 2503 0
-2419 2501 0
-2417 2499 0
-2416 2497 0
-2414 2503 0
-2414 -2421 2501 0
-2414 -2419 2499 0
-2414 -2417 2497 0
-2414 -2416 2495 0
-2412 2501 0
-2412 -2421 2499 0
-2412 -2419 2497 0
-2412 -2417 2495 0
-2412 -2416 2493 0
-2410 2499 0
-2410 -2421 2497 0
-2410 -2419 2495 0
-2410 -2417 2493 0
-2410 -2416 2491 0
-2409 2497 0
-2409 -2421 2495 0
-2409 -2419 2493 0
-2409 -2417 2491 0
-2409 -2416 2490 0
c ((aux224 + aux227 - aux228)<=0)
2490 -2505 0
2491 -2506 0
2493 -2508 0
2495 -2510 0
2497 -2512 0
2499 -2514 0
2501 -2516 0
2503 -2518 0
2445 -2505 0
2445 2490 -2506 0
2445 2491 -2508 0
2445 2493 -2510 0
2445 2495 -2512 0
2445 2497 -2514 0
2445 2499 -2516 0
2445 2501 -2518 0
2445 2503 -2520 0
2446 -2506 0
2446 2490 -2508 0
2446 2491 -2510 0
2446 2493 -2512 0
2446 2495 -2514 0
2446 2497 -2516 0
2446 2499 -2518 0
2446 2501 -2520 0
2446 2503 -2522 0
2448 -2508 0
2448 2490 -2510 0
2448 2491 -2512 0
2448 2493 -2514 0
2448 2495 -2516 0
2448 2497 -2518 0
2448 2499 -2520 0
2448 2501 -2522 0
2448 2503 -2524 0
2450 -2510 0
2450 2490 -2512 0
2450 2491 -2514 0
2450 2493 -2516 0
2450 2495 -2518 0
2450 2497 -2520 0
2450 2499 -2522 0
2450 2501 -2524 0
2450 2503 -2526 0
2452 -2512 0
2452 2490 -2514 0
2452 2491 -2516 0
2452 2493 -2518 0
2452 2495 -2520 0
2452 2497 -2522 0
2452 2499 -2524 0
2452 2501 -2526 0
2452 2503 -2528 0
2454 -2514 0
2454 2490 -2516 0
2454 2491 -2518 0
2454 2493 -2520 0
2454 2495 -2522 0
2454 2497 -2524 0
2454 2499 -2526 0
2454 2501 -2528 0
2454 2503 -2530 0
2456 -2516 0
2456 2490 -2518 0
2456 2491 -2520 0
2456 2493 -2522 0
2456 2495 -2524 0
2456 2497 -2526 0
2456 2499 -2528 0
2456 2501 -2530 0
2456 2503 -2532 0
2458 -2518 0
2458 2490 -2520 0
2458 2491 -2522 0
2458 2493 -2524 0
2458 2495 -2526 0
2458 2497 -2528 0
2458 2499 -2530 0
2458 2501 -2532 0
2458 2503 -2534 0
c (0<=(aux224 + aux227 - aux228))
-2503 2534 0
-2501 2532 0
-2499 2530 0
-2497 2528 0
-2495 2526 0
-2493 2524 0
-2491 2522 0
-2490 2520 0
-2458 2534 0
-2458 -2503 2532 0
-2458 -2501 2530 0
-2458 -2499 2528 0
-2458 -2497 2526 0
-2458 -2495 2524 0
-2458 -2493 2522 0
-2458 -2491 2520 0
-2458 -2490 2518 0
-2456 2532 0
-2456 -2503 2530 0
-2456 -2501 2528 0
-2456 -2499 2526 0
-2456 -2497 2524 0
-2456 -2495 2522 0
-2456 -2493 2520 0
-2456 -2491 2518 0
-2456 -2490 2516 0
-2454 2530 0
-2454 -2503 2528 0
-2454 -2501 2526 0
-2454 -2499 2524 0
-2454 -2497 2522 0
-2454 -2495 2520 0
-2454 -2493 2518 0
-2454 -2491 2516 0
-2454 -2490 2514 0
-2452 2528 0
-2452 -2503 2526 0
-2452 -2501 2524 0
-2452 -2499 2522 0
-2452 -2497 2520 0
-2452 -2495 2518 0
-2452 -2493 2516 0
-2452 -2491 2514 0
-2452 -2490 2512 0
-2450 2526 0
-2450 -2503 2524 0
-2450 -2501 2522 0
-2450 -2499 2520 0
-2450 -2497 2518 0
-2450 -2495 2516 0
-2450 -2493 2514 0
-2450 -2491 2512 0
-2450 -2490 2510 0
-2448 2524 0
-2448 -2503 2522 0
-2448 -2501 2520 0
-2448 -2499 2518 0
-2448 -2497 2516 0
-2448 -2495 2514 0
-2448 -2493 2512 0
-2448 -2491 2510 0
-2448 -2490 2508 0
-2446 2522 0
-2446 -2503 2520 0
-2446 -2501 2518 0
-2446 -2499 2516 0
-2446 -2497 2514 0
-2446 -2495 2512 0
-2446 -2493 2510 0
-2446 -2491 2508 0
-2446 -2490 2506 0
-2445 2520 0
-2445 -2503 2518 0
-2445 -2501 2516 0
-2445 -2499 2514 0
-2445 -2497 2512 0
-2445 -2495 2510 0
-2445 -2493 2508 0
-2445 -2491 2506 0
-2445 -2490 2505 0
c ((aux223 + aux225 - aux229)<=0)
2460 -2536 0
2461 -2537 0
2463 -2539 0
2465 -2541 0
2467 -2543 0
2469 -2545 0
2471 -2547 0
2473 -2549 0
2430 -2536 0
2430 2460 -2537 0
2430 2461 -2539 0
2430 2463 -2541 0
2430 2465 -2543 0
2430 2467 -2545 0
2430 2469 -2547 0
2430 2471 -2549 0
2430 2473 -2551 0
2431 -2537 0
2431 2460 -2539 0
2431 2461 -2541 0
2431 2463 -2543 0
2431 2465 -2545 0
2431 2467 -2547 0
2431 2469 -2549 0
2431 2471 -2551 0
2431 2473 -2553 0
2433 -2539 0
2433 2460 -2541 0
2433 2461 -2543 0
2433 2463 -2545 0
2433 2465 -2547 0
2433 2467 -2549 0
2433 2469 -2551 0
2433 2471 -2553 0
2433 2473 -2555 0
2435 -2541 0
2435 2460 -2543 0
2435 2461 -2545 0
2435 2463 -2547 0
2435 2465 -2549 0
2435 2467 -2551 0
2435 2469 -2553 0
2435 2471 -2555 0
2435 2473 -2557 0
2437 -2543 0
2437 2460 -2545 0
2437 2461 -2547 0
2437 2463 -2549 0
2437 2465 -2551 0
2437 2467 -2553 0
2437 2469 -2555 0
2437 2471 -2557 0
2437 2473 -2559 0
2439 -2545 0
2439 2460 -2547 0
2439 2461 -2549 0
2439 2463 -2551 0
2439 2465 -2553 0
2439 2467 -2555 0
2439 2469 -2557 0
2439 2471 -2559 0
2439 2473 -2561 0
2441 -2547 0
2441 2460 -2549 0
2441 2461 -2551 0
2441 2463 -2553 0
2441 2465 -2555 0
2441 2467 -2557 0
2441 2469 -2559 0
2441 2471 -2561 0
2441 2473 -2563 0
2443 -2549 0
2443 2460 -2551 0
2443 2461 -2553 0
2443 2463 -2555 0
2443 2465 -2557 0
2443 2467 -2559 0
2443 2469 -2561 0
2443 2471 -2563 0
2443 2473 -2565 0
c (0<=(aux223 + aux225 - aux229))
-2473 2565 0
-2471 2563 0
-2469 2561 0
-2467 2559 0
-2465 2557 0
-2463 2555 0
-2461 2553 0
-2460 2551 0
-2443 2565 0
-2443 -2473 2563 0
-2443 -2471 2561 0
-2443 -2469 2559 0
-2443 -2467 2557 0
-2443 -2465 2555 0
-2443 -2463 2553 0
-2443 -2461 2551 0
-2443 -2460 2549 0
-2441 2563 0
-2441 -2473 2561 0
-2441 -2471 2559 0
-2441 -2469 2557 0
-2441 -2467 2555 0
-2441 -2465 2553 0
-2441 -2463 2551 0
-2441 -2461 2549 0
-2441 -2460 2547 0
-2439 2561 0
-2439 -2473 2559 0
-2439 -2471 2557 0
-2439 -2469 2555 0
-2439 -2467 2553 0
-2439 -2465 2551 0
-2439 -2463 2549 0
-2439 -2461 2547 0
-2439 -2460 2545 0
-2437 2559 0
-2437 -2473 2557 0
-2437 -2471 2555 0
-2437 -2469 2553 0
-2437 -2467 2551 0
-2437 -2465 2549 0
-2437 -2463 2547 0
-2437 -2461 2545 0
-2437 -2460 2543 0
-2435 2557 0
-2435 -2473 2555 0
-2435 -2471 2553 0
-2435 -2469 2551 0
-2435 -2467 2549 0
-2435 -2465 2547 0
-2435 -2463 2545 0
-2435 -2461 2543 0
-2435 -2460 2541 0
-2433 2555 0
-2433 -2473 2553 0
-2433 -2471 2551 0
-2433 -2469 2549 0
-2433 -2467 2547 0
-2433 -2465 2545 0
-2433 -2463 2543 0
-2433 -2461 2541 0
-2433 -2460 2539 0
-2431 2553 0
-2431 -2473 2551 0
-2431 -2471 2549 0
-2431 -2469 2547 0
-2431 -2467 2545 0
-2431 -2465 2543 0
-2431 -2463 2541 0
-2431 -2461 2539 0
-2431 -2460 2537 0
-2430 2551 0
-2430 -2473 2549 0
-2430 -2471 2547 0
-2430 -2469 2545 0
-2430 -2467 2543 0
-2430 -2465 2541 0
-2430 -2463 2539 0
-2430 -2461 2537 0
-2430 -2460 2536 0
c ((SATLiteral(513) - aux230 + SATLiteral(100))<=0)
-100 -2567 0
-513 -2567 0
-513 -100 -2568 0
c (0<=(SATLiteral(513) - aux230 + SATLiteral(100)))
100 2568 0
513 2568 0
513 100 2567 0
c ((SATLiteral(531) - aux231 + SATLiteral(83))<=0)
-83 -2570 0
-531 -2570 0
-531 -83 -2571 0
c (0<=(SATLiteral(531) - aux231 + SATLiteral(83)))
83 2571 0
531 2571 0
531 83 2570 0
c ((SATLiteral(566) - aux232 + SATLiteral(66))<=0)
-66 -2573 0
-566 -2573 0
-566 -66 -2574 0
c (0<=(SATLiteral(566) - aux232 + SATLiteral(66)))
66 2574 0
566 2574 0
566 66 2573 0
c ((SATLiteral(359) - aux233 + SATLiteral(49))<=0)
-49 -2576 0
-359 -2576 0
-359 -49 -2577 0
c (0<=(SATLiteral(359) - aux233 + SATLiteral(49)))
49 2577 0
359 2577 0
359 49 2576 0
c (( - aux234 + SATLiteral(618) + SATLiteral(32))<=0)
-32 -2579 0
-618 -2579 0
-618 -32 -2580 0
c (0<=( - aux234 + SATLiteral(618) + SATLiteral(32)))
32 2580 0
618 2580 0
618 32 2579 0
c (( - aux235 + SATLiteral(462) + SATLiteral(15))<=0)
-15 -2582 0
-462 -2582 0
-462 -15 -2583 0
c (0<=( - aux235 + SATLiteral(462) + SATLiteral(15)))
15 2583 0
462 2583 0
462 15 2582 0
c (( - aux236 + SATLiteral(635) + SATLiteral(479))<=0)
-479 -2585 0
-635 -2585 0
-635 -479 -2586 0
c (0<=( - aux236 + SATLiteral(635) + SATLiteral(479)))
479 2586 0
635 2586 0
635 479 2585 0
c ((SATLiteral(376) - aux237 + SATLiteral(496))<=0)
-496 -2588 0
-376 -2588 0
-376 -496 -2589 0
c (0<=(SATLiteral(376) - aux237 + SATLiteral(496)))
496 2589 0
376 2589 0
376 496 2588 0
c (( - aux238 + SATLiteral(652) + SATLiteral(669))<=0)
-669 -2591 0
-652 -2591 0
-652 -669 -2592 0
c (0<=( - aux238 + SATLiteral(652) + SATLiteral(669)))
669 2592 0
652 2592 0
652 669 2591 0
c ((SATLiteral(307) - aux239 + SATLiteral(445))<=0)
-445 -2594 0
-307 -2594 0
-307 -445 -2595 0
c (0<=(SATLiteral(307) - aux239 + SATLiteral(445)))
445 2595 0
307 2595 0
307 445 2594 0
c (( - aux240 + SATLiteral(117) + SATLiteral(428))<=0)
-428 -2597 0
-117 -2597 0
-117 -428 -2598 0
c (0<=( - aux240 + SATLiteral(117) + SATLiteral(428)))
428 2598 0
117 2598 0
117 428 2597 0
c (( - aux241 + SATLiteral(686) + SATLiteral(411))<=0)
-411 -2600 0
-686 -2600 0
-686 -411 -2601 0
c (0<=( - aux241 + SATLiteral(686) + SATLiteral(411)))
411 2601 0
686 2601 0
686 411 2600 0
c (( - aux242 + SATLiteral(188) + SATLiteral(394))<=0)
-394 -2603 0
-188 -2603 0
-188 -394 -2604 0
c (0<=( - aux242 + SATLiteral(188) + SATLiteral(394)))
394 2604 0
188 2604 0
188 394 2603 0
c (( - aux243 + SATLiteral(135) + SATLiteral(290))<=0)
-290 -2606 0
-135 -2606 0
-135 -290 -2607 0
c (0<=( - aux243 + SATLiteral(135) + SATLiteral(290)))
290 2607 0
135 2607 0
135 290 2606 0
c (( - aux244 + SATLiteral(205) + SATLiteral(273))<=0)
-273 -2609 0
-205 -2609 0
-205 -273 -2610 0
c (0<=( - aux244 + SATLiteral(205) + SATLiteral(273)))
273 2610 0
205 2610 0
205 273 2609 0
c (( - aux245 + SATLiteral(222) + SATLiteral(256))<=0)
-256 -2612 0
-222 -2612 0
-222 -256 -2613 0
c (0<=( - aux245 + SATLiteral(222) + SATLiteral(256)))
256 2613 0
222 2613 0
222 256 2612 0
c ((SATLiteral(548) - aux246 + SATLiteral(239))<=0)
-239 -2615 0
-548 -2615 0
-548 -239 -2616 0
c (0<=(SATLiteral(548) - aux246 + SATLiteral(239)))
239 2616 0
548 2616 0
548 239 2615 0
c ((SATLiteral(325) - aux247 + SATLiteral(152))<=0)
-152 -2618 0
-325 -2618 0
-325 -152 -2619 0
c (0<=(SATLiteral(325) - aux247 + SATLiteral(152)))
152 2619 0
325 2619 0
325 152 2618 0
c ((SATLiteral(342) - aux248 + SATLiteral(170))<=0)
-170 -2621 0
-342 -2621 0
-342 -170 -2622 0
c (0<=(SATLiteral(342) - aux248 + SATLiteral(170)))
170 2622 0
342 2622 0
342 170 2621 0
c (( - aux249 + SATLiteral(584) + SATLiteral(601))<=0)
-601 -2624 0
-584 -2624 0
-584 -601 -2625 0
c (0<=( - aux249 + SATLiteral(584) + SATLiteral(601)))
601 2625 0
584 2625 0
584 601 2624 0
c ((aux237 + aux249 - aux250)<=0)
2624 -2627 0
2625 -2628 0
2588 -2627 0
2588 2624 -2628 0
2588 2625 -2630 0
2589 -2628 0
2589 2624 -2630 0
2589 2625 -2632 0
c (0<=(aux237 + aux249 - aux250))
-2625 2632 0
-2624 2630 0
-2589 2632 0
-2589 -2625 2630 0
-2589 -2624 2628 0
-2588 2630 0
-2588 -2625 2628 0
-2588 -2624 2627 0
c ((aux231 + aux244 - aux251)<=0)
2609 -2634 0
2610 -2635 0
2570 -2634 0
2570 2609 -2635 0
2570 2610 -2637 0
2571 -2635 0
2571 2609 -2637 0
2571 2610 -2639 0
c (0<=(aux231 + aux244 - aux251))
-2610 2639 0
-2609 2637 0
-2571 2639 0
-2571 -2610 2637 0
-2571 -2609 2635 0
-2570 2637 0
-2570 -2610 2635 0
-2570 -2609 2634 0
c ((aux230 + aux235 - aux252)<=0)
2582 -2641 0
2583 -2642 0
2567 -2641 0
2567 2582 -2642 0
2567 2583 -2644 0
2568 -2642 0
2568 2582 -2644 0
2568 2583 -2646 0
c (0<=(aux230 + aux235 - aux252))
-2583 2646 0
-2582 2644 0
-2568 2646 0
-2568 -2583 2644 0
-2568 -2582 2642 0
-2567 2644 0
-2567 -2583 2642 0
-2567 -2582 2641 0
c ((aux232 + aux233 - aux253)<=0)
2576 -2648 0
2577 -2649 0
2573 -2648 0
2573 2576 -2649 0
2573 2577 -2651 0
2574 -2649 0
2574 2576 -2651 0
2574 2577 -2653 0
c (0<=(aux232 + aux233 - aux253))
-2577 2653 0
-2576 2651 0
-2574 2653 0
-2574 -2577 2651 0
-2574 -2576 2649 0
-2573 2651 0
-2573 -2577 2649 0
-2573 -2576 2648 0
c ((aux234 + aux236 - aux254)<=0)
2585 -2655 0
2586 -2656 0
2579 -2655 0
2579 2585 -2656 0
2579 2586 -2658 0
2580 -2656 0
2580 2585 -2658 0
2580 2586 -2660 0
c (0<=(aux234 + aux236 - aux254))
-2586 2660 0
-2585 2658 0
-2580 2660 0
-2580 -2586 2658 0
-2580 -2585 2656 0
-2579 2658 0
-2579 -2586 2656 0
-2579 -2585 2655 0
c ((aux243 + aux247 - aux255)<=0)
2618 -2662 0
2619 -2663 0
2606 -2662 0
2606 2618 -2663 0
2606 2619 -2665 0
2607 -2663 0
2607 2618 -2665 0
2607 2619 -2667 0
c (0<=(aux243 + aux247 - aux255))
-2619 2667 0
-2618 2665 0
-2607 2667 0
-2607 -2619 2665 0
-2607 -2618 2663 0
-2606 2665 0
-2606 -2619 2663 0
-2606 -2618 2662 0
c ((aux239 + aux240 - aux256)<=0)
2597 -2669 0
2598 -2670 0
2594 -2669 0
2594 2597 -2670 0
2594 2598 -2672 0
2595 -2670 0
2595 2597 -2672 0
2595 2598 -2674 0
c (0<=(aux239 + aux240 - aux256))
-2598 2674 0
-2597 2672 0
-2595 2674 0
-2595 -2598 2672 0
-2595 -2597 2670 0
-2594 2672 0
-2594 -2598 2670 0
-2594 -2597 2669 0
c ((aux241 + aux242 - aux257)<=0)
2603 -2676 0
2604 -2677 0
2600 -2676 0
2600 2603 -2677 0
2600 2604 -2679 0
2601 -2677 0
2601 2603 -2679 0
2601 2604 -2681 0
c (0<=(aux241 + aux242 - aux257))
-2604 2681 0
-2603 2679 0
-2601 2681 0
-2601 -2604 2679 0
-2601 -2603 2677 0
-2600 2679 0
-2600 -2604 2677 0
-2600 -2603 2676 0
c ((aux245 + aux248 - aux258)<=0)
2621 -2683 0
2622 -2684 0
2612 -2683 0
2612 2621 -2684 0
2612 2622 -2686 0
2613 -2684 0
2613 2621 -2686 0
2613 2622 -2688 0
c (0<=(aux245 + aux248 - aux258))
-2622 2688 0
-2621 2686 0
-2613 2688 0
-2613 -2622 2686 0
-2613 -2621 2684 0
-2612 2686 0
-2612 -2622 2684 0
-2612 -2621 2683 0
c ((aux238 + aux246 - aux259)<=0)
2615 -2690 0
2616 -2691 0
2591 -2690 0
2591 2615 -2691 0
2591 2616 -2693 0
2592 -2691 0
2592 2615 -2693 0
2592 2616 -2695 0
c (0<=(aux238 + aux246 - aux259))
-2616 2695 0
-2615 2693 0
-2592 2695 0
-2592 -2616 2693 0
-2592 -2615 2691 0
-2591 2693 0
-2591 -2616 2691 0
-2591 -2615 2690 0
c ((aux253 + aux259 - aux260)<=0)
2690 -2697 0
2691 -2698 0
2693 -2700 0
2695 -2702 0
2648 -2697 0
2648 2690 -2698 0
2648 2691 -2700 0
2648 2693 -2702 0
2648 2695 -2704 0
2649 -2698 0
2649 2690 -2700 0
2649 2691 -2702 0
2649 2693 -2704 0
2649 2695 -2706 0
2651 -2700 0
2651 2690 -2702 0
2651 2691 -2704 0
2651 2693 -2706 0
2651 2695 -2708 0
2653 -2702 0
2653 2690 -2704 0
2653 2691 -2706 0
2653 2693 -2708 0
2653 2695 -2710 0
c (0<=(aux253 + aux259 - aux260))
-2695 2710 0
-2693 2708 0
-2691 2706 0
-2690 2704 0
-2653 2710 0
-2653 -2695 2708 0
-2653 -2693 2706 0
-2653 -2691 2704 0
-2653 -2690 2702 0
-2651 2708 0
-2651 -2695 2706 0
-2651 -2693 2704 0
-2651 -2691 2702 0
-2651 -2690 2700 0
-2649 2706 0
-2649 -2695 2704 0
-2649 -2693 2702 0
-2649 -2691 2700 0
-2649 -2690 2698 0
-2648 2704 0
-2648 -2695 2702 0
-2648 -2693 2700 0
-2648 -2691 2698 0
-2648 -2690 2697 0
c ((aux252 + aux256 - aux261)<=0)
2669 -2712 0
2670 -2713 0
2672 -2715 0
2674 -2717 0
2641 -2712 0
2641 2669 -2713 0
2641 2670 -2715 0
2641 2672 -2717 0
2641 2674 -2719 0
2642 -2713 0
2642 2669 -2715 0
2642 2670 -2717 0
2642 2672 -2719 0
2642 2674 -2721 0
2644 -2715 0
2644 2669 -2717 0
2644 2670 -2719 0
2644 2672 -2721 0
2644 2674 -2723 0
2646 -2717 0
2646 2669 -2719 0
2646 2670 -2721 0
2646 2672 -2723 0
2646 2674 -2725 0
c (0<=(aux252 + aux256 - aux261))
-2674 2725 0
-2672 2723 0
-2670 2721 0
-2669 2719 0
-2646 2725 0
-2646 -2674 2723 0
-2646 -2672 2721 0
-2646 -2670 2719 0
-2646 -2669 2717 0
-2644 2723 0
-2644 -2674 2721 0
-2644 -2672 2719 0
-2644 -2670 2717 0
-2644 -2669 2715 0
-2642 2721 0
-2642 -2674 2719 0
-2642 -2672 2717 0
-2642 -2670 2715 0
-2642 -2669 2713 0
-2641 2719 0
-2641 -2674 2717 0
-2641 -2672 2715 0
-2641 -2670 2713 0
-2641 -2669 2712 0
c ((aux250 + aux251 - aux262)<=0)
2634 -2727 0
2635 -2728 0
2637 -2730 0
2639 -2732 0
2627 -2727 0
2627 2634 -2728 0
2627 2635 -2730 0
2627 2637 -2732 0
2627 2639 -2734 0
2628 -2728 0
2628 2634 -2730 0
2628 2635 -2732 0
2628 2637 -2734 0
2628 2639 -2736 0
2630 -2730 0
2630 2634 -2732 0
2630 2635 -2734 0
2630 2637 -2736 0
2630 2639 -2738 0
2632 -2732 0
2632 2634 -2734 0
2632 2635 -2736 0
2632 2637 -2738 0
2632 2639 -2740 0
c (0<=(aux250 + aux251 - aux262))
-2639 2740 0
-2637 2738 0
-2635 2736 0
-2634 2734 0
-2632 2740 0
-2632 -2639 2738 0
-2632 -2637 2736 0
-2632 -2635 2734 0
-2632 -2634 2732 0
-2630 2738 0
-2630 -2639 2736 0
-2630 -2637 2734 0
-2630 -2635 2732 0
-2630 -2634 2730 0
-2628 2736 0
-2628 -2639 2734 0
-2628 -2637 2732 0
-2628 -2635 2730 0
-2628 -2634 2728 0
-2627 2734 0
-2627 -2639 2732 0
-2627 -2637 2730 0
-2627 -2635 2728 0
-2627 -2634 2727 0
c ((aux254 + aux255 - aux263)<=0)
2662 -2742 0
2663 -2743 0
2665 -2745 0
2667 -2747 0
2655 -2742 0
2655 2662 -2743 0
2655 2663 -2745 0
2655 2665 -2747 0
2655 2667 -2749 0
2656 -2743 0
2656 2662 -2745 0
2656 2663 -2747 0
2656 2665 -2749 0
2656 2667 -2751 0
2658 -2745 0
2658 2662 -2747 0
2658 2663 -2749 0
2658 2665 -2751 0
2658 2667 -2753 0
2660 -2747 0
2660 2662 -2749 0
2660 2663 -2751 0
2660 2665 -2753 0
2660 2667 -2755 0
c (0<=(aux254 + aux255 - aux263))
-2667 2755 0
-2665 2753 0
-2663 2751 0
-2662 2749 0
-2660 2755 0
-2660 -2667 2753 0
-2660 -2665 2751 0
-2660 -2663 2749 0
-2660 -2662 2747 0
-2658 2753 0
-2658 -2667 2751 0
-2658 -2665 2749 0
-2658 -2663 2747 0
-2658 -2662 2745 0
-2656 2751 0
-2656 -2667 2749 0
-2656 -2665 2747 0
-2656 -2663 2745 0
-2656 -2662 2743 0
-2655 2749 0
-2655 -2667 2747 0
-2655 -2665 2745 0
-2655 -2663 2743 0
-2655 -2662 2742 0
c ((aux257 + aux258 - aux264)<=0)
2683 -2757 0
2684 -2758 0
2686 -2760 0
2688 -2762 0
2676 -2757 0
2676 2683 -2758 0
2676 2684 -2760 0
2676 2686 -2762 0
2676 2688 -2764 0
2677 -2758 0
2677 2683 -2760 0
2677 2684 -2762 0
2677 2686 -2764 0
2677 2688 -2766 0
2679 -2760 0
2679 2683 -2762 0
2679 2684 -2764 0
2679 2686 -2766 0
2679 2688 -2768 0
2681 -2762 0
2681 2683 -2764 0
2681 2684 -2766 0
2681 2686 -2768 0
2681 2688 -2770 0
c (0<=(aux257 + aux258 - aux264))
-2688 2770 0
-2686 2768 0
-2684 2766 0
-2683 2764 0
-2681 2770 0
-2681 -2688 2768 0
-2681 -2686 2766 0
-2681 -2684 2764 0
-2681 -2683 2762 0
-2679 2768 0
-2679 -2688 2766 0
-2679 -2686 2764 0
-2679 -2684 2762 0
-2679 -2683 2760 0
-2677 2766 0
-2677 -2688 2764 0
-2677 -2686 2762 0
-2677 -2684 2760 0
-2677 -2683 2758 0
-2676 2764 0
-2676 -2688 2762 0
-2676 -2686 2760 0
-2676 -2684 2758 0
-2676 -2683 2757 0
c ((aux261 + aux264 - aux265)<=0)
2757 -2772 0
2758 -2773 0
2760 -2775 0
2762 -2777 0
2764 -2779 0
2766 -2781 0
2768 -2783 0
2770 -2785 0
2712 -2772 0
2712 2757 -2773 0
2712 2758 -2775 0
2712 2760 -2777 0
2712 2762 -2779 0
2712 2764 -2781 0
2712 2766 -2783 0
2712 2768 -2785 0
2712 2770 -2787 0
2713 -2773 0
2713 2757 -2775 0
2713 2758 -2777 0
2713 2760 -2779 0
2713 2762 -2781 0
2713 2764 -2783 0
2713 2766 -2785 0
2713 2768 -2787 0
2713 2770 -2789 0
2715 -2775 0
2715 2757 -2777 0
2715 2758 -2779 0
2715 2760 -2781 0
2715 2762 -2783 0
2715 2764 -2785 0
2715 2766 -2787 0
2715 2768 -2789 0
2715 2770 -2791 0
2717 -2777 0
2717 2757 -2779 0
2717 2758 -2781 0
2717 2760 -2783 0
2717 2762 -2785 0
2717 2764 -2787 0
2717 2766 -2789 0
2717 2768 -2791 0
2717 2770 -2793 0
2719 -2779 0
2719 2757 -2781 0
2719 2758 -2783 0
2719 2760 -2785 0
2719 2762 -2787 0
2719 2764 -2789 0
2719 2766 -2791 0
2719 2768 -2793 0
2719 2770 -2795 0
2721 -2781 0
2721 2757 -2783 0
2721 2758 -2785 0
2721 2760 -2787 0
2721 2762 -2789 0
2721 2764 -2791 0
2721 2766 -2793 0
2721 2768 -2795 0
2721 2770 -2797 0
2723 -2783 0
2723 2757 -2785 0
2723 2758 -2787 0
2723 2760 -2789 0
2723 2762 -2791 0
2723 2764 -2793 0
2723 2766 -2795 0
2723 2768 -2797 0
2723 2770 -2799 0
2725 -2785 0
2725 2757 -2787 0
2725 2758 -2789 0
2725 2760 -2791 0
2725 2762 -2793 0
2725 2764 -2795 0
2725 2766 -2797 0
2725 2768 -2799 0
2725 2770 -2801 0
c (0<=(aux261 + aux264 - aux265))
-2770 2801 0
-2768 2799 0
-2766 2797 0
-2764 2795 0
-2762 2793 0
-2760 2791 0
-2758 2789 0
-2757 2787 0
-2725 2801 0
-2725 -2770 2799 0
-2725 -2768 2797 0
-2725 -2766 2795 0
-2725 -2764 2793 0
-2725 -2762 2791 0
-2725 -2760 2789 0
-2725 -2758 2787 0
-2725 -2757 2785 0
-2723 2799 0
-2723 -2770 2797 0
-2723 -2768 2795 0
-2723 -2766 2793 0
-2723 -2764 2791 0
-2723 -2762 2789 0
-2723 -2760 2787 0
-2723 -2758 2785 0
-2723 -2757 2783 0
-2721 2797 0
-2721 -2770 2795 0
-2721 -2768 2793 0
-2721 -2766 2791 0
-2721 -2764 2789 0
-2721 -2762 2787 0
-2721 -2760 2785 0
-2721 -2758 2783 0
-2721 -2757 2781 0
-2719 2795 0
-2719 -2770 2793 0
-2719 -2768 2791 0
-2719 -2766 2789 0
-2719 -2764 2787 0
-2719 -2762 2785 0
-2719 -2760 2783 0
-2719 -2758 2781 0
-2719 -2757 2779 0
-2717 2793 0
-2717 -2770 2791 0
-2717 -2768 2789 0
-2717 -2766 2787 0
-2717 -2764 2785 0
-2717 -2762 2783 0
-2717 -2760 2781 0
-2717 -2758 2779 0
-2717 -2757 2777 0
-2715 2791 0
-2715 -2770 2789 0
-2715 -2768 2787 0
-2715 -2766 2785 0
-2715 -2764 2783 0
-2715 -2762 2781 0
-2715 -2760 2779 0
-2715 -2758 2777 0
-2715 -2757 2775 0
-2713 2789 0
-2713 -2770 2787 0
-2713 -2768 2785 0
-2713 -2766 2783 0
-2713 -2764 2781 0
-2713 -2762 2779 0
-2713 -2760 2777 0
-2713 -2758 2775 0
-2713 -2757 2773 0
-2712 2787 0
-2712 -2770 2785 0
-2712 -2768 2783 0
-2712 -2766 2781 0
-2712 -2764 2779 0
-2712 -2762 2777 0
-2712 -2760 2775 0
-2712 -2758 2773 0
-2712 -2757 2772 0
c ((aux260 + aux262 - aux266)<=0)
2727 -2803 0
2728 -2804 0
2730 -2806 0
2732 -2808 0
2734 -2810 0
2736 -2812 0
2738 -2814 0
2740 -2816 0
2697 -2803 0
2697 2727 -2804 0
2697 2728 -2806 0
2697 2730 -2808 0
2697 2732 -2810 0
2697 2734 -2812 0
2697 2736 -2814 0
2697 2738 -2816 0
2697 2740 -2818 0
2698 -2804 0
2698 2727 -2806 0
2698 2728 -2808 0
2698 2730 -2810 0
2698 2732 -2812 0
2698 2734 -2814 0
2698 2736 -2816 0
2698 2738 -2818 0
2698 2740 -2820 0
2700 -2806 0
2700 2727 -2808 0
2700 2728 -2810 0
2700 2730 -2812 0
2700 2732 -2814 0
2700 2734 -2816 0
2700 2736 -2818 0
2700 2738 -2820 0
2700 2740 -2822 0
2702 -2808 0
2702 2727 -2810 0
2702 2728 -2812 0
2702 2730 -2814 0
2702 2732 -2816 0
2702 2734 -2818 0
2702 2736 -2820 0
2702 2738 -2822 0
2702 2740 -2824 0
2704 -2810 0
2704 2727 -2812 0
2704 2728 -2814 0
2704 2730 -2816 0
2704 2732 -2818 0
2704 2734 -2820 0
2704 2736 -2822 0
2704 2738 -2824 0
2704 2740 -2826 0
2706 -2812 0
2706 2727 -2814 0
2706 2728 -2816 0
2706 2730 -2818 0
2706 2732 -2820 0
2706 2734 -2822 0
2706 2736 -2824 0
2706 2738 -2826 0
2706 2740 -2828 0
2708 -2814 0
2708 2727 -2816 0
2708 2728 -2818 0
2708 2730 -2820 0
2708 2732 -2822 0
2708 2734 -2824 0
2708 2736 -2826 0
2708 2738 -2828 0
2708 2740 -2830 0
2710 -2816 0
2710 2727 -2818 0
2710 2728 -2820 0
2710 2730 -2822 0
2710 2732 -2824 0
2710 2734 -2826 0
2710 2736 -2828 0
2710 2738 -2830 0
2710 2740 -2832 0
c (0<=(aux260 + aux262 - aux266))
-2740 2832 0
-2738 2830 0
-2736 2828 0
-2734 2826 0
-2732 2824 0
-2730 2822 0
-2728 2820 0
-2727 2818 0
-2710 2832 0
-2710 -2740 2830 0
-2710 -2738 2828 0
-2710 -2736 2826 0
-2710 -2734 2824 0
-2710 -2732 2822 0
-2710 -2730 2820 0
-2710 -2728 2818 0
-2710 -2727 2816 0
-2708 2830 0
-2708 -2740 2828 0
-2708 -2738 2826 0
-2708 -2736 2824 0
-2708 -2734 2822 0
-2708 -2732 2820 0
-2708 -2730 2818 0
-2708 -2728 2816 0
-2708 -2727 2814 0
-2706 2828 0
-2706 -2740 2826 0
-2706 -2738 2824 0
-2706 -2736 2822 0
-2706 -2734 2820 0
-2706 -2732 2818 0
-2706 -2730 2816 0
-2706 -2728 2814 0
-2706 -2727 2812 0
-2704 2826 0
-2704 -2740 2824 0
-2704 -2738 2822 0
-2704 -2736 2820 0
-2704 -2734 2818 0
-2704 -2732 2816 0
-2704 -2730 2814 0
-2704 -2728 2812 0
-2704 -2727 2810 0
-2702 2824 0
-2702 -2740 2822 0
-2702 -2738 2820 0
-2702 -2736 2818 0
-2702 -2734 2816 0
-2702 -2732 2814 0
-2702 -2730 2812 0
-2702 -2728 2810 0
-2702 -2727 2808 0
-2700 2822 0
-2700 -2740 2820 0
-2700 -2738 2818 0
-2700 -2736 2816 0
-2700 -2734 2814 0
-2700 -2732 2812 0
-2700 -2730 2810 0
-2700 -2728 2808 0
-2700 -2727 2806 0
-2698 2820 0
-2698 -2740 2818 0
-2698 -2738 2816 0
-2698 -2736 2814 0
-2698 -2734 2812 0
-2698 -2732 2810 0
-2698 -2730 2808 0
-2698 -2728 2806 0
-2698 -2727 2804 0
-2697 2818 0
-2697 -2740 2816 0
-2697 -2738 2814 0
-2697 -2736 2812 0
-2697 -2734 2810 0
-2697 -2732 2808 0
-2697 -2730 2806 0
-2697 -2728 2804 0
-2697 -2727 2803 0
c ((SATLiteral(515) - aux267 + SATLiteral(102))<=0)
-102 -2834 0
-515 -2834 0
-515 -102 -2835 0
c (0<=(SATLiteral(515) - aux267 + SATLiteral(102)))
102 2835 0
515 2835 0
515 102 2834 0
c ((SATLiteral(533) - aux268 + SATLiteral(85))<=0)
-85 -2837 0
-533 -2837 0
-533 -85 -2838 0
c (0<=(SATLiteral(533) - aux268 + SATLiteral(85)))
85 2838 0
533 2838 0
533 85 2837 0
c ((SATLiteral(568) - aux269 + SATLiteral(68))<=0)
-68 -2840 0
-568 -2840 0
-568 -68 -2841 0
c (0<=(SATLiteral(568) - aux269 + SATLiteral(68)))
68 2841 0
568 2841 0
568 68 2840 0
c ((SATLiteral(361) - aux270 + SATLiteral(51))<=0)
-51 -2843 0
-361 -2843 0
-361 -51 -2844 0
c (0<=(SATLiteral(361) - aux270 + SATLiteral(51)))
51 2844 0
361 2844 0
361 51 2843 0
c (( - aux271 + SATLiteral(620) + SATLiteral(34))<=0)
-34 -2846 0
-620 -2846 0
-620 -34 -2847 0
c (0<=( - aux271 + SATLiteral(620) + SATLiteral(34)))
34 2847 0
620 2847 0
620 34 2846 0
c (( - aux272 + SATLiteral(464) + SATLiteral(17))<=0)
-17 -2849 0
-464 -2849 0
-464 -17 -2850 0
c (0<=( - aux272 + SATLiteral(464) + SATLiteral(17)))
17 2850 0
464 2850 0
464 17 2849 0
c (( - aux273 + SATLiteral(637) + SATLiteral(481))<=0)
-481 -2852 0
-637 -2852 0
-637 -481 -2853 0
c (0<=( - aux273 + SATLiteral(637) + SATLiteral(481)))
481 2853 0
637 2853 0
637 481 2852 0
c ((SATLiteral(378) - aux274 + SATLiteral(498))<=0)
-498 -2855 0
-378 -2855 0
-378 -498 -2856 0
c (0<=(SATLiteral(378) - aux274 + SATLiteral(498)))
498 2856 0
378 2856 0
378 498 2855 0
c (( - aux275 + SATLiteral(654) + SATLiteral(671))<=0)
-671 -2858 0
-654 -2858 0
-654 -671 -2859 0
c (0<=( - aux275 + SATLiteral(654) + SATLiteral(671)))
671 2859 0
654 2859 0
654 671 2858 0
c ((SATLiteral(309) - aux276 + SATLiteral(447))<=0)
-447 -2861 0
-309 -2861 0
-309 -447 -2862 0
c (0<=(SATLiteral(309) - aux276 + SATLiteral(447)))
447 2862 0
309 2862 0
309 447 2861 0
c (( - aux277 + SATLiteral(119) + SATLiteral(430))<=0)
-430 -2864 0
-119 -2864 0
-119 -430 -2865 0
c (0<=( - aux277 + SATLiteral(119) + SATLiteral(430)))
430 2865 0
119 2865 0
119 430 2864 0
c (( - aux278 + SATLiteral(688) + SATLiteral(413))<=0)
-413 -2867 0
-688 -2867 0
-688 -413 -2868 0
c (0<=( - aux278 + SATLiteral(688) + SATLiteral(413)))
413 2868 0
688 2868 0
688 413 2867 0
c (( - aux279 + SATLiteral(190) + SATLiteral(396))<=0)
-396 -2870 0
-190 -2870 0
-190 -396 -2871 0
c (0<=( - aux279 + SATLiteral(190) + SATLiteral(396)))
396 2871 0
190 2871 0
190 396 2870 0
c (( - aux280 + SATLiteral(137) + SATLiteral(292))<=0)
-292 -2873 0
-137 -2873 0
-137 -292 -2874 0
c (0<=( - aux280 + SATLiteral(137) + SATLiteral(292)))
292 2874 0
137 2874 0
137 292 2873 0
c (( - aux281 + SATLiteral(207) + SATLiteral(275))<=0)
-275 -2876 0
-207 -2876 0
-207 -275 -2877 0
c (0<=( - aux281 + SATLiteral(207) + SATLiteral(275)))
275 2877 0
207 2877 0
207 275 2876 0
c (( - aux282 + SATLiteral(224) + SATLiteral(258))<=0)
-258 -2879 0
-224 -2879 0
-224 -258 -2880 0
c (0<=( - aux282 + SATLiteral(224) + SATLiteral(258)))
258 2880 0
224 2880 0
224 258 2879 0
c ((SATLiteral(550) - aux283 + SATLiteral(241))<=0)
-241 -2882 0
-550 -2882 0
-550 -241 -2883 0
c (0<=(SATLiteral(550) - aux283 + SATLiteral(241)))
241 2883 0
550 2883 0
550 241 2882 0
c ((SATLiteral(327) - aux284 + SATLiteral(154))<=0)
-154 -2885 0
-327 -2885 0
-327 -154 -2886 0
c (0<=(SATLiteral(327) - aux284 + SATLiteral(154)))
154 2886 0
327 2886 0
327 154 2885 0
c ((SATLiteral(344) - aux285 + SATLiteral(172))<=0)
-172 -2888 0
-344 -2888 0
-344 -172 -2889 0
c (0<=(SATLiteral(344) - aux285 + SATLiteral(172)))
172 2889 0
344 2889 0
344 172 2888 0
c (( - aux286 + SATLiteral(586) + SATLiteral(603))<=0)
-603 -2891 0
-586 -2891 0
-586 -603 -2892 0
c (0<=( - aux286 + SATLiteral(586) + SATLiteral(603)))
603 2892 0
586 2892 0
586 603 2891 0
c ((aux274 + aux286 - aux287)<=0)
2891 -2894 0
2892 -2895 0
2855 -2894 0
2855 2891 -2895 0
2855 2892 -2897 0
2856 -2895 0
2856 2891 -2897 0
2856 2892 -2899 0
c (0<=(aux274 + aux286 - aux287))
-2892 2899 0
-2891 2897 0
-2856 2899 0
-2856 -2892 2897 0
-2856 -2891 2895 0
-2855 2897 0
-2855 -2892 2895 0
-2855 -2891 2894 0
c ((aux268 + aux281 - aux288)<=0)
2876 -2901 0
2877 -2902 0
2837 -2901 0
2837 2876 -2902 0
2837 2877 -2904 0
2838 -2902 0
2838 2876 -2904 0
2838 2877 -2906 0
c (0<=(aux268 + aux281 - aux288))
-2877 2906 0
-2876 2904 0
-2838 2906 0
-2838 -2877 2904 0
-2838 -2876 2902 0
-2837 2904 0
-2837 -2877 2902 0
-2837 -2876 2901 0
c ((aux267 + aux272 - aux289)<=0)
2849 -2908 0
2850 -2909 0
2834 -2908 0
2834 2849 -2909 0
2834 2850 -2911 0
2835 -2909 0
2835 2849 -2911 0
2835 2850 -2913 0
c (0<=(aux267 + aux272 - aux289))
-2850 2913 0
-2849 2911 0
-2835 2913 0
-2835 -2850 2911 0
-2835 -2849 2909 0
-2834 2911 0
-2834 -2850 2909 0
-2834 -2849 2908 0
c ((aux269 + aux270 - aux290)<=0)
2843 -2915 0
2844 -2916 0
2840 -2915 0
2840 2843 -2916 0
2840 2844 -2918 0
2841 -2916 0
2841 2843 -2918 0
2841 2844 -2920 0
c (0<=(aux269 + aux270 - aux290))
-2844 2920 0
-2843 2918 0
-2841 2920 0
-2841 -2844 2918 0
-2841 -2843 2916 0
-2840 2918 0
-2840 -2844 2916 0
-2840 -2843 2915 0
c ((aux271 + aux273 - aux291)<=0)
2852 -2922 0
2853 -2923 0
2846 -2922 0
2846 2852 -2923 0
2846 2853 -2925 0
2847 -2923 0
2847 2852 -2925 0
2847 2853 -2927 0
c (0<=(aux271 + aux273 - aux291))
-2853 2927 0
-2852 2925 0
-2847 2927 0
-2847 -2853 2925 0
-2847 -2852 2923 0
-2846 2925 0
-2846 -2853 2923 0
-2846 -2852 2922 0
c ((aux280 + aux284 - aux292)<=0)
2885 -2929 0
2886 -2930 0
2873 -2929 0
2873 2885 -2930 0
2873 2886 -2932 0
2874 -2930 0
2874 2885 -2932 0
2874 2886 -2934 0
c (0<=(aux280 + aux284 - aux292))
-2886 2934 0
-2885 2932 0
-2874 2934 0
-2874 -2886 2932 0
-2874 -2885 2930 0
-2873 2932 0
-2873 -2886 2930 0
-2873 -2885 2929 0
c ((aux276 + aux277 - aux293)<=0)
2864 -2936 0
2865 -2937 0
2861 -2936 0
2861 2864 -2937 0
2861 2865 -2939 0
2862 -2937 0
2862 2864 -2939 0
2862 2865 -2941 0
c (0<=(aux276 + aux277 - aux293))
-2865 2941 0
-2864 2939 0
-2862 2941 0
-2862 -2865 2939 0
-2862 -2864 2937 0
-2861 2939 0
-2861 -2865 2937 0
-2861 -2864 2936 0
c ((aux278 + aux279 - aux294)<=0)
2870 -2943 0
2871 -2944 0
2867 -2943 0
2867 2870 -2944 0
2867 2871 -2946 0
2868 -2944 0
2868 2870 -2946 0
2868 2871 -2948 0
c (0<=(aux278 + aux279 - aux294))
-2871 2948 0
-2870 2946 0
-2868 2948 0
-2868 -2871 2946 0
-2868 -2870 2944 0
-2867 2946 0
-2867 -2871 2944 0
-2867 -2870 2943 0
c ((aux282 + aux285 - aux295)<=0)
2888 -2950 0
2889 -2951 0
2879 -2950 0
2879 2888 -2951 0
2879 2889 -2953 0
2880 -2951 0
2880 2888 -2953 0
2880 2889 -2955 0
c (0<=(aux282 + aux285 - aux295))
-2889 2955 0
-2888 2953 0
-2880 2955 0
-2880 -2889 2953 0
-2880 -2888 2951 0
-2879 2953 0
-2879 -2889 2951 0
-2879 -2888 2950 0
c ((aux275 + aux283 - aux296)<=0)
2882 -2957 0
2883 -2958 0
2858 -2957 0
2858 2882 -2958 0
2858 2883 -2960 0
2859 -2958 0
2859 2882 -2960 0
2859 2883 -2962 0
c (0<=(aux275 + aux283 - aux296))
-2883 2962 0
-2882 2960 0
-2859 2962 0
-2859 -2883 2960 0
-2859 -2882 2958 0
-2858 2960 0
-2858 -2883 2958 0
-2858 -2882 2957 0
c ((aux290 + aux296 - aux297)<=0)
2957 -2964 0
2958 -2965 0
2960 -2967 0
2962 -2969 0
2915 -2964 0
2915 2957 -2965 0
2915 2958 -2967 0
2915 2960 -2969 0
2915 2962 -2971 0
2916 -2965 0
2916 2957 -2967 0
2916 2958 -2969 0
2916 2960 -2971 0
2916 2962 -2973 0
2918 -2967 0
2918 2957 -2969 0
2918 2958 -2971 0
2918 2960 -2973 0
2918 2962 -2975 0
2920 -2969 0
2920 2957 -2971 0
2920 2958 -2973 0
2920 2960 -2975 0
2920 2962 -2977 0
c (0<=(aux290 + aux296 - aux297))
-2962 2977 0
-2960 2975 0
-2958 2973 0
-2957 2971 0
-2920 2977 0
-2920 -2962 2975 0
-2920 -2960 2973 0
-2920 -2958 2971 0
-2920 -2957 2969 0
-2918 2975 0
-2918 -2962 2973 0
-2918 -2960 2971 0
-2918 -2958 2969 0
-2918 -2957 2967 0
-2916 2973 0
-2916 -2962 2971 0
-2916 -2960 2969 0
-2916 -2958 2967 0
-2916 -2957 2965 0
-2915 2971 0
-2915 -2962 2969 0
-2915 -2960 2967 0
-2915 -2958 2965 0
-2915 -2957 2964 0
c ((aux289 + aux293 - aux298)<=0)
2936 -2979 0
2937 -2980 0
2939 -2982 0
2941 -2984 0
2908 -2979 0
2908 2936 -2980 0
2908 2937 -2982 0
2908 2939 -2984 0
2908 2941 -2986 0
2909 -2980 0
2909 2936 -2982 0
2909 2937 -2984 0
2909 2939 -2986 0
2909 2941 -2988 0
2911 -2982 0
2911 2936 -2984 0
2911 2937 -2986 0
2911 2939 -2988 0
2911 2941 -2990 0
2913 -2984 0
2913 2936 -2986 0
2913 2937 -2988 0
2913 2939 -2990 0
2913 2941 -2992 0
c (0<=(aux289 + aux293 - aux298))
-2941 2992 0
-2939 2990 0
-2937 2988 0
-2936 2986 0
-2913 2992 0
-2913 -2941 2990 0
-2913 -2939 2988 0
-2913 -2937 2986 0
-2913 -2936 2984 0
-2911 2990 0
-2911 -2941 2988 0
-2911 -2939 2986 0
-2911 -2937 2984 0
-2911 -2936 2982 0
-2909 2988 0
-2909 -2941 2986 0
-2909 -2939 2984 0
-2909 -2937 2982 0
-2909 -2936 2980 0
-2908 2986 0
-2908 -2941 2984 0
-2908 -2939 2982 0
-2908 -2937 2980 0
-2908 -2936 2979 0
c ((aux287 + aux288 - aux299)<=0)
2901 -2994 0
2902 -2995 0
2904 -2997 0
2906 -2999 0
2894 -2994 0
2894 2901 -2995 0
2894 2902 -2997 0
2894 2904 -2999 0
2894 2906 -3001 0
2895 -2995 0
2895 2901 -2997 0
2895 2902 -2999 0
2895 2904 -3001 0
2895 2906 -3003 0
2897 -2997 0
2897 2901 -2999 0
2897 2902 -3001 0
2897 2904 -3003 0
2897 2906 -3005 0
2899 -2999 0
2899 2901 -3001 0
2899 2902 -3003 0
2899 2904 -3005 0
2899 2906 -3007 0
c (0<=(aux287 + aux288 - aux299))
-2906 3007 0
-2904 3005 0
-2902 3003 0
-2901 3001 0
-2899 3007 0
-2899 -2906 3005 0
-2899 -2904 3003 0
-2899 -2902 3001 0
-2899 -2901 2999 0
-2897 3005 0
-2897 -2906 3003 0
-2897 -2904 3001 0
-2897 -2902 2999 0
-2897 -2901 2997 0
-2895 3003 0
-2895 -2906 3001 0
-2895 -2904 2999 0
-2895 -2902 2997 0
-2895 -2901 2995 0
-2894 3001 0
-2894 -2906 2999 0
-2894 -2904 2997 0
-2894 -2902 2995 0
-2894 -2901 2994 0
c ((aux291 + aux292 - aux300)<=0)
2929 -3009 0
2930 -3010 0
2932 -3012 0
2934 -3014 0
2922 -3009 0
2922 2929 -3010 0
2922 2930 -3012 0
2922 2932 -3014 0
2922 2934 -3016 0
2923 -3010 0
2923 2929 -3012 0
2923 2930 -3014 0
2923 2932 -3016 0
2923 2934 -3018 0
2925 -3012 0
2925 2929 -3014 0
2925 2930 -3016 0
2925 2932 -3018 0
2925 2934 -3020 0
2927 -3014 0
2927 2929 -3016 0
2927 2930 -3018 0
2927 2932 -3020 0
2927 2934 -3022 0
c (0<=(aux291 + aux292 - aux300))
-2934 3022 0
-2932 3020 0
-2930 3018 0
-2929 3016 0
-2927 3022 0
-2927 -2934 3020 0
-2927 -2932 3018 0
-2927 -2930 3016 0
-2927 -2929 3014 0
-2925 3020 0
-2925 -2934 3018 0
-2925 -2932 3016 0
-2925 -2930 3014 0
-2925 -2929 3012 0
-2923 3018 0
-2923 -2934 3016 0
-2923 -2932 3014 0
-2923 -2930 3012 0
-2923 -2929 3010 0
-2922 3016 0
-2922 -2934 3014 0
-2922 -2932 3012 0
-2922 -2930 3010 0
-2922 -2929 3009 0
c ((aux294 + aux295 - aux301)<=0)
2950 -3024 0
2951 -3025 0
2953 -3027 0
2955 -3029 0
2943 -3024 0
2943 2950 -3025 0
2943 2951 -3027 0
2943 2953 -3029 0
2943 2955 -3031 0
2944 -3025 0
2944 2950 -3027 0
2944 2951 -3029 0
2944 2953 -3031 0
2944 2955 -3033 0
2946 -3027 0
2946 2950 -3029 0
2946 2951 -3031 0
2946 2953 -3033 0
2946 2955 -3035 0
2948 -3029 0
2948 2950 -3031 0
2948 2951 -3033 0
2948 2953 -3035 0
2948 2955 -3037 0
c (0<=(aux294 + aux295 - aux301))
-2955 3037 0
-2953 3035 0
-2951 3033 0
-2950 3031 0
-2948 3037 0
-2948 -2955 3035 0
-2948 -2953 3033 0
-2948 -2951 3031 0
-2948 -2950 3029 0
-2946 3035 0
-2946 -2955 3033 0
-2946 -2953 3031 0
-2946 -2951 3029 0
-2946 -2950 3027 0
-2944 3033 0
-2944 -2955 3031 0
-2944 -2953 3029 0
-2944 -2951 3027 0
-2944 -2950 3025 0
-2943 3031 0
-2943 -2955 3029 0
-2943 -2953 3027 0
-2943 -2951 3025 0
-2943 -2950 3024 0
c ((aux298 + aux301 - aux302)<=0)
3024 -3039 0
3025 -3040 0
3027 -3042 0
3029 -3044 0
3031 -3046 0
3033 -3048 0
3035 -3050 0
3037 -3052 0
2979 -3039 0
2979 3024 -3040 0
2979 3025 -3042 0
2979 3027 -3044 0
2979 3029 -3046 0
2979 3031 -3048 0
2979 3033 -3050 0
2979 3035 -3052 0
2979 3037 -3054 0
2980 -3040 0
2980 3024 -3042 0
2980 3025 -3044 0
2980 3027 -3046 0
2980 3029 -3048 0
2980 3031 -3050 0
2980 3033 -3052 0
2980 3035 -3054 0
2980 3037 -3056 0
2982 -3042 0
2982 3024 -3044 0
2982 3025 -3046 0
2982 3027 -3048 0
2982 3029 -3050 0
2982 3031 -3052 0
2982 3033 -3054 0
2982 3035 -3056 0
2982 3037 -3058 0
2984 -3044 0
2984 3024 -3046 0
2984 3025 -3048 0
2984 3027 -3050 0
2984 3029 -3052 0
2984 3031 -3054 0
2984 3033 -3056 0
2984 3035 -3058 0
2984 3037 -3060 0
2986 -3046 0
2986 3024 -3048 0
2986 3025 -3050 0
2986 3027 -3052 0
2986 3029 -3054 0
2986 3031 -3056 0
2986 3033 -3058 0
2986 3035 -3060 0
2986 3037 -3062 0
2988 -3048 0
2988 3024 -3050 0
2988 3025 -3052 0
2988 3027 -3054 0
2988 3029 -3056 0
2988 3031 -3058 0
2988 3033 -3060 0
2988 3035 -3062 0
2988 3037 -3064 0
2990 -3050 0
2990 3024 -3052 0
2990 3025 -3054 0
2990 3027 -3056 0
2990 3029 -3058 0
2990 3031 -3060 0
2990 3033 -3062 0
2990 3035 -3064 0
2990 3037 -3066 0
2992 -3052 0
2992 3024 -3054 0
2992 3025 -3056 0
2992 3027 -3058 0
2992 3029 -3060 0
2992 3031 -3062 0
2992 3033 -3064 0
2992 3035 -3066 0
2992 3037 -3068 0
c (0<=(aux298 + aux301 - aux302))
-3037 3068 0
-3035 3066 0
-3033 3064 0
-3031 3062 0
-3029 3060 0
-3027 3058 0
-3025 3056 0
-3024 3054 0
-2992 3068 0
-2992 -3037 3066 0
-2992 -3035 3064 0
-2992 -3033 3062 0
-2992 -3031 3060 0
-2992 -3029 3058 0
-2992 -3027 3056 0
-2992 -3025 3054 0
-2992 -3024 3052 0
-2990 3066 0
-2990 -3037 3064 0
-2990 -3035 3062 0
-2990 -3033 3060 0
-2990 -3031 3058 0
-2990 -3029 3056 0
-2990 -3027 3054 0
-2990 -3025 3052 0
-2990 -3024 3050 0
-2988 3064 0
-2988 -3037 3062 0
-2988 -3035 3060 0
-2988 -3033 3058 0
-2988 -3031 3056 0
-2988 -3029 3054 0
-2988 -3027 3052 0
-2988 -3025 3050 0
-2988 -3024 3048 0
-2986 3062 0
-2986 -3037 3060 0
-2986 -3035 3058 0
-2986 -3033 3056 0
-2986 -3031 3054 0
-2986 -3029 3052 0
-2986 -3027 3050 0
-2986 -3025 3048 0
-2986 -3024 3046 0
-2984 3060 0
-2984 -3037 3058 0
-2984 -3035 3056 0
-2984 -3033 3054 0
-2984 -3031 3052 0
-2984 -3029 3050 0
-2984 -3027 3048 0
-2984 -3025 3046 0
-2984 -3024 3044 0
-2982 3058 0
-2982 -3037 3056 0
-2982 -3035 3054 0
-2982 -3033 3052 0
-2982 -3031 3050 0
-2982 -3029 3048 0
-2982 -3027 3046 0
-2982 -3025 3044 0
-2982 -3024 3042 0
-2980 3056 0
-2980 -3037 3054 0
-2980 -3035 3052 0
-2980 -3033 3050 0
-2980 -3031 3048 0
-2980 -3029 3046 0
-2980 -3027 3044 0
-2980 -3025 3042 0
-2980 -3024 3040 0
-2979 3054 0
-2979 -3037 3052 0
-2979 -3035 3050 0
-2979 -3033 3048 0
-2979 -3031 3046 0
-2979 -3029 3044 0
-2979 -3027 3042 0
-2979 -3025 3040 0
-2979 -3024 3039 0
c ((aux297 + aux299 - aux303)<=0)
2994 -3070 0
2995 -3071 0
2997 -3073 0
2999 -3075 0
3001 -3077 0
3003 -3079 0
3005 -3081 0
3007 -3083 0
2964 -3070 0
2964 2994 -3071 0
2964 2995 -3073 0
2964 2997 -3075 0
2964 2999 -3077 0
2964 3001 -3079 0
2964 3003 -3081 0
2964 3005 -3083 0
2964 3007 -3085 0
2965 -3071 0
2965 2994 -3073 0
2965 2995 -3075 0
2965 2997 -3077 0
2965 2999 -3079 0
2965 3001 -3081 0
2965 3003 -3083 0
2965 3005 -3085 0
2965 3007 -3087 0
2967 -3073 0
2967 2994 -3075 0
2967 2995 -3077 0
2967 2997 -3079 0
2967 2999 -3081 0
2967 3001 -3083 0
2967 3003 -3085 0
2967 3005 -3087 0
2967 3007 -3089 0
2969 -3075 0
2969 2994 -3077 0
2969 2995 -3079 0
2969 2997 -3081 0
2969 2999 -3083 0
2969 3001 -3085 0
2969 3003 -3087 0
2969 3005 -3089 0
2969 3007 -3091 0
2971 -3077 0
2971 2994 -3079 0
2971 2995 -3081 0
2971 2997 -3083 0
2971 2999 -3085 0
2971 3001 -3087 0
2971 3003 -3089 0
2971 3005 -3091 0
2971 3007 -3093 0
2973 -3079 0
2973 2994 -3081 0
2973 2995 -3083 0
2973 2997 -3085 0
2973 2999 -3087 0
2973 3001 -3089 0
2973 3003 -3091 0
2973 3005 -3093 0
2973 3007 -3095 0
2975 -3081 0
2975 2994 -3083 0
2975 2995 -3085 0
2975 2997 -3087 0
2975 2999 -3089 0
2975 3001 -3091 0
2975 3003 -3093 0
2975 3005 -3095 0
2975 3007 -3097 0
2977 -3083 0
2977 2994 -3085 0
2977 2995 -3087 0
2977 2997 -3089 0
2977 2999 -3091 0
2977 3001 -3093 0
2977 3003 -3095 0
2977 3005 -3097 0
2977 3007 -3099 0
c (0<=(aux297 + aux299 - aux303))
-3007 3099 0
-3005 3097 0
-3003 3095 0
-3001 3093 0
-2999 3091 0
-2997 3089 0
-2995 3087 0
-2994 3085 0
-2977 3099 0
-2977 -3007 3097 0
-2977 -3005 3095 0
-2977 -3003 3093 0
-2977 -3001 3091 0
-2977 -2999 3089 0
-2977 -2997 3087 0
-2977 -2995 3085 0
-2977 -2994 3083 0
-2975 3097 0
-2975 -3007 3095 0
-2975 -3005 3093 0
-2975 -3003 3091 0
-2975 -3001 3089 0
-2975 -2999 3087 0
-2975 -2997 3085 0
-2975 -2995 3083 0
-2975 -2994 3081 0
-2973 3095 0
-2973 -3007 3093 0
-2973 -3005 3091 0
-2973 -3003 3089 0
-2973 -3001 3087 0
-2973 -2999 3085 0
-2973 -2997 3083 0
-2973 -2995 3081 0
-2973 -2994 3079 0
-2971 3093 0
-2971 -3007 3091 0
-2971 -3005 3089 0
-2971 -3003 3087 0
-2971 -3001 3085 0
-2971 -2999 3083 0
-2971 -2997 3081 0
-2971 -2995 3079 0
-2971 -2994 3077 0
-2969 3091 0
-2969 -3007 3089 0
-2969 -3005 3087 0
-2969 -3003 3085 0
-2969 -3001 3083 0
-2969 -2999 3081 0
-2969 -2997 3079 0
-2969 -2995 3077 0
-2969 -2994 3075 0
-2967 3089 0
-2967 -3007 3087 0
-2967 -3005 3085 0
-2967 -3003 3083 0
-2967 -3001 3081 0
-2967 -2999 3079 0
-2967 -2997 3077 0
-2967 -2995 3075 0
-2967 -2994 3073 0
-2965 3087 0
-2965 -3007 3085 0
-2965 -3005 3083 0
-2965 -3003 3081 0
-2965 -3001 3079 0
-2965 -2999 3077 0
-2965 -2997 3075 0
-2965 -2995 3073 0
-2965 -2994 3071 0
-2964 3085 0
-2964 -3007 3083 0
-2964 -3005 3081 0
-2964 -3003 3079 0
-2964 -3001 3077 0
-2964 -2999 3075 0
-2964 -2997 3073 0
-2964 -2995 3071 0
-2964 -2994 3070 0
c ((SATLiteral(517) - aux304 + SATLiteral(104))<=0)
-104 -3101 0
-517 -3101 0
-517 -104 -3102 0
c (0<=(SATLiteral(517) - aux304 + SATLiteral(104)))
104 3102 0
517 3102 0
517 104 3101 0
c ((SATLiteral(535) - aux305 + SATLiteral(87))<=0)
-87 -3104 0
-535 -3104 0
-535 -87 -3105 0
c (0<=(SATLiteral(535) - aux305 + SATLiteral(87)))
87 3105 0
535 3105 0
535 87 3104 0
c ((SATLiteral(570) - aux306 + SATLiteral(70))<=0)
-70 -3107 0
-570 -3107 0
-570 -70 -3108 0
c (0<=(SATLiteral(570) - aux306 + SATLiteral(70)))
70 3108 0
570 3108 0
570 70 3107 0
c ((SATLiteral(363) - aux307 + SATLiteral(53))<=0)
-53 -3110 0
-363 -3110 0
-363 -53 -3111 0
c (0<=(SATLiteral(363) - aux307 + SATLiteral(53)))
53 3111 0
363 3111 0
363 53 3110 0
c (( - aux308 + SATLiteral(622) + SATLiteral(36))<=0)
-36 -3113 0
-622 -3113 0
-622 -36 -3114 0
c (0<=( - aux308 + SATLiteral(622) + SATLiteral(36)))
36 3114 0
622 3114 0
622 36 3113 0
c (( - aux309 + SATLiteral(466) + SATLiteral(19))<=0)
-19 -3116 0
-466 -3116 0
-466 -19 -3117 0
c (0<=( - aux309 + SATLiteral(466) + SATLiteral(19)))
19 3117 0
466 3117 0
466 19 3116 0
c (( - aux310 + SATLiteral(639) + SATLiteral(483))<=0)
-483 -3119 0
-639 -3119 0
-639 -483 -3120 0
c (0<=( - aux310 + SATLiteral(639) + SATLiteral(483)))
483 3120 0
639 3120 0
639 483 3119 0
c ((SATLiteral(380) - aux311 + SATLiteral(500))<=0)
-500 -3122 0
-380 -3122 0
-380 -500 -3123 0
c (0<=(SATLiteral(380) - aux311 + SATLiteral(500)))
500 3123 0
380 3123 0
380 500 3122 0
c (( - aux312 + SATLiteral(656) + SATLiteral(673))<=0)
-673 -3125 0
-656 -3125 0
-656 -673 -3126 0
c (0<=( - aux312 + SATLiteral(656) + SATLiteral(673)))
673 3126 0
656 3126 0
656 673 3125 0
c ((SATLiteral(311) - aux313 + SATLiteral(449))<=0)
-449 -3128 0
-311 -3128 0
-311 -449 -3129 0
c (0<=(SATLiteral(311) - aux313 + SATLiteral(449)))
449 3129 0
311 3129 0
311 449 3128 0
c (( - aux314 + SATLiteral(121) + SATLiteral(432))<=0)
-432 -3131 0
-121 -3131 0
-121 -432 -3132 0
c (0<=( - aux314 + SATLiteral(121) + SATLiteral(432)))
432 3132 0
121 3132 0
121 432 3131 0
c (( - aux315 + SATLiteral(690) + SATLiteral(415))<=0)
-415 -3134 0
-690 -3134 0
-690 -415 -3135 0
c (0<=( - aux315 + SATLiteral(690) + SATLiteral(415)))
415 3135 0
690 3135 0
690 415 3134 0
c (( - aux316 + SATLiteral(192) + SATLiteral(398))<=0)
-398 -3137 0
-192 -3137 0
-192 -398 -3138 0
c (0<=( - aux316 + SATLiteral(192) + SATLiteral(398)))
398 3138 0
192 3138 0
192 398 3137 0
c (( - aux317 + SATLiteral(139) + SATLiteral(294))<=0)
-294 -3140 0
-139 -3140 0
-139 -294 -3141 0
c (0<=( - aux317 + SATLiteral(139) + SATLiteral(294)))
294 3141 0
139 3141 0
139 294 3140 0
c (( - aux318 + SATLiteral(209) + SATLiteral(277))<=0)
-277 -3143 0
-209 -3143 0
-209 -277 -3144 0
c (0<=( - aux318 + SATLiteral(209) + SATLiteral(277)))
277 3144 0
209 3144 0
209 277 3143 0
c (( - aux319 + SATLiteral(226) + SATLiteral(260))<=0)
-260 -3146 0
-226 -3146 0
-226 -260 -3147 0
c (0<=( - aux319 + SATLiteral(226) + SATLiteral(260)))
260 3147 0
226 3147 0
226 260 3146 0
c ((SATLiteral(552) - aux320 + SATLiteral(243))<=0)
-243 -3149 0
-552 -3149 0
-552 -243 -3150 0
c (0<=(SATLiteral(552) - aux320 + SATLiteral(243)))
243 3150 0
552 3150 0
552 243 3149 0
c ((SATLiteral(329) - aux321 + SATLiteral(156))<=0)
-156 -3152 0
-329 -3152 0
-329 -156 -3153 0
c (0<=(SATLiteral(329) - aux321 + SATLiteral(156)))
156 3153 0
329 3153 0
329 156 3152 0
c ((SATLiteral(346) - aux322 + SATLiteral(174))<=0)
-174 -3155 0
-346 -3155 0
-346 -174 -3156 0
c (0<=(SATLiteral(346) - aux322 + SATLiteral(174)))
174 3156 0
346 3156 0
346 174 3155 0
c (( - aux323 + SATLiteral(588) + SATLiteral(605))<=0)
-605 -3158 0
-588 -3158 0
-588 -605 -3159 0
c (0<=( - aux323 + SATLiteral(588) + SATLiteral(605)))
605 3159 0
588 3159 0
588 605 3158 0
c ((aux311 + aux323 - aux324)<=0)
3158 -3161 0
3159 -3162 0
3122 -3161 0
3122 3158 -3162 0
3122 3159 -3164 0
3123 -3162 0
3123 3158 -3164 0
3123 3159 -3166 0
c (0<=(aux311 + aux323 - aux324))
-3159 3166 0
-3158 3164 0
-3123 3166 0
-3123 -3159 3164 0
-3123 -3158 3162 0
-3122 3164 0
-3122 -3159 3162 0
-3122 -3158 3161 0
c ((aux305 + aux318 - aux325)<=0)
3143 -3168 0
3144 -3169 0
3104 -3168 0
3104 3143 -3169 0
3104 3144 -3171 0
3105 -3169 0
3105 3143 -3171 0
3105 3144 -3173 0
c (0<=(aux305 + aux318 - aux325))
-3144 3173 0
-3143 3171 0
-3105 3173 0
-3105 -3144 3171 0
-3105 -3143 3169 0
-3104 3171 0
-3104 -3144 3169 0
-3104 -3143 3168 0
c ((aux304 + aux309 - aux326)<=0)
3116 -3175 0
3117 -3176 0
3101 -3175 0
3101 3116 -3176 0
3101 3117 -3178 0
3102 -3176 0
3102 3116 -3178 0
3102 3117 -3180 0
c (0<=(aux304 + aux309 - aux326))
-3117 3180 0
-3116 3178 0
-3102 3180 0
-3102 -3117 3178 0
-3102 -3116 3176 0
-3101 3178 0
-3101 -3117 3176 0
-3101 -3116 3175 0
c ((aux306 + aux307 - aux327)<=0)
3110 -3182 0
3111 -3183 0
3107 -3182 0
3107 3110 -3183 0
3107 3111 -3185 0
3108 -3183 0
3108 3110 -3185 0
3108 3111 -3187 0
c (0<=(aux306 + aux307 - aux327))
-3111 3187 0
-3110 3185 0
-3108 3187 0
-3108 -3111 3185 0
-3108 -3110 3183 0
-3107 3185 0
-3107 -3111 3183 0
-3107 -3110 3182 0
c ((aux308 + aux310 - aux328)<=0)
3119 -3189 0
3120 -3190 0
3113 -3189 0
3113 3119 -3190 0
3113 3120 -3192 0
3114 -3190 0
3114 3119 -3192 0
3114 3120 -3194 0
c (0<=(aux308 + aux310 - aux328))
-3120 3194 0
-3119 3192 0
-3114 3194 0
-3114 -3120 3192 0
-3114 -3119 3190 0
-3113 3192 0
-3113 -3120 3190 0
-3113 -3119 3189 0
c ((aux317 + aux321 - aux329)<=0)
3152 -3196 0
3153 -3197 0
3140 -3196 0
3140 3152 -3197 0
3140 3153 -3199 0
3141 -3197 0
3141 3152 -3199 0
3141 3153 -3201 0
c (0<=(aux317 + aux321 - aux329))
-3153 3201 0
-3152 3199 0
-3141 3201 0
-3141 -3153 3199 0
-3141 -3152 3197 0
-3140 3199 0
-3140 -3153 3197 0
-3140 -3152 3196 0
c ((aux313 + aux314 - aux330)<=0)
3131 -3203 0
3132 -3204 0
3128 -3203 0
3128 3131 -3204 0
3128 3132 -3206 0
3129 -3204 0
3129 3131 -3206 0
3129 3132 -3208 0
c (0<=(aux313 + aux314 - aux330))
-3132 3208 0
-3131 3206 0
-3129 3208 0
-3129 -3132 3206 0
-3129 -3131 3204 0
-3128 3206 0
-3128 -3132 3204 0
-3128 -3131 3203 0
c ((aux315 + aux316 - aux331)<=0)
3137 -3210 0
3138 -3211 0
3134 -3210 0
3134 3137 -3211 0
3134 3138 -3213 0
3135 -3211 0
3135 3137 -3213 0
3135 3138 -3215 0
c (0<=(aux315 + aux316 - aux331))
-3138 3215 0
-3137 3213 0
-3135 3215 0
-3135 -3138 3213 0
-3135 -3137 3211 0
-3134 3213 0
-3134 -3138 3211 0
-3134 -3137 3210 0
c ((aux319 + aux322 - aux332)<=0)
3155 -3217 0
3156 -3218 0
3146 -3217 0
3146 3155 -3218 0
3146 3156 -3220 0
3147 -3218 0
3147 3155 -3220 0
3147 3156 -3222 0
c (0<=(aux319 + aux322 - aux332))
-3156 3222 0
-3155 3220 0
-3147 3222 0
-3147 -3156 3220 0
-3147 -3155 3218 0
-3146 3220 0
-3146 -3156 3218 0
-3146 -3155 3217 0
c ((aux312 + aux320 - aux333)<=0)
3149 -3224 0
3150 -3225 0
3125 -3224 0
3125 3149 -3225 0
3125 3150 -3227 0
3126 -3225 0
3126 3149 -3227 0
3126 3150 -3229 0
c (0<=(aux312 + aux320 - aux333))
-3150 3229 0
-3149 3227 0
-3126 3229 0
-3126 -3150 3227 0
-3126 -3149 3225 0
-3125 3227 0
-3125 -3150 3225 0
-3125 -3149 3224 0
c ((aux327 + aux333 - aux334)<=0)
3224 -3231 0
3225 -3232 0
3227 -3234 0
3229 -3236 0
3182 -3231 0
3182 3224 -3232 0
3182 3225 -3234 0
3182 3227 -3236 0
3182 3229 -3238 0
3183 -3232 0
3183 3224 -3234 0
3183 3225 -3236 0
3183 3227 -3238 0
3183 3229 -3240 0
3185 -3234 0
3185 3224 -3236 0
3185 3225 -3238 0
3185 3227 -3240 0
3185 3229 -3242 0
3187 -3236 0
3187 3224 -3238 0
3187 3225 -3240 0
3187 3227 -3242 0
3187 3229 -3244 0
c (0<=(aux327 + aux333 - aux334))
-3229 3244 0
-3227 3242 0
-3225 3240 0
-3224 3238 0
-3187 3244 0
-3187 -3229 3242 0
-3187 -3227 3240 0
-3187 -3225 3238 0
-3187 -3224 3236 0
-3185 3242 0
-3185 -3229 3240 0
-3185 -3227 3238 0
-3185 -3225 3236 0
-3185 -3224 3234 0
-3183 3240 0
-3183 -3229 3238 0
-3183 -3227 3236 0
-3183 -3225 3234 0
-3183 -3224 3232 0
-3182 3238 0
-3182 -3229 3236 0
-3182 -3227 3234 0
-3182 -3225 3232 0
-3182 -3224 3231 0
c ((aux326 + aux330 - aux335)<=0)
3203 -3246 0
3204 -3247 0
3206 -3249 0
3208 -3251 0
3175 -3246 0
3175 3203 -3247 0
3175 3204 -3249 0
3175 3206 -3251 0
3175 3208 -3253 0
3176 -3247 0
3176 3203 -3249 0
3176 3204 -3251 0
3176 3206 -3253 0
3176 3208 -3255 0
3178 -3249 0
3178 3203 -3251 0
3178 3204 -3253 0
3178 3206 -3255 0
3178 3208 -3257 0
3180 -3251 0
3180 3203 -3253 0
3180 3204 -3255 0
3180 3206 -3257 0
3180 3208 -3259 0
c (0<=(aux326 + aux330 - aux335))
-3208 3259 0
-3206 3257 0
-3204 3255 0
-3203 3253 0
-3180 3259 0
-3180 -3208 3257 0
-3180 -3206 3255 0
-3180 -3204 3253 0
-3180 -3203 3251 0
-3178 3257 0
-3178 -3208 3255 0
-3178 -3206 3253 0
-3178 -3204 3251 0
-3178 -3203 3249 0
-3176 3255 0
-3176 -3208 3253 0
-3176 -3206 3251 0
-3176 -3204 3249 0
-3176 -3203 3247 0
-3175 3253 0
-3175 -3208 3251 0
-3175 -3206 3249 0
-3175 -3204 3247 0
-3175 -3203 3246 0
c ((aux324 + aux325 - aux336)<=0)
3168 -3261 0
3169 -3262 0
3171 -3264 0
3173 -3266 0
3161 -3261 0
3161 3168 -3262 0
3161 3169 -3264 0
3161 3171 -3266 0
3161 3173 -3268 0
3162 -3262 0
3162 3168 -3264 0
3162 3169 -3266 0
3162 3171 -3268 0
3162 3173 -3270 0
3164 -3264 0
3164 3168 -3266 0
3164 3169 -3268 0
3164 3171 -3270 0
3164 3173 -3272 0
3166 -3266 0
3166 3168 -3268 0
3166 3169 -3270 0
3166 3171 -3272 0
3166 3173 -3274 0
c (0<=(aux324 + aux325 - aux336))
-3173 3274 0
-3171 3272 0
-3169 3270 0
-3168 3268 0
-3166 3274 0
-3166 -3173 3272 0
-3166 -3171 3270 0
-3166 -3169 3268 0
-3166 -3168 3266 0
-3164 3272 0
-3164 -3173 3270 0
-3164 -3171 3268 0
-3164 -3169 3266 0
-3164 -3168 3264 0
-3162 3270 0
-3162 -3173 3268 0
-3162 -3171 3266 0
-3162 -3169 3264 0
-3162 -3168 3262 0
-3161 3268 0
-3161 -3173 3266 0
-3161 -3171 3264 0
-3161 -3169 3262 0
-3161 -3168 3261 0
c ((aux328 + aux329 - aux337)<=0)
3196 -3276 0
3197 -3277 0
3199 -3279 0
3201 -3281 0
3189 -3276 0
3189 3196 -3277 0
3189 3197 -3279 0
3189 3199 -3281 0
3189 3201 -3283 0
3190 -3277 0
3190 3196 -3279 0
3190 3197 -3281 0
3190 3199 -3283 0
3190 3201 -3285 0
3192 -3279 0
3192 3196 -3281 0
3192 3197 -3283 0
3192 3199 -3285 0
3192 3201 -3287 0
3194 -3281 0
3194 3196 -3283 0
3194 3197 -3285 0
3194 3199 -3287 0
3194 3201 -3289 0
c (0<=(aux328 + aux329 - aux337))
-3201 3289 0
-3199 3287 0
-3197 3285 0
-3196 3283 0
-3194 3289 0
-3194 -3201 3287 0
-3194 -3199 3285 0
-3194 -3197 3283 0
-3194 -3196 3281 0
-3192 3287 0
-3192 -3201 3285 0
-3192 -3199 3283 0
-3192 -3197 3281 0
-3192 -3196 3279 0
-3190 3285 0
-3190 -3201 3283 0
-3190 -3199 3281 0
-3190 -3197 3279 0
-3190 -3196 3277 0
-3189 3283 0
-3189 -3201 3281 0
-3189 -3199 3279 0
-3189 -3197 3277 0
-3189 -3196 3276 0
c ((aux331 + aux332 - aux338)<=0)
3217 -3291 0
3218 -3292 0
3220 -3294 0
3222 -3296 0
3210 -3291 0
3210 3217 -3292 0
3210 3218 -3294 0
3210 3220 -3296 0
3210 3222 -3298 0
3211 -3292 0
3211 3217 -3294 0
3211 3218 -3296 0
3211 3220 -3298 0
3211 3222 -3300 0
3213 -3294 0
3213 3217 -3296 0
3213 3218 -3298 0
3213 3220 -3300 0
3213 3222 -3302 0
3215 -3296 0
3215 3217 -3298 0
3215 3218 -3300 0
3215 3220 -3302 0
3215 3222 -3304 0
c (0<=(aux331 + aux332 - aux338))
-3222 3304 0
-3220 3302 0
-3218 3300 0
-3217 3298 0
-3215 3304 0
-3215 -3222 3302 0
-3215 -3220 3300 0
-3215 -3218 3298 0
-3215 -3217 3296 0
-3213 3302 0
-3213 -3222 3300 0
-3213 -3220 3298 0
-3213 -3218 3296 0
-3213 -3217 3294 0
-3211 3300 0
-3211 -3222 3298 0
-3211 -3220 3296 0
-3211 -3218 3294 0
-3211 -3217 3292 0
-3210 3298 0
-3210 -3222 3296 0
-3210 -3220 3294 0
-3210 -3218 3292 0
-3210 -3217 3291 0
c ((aux335 + aux338 - aux339)<=0)
3291 -3306 0
3292 -3307 0
3294 -3309 0
3296 -3311 0
3298 -3313 0
3300 -3315 0
3302 -3317 0
3304 -3319 0
3246 -3306 0
3246 3291 -3307 0
3246 3292 -3309 0
3246 3294 -3311 0
3246 3296 -3313 0
3246 3298 -3315 0
3246 3300 -3317 0
3246 3302 -3319 0
3246 3304 -3321 0
3247 -3307 0
3247 3291 -3309 0
3247 3292 -3311 0
3247 3294 -3313 0
3247 3296 -3315 0
3247 3298 -3317 0
3247 3300 -3319 0
3247 3302 -3321 0
3247 3304 -3323 0
3249 -3309 0
3249 3291 -3311 0
3249 3292 -3313 0
3249 3294 -3315 0
3249 3296 -3317 0
3249 3298 -3319 0
3249 3300 -3321 0
3249 3302 -3323 0
3249 3304 -3325 0
3251 -3311 0
3251 3291 -3313 0
3251 3292 -3315 0
3251 3294 -3317 0
3251 3296 -3319 0
3251 3298 -3321 0
3251 3300 -3323 0
3251 3302 -3325 0
3251 3304 -3327 0
3253 -3313 0
3253 3291 -3315 0
3253 3292 -3317 0
3253 3294 -3319 0
3253 3296 -3321 0
3253 3298 -3323 0
3253 3300 -3325 0
3253 3302 -3327 0
3253 3304 -3329 0
3255 -3315 0
3255 3291 -3317 0
3255 3292 -3319 0
3255 3294 -3321 0
3255 3296 -3323 0
3255 3298 -3325 0
3255 3300 -3327 0
3255 3302 -3329 0
3255 3304 -3331 0
3257 -3317 0
3257 3291 -3319 0
3257 3292 -3321 0
3257 3294 -3323 0
3257 3296 -3325 0
3257 3298 -3327 0
3257 3300 -3329 0
3257 3302 -3331 0
3257 3304 -3333 0
3259 -3319 0
3259 3291 -3321 0
3259 3292 -3323 0
3259 3294 -3325 0
3259 3296 -3327 0
3259 3298 -3329 0
3259 3300 -3331 0
3259 3302 -3333 0
3259 3304 -3335 0
c (0<=(aux335 + aux338 - aux339))
-3304 3335 0
-3302 3333 0
-3300 3331 0
-3298 3329 0
-3296 3327 0
-3294 3325 0
-3292 3323 0
-3291 3321 0
-3259 3335 0
-3259 -3304 3333 0
-3259 -3302 3331 0
-3259 -3300 3329 0
-3259 -3298 3327 0
-3259 -3296 3325 0
-3259 -3294 3323 0
-3259 -3292 3321 0
-3259 -3291 3319 0
-3257 3333 0
-3257 -3304 3331 0
-3257 -3302 3329 0
-3257 -3300 3327 0
-3257 -3298 3325 0
-3257 -3296 3323 0
-3257 -3294 3321 0
-3257 -3292 3319 0
-3257 -3291 3317 0
-3255 3331 0
-3255 -3304 3329 0
-3255 -3302 3327 0
-3255 -3300 3325 0
-3255 -3298 3323 0
-3255 -3296 3321 0
-3255 -3294 3319 0
-3255 -3292 3317 0
-3255 -3291 3315 0
-3253 3329 0
-3253 -3304 3327 0
-3253 -3302 3325 0
-3253 -3300 3323 0
-3253 -3298 3321 0
-3253 -3296 3319 0
-3253 -3294 3317 0
-3253 -3292 3315 0
-3253 -3291 3313 0
-3251 3327 0
-3251 -3304 3325 0
-3251 -3302 3323 0
-3251 -3300 3321 0
-3251 -3298 3319 0
-3251 -3296 3317 0
-3251 -3294 3315 0
-3251 -3292 3313 0
-3251 -3291 3311 0
-3249 3325 0
-3249 -3304 3323 0
-3249 -3302 3321 0
-3249 -3300 3319 0
-3249 -3298 3317 0
-3249 -3296 3315 0
-3249 -3294 3313 0
-3249 -3292 3311 0
-3249 -3291 3309 0
-3247 3323 0
-3247 -3304 3321 0
-3247 -3302 3319 0
-3247 -3300 3317 0
-3247 -3298 3315 0
-3247 -3296 3313 0
-3247 -3294 3311 0
-3247 -3292 3309 0
-3247 -3291 3307 0
-3246 3321 0
-3246 -3304 3319 0
-3246 -3302 3317 0
-3246 -3300 3315 0
-3246 -3298 3313 0
-3246 -3296 3311 0
-3246 -3294 3309 0
-3246 -3292 3307 0
-3246 -3291 3306 0
c ((aux334 + aux336 - aux340)<=0)
3261 -3337 0
3262 -3338 0
3264 -3340 0
3266 -3342 0
3268 -3344 0
3270 -3346 0
3272 -3348 0
3274 -3350 0
3231 -3337 0
3231 3261 -3338 0
3231 3262 -3340 0
3231 3264 -3342 0
3231 3266 -3344 0
3231 3268 -3346 0
3231 3270 -3348 0
3231 3272 -3350 0
3231 3274 -3352 0
3232 -3338 0
3232 3261 -3340 0
3232 3262 -3342 0
3232 3264 -3344 0
3232 3266 -3346 0
3232 3268 -3348 0
3232 3270 -3350 0
3232 3272 -3352 0
3232 3274 -3354 0
3234 -3340 0
3234 3261 -3342 0
3234 3262 -3344 0
3234 3264 -3346 0
3234 3266 -3348 0
3234 3268 -3350 0
3234 3270 -3352 0
3234 3272 -3354 0
3234 3274 -3356 0
3236 -3342 0
3236 3261 -3344 0
3236 3262 -3346 0
3236 3264 -3348 0
3236 3266 -3350 0
3236 3268 -3352 0
3236 3270 -3354 0
3236 3272 -3356 0
3236 3274 -3358 0
3238 -3344 0
3238 3261 -3346 0
3238 3262 -3348 0
3238 3264 -3350 0
3238 3266 -3352 0
3238 3268 -3354 0
3238 3270 -3356 0
3238 3272 -3358 0
3238 3274 -3360 0
3240 -3346 0
3240 3261 -3348 0
3240 3262 -3350 0
3240 3264 -3352 0
3240 3266 -3354 0
3240 3268 -3356 0
3240 3270 -3358 0
3240 3272 -3360 0
3240 3274 -3362 0
3242 -3348 0
3242 3261 -3350 0
3242 3262 -3352 0
3242 3264 -3354 0
3242 3266 -3356 0
3242 3268 -3358 0
3242 3270 -3360 0
3242 3272 -3362 0
3242 3274 -3364 0
3244 -3350 0
3244 3261 -3352 0
3244 3262 -3354 0
3244 3264 -3356 0
3244 3266 -3358 0
3244 3268 -3360 0
3244 3270 -3362 0
3244 3272 -3364 0
3244 3274 -3366 0
c (0<=(aux334 + aux336 - aux340))
-3274 3366 0
-3272 3364 0
-3270 3362 0
-3268 3360 0
-3266 3358 0
-3264 3356 0
-3262 3354 0
-3261 3352 0
-3244 3366 0
-3244 -3274 3364 0
-3244 -3272 3362 0
-3244 -3270 3360 0
-3244 -3268 3358 0
-3244 -3266 3356 0
-3244 -3264 3354 0
-3244 -3262 3352 0
-3244 -3261 3350 0
-3242 3364 0
-3242 -3274 3362 0
-3242 -3272 3360 0
-3242 -3270 3358 0
-3242 -3268 3356 0
-3242 -3266 3354 0
-3242 -3264 3352 0
-3242 -3262 3350 0
-3242 -3261 3348 0
-3240 3362 0
-3240 -3274 3360 0
-3240 -3272 3358 0
-3240 -3270 3356 0
-3240 -3268 3354 0
-3240 -3266 3352 0
-3240 -3264 3350 0
-3240 -3262 3348 0
-3240 -3261 3346 0
-3238 3360 0
-3238 -3274 3358 0
-3238 -3272 3356 0
-3238 -3270 3354 0
-3238 -3268 3352 0
-3238 -3266 3350 0
-3238 -3264 3348 0
-3238 -3262 3346 0
-3238 -3261 3344 0
-3236 3358 0
-3236 -3274 3356 0
-3236 -3272 3354 0
-3236 -3270 3352 0
-3236 -3268 3350 0
-3236 -3266 3348 0
-3236 -3264 3346 0
-3236 -3262 3344 0
-3236 -3261 3342 0
-3234 3356 0
-3234 -3274 3354 0
-3234 -3272 3352 0
-3234 -3270 3350 0
-3234 -3268 3348 0
-3234 -3266 3346 0
-3234 -3264 3344 0
-3234 -3262 3342 0
-3234 -3261 3340 0
-3232 3354 0
-3232 -3274 3352 0
-3232 -3272 3350 0
-3232 -3270 3348 0
-3232 -3268 3346 0
-3232 -3266 3344 0
-3232 -3264 3342 0
-3232 -3262 3340 0
-3232 -3261 3338 0
-3231 3352 0
-3231 -3274 3350 0
-3231 -3272 3348 0
-3231 -3270 3346 0
-3231 -3268 3344 0
-3231 -3266 3342 0
-3231 -3264 3340 0
-3231 -3262 3338 0
-3231 -3261 3337 0
c ((SATLiteral(-516) - aux341 + SATLiteral(-103))<=0)
103 -3368 0
516 -3368 0
516 103 -3369 0
c (0<=(SATLiteral(-516) - aux341 + SATLiteral(-103)))
-103 3369 0
-516 3369 0
-516 -103 3368 0
c ((SATLiteral(-534) - aux342 + SATLiteral(-86))<=0)
86 -3371 0
534 -3371 0
534 86 -3372 0
c (0<=(SATLiteral(-534) - aux342 + SATLiteral(-86)))
-86 3372 0
-534 3372 0
-534 -86 3371 0
c ((SATLiteral(-569) - aux343 + SATLiteral(-69))<=0)
69 -3374 0
569 -3374 0
569 69 -3375 0
c (0<=(SATLiteral(-569) - aux343 + SATLiteral(-69)))
-69 3375 0
-569 3375 0
-569 -69 3374 0
c ((SATLiteral(-362) - aux344 + SATLiteral(-52))<=0)
52 -3377 0
362 -3377 0
362 52 -3378 0
c (0<=(SATLiteral(-362) - aux344 + SATLiteral(-52)))
-52 3378 0
-362 3378 0
-362 -52 3377 0
c (( - aux345 + SATLiteral(-621) + SATLiteral(-35))<=0)
35 -3380 0
621 -3380 0
621 35 -3381 0
c (0<=( - aux345 + SATLiteral(-621) + SATLiteral(-35)))
-35 3381 0
-621 3381 0
-621 -35 3380 0
c (( - aux346 + SATLiteral(-465) + SATLiteral(-18))<=0)
18 -3383 0
465 -3383 0
465 18 -3384 0
c (0<=( - aux346 + SATLiteral(-465) + SATLiteral(-18)))
-18 3384 0
-465 3384 0
-465 -18 3383 0
c (( - aux347 + SATLiteral(-638) + SATLiteral(-482))<=0)
482 -3386 0
638 -3386 0
638 482 -3387 0
c (0<=( - aux347 + SATLiteral(-638) + SATLiteral(-482)))
-482 3387 0
-638 3387 0
-638 -482 3386 0
c ((SATLiteral(-379) - aux348 + SATLiteral(-499))<=0)
499 -3389 0
379 -3389 0
379 499 -3390 0
c (0<=(SATLiteral(-379) - aux348 + SATLiteral(-499)))
-499 3390 0
-379 3390 0
-379 -499 3389 0
c (( - aux349 + SATLiteral(-655) + SATLiteral(-672))<=0)
672 -3392 0
655 -3392 0
655 672 -3393 0
c (0<=( - aux349 + SATLiteral(-655) + SATLiteral(-672)))
-672 3393 0
-655 3393 0
-655 -672 3392 0
c ((SATLiteral(-310) - aux350 + SATLiteral(-448))<=0)
448 -3395 0
310 -3395 0
310 448 -3396 0
c (0<=(SATLiteral(-310) - aux350 + SATLiteral(-448)))
-448 3396 0
-310 3396 0
-310 -448 3395 0
c (( - aux351 + SATLiteral(-120) + SATLiteral(-431))<=0)
431 -3398 0
120 -3398 0
120 431 -3399 0
c (0<=( - aux351 + SATLiteral(-120) + SATLiteral(-431)))
-431 3399 0
-120 3399 0
-120 -431 3398 0
c (( - aux352 + SATLiteral(-689) + SATLiteral(-414))<=0)
414 -3401 0
689 -3401 0
689 414 -3402 0
c (0<=( - aux352 + SATLiteral(-689) + SATLiteral(-414)))
-414 3402 0
-689 3402 0
-689 -414 3401 0
c (( - aux353 + SATLiteral(-191) + SATLiteral(-397))<=0)
397 -3404 0
191 -3404 0
191 397 -3405 0
c (0<=( - aux353 + SATLiteral(-191) + SATLiteral(-397)))
-397 3405 0
-191 3405 0
-191 -397 3404 0
c (( - aux354 + SATLiteral(-138) + SATLiteral(-293))<=0)
293 -3407 0
138 -3407 0
138 293 -3408 0
c (0<=( - aux354 + SATLiteral(-138) + SATLiteral(-293)))
-293 3408 0
-138 3408 0
-138 -293 3407 0
c (( - aux355 + SATLiteral(-208) + SATLiteral(-276))<=0)
276 -3410 0
208 -3410 0
208 276 -3411 0
c (0<=( - aux355 + SATLiteral(-208) + SATLiteral(-276)))
-276 3411 0
-208 3411 0
-208 -276 3410 0
c (( - aux356 + SATLiteral(-225) + SATLiteral(-259))<=0)
259 -3413 0
225 -3413 0
225 259 -3414 0
c (0<=( - aux356 + SATLiteral(-225) + SATLiteral(-259)))
-259 3414 0
-225 3414 0
-225 -259 3413 0
c ((SATLiteral(-551) - aux357 + SATLiteral(-242))<=0)
242 -3416 0
551 -3416 0
551 242 -3417 0
c (0<=(SATLiteral(-551) - aux357 + SATLiteral(-242)))
-242 3417 0
-551 3417 0
-551 -242 3416 0
c ((SATLiteral(-328) - aux358 + SATLiteral(-155))<=0)
155 -3419 0
328 -3419 0
328 155 -3420 0
c (0<=(SATLiteral(-328) - aux358 + SATLiteral(-155)))
-155 3420 0
-328 3420 0
-328 -155 3419 0
c ((SATLiteral(-345) - aux359 + SATLiteral(-173))<=0)
173 -3422 0
345 -3422 0
345 173 -3423 0
c (0<=(SATLiteral(-345) - aux359 + SATLiteral(-173)))
-173 3423 0
-345 3423 0
-345 -173 3422 0
c (( - aux360 + SATLiteral(-587) + SATLiteral(-604))<=0)
604 -3425 0
587 -3425 0
587 604 -3426 0
c (0<=( - aux360 + SATLiteral(-587) + SATLiteral(-604)))
-604 3426 0
-587 3426 0
-587 -604 3425 0
c ((aux348 + aux360 - aux361)<=0)
3425 -3428 0
3426 -3429 0
3389 -3428 0
3389 3425 -3429 0
3389 3426 -3431 0
3390 -3429 0
3390 3425 -3431 0
3390 3426 -3433 0
c (0<=(aux348 + aux360 - aux361))
-3426 3433 0
-3425 3431 0
-3390 3433 0
-3390 -3426 3431 0
-3390 -3425 3429 0
-3389 3431 0
-3389 -3426 3429 0
-3389 -3425 3428 0
c ((aux342 + aux355 - aux362)<=0)
3410 -3435 0
3411 -3436 0
3371 -3435 0
3371 3410 -3436 0
3371 3411 -3438 0
3372 -3436 0
3372 3410 -3438 0
3372 3411 -3440 0
c (0<=(aux342 + aux355 - aux362))
-3411 3440 0
-3410 3438 0
-3372 3440 0
-3372 -3411 3438 0
-3372 -3410 3436 0
-3371 3438 0
-3371 -3411 3436 0
-3371 -3410 3435 0
c ((aux341 + aux346 - aux363)<=0)
3383 -3442 0
3384 -3443 0
3368 -3442 0
3368 3383 -3443 0
3368 3384 -3445 0
3369 -3443 0
3369 3383 -3445 0
3369 3384 -3447 0
c (0<=(aux341 + aux346 - aux363))
-3384 3447 0
-3383 3445 0
-3369 3447 0
-3369 -3384 3445 0
-3369 -3383 3443 0
-3368 3445 0
-3368 -3384 3443 0
-3368 -3383 3442 0
c ((aux343 + aux344 - aux364)<=0)
3377 -3449 0
3378 -3450 0
3374 -3449 0
3374 3377 -3450 0
3374 3378 -3452 0
3375 -3450 0
3375 3377 -3452 0
3375 3378 -3454 0
c (0<=(aux343 + aux344 - aux364))
-3378 3454 0
-3377 3452 0
-3375 3454 0
-3375 -3378 3452 0
-3375 -3377 3450 0
-3374 3452 0
-3374 -3378 3450 0
-3374 -3377 3449 0
c ((aux345 + aux347 - aux365)<=0)
3386 -3456 0
3387 -3457 0
3380 -3456 0
3380 3386 -3457 0
3380 3387 -3459 0
3381 -3457 0
3381 3386 -3459 0
3381 3387 -3461 0
c (0<=(aux345 + aux347 - aux365))
-3387 3461 0
-3386 3459 0
-3381 3461 0
-3381 -3387 3459 0
-3381 -3386 3457 0
-3380 3459 0
-3380 -3387 3457 0
-3380 -3386 3456 0
c ((aux354 + aux358 - aux366)<=0)
3419 -3463 0
3420 -3464 0
3407 -3463 0
3407 3419 -3464 0
3407 3420 -3466 0
3408 -3464 0
3408 3419 -3466 0
3408 3420 -3468 0
c (0<=(aux354 + aux358 - aux366))
-3420 3468 0
-3419 3466 0
-3408 3468 0
-3408 -3420 3466 0
-3408 -3419 3464 0
-3407 3466 0
-3407 -3420 3464 0
-3407 -3419 3463 0
c ((aux350 + aux351 - aux367)<=0)
3398 -3470 0
3399 -3471 0
3395 -3470 0
3395 3398 -3471 0
3395 3399 -3473 0
3396 -3471 0
3396 3398 -3473 0
3396 3399 -3475 0
c (0<=(aux350 + aux351 - aux367))
-3399 3475 0
-3398 3473 0
-3396 3475 0
-3396 -3399 3473 0
-3396 -3398 3471 0
-3395 3473 0
-3395 -3399 3471 0
-3395 -3398 3470 0
c ((aux352 + aux353 - aux368)<=0)
3404 -3477 0
3405 -3478 0
3401 -3477 0
3401 3404 -3478 0
3401 3405 -3480 0
3402 -3478 0
3402 3404 -3480 0
3402 3405 -3482 0
c (0<=(aux352 + aux353 - aux368))
-3405 3482 0
-3404 3480 0
-3402 3482 0
-3402 -3405 3480 0
-3402 -3404 3478 0
-3401 3480 0
-3401 -3405 3478 0
-3401 -3404 3477 0
c ((aux356 + aux359 - aux369)<=0)
3422 -3484 0
3423 -3485 0
3413 -3484 0
3413 3422 -3485 0
3413 3423 -3487 0
3414 -3485 0
3414 3422 -3487 0
3414 3423 -3489 0
c (0<=(aux356 + aux359 - aux369))
-3423 3489 0
-3422 3487 0
-3414 3489 0
-3414 -3423 3487 0
-3414 -3422 3485 0
-3413 3487 0
-3413 -3423 3485 0
-3413 -3422 3484 0
c ((aux349 + aux357 - aux370)<=0)
3416 -3491 0
3417 -3492 0
3392 -3491 0
3392 3416 -3492 0
3392 3417 -3494 0
3393 -3492 0
3393 3416 -3494 0
3393 3417 -3496 0
c (0<=(aux349 + aux357 - aux370))
-3417 3496 0
-3416 3494 0
-3393 3496 0
-3393 -3417 3494 0
-3393 -3416 3492 0
-3392 3494 0
-3392 -3417 3492 0
-3392 -3416 3491 0
c ((aux364 + aux370 - aux371)<=0)
3491 -3498 0
3492 -3499 0
3494 -3501 0
3496 -3503 0
3449 -3498 0
3449 3491 -3499 0
3449 3492 -3501 0
3449 3494 -3503 0
3449 3496 -3505 0
3450 -3499 0
3450 3491 -3501 0
3450 3492 -3503 0
3450 3494 -3505 0
3450 3496 -3507 0
3452 -3501 0
3452 3491 -3503 0
3452 3492 -3505 0
3452 3494 -3507 0
3452 3496 -3509 0
3454 -3503 0
3454 3491 -3505 0
3454 3492 -3507 0
3454 3494 -3509 0
3454 3496 -3511 0
c (0<=(aux364 + aux370 - aux371))
-3496 3511 0
-3494 3509 0
-3492 3507 0
-3491 3505 0
-3454 3511 0
-3454 -3496 3509 0
-3454 -3494 3507 0
-3454 -3492 3505 0
-3454 -3491 3503 0
-3452 3509 0
-3452 -3496 3507 0
-3452 -3494 3505 0
-3452 -3492 3503 0
-3452 -3491 3501 0
-3450 3507 0
-3450 -3496 3505 0
-3450 -3494 3503 0
-3450 -3492 3501 0
-3450 -3491 3499 0
-3449 3505 0
-3449 -3496 3503 0
-3449 -3494 3501 0
-3449 -3492 3499 0
-3449 -3491 3498 0
c ((aux363 + aux367 - aux372)<=0)
3470 -3513 0
3471 -3514 0
3473 -3516 0
3475 -3518 0
3442 -3513 0
3442 3470 -3514 0
3442 3471 -3516 0
3442 3473 -3518 0
3442 3475 -3520 0
3443 -3514 0
3443 3470 -3516 0
3443 3471 -3518 0
3443 3473 -3520 0
3443 3475 -3522 0
3445 -3516 0
3445 3470 -3518 0
3445 3471 -3520 0
3445 3473 -3522 0
3445 3475 -3524 0
3447 -3518 0
3447 3470 -3520 0
3447 3471 -3522 0
3447 3473 -3524 0
3447 3475 -3526 0
c (0<=(aux363 + aux367 - aux372))
-3475 3526 0
-3473 3524 0
-3471 3522 0
-3470 3520 0
-3447 3526 0
-3447 -3475 3524 0
-3447 -3473 3522 0
-3447 -3471 3520 0
-3447 -3470 3518 0
-3445 3524 0
-3445 -3475 3522 0
-3445 -3473 3520 0
-3445 -3471 3518 0
-3445 -3470 3516 0
-3443 3522 0
-3443 -3475 3520 0
-3443 -3473 3518 0
-3443 -3471 3516 0
-3443 -3470 3514 0
-3442 3520 0
-3442 -3475 3518 0
-3442 -3473 3516 0
-3442 -3471 3514 0
-3442 -3470 3513 0
c ((aux361 + aux362 - aux373)<=0)
3435 -3528 0
3436 -3529 0
3438 -3531 0
3440 -3533 0
3428 -3528 0
3428 3435 -3529 0
3428 3436 -3531 0
3428 3438 -3533 0
3428 3440 -3535 0
3429 -3529 0
3429 3435 -3531 0
3429 3436 -3533 0
3429 3438 -3535 0
3429 3440 -3537 0
3431 -3531 0
3431 3435 -3533 0
3431 3436 -3535 0
3431 3438 -3537 0
3431 3440 -3539 0
3433 -3533 0
3433 3435 -3535 0
3433 3436 -3537 0
3433 3438 -3539 0
3433 3440 -3541 0
c (0<=(aux361 + aux362 - aux373))
-3440 3541 0
-3438 3539 0
-3436 3537 0
-3435 3535 0
-3433 3541 0
-3433 -3440 3539 0
-3433 -3438 3537 0
-3433 -3436 3535 0
-3433 -3435 3533 0
-3431 3539 0
-3431 -3440 3537 0
-3431 -3438 3535 0
-3431 -3436 3533 0
-3431 -3435 3531 0
-3429 3537 0
-3429 -3440 3535 0
-3429 -3438 3533 0
-3429 -3436 3531 0
-3429 -3435 3529 0
-3428 3535 0
-3428 -3440 3533 0
-3428 -3438 3531 0
-3428 -3436 3529 0
-3428 -3435 3528 0
c ((aux365 + aux366 - aux374)<=0)
3463 -3543 0
3464 -3544 0
3466 -3546 0
3468 -3548 0
3456 -3543 0
3456 3463 -3544 0
3456 3464 -3546 0
3456 3466 -3548 0
3456 3468 -3550 0
3457 -3544 0
3457 3463 -3546 0
3457 3464 -3548 0
3457 3466 -3550 0
3457 3468 -3552 0
3459 -3546 0
3459 3463 -3548 0
3459 3464 -3550 0
3459 3466 -3552 0
3459 3468 -3554 0
3461 -3548 0
3461 3463 -3550 0
3461 3464 -3552 0
3461 3466 -3554 0
3461 3468 -3556 0
c (0<=(aux365 + aux366 - aux374))
-3468 3556 0
-3466 3554 0
-3464 3552 0
-3463 3550 0
-3461 3556 0
-3461 -3468 3554 0
-3461 -3466 3552 0
-3461 -3464 3550 0
-3461 -3463 3548 0
-3459 3554 0
-3459 -3468 3552 0
-3459 -3466 3550 0
-3459 -3464 3548 0
-3459 -3463 3546 0
-3457 3552 0
-3457 -3468 3550 0
-3457 -3466 3548 0
-3457 -3464 3546 0
-3457 -3463 3544 0
-3456 3550 0
-3456 -3468 3548 0
-3456 -3466 3546 0
-3456 -3464 3544 0
-3456 -3463 3543 0
c ((aux368 + aux369 - aux375)<=0)
3484 -3558 0
3485 -3559 0
3487 -3561 0
3489 -3563 0
3477 -3558 0
3477 3484 -3559 0
3477 3485 -3561 0
3477 3487 -3563 0
3477 3489 -3565 0
3478 -3559 0
3478 3484 -3561 0
3478 3485 -3563 0
3478 3487 -3565 0
3478 3489 -3567 0
3480 -3561 0
3480 3484 -3563 0
3480 3485 -3565 0
3480 3487 -3567 0
3480 3489 -3569 0
3482 -3563 0
3482 3484 -3565 0
3482 3485 -3567 0
3482 3487 -3569 0
3482 3489 -3571 0
c (0<=(aux368 + aux369 - aux375))
-3489 3571 0
-3487 3569 0
-3485 3567 0
-3484 3565 0
-3482 3571 0
-3482 -3489 3569 0
-3482 -3487 3567 0
-3482 -3485 3565 0
-3482 -3484 3563 0
-3480 3569 0
-3480 -3489 3567 0
-3480 -3487 3565 0
-3480 -3485 3563 0
-3480 -3484 3561 0
-3478 3567 0
-3478 -3489 3565 0
-3478 -3487 3563 0
-3478 -3485 3561 0
-3478 -3484 3559 0
-3477 3565 0
-3477 -3489 3563 0
-3477 -3487 3561 0
-3477 -3485 3559 0
-3477 -3484 3558 0
c ((aux372 + aux375 - aux376)<=0)
3558 -3573 0
3559 -3574 0
3561 -3576 0
3563 -3578 0
3565 -3580 0
3567 -3582 0
3569 -3584 0
3571 -3586 0
3513 -3573 0
3513 3558 -3574 0
3513 3559 -3576 0
3513 3561 -3578 0
3513 3563 -3580 0
3513 3565 -3582 0
3513 3567 -3584 0
3513 3569 -3586 0
3513 3571 -3588 0
3514 -3574 0
3514 3558 -3576 0
3514 3559 -3578 0
3514 3561 -3580 0
3514 3563 -3582 0
3514 3565 -3584 0
3514 3567 -3586 0
3514 3569 -3588 0
3514 3571 -3590 0
3516 -3576 0
3516 3558 -3578 0
3516 3559 -3580 0
3516 3561 -3582 0
3516 3563 -3584 0
3516 3565 -3586 0
3516 3567 -3588 0
3516 3569 -3590 0
3516 3571 -3592 0
3518 -3578 0
3518 3558 -3580 0
3518 3559 -3582 0
3518 3561 -3584 0
3518 3563 -3586 0
3518 3565 -3588 0
3518 3567 -3590 0
3518 3569 -3592 0
3518 3571 -3594 0
3520 -3580 0
3520 3558 -3582 0
3520 3559 -3584 0
3520 3561 -3586 0
3520 3563 -3588 0
3520 3565 -3590 0
3520 3567 -3592 0
3520 3569 -3594 0
3520 3571 -3596 0
3522 -3582 0
3522 3558 -3584 0
3522 3559 -3586 0
3522 3561 -3588 0
3522 3563 -3590 0
3522 3565 -3592 0
3522 3567 -3594 0
3522 3569 -3596 0
3522 3571 -3598 0
3524 -3584 0
3524 3558 -3586 0
3524 3559 -3588 0
3524 3561 -3590 0
3524 3563 -3592 0
3524 3565 -3594 0
3524 3567 -3596 0
3524 3569 -3598 0
3524 3571 -3600 0
3526 -3586 0
3526 3558 -3588 0
3526 3559 -3590 0
3526 3561 -3592 0
3526 3563 -3594 0
3526 3565 -3596 0
3526 3567 -3598 0
3526 3569 -3600 0
3526 3571 -3602 0
c (0<=(aux372 + aux375 - aux376))
-3571 3602 0
-3569 3600 0
-3567 3598 0
-3565 3596 0
-3563 3594 0
-3561 3592 0
-3559 3590 0
-3558 3588 0
-3526 3602 0
-3526 -3571 3600 0
-3526 -3569 3598 0
-3526 -3567 3596 0
-3526 -3565 3594 0
-3526 -3563 3592 0
-3526 -3561 3590 0
-3526 -3559 3588 0
-3526 -3558 3586 0
-3524 3600 0
-3524 -3571 3598 0
-3524 -3569 3596 0
-3524 -3567 3594 0
-3524 -3565 3592 0
-3524 -3563 3590 0
-3524 -3561 3588 0
-3524 -3559 3586 0
-3524 -3558 3584 0
-3522 3598 0
-3522 -3571 3596 0
-3522 -3569 3594 0
-3522 -3567 3592 0
-3522 -3565 3590 0
-3522 -3563 3588 0
-3522 -3561 3586 0
-3522 -3559 3584 0
-3522 -3558 3582 0
-3520 3596 0
-3520 -3571 3594 0
-3520 -3569 3592 0
-3520 -3567 3590 0
-3520 -3565 3588 0
-3520 -3563 3586 0
-3520 -3561 3584 0
-3520 -3559 3582 0
-3520 -3558 3580 0
-3518 3594 0
-3518 -3571 3592 0
-3518 -3569 3590 0
-3518 -3567 3588 0
-3518 -3565 3586 0
-3518 -3563 3584 0
-3518 -3561 3582 0
-3518 -3559 3580 0
-3518 -3558 3578 0
-3516 3592 0
-3516 -3571 3590 0
-3516 -3569 3588 0
-3516 -3567 3586 0
-3516 -3565 3584 0
-3516 -3563 3582 0
-3516 -3561 3580 0
-3516 -3559 3578 0
-3516 -3558 3576 0
-3514 3590 0
-3514 -3571 3588 0
-3514 -3569 3586 0
-3514 -3567 3584 0
-3514 -3565 3582 0
-3514 -3563 3580 0
-3514 -3561 3578 0
-3514 -3559 3576 0
-3514 -3558 3574 0
-3513 3588 0
-3513 -3571 3586 0
-3513 -3569 3584 0
-3513 -3567 3582 0
-3513 -3565 3580 0
-3513 -3563 3578 0
-3513 -3561 3576 0
-3513 -3559 3574 0
-3513 -3558 3573 0
c ((aux371 + aux373 - aux377)<=0)
3528 -3604 0
3529 -3605 0
3531 -3607 0
3533 -3609 0
3535 -3611 0
3537 -3613 0
3539 -3615 0
3541 -3617 0
3498 -3604 0
3498 3528 -3605 0
3498 3529 -3607 0
3498 3531 -3609 0
3498 3533 -3611 0
3498 3535 -3613 0
3498 3537 -3615 0
3498 3539 -3617 0
3498 3541 -3619 0
3499 -3605 0
3499 3528 -3607 0
3499 3529 -3609 0
3499 3531 -3611 0
3499 3533 -3613 0
3499 3535 -3615 0
3499 3537 -3617 0
3499 3539 -3619 0
3499 3541 -3621 0
3501 -3607 0
3501 3528 -3609 0
3501 3529 -3611 0
3501 3531 -3613 0
3501 3533 -3615 0
3501 3535 -3617 0
3501 3537 -3619 0
3501 3539 -3621 0
3501 3541 -3623 0
3503 -3609 0
3503 3528 -3611 0
3503 3529 -3613 0
3503 3531 -3615 0
3503 3533 -3617 0
3503 3535 -3619 0
3503 3537 -3621 0
3503 3539 -3623 0
3503 3541 -3625 0
3505 -3611 0
3505 3528 -3613 0
3505 3529 -3615 0
3505 3531 -3617 0
3505 3533 -3619 0
3505 3535 -3621 0
3505 3537 -3623 0
3505 3539 -3625 0
3505 3541 -3627 0
3507 -3613 0
3507 3528 -3615 0
3507 3529 -3617 0
3507 3531 -3619 0
3507 3533 -3621 0
3507 3535 -3623 0
3507 3537 -3625 0
3507 3539 -3627 0
3507 3541 -3629 0
3509 -3615 0
3509 3528 -3617 0
3509 3529 -3619 0
3509 3531 -3621 0
3509 3533 -3623 0
3509 3535 -3625 0
3509 3537 -3627 0
3509 3539 -3629 0
3509 3541 -3631 0
3511 -3617 0
3511 3528 -3619 0
3511 3529 -3621 0
3511 3531 -3623 0
3511 3533 -3625 0
3511 3535 -3627 0
3511 3537 -3629 0
3511 3539 -3631 0
3511 3541 -3633 0
c (0<=(aux371 + aux373 - aux377))
-3541 3633 0
-3539 3631 0
-3537 3629 0
-3535 3627 0
-3533 3625 0
-3531 3623 0
-3529 3621 0
-3528 3619 0
-3511 3633 0
-3511 -3541 3631 0
-3511 -3539 3629 0
-3511 -3537 3627 0
-3511 -3535 3625 0
-3511 -3533 3623 0
-3511 -3531 3621 0
-3511 -3529 3619 0
-3511 -3528 3617 0
-3509 3631 0
-3509 -3541 3629 0
-3509 -3539 3627 0
-3509 -3537 3625 0
-3509 -3535 3623 0
-3509 -3533 3621 0
-3509 -3531 3619 0
-3509 -3529 3617 0
-3509 -3528 3615 0
-3507 3629 0
-3507 -3541 3627 0
-3507 -3539 3625 0
-3507 -3537 3623 0
-3507 -3535 3621 0
-3507 -3533 3619 0
-3507 -3531 3617 0
-3507 -3529 3615 0
-3507 -3528 3613 0
-3505 3627 0
-3505 -3541 3625 0
-3505 -3539 3623 0
-3505 -3537 3621 0
-3505 -3535 3619 0
-3505 -3533 3617 0
-3505 -3531 3615 0
-3505 -3529 3613 0
-3505 -3528 3611 0
-3503 3625 0
-3503 -3541 3623 0
-3503 -3539 3621 0
-3503 -3537 3619 0
-3503 -3535 3617 0
-3503 -3533 3615 0
-3503 -3531 3613 0
-3503 -3529 3611 0
-3503 -3528 3609 0
-3501 3623 0
-3501 -3541 3621 0
-3501 -3539 3619 0
-3501 -3537 3617 0
-3501 -3535 3615 0
-3501 -3533 3613 0
-3501 -3531 3611 0
-3501 -3529 3609 0
-3501 -3528 3607 0
-3499 3621 0
-3499 -3541 3619 0
-3499 -3539 3617 0
-3499 -3537 3615 0
-3499 -3535 3613 0
-3499 -3533 3611 0
-3499 -3531 3609 0
-3499 -3529 3607 0
-3499 -3528 3605 0
-3498 3619 0
-3498 -3541 3617 0
-3498 -3539 3615 0
-3498 -3537 3613 0
-3498 -3535 3611 0
-3498 -3533 3609 0
-3498 -3531 3607 0
-3498 -3529 3605 0
-3498 -3528 3604 0
c ((SATLiteral(503) - aux378 + SATLiteral(90))<=0)
-90 -3635 0
-503 -3635 0
-503 -90 -3636 0
c (0<=(SATLiteral(503) - aux378 + SATLiteral(90)))
90 3636 0
503 3636 0
503 90 3635 0
c ((SATLiteral(521) - aux379 + SATLiteral(73))<=0)
-73 -3638 0
-521 -3638 0
-521 -73 -3639 0
c (0<=(SATLiteral(521) - aux379 + SATLiteral(73)))
73 3639 0
521 3639 0
521 73 3638 0
c ((SATLiteral(556) - aux380 + SATLiteral(56))<=0)
-56 -3641 0
-556 -3641 0
-556 -56 -3642 0
c (0<=(SATLiteral(556) - aux380 + SATLiteral(56)))
56 3642 0
556 3642 0
556 56 3641 0
c ((SATLiteral(349) - aux381 + SATLiteral(39))<=0)
-39 -3644 0
-349 -3644 0
-349 -39 -3645 0
c (0<=(SATLiteral(349) - aux381 + SATLiteral(39)))
39 3645 0
349 3645 0
349 39 3644 0
c (( - aux382 + SATLiteral(608) + SATLiteral(22))<=0)
-22 -3647 0
-608 -3647 0
-608 -22 -3648 0
c (0<=( - aux382 + SATLiteral(608) + SATLiteral(22)))
22 3648 0
608 3648 0
608 22 3647 0
c (( - aux383 + SATLiteral(452) + SATLiteral(5))<=0)
-5 -3650 0
-452 -3650 0
-452 -5 -3651 0
c (0<=( - aux383 + SATLiteral(452) + SATLiteral(5)))
5 3651 0
452 3651 0
452 5 3650 0
c (( - aux384 + SATLiteral(625) + SATLiteral(469))<=0)
-469 -3653 0
-625 -3653 0
-625 -469 -3654 0
c (0<=( - aux384 + SATLiteral(625) + SATLiteral(469)))
469 3654 0
625 3654 0
625 469 3653 0
c ((SATLiteral(366) - aux385 + SATLiteral(486))<=0)
-486 -3656 0
-366 -3656 0
-366 -486 -3657 0
c (0<=(SATLiteral(366) - aux385 + SATLiteral(486)))
486 3657 0
366 3657 0
366 486 3656 0
c (( - aux386 + SATLiteral(642) + SATLiteral(659))<=0)
-659 -3659 0
-642 -3659 0
-642 -659 -3660 0
c (0<=( - aux386 + SATLiteral(642) + SATLiteral(659)))
659 3660 0
642 3660 0
642 659 3659 0
c ((SATLiteral(297) - aux387 + SATLiteral(435))<=0)
-435 -3662 0
-297 -3662 0
-297 -435 -3663 0
c (0<=(SATLiteral(297) - aux387 + SATLiteral(435)))
435 3663 0
297 3663 0
297 435 3662 0
c (( - aux388 + SATLiteral(107) + SATLiteral(418))<=0)
-418 -3665 0
-107 -3665 0
-107 -418 -3666 0
c (0<=( - aux388 + SATLiteral(107) + SATLiteral(418)))
418 3666 0
107 3666 0
107 418 3665 0
c (( - aux389 + SATLiteral(676) + SATLiteral(401))<=0)
-401 -3668 0
-676 -3668 0
-676 -401 -3669 0
c (0<=( - aux389 + SATLiteral(676) + SATLiteral(401)))
401 3669 0
676 3669 0
676 401 3668 0
c (( - aux390 + SATLiteral(178) + SATLiteral(384))<=0)
-384 -3671 0
-178 -3671 0
-178 -384 -3672 0
c (0<=( - aux390 + SATLiteral(178) + SATLiteral(384)))
384 3672 0
178 3672 0
178 384 3671 0
c (( - aux391 + SATLiteral(125) + SATLiteral(280))<=0)
-280 -3674 0
-125 -3674 0
-125 -280 -3675 0
c (0<=( - aux391 + SATLiteral(125) + SATLiteral(280)))
280 3675 0
125 3675 0
125 280 3674 0
c (( - aux392 + SATLiteral(195) + SATLiteral(263))<=0)
-263 -3677 0
-195 -3677 0
-195 -263 -3678 0
c (0<=( - aux392 + SATLiteral(195) + SATLiteral(263)))
263 3678 0
195 3678 0
195 263 3677 0
c (( - aux393 + SATLiteral(212) + SATLiteral(246))<=0)
-246 -3680 0
-212 -3680 0
-212 -246 -3681 0
c (0<=( - aux393 + SATLiteral(212) + SATLiteral(246)))
246 3681 0
212 3681 0
212 246 3680 0
c ((SATLiteral(538) - aux394 + SATLiteral(229))<=0)
-229 -3683 0
-538 -3683 0
-538 -229 -3684 0
c (0<=(SATLiteral(538) - aux394 + SATLiteral(229)))
229 3684 0
538 3684 0
538 229 3683 0
c ((SATLiteral(315) - aux395 + SATLiteral(142))<=0)
-142 -3686 0
-315 -3686 0
-315 -142 -3687 0
c (0<=(SATLiteral(315) - aux395 + SATLiteral(142)))
142 3687 0
315 3687 0
315 142 3686 0
c ((SATLiteral(332) - aux396 + SATLiteral(160))<=0)
-160 -3689 0
-332 -3689 0
-332 -160 -3690 0
c (0<=(SATLiteral(332) - aux396 + SATLiteral(160)))
160 3690 0
332 3690 0
332 160 3689 0
c (( - aux397 + SATLiteral(574) + SATLiteral(591))<=0)
-591 -3692 0
-574 -3692 0
-574 -591 -3693 0
c (0<=( - aux397 + SATLiteral(574) + SATLiteral(591)))
591 3693 0
574 3693 0
574 591 3692 0
c ((aux385 + aux397 - aux398)<=0)
3692 -3695 0
3693 -3696 0
3656 -3695 0
3656 3692 -3696 0
3656 3693 -3698 0
3657 -3696 0
3657 3692 -3698 0
3657 3693 -3700 0
c (0<=(aux385 + aux397 - aux398))
-3693 3700 0
-3692 3698 0
-3657 3700 0
-3657 -3693 3698 0
-3657 -3692 3696 0
-3656 3698 0
-3656 -3693 3696 0
-3656 -3692 3695 0
c ((aux379 + aux392 - aux399)<=0)
3677 -3702 0
3678 -3703 0
3638 -3702 0
3638 3677 -3703 0
3638 3678 -3705 0
3639 -3703 0
3639 3677 -3705 0
3639 3678 -3707 0
c (0<=(aux379 + aux392 - aux399))
-3678 3707 0
-3677 3705 0
-3639 3707 0
-3639 -3678 3705 0
-3639 -3677 3703 0
-3638 3705 0
-3638 -3678 3703 0
-3638 -3677 3702 0
c ((aux378 + aux383 - aux400)<=0)
3650 -3709 0
3651 -3710 0
3635 -3709 0
3635 3650 -3710 0
3635 3651 -3712 0
3636 -3710 0
3636 3650 -3712 0
3636 3651 -3714 0
c (0<=(aux378 + aux383 - aux400))
-3651 3714 0
-3650 3712 0
-3636 3714 0
-3636 -3651 3712 0
-3636 -3650 3710 0
-3635 3712 0
-3635 -3651 3710 0
-3635 -3650 3709 0
c ((aux380 + aux381 - aux401)<=0)
3644 -3716 0
3645 -3717 0
3641 -3716 0
3641 3644 -3717 0
3641 3645 -3719 0
3642 -3717 0
3642 3644 -3719 0
3642 3645 -3721 0
c (0<=(aux380 + aux381 - aux401))
-3645 3721 0
-3644 3719 0
-3642 3721 0
-3642 -3645 3719 0
-3642 -3644 3717 0
-3641 3719 0
-3641 -3645 3717 0
-3641 -3644 3716 0
c ((aux382 + aux384 - aux402)<=0)
3653 -3723 0
3654 -3724 0
3647 -3723 0
3647 3653 -3724 0
3647 3654 -3726 0
3648 -3724 0
3648 3653 -3726 0
3648 3654 -3728 0
c (0<=(aux382 + aux384 - aux402))
-3654 3728 0
-3653 3726 0
-3648 3728 0
-3648 -3654 3726 0
-3648 -3653 3724 0
-3647 3726 0
-3647 -3654 3724 0
-3647 -3653 3723 0
c ((aux391 + aux395 - aux403)<=0)
3686 -3730 0
3687 -3731 0
3674 -3730 0
3674 3686 -3731 0
3674 3687 -3733 0
3675 -3731 0
3675 3686 -3733 0
3675 3687 -3735 0
c (0<=(aux391 + aux395 - aux403))
-3687 3735 0
-3686 3733 0
-3675 3735 0
-3675 -3687 3733 0
-3675 -3686 3731 0
-3674 3733 0
-3674 -3687 3731 0
-3674 -3686 3730 0
c ((aux387 + aux388 - aux404)<=0)
3665 -3737 0
3666 -3738 0
3662 -3737 0
3662 3665 -3738 0
3662 3666 -3740 0
3663 -3738 0
3663 3665 -3740 0
3663 3666 -3742 0
c (0<=(aux387 + aux388 - aux404))
-3666 3742 0
-3665 3740 0
-3663 3742 0
-3663 -3666 3740 0
-3663 -3665 3738 0
-3662 3740 0
-3662 -3666 3738 0
-3662 -3665 3737 0
c ((aux389 + aux390 - aux405)<=0)
3671 -3744 0
3672 -3745 0
3668 -3744 0
3668 3671 -3745 0
3668 3672 -3747 0
3669 -3745 0
3669 3671 -3747 0
3669 3672 -3749 0
c (0<=(aux389 + aux390 - aux405))
-3672 3749 0
-3671 3747 0
-3669 3749 0
-3669 -3672 3747 0
-3669 -3671 3745 0
-3668 3747 0
-3668 -3672 3745 0
-3668 -3671 3744 0
c ((aux393 + aux396 - aux406)<=0)
3689 -3751 0
3690 -3752 0
3680 -3751 0
3680 3689 -3752 0
3680 3690 -3754 0
3681 -3752 0
3681 3689 -3754 0
3681 3690 -3756 0
c (0<=(aux393 + aux396 - aux406))
-3690 3756 0
-3689 3754 0
-3681 3756 0
-3681 -3690 3754 0
-3681 -3689 3752 0
-3680 3754 0
-3680 -3690 3752 0
-3680 -3689 3751 0
c ((aux386 + aux394 - aux407)<=0)
3683 -3758 0
3684 -3759 0
3659 -3758 0
3659 3683 -3759 0
3659 3684 -3761 0
3660 -3759 0
3660 3683 -3761 0
3660 3684 -3763 0
c (0<=(aux386 + aux394 - aux407))
-3684 3763 0
-3683 3761 0
-3660 3763 0
-3660 -3684 3761 0
-3660 -3683 3759 0
-3659 3761 0
-3659 -3684 3759 0
-3659 -3683 3758 0
c ((aux401 + aux407 - aux408)<=0)
3758 -3765 0
3759 -3766 0
3761 -3768 0
3763 -3770 0
3716 -3765 0
3716 3758 -3766 0
3716 3759 -3768 0
3716 3761 -3770 0
3716 3763 -3772 0
3717 -3766 0
3717 3758 -3768 0
3717 3759 -3770 0
3717 3761 -3772 0
3717 3763 -3774 0
3719 -3768 0
3719 3758 -3770 0
3719 3759 -3772 0
3719 3761 -3774 0
3719 3763 -3776 0
3721 -3770 0
3721 3758 -3772 0
3721 3759 -3774 0
3721 3761 -3776 0
3721 3763 -3778 0
c (0<=(aux401 + aux407 - aux408))
-3763 3778 0
-3761 3776 0
-3759 3774 0
-3758 3772 0
-3721 3778 0
-3721 -3763 3776 0
-3721 -3761 3774 0
-3721 -3759 3772 0
-3721 -3758 3770 0
-3719 3776 0
-3719 -3763 3774 0
-3719 -3761 3772 0
-3719 -3759 3770 0
-3719 -3758 3768 0
-3717 3774 0
-3717 -3763 3772 0
-3717 -3761 3770 0
-3717 -3759 3768 0
-3717 -3758 3766 0
-3716 3772 0
-3716 -3763 3770 0
-3716 -3761 3768 0
-3716 -3759 3766 0
-3716 -3758 3765 0
c ((aux400 + aux404 - aux409)<=0)
3737 -3780 0
3738 -3781 0
3740 -3783 0
3742 -3785 0
3709 -3780 0
3709 3737 -3781 0
3709 3738 -3783 0
3709 3740 -3785 0
3709 3742 -3787 0
3710 -3781 0
3710 3737 -3783 0
3710 3738 -3785 0
3710 3740 -3787 0
3710 3742 -3789 0
3712 -3783 0
3712 3737 -3785 0
3712 3738 -3787 0
3712 3740 -3789 0
3712 3742 -3791 0
3714 -3785 0
3714 3737 -3787 0
3714 3738 -3789 0
3714 3740 -3791 0
3714 3742 -3793 0
c (0<=(aux400 + aux404 - aux409))
-3742 3793 0
-3740 3791 0
-3738 3789 0
-3737 3787 0
-3714 3793 0
-3714 -3742 3791 0
-3714 -3740 3789 0
-3714 -3738 3787 0
-3714 -3737 3785 0
-3712 3791 0
-3712 -3742 3789 0
-3712 -3740 3787 0
-3712 -3738 3785 0
-3712 -3737 3783 0
-3710 3789 0
-3710 -3742 3787 0
-3710 -3740 3785 0
-3710 -3738 3783 0
-3710 -3737 3781 0
-3709 3787 0
-3709 -3742 3785 0
-3709 -3740 3783 0
-3709 -3738 3781 0
-3709 -3737 3780 0
c ((aux398 + aux399 - aux410)<=0)
3702 -3795 0
3703 -3796 0
3705 -3798 0
3707 -3800 0
3695 -3795 0
3695 3702 -3796 0
3695 3703 -3798 0
3695 3705 -3800 0
3695 3707 -3802 0
3696 -3796 0
3696 3702 -3798 0
3696 3703 -3800 0
3696 3705 -3802 0
3696 3707 -3804 0
3698 -3798 0
3698 3702 -3800 0
3698 3703 -3802 0
3698 3705 -3804 0
3698 3707 -3806 0
3700 -3800 0
3700 3702 -3802 0
3700 3703 -3804 0
3700 3705 -3806 0
3700 3707 -3808 0
c (0<=(aux398 + aux399 - aux410))
-3707 3808 0
-3705 3806 0
-3703 3804 0
-3702 3802 0
-3700 3808 0
-3700 -3707 3806 0
-3700 -3705 3804 0
-3700 -3703 3802 0
-3700 -3702 3800 0
-3698 3806 0
-3698 -3707 3804 0
-3698 -3705 3802 0
-3698 -3703 3800 0
-3698 -3702 3798 0
-3696 3804 0
-3696 -3707 3802 0
-3696 -3705 3800 0
-3696 -3703 3798 0
-3696 -3702 3796 0
-3695 3802 0
-3695 -3707 3800 0
-3695 -3705 3798 0
-3695 -3703 3796 0
-3695 -3702 3795 0
c ((aux402 + aux403 - aux411)<=0)
3730 -3810 0
3731 -3811 0
3733 -3813 0
3735 -3815 0
3723 -3810 0
3723 3730 -3811 0
3723 3731 -3813 0
3723 3733 -3815 0
3723 3735 -3817 0
3724 -3811 0
3724 3730 -3813 0
3724 3731 -3815 0
3724 3733 -3817 0
3724 3735 -3819 0
3726 -3813 0
3726 3730 -3815 0
3726 3731 -3817 0
3726 3733 -3819 0
3726 3735 -3821 0
3728 -3815 0
3728 3730 -3817 0
3728 3731 -3819 0
3728 3733 -3821 0
3728 3735 -3823 0
c (0<=(aux402 + aux403 - aux411))
-3735 3823 0
-3733 3821 0
-3731 3819 0
-3730 3817 0
-3728 3823 0
-3728 -3735 3821 0
-3728 -3733 3819 0
-3728 -3731 3817 0
-3728 -3730 3815 0
-3726 3821 0
-3726 -3735 3819 0
-3726 -3733 3817 0
-3726 -3731 3815 0
-3726 -3730 3813 0
-3724 3819 0
-3724 -3735 3817 0
-3724 -3733 3815 0
-3724 -3731 3813 0
-3724 -3730 3811 0
-3723 3817 0
-3723 -3735 3815 0
-3723 -3733 3813 0
-3723 -3731 3811 0
-3723 -3730 3810 0
c ((aux405 + aux406 - aux412)<=0)
3751 -3825 0
3752 -3826 0
3754 -3828 0
3756 -3830 0
3744 -3825 0
3744 3751 -3826 0
3744 3752 -3828 0
3744 3754 -3830 0
3744 3756 -3832 0
3745 -3826 0
3745 3751 -3828 0
3745 3752 -3830 0
3745 3754 -3832 0
3745 3756 -3834 0
3747 -3828 0
3747 3751 -3830 0
3747 3752 -3832 0
3747 3754 -3834 0
3747 3756 -3836 0
3749 -3830 0
3749 3751 -3832 0
3749 3752 -3834 0
3749 3754 -3836 0
3749 3756 -3838 0
c (0<=(aux405 + aux406 - aux412))
-3756 3838 0
-3754 3836 0
-3752 3834 0
-3751 3832 0
-3749 3838 0
-3749 -3756 3836 0
-3749 -3754 3834 0
-3749 -3752 3832 0
-3749 -3751 3830 0
-3747 3836 0
-3747 -3756 3834 0
-3747 -3754 3832 0
-3747 -3752 3830 0
-3747 -3751 3828 0
-3745 3834 0
-3745 -3756 3832 0
-3745 -3754 3830 0
-3745 -3752 3828 0
-3745 -3751 3826 0
-3744 3832 0
-3744 -3756 3830 0
-3744 -3754 3828 0
-3744 -3752 3826 0
-3744 -3751 3825 0
c ((aux409 + aux412 - aux413)<=0)
3825 -3840 0
3826 -3841 0
3828 -3843 0
3830 -3845 0
3832 -3847 0
3834 -3849 0
3836 -3851 0
3838 -3853 0
3780 -3840 0
3780 3825 -3841 0
3780 3826 -3843 0
3780 3828 -3845 0
3780 3830 -3847 0
3780 3832 -3849 0
3780 3834 -3851 0
3780 3836 -3853 0
3780 3838 -3855 0
3781 -3841 0
3781 3825 -3843 0
3781 3826 -3845 0
3781 3828 -3847 0
3781 3830 -3849 0
3781 3832 -3851 0
3781 3834 -3853 0
3781 3836 -3855 0
3781 3838 -3857 0
3783 -3843 0
3783 3825 -3845 0
3783 3826 -3847 0
3783 3828 -3849 0
3783 3830 -3851 0
3783 3832 -3853 0
3783 3834 -3855 0
3783 3836 -3857 0
3783 3838 -3859 0
3785 -3845 0
3785 3825 -3847 0
3785 3826 -3849 0
3785 3828 -3851 0
3785 3830 -3853 0
3785 3832 -3855 0
3785 3834 -3857 0
3785 3836 -3859 0
3785 3838 -3861 0
3787 -3847 0
3787 3825 -3849 0
3787 3826 -3851 0
3787 3828 -3853 0
3787 3830 -3855 0
3787 3832 -3857 0
3787 3834 -3859 0
3787 3836 -3861 0
3787 3838 -3863 0
3789 -3849 0
3789 3825 -3851 0
3789 3826 -3853 0
3789 3828 -3855 0
3789 3830 -3857 0
3789 3832 -3859 0
3789 3834 -3861 0
3789 3836 -3863 0
3789 3838 -3865 0
3791 -3851 0
3791 3825 -3853 0
3791 3826 -3855 0
3791 3828 -3857 0
3791 3830 -3859 0
3791 3832 -3861 0
3791 3834 -3863 0
3791 3836 -3865 0
3791 3838 -3867 0
3793 -3853 0
3793 3825 -3855 0
3793 3826 -3857 0
3793 3828 -3859 0
3793 3830 -3861 0
3793 3832 -3863 0
3793 3834 -3865 0
3793 3836 -3867 0
3793 3838 -3869 0
c (0<=(aux409 + aux412 - aux413))
-3838 3869 0
-3836 3867 0
-3834 3865 0
-3832 3863 0
-3830 3861 0
-3828 3859 0
-3826 3857 0
-3825 3855 0
-3793 3869 0
-3793 -3838 3867 0
-3793 -3836 3865 0
-3793 -3834 3863 0
-3793 -3832 3861 0
-3793 -3830 3859 0
-3793 -3828 3857 0
-3793 -3826 3855 0
-3793 -3825 3853 0
-3791 3867 0
-3791 -3838 3865 0
-3791 -3836 3863 0
-3791 -3834 3861 0
-3791 -3832 3859 0
-3791 -3830 3857 0
-3791 -3828 3855 0
-3791 -3826 3853 0
-3791 -3825 3851 0
-3789 3865 0
-3789 -3838 3863 0
-3789 -3836 3861 0
-3789 -3834 3859 0
-3789 -3832 3857 0
-3789 -3830 3855 0
-3789 -3828 3853 0
-3789 -3826 3851 0
-3789 -3825 3849 0
-3787 3863 0
-3787 -3838 3861 0
-3787 -3836 3859 0
-3787 -3834 3857 0
-3787 -3832 3855 0
-3787 -3830 3853 0
-3787 -3828 3851 0
-3787 -3826 3849 0
-3787 -3825 3847 0
-3785 3861 0
-3785 -3838 3859 0
-3785 -3836 3857 0
-3785 -3834 3855 0
-3785 -3832 3853 0
-3785 -3830 3851 0
-3785 -3828 3849 0
-3785 -3826 3847 0
-3785 -3825 3845 0
-3783 3859 0
-3783 -3838 3857 0
-3783 -3836 3855 0
-3783 -3834 3853 0
-3783 -3832 3851 0
-3783 -3830 3849 0
-3783 -3828 3847 0
-3783 -3826 3845 0
-3783 -3825 3843 0
-3781 3857 0
-3781 -3838 3855 0
-3781 -3836 3853 0
-3781 -3834 3851 0
-3781 -3832 3849 0
-3781 -3830 3847 0
-3781 -3828 3845 0
-3781 -3826 3843 0
-3781 -3825 3841 0
-3780 3855 0
-3780 -3838 3853 0
-3780 -3836 3851 0
-3780 -3834 3849 0
-3780 -3832 3847 0
-3780 -3830 3845 0
-3780 -3828 3843 0
-3780 -3826 3841 0
-3780 -3825 3840 0
c ((aux408 + aux410 - aux414)<=0)
3795 -3871 0
3796 -3872 0
3798 -3874 0
3800 -3876 0
3802 -3878 0
3804 -3880 0
3806 -3882 0
3808 -3884 0
3765 -3871 0
3765 3795 -3872 0
3765 3796 -3874 0
3765 3798 -3876 0
3765 3800 -3878 0
3765 3802 -3880 0
3765 3804 -3882 0
3765 3806 -3884 0
3765 3808 -3886 0
3766 -3872 0
3766 3795 -3874 0
3766 3796 -3876 0
3766 3798 -3878 0
3766 3800 -3880 0
3766 3802 -3882 0
3766 3804 -3884 0
3766 3806 -3886 0
3766 3808 -3888 0
3768 -3874 0
3768 3795 -3876 0
3768 3796 -3878 0
3768 3798 -3880 0
3768 3800 -3882 0
3768 3802 -3884 0
3768 3804 -3886 0
3768 3806 -3888 0
3768 3808 -3890 0
3770 -3876 0
3770 3795 -3878 0
3770 3796 -3880 0
3770 3798 -3882 0
3770 3800 -3884 0
3770 3802 -3886 0
3770 3804 -3888 0
3770 3806 -3890 0
3770 3808 -3892 0
3772 -3878 0
3772 3795 -3880 0
3772 3796 -3882 0
3772 3798 -3884 0
3772 3800 -3886 0
3772 3802 -3888 0
3772 3804 -3890 0
3772 3806 -3892 0
3772 3808 -3894 0
3774 -3880 0
3774 3795 -3882 0
3774 3796 -3884 0
3774 3798 -3886 0
3774 3800 -3888 0
3774 3802 -3890 0
3774 3804 -3892 0
3774 3806 -3894 0
3774 3808 -3896 0
3776 -3882 0
3776 3795 -3884 0
3776 3796 -3886 0
3776 3798 -3888 0
3776 3800 -3890 0
3776 3802 -3892 0
3776 3804 -3894 0
3776 3806 -3896 0
3776 3808 -3898 0
3778 -3884 0
3778 3795 -3886 0
3778 3796 -3888 0
3778 3798 -3890 0
3778 3800 -3892 0
3778 3802 -3894 0
3778 3804 -3896 0
3778 3806 -3898 0
3778 3808 -3900 0
c (0<=(aux408 + aux410 - aux414))
-3808 3900 0
-3806 3898 0
-3804 3896 0
-3802 3894 0
-3800 3892 0
-3798 3890 0
-3796 3888 0
-3795 3886 0
-3778 3900 0
-3778 -3808 3898 0
-3778 -3806 3896 0
-3778 -3804 3894 0
-3778 -3802 3892 0
-3778 -3800 3890 0
-3778 -3798 3888 0
-3778 -3796 3886 0
-3778 -3795 3884 0
-3776 3898 0
-3776 -3808 3896 0
-3776 -3806 3894 0
-3776 -3804 3892 0
-3776 -3802 3890 0
-3776 -3800 3888 0
-3776 -3798 3886 0
-3776 -3796 3884 0
-3776 -3795 3882 0
-3774 3896 0
-3774 -3808 3894 0
-3774 -3806 3892 0
-3774 -3804 3890 0
-3774 -3802 3888 0
-3774 -3800 3886 0
-3774 -3798 3884 0
-3774 -3796 3882 0
-3774 -3795 3880 0
-3772 3894 0
-3772 -3808 3892 0
-3772 -3806 3890 0
-3772 -3804 3888 0
-3772 -3802 3886 0
-3772 -3800 3884 0
-3772 -3798 3882 0
-3772 -3796 3880 0
-3772 -3795 3878 0
-3770 3892 0
-3770 -3808 3890 0
-3770 -3806 3888 0
-3770 -3804 3886 0
-3770 -3802 3884 0
-3770 -3800 3882 0
-3770 -3798 3880 0
-3770 -3796 3878 0
-3770 -3795 3876 0
-3768 3890 0
-3768 -3808 3888 0
-3768 -3806 3886 0
-3768 -3804 3884 0
-3768 -3802 3882 0
-3768 -3800 3880 0
-3768 -3798 3878 0
-3768 -3796 3876 0
-3768 -3795 3874 0
-3766 3888 0
-3766 -3808 3886 0
-3766 -3806 3884 0
-3766 -3804 3882 0
-3766 -3802 3880 0
-3766 -3800 3878 0
-3766 -3798 3876 0
-3766 -3796 3874 0
-3766 -3795 3872 0
-3765 3886 0
-3765 -3808 3884 0
-3765 -3806 3882 0
-3765 -3804 3880 0
-3765 -3802 3878 0
-3765 -3800 3876 0
-3765 -3798 3874 0
-3765 -3796 3872 0
-3765 -3795 3871 0
c ((SATLiteral(505) - aux415 + SATLiteral(92))<=0)
-92 -3902 0
-505 -3902 0
-505 -92 -3903 0
c (0<=(SATLiteral(505) - aux415 + SATLiteral(92)))
92 3903 0
505 3903 0
505 92 3902 0
c ((SATLiteral(523) - aux416 + SATLiteral(75))<=0)
-75 -3905 0
-523 -3905 0
-523 -75 -3906 0
c (0<=(SATLiteral(523) - aux416 + SATLiteral(75)))
75 3906 0
523 3906 0
523 75 3905 0
c ((SATLiteral(558) - aux417 + SATLiteral(58))<=0)
-58 -3908 0
-558 -3908 0
-558 -58 -3909 0
c (0<=(SATLiteral(558) - aux417 + SATLiteral(58)))
58 3909 0
558 3909 0
558 58 3908 0
c ((SATLiteral(351) - aux418 + SATLiteral(41))<=0)
-41 -3911 0
-351 -3911 0
-351 -41 -3912 0
c (0<=(SATLiteral(351) - aux418 + SATLiteral(41)))
41 3912 0
351 3912 0
351 41 3911 0
c (( - aux419 + SATLiteral(610) + SATLiteral(24))<=0)
-24 -3914 0
-610 -3914 0
-610 -24 -3915 0
c (0<=( - aux419 + SATLiteral(610) + SATLiteral(24)))
24 3915 0
610 3915 0
610 24 3914 0
c (( - aux420 + SATLiteral(454) + SATLiteral(7))<=0)
-7 -3917 0
-454 -3917 0
-454 -7 -3918 0
c (0<=( - aux420 + SATLiteral(454) + SATLiteral(7)))
7 3918 0
454 3918 0
454 7 3917 0
c (( - aux421 + SATLiteral(627) + SATLiteral(471))<=0)
-471 -3920 0
-627 -3920 0
-627 -471 -3921 0
c (0<=( - aux421 + SATLiteral(627) + SATLiteral(471)))
471 3921 0
627 3921 0
627 471 3920 0
c ((SATLiteral(368) - aux422 + SATLiteral(488))<=0)
-488 -3923 0
-368 -3923 0
-368 -488 -3924 0
c (0<=(SATLiteral(368) - aux422 + SATLiteral(488)))
488 3924 0
368 3924 0
368 488 3923 0
c (( - aux423 + SATLiteral(644) + SATLiteral(661))<=0)
-661 -3926 0
-644 -3926 0
-644 -661 -3927 0
c (0<=( - aux423 + SATLiteral(644) + SATLiteral(661)))
661 3927 0
644 3927 0
644 661 3926 0
c ((SATLiteral(299) - aux424 + SATLiteral(437))<=0)
-437 -3929 0
-299 -3929 0
-299 -437 -3930 0
c (0<=(SATLiteral(299) - aux424 + SATLiteral(437)))
437 3930 0
299 3930 0
299 437 3929 0
c (( - aux425 + SATLiteral(109) + SATLiteral(420))<=0)
-420 -3932 0
-109 -3932 0
-109 -420 -3933 0
c (0<=( - aux425 + SATLiteral(109) + SATLiteral(420)))
420 3933 0
109 3933 0
109 420 3932 0
c (( - aux426 + SATLiteral(678) + SATLiteral(403))<=0)
-403 -3935 0
-678 -3935 0
-678 -403 -3936 0
c (0<=( - aux426 + SATLiteral(678) + SATLiteral(403)))
403 3936 0
678 3936 0
678 403 3935 0
c (( - aux427 + SATLiteral(180) + SATLiteral(386))<=0)
-386 -3938 0
-180 -3938 0
-180 -386 -3939 0
c (0<=( - aux427 + SATLiteral(180) + SATLiteral(386)))
386 3939 0
180 3939 0
180 386 3938 0
c (( - aux428 + SATLiteral(127) + SATLiteral(282))<=0)
-282 -3941 0
-127 -3941 0
-127 -282 -3942 0
c (0<=( - aux428 + SATLiteral(127) + SATLiteral(282)))
282 3942 0
127 3942 0
127 282 3941 0
c (( - aux429 + SATLiteral(197) + SATLiteral(265))<=0)
-265 -3944 0
-197 -3944 0
-197 -265 -3945 0
c (0<=( - aux429 + SATLiteral(197) + SATLiteral(265)))
265 3945 0
197 3945 0
197 265 3944 0
c (( - aux430 + SATLiteral(214) + SATLiteral(248))<=0)
-248 -3947 0
-214 -3947 0
-214 -248 -3948 0
c (0<=( - aux430 + SATLiteral(214) + SATLiteral(248)))
248 3948 0
214 3948 0
214 248 3947 0
c ((SATLiteral(540) - aux431 + SATLiteral(231))<=0)
-231 -3950 0
-540 -3950 0
-540 -231 -3951 0
c (0<=(SATLiteral(540) - aux431 + SATLiteral(231)))
231 3951 0
540 3951 0
540 231 3950 0
c ((SATLiteral(317) - aux432 + SATLiteral(144))<=0)
-144 -3953 0
-317 -3953 0
-317 -144 -3954 0
c (0<=(SATLiteral(317) - aux432 + SATLiteral(144)))
144 3954 0
317 3954 0
317 144 3953 0
c ((SATLiteral(334) - aux433 + SATLiteral(162))<=0)
-162 -3956 0
-334 -3956 0
-334 -162 -3957 0
c (0<=(SATLiteral(334) - aux433 + SATLiteral(162)))
162 3957 0
334 3957 0
334 162 3956 0
c (( - aux434 + SATLiteral(576) + SATLiteral(593))<=0)
-593 -3959 0
-576 -3959 0
-576 -593 -3960 0
c (0<=( - aux434 + SATLiteral(576) + SATLiteral(593)))
593 3960 0
576 3960 0
576 593 3959 0
c ((aux422 + aux434 - aux435)<=0)
3959 -3962 0
3960 -3963 0
3923 -3962 0
3923 3959 -3963 0
3923 3960 -3965 0
3924 -3963 0
3924 3959 -3965 0
3924 3960 -3967 0
c (0<=(aux422 + aux434 - aux435))
-3960 3967 0
-3959 3965 0
-3924 3967 0
-3924 -3960 3965 0
-3924 -3959 3963 0
-3923 3965 0
-3923 -3960 3963 0
-3923 -3959 3962 0
c ((aux416 + aux429 - aux436)<=0)
3944 -3969 0
3945 -3970 0
3905 -3969 0
3905 3944 -3970 0
3905 3945 -3972 0
3906 -3970 0
3906 3944 -3972 0
3906 3945 -3974 0
c (0<=(aux416 + aux429 - aux436))
-3945 3974 0
-3944 3972 0
-3906 3974 0
-3906 -3945 3972 0
-3906 -3944 3970 0
-3905 3972 0
-3905 -3945 3970 0
-3905 -3944 3969 0
c ((aux415 + aux420 - aux437)<=0)
3917 -3976 0
3918 -3977 0
3902 -3976 0
3902 3917 -3977 0
3902 3918 -3979 0
3903 -3977 0
3903 3917 -3979 0
3903 3918 -3981 0
c (0<=(aux415 + aux420 - aux437))
-3918 3981 0
-3917 3979 0
-3903 3981 0
-3903 -3918 3979 0
-3903 -3917 3977 0
-3902 3979 0
-3902 -3918 3977 0
-3902 -3917 3976 0
c ((aux417 + aux418 - aux438)<=0)
3911 -3983 0
3912 -3984 0
3908 -3983 0
3908 3911 -3984 0
3908 3912 -3986 0
3909 -3984 0
3909 3911 -3986 0
3909 3912 -3988 0
c (0<=(aux417 + aux418 - aux438))
-3912 3988 0
-3911 3986 0
-3909 3988 0
-3909 -3912 3986 0
-3909 -3911 3984 0
-3908 3986 0
-3908 -3912 3984 0
-3908 -3911 3983 0
c ((aux419 + aux421 - aux439)<=0)
3920 -3990 0
3921 -3991 0
3914 -3990 0
3914 3920 -3991 0
3914 3921 -3993 0
3915 -3991 0
3915 3920 -3993 0
3915 3921 -3995 0
c (0<=(aux419 + aux421 - aux439))
-3921 3995 0
-3920 3993 0
-3915 3995 0
-3915 -3921 3993 0
-3915 -3920 3991 0
-3914 3993 0
-3914 -3921 3991 0
-3914 -3920 3990 0
c ((aux428 + aux432 - aux440)<=0)
3953 -3997 0
3954 -3998 0
3941 -3997 0
3941 3953 -3998 0
3941 3954 -4000 0
3942 -3998 0
3942 3953 -4000 0
3942 3954 -4002 0
c (0<=(aux428 + aux432 - aux440))
-3954 4002 0
-3953 4000 0
-3942 4002 0
-3942 -3954 4000 0
-3942 -3953 3998 0
-3941 4000 0
-3941 -3954 3998 0
-3941 -3953 3997 0
c ((aux424 + aux425 - aux441)<=0)
3932 -4004 0
3933 -4005 0
3929 -4004 0
3929 3932 -4005 0
3929 3933 -4007 0
3930 -4005 0
3930 3932 -4007 0
3930 3933 -4009 0
c (0<=(aux424 + aux425 - aux441))
-3933 4009 0
-3932 4007 0
-3930 4009 0
-3930 -3933 4007 0
-3930 -3932 4005 0
-3929 4007 0
-3929 -3933 4005 0
-3929 -3932 4004 0
c ((aux426 + aux427 - aux442)<=0)
3938 -4011 0
3939 -4012 0
3935 -4011 0
3935 3938 -4012 0
3935 3939 -4014 0
3936 -4012 0
3936 3938 -4014 0
3936 3939 -4016 0
c (0<=(aux426 + aux427 - aux442))
-3939 4016 0
-3938 4014 0
-3936 4016 0
-3936 -3939 4014 0
-3936 -3938 4012 0
-3935 4014 0
-3935 -3939 4012 0
-3935 -3938 4011 0
c ((aux430 + aux433 - aux443)<=0)
3956 -4018 0
3957 -4019 0
3947 -4018 0
3947 3956 -4019 0
3947 3957 -4021 0
3948 -4019 0
3948 3956 -4021 0
3948 3957 -4023 0
c (0<=(aux430 + aux433 - aux443))
-3957 4023 0
-3956 4021 0
-3948 4023 0
-3948 -3957 4021 0
-3948 -3956 4019 0
-3947 4021 0
-3947 -3957 4019 0
-3947 -3956 4018 0
c ((aux423 + aux431 - aux444)<=0)
3950 -4025 0
3951 -4026 0
3926 -4025 0
3926 3950 -4026 0
3926 3951 -4028 0
3927 -4026 0
3927 3950 -4028 0
3927 3951 -4030 0
c (0<=(aux423 + aux431 - aux444))
-3951 4030 0
-3950 4028 0
-3927 4030 0
-3927 -3951 4028 0
-3927 -3950 4026 0
-3926 4028 0
-3926 -3951 4026 0
-3926 -3950 4025 0
c ((aux438 + aux444 - aux445)<=0)
4025 -4032 0
4026 -4033 0
4028 -4035 0
4030 -4037 0
3983 -4032 0
3983 4025 -4033 0
3983 4026 -4035 0
3983 4028 -4037 0
3983 4030 -4039 0
3984 -4033 0
3984 4025 -4035 0
3984 4026 -4037 0
3984 4028 -4039 0
3984 4030 -4041 0
3986 -4035 0
3986 4025 -4037 0
3986 4026 -4039 0
3986 4028 -4041 0
3986 4030 -4043 0
3988 -4037 0
3988 4025 -4039 0
3988 4026 -4041 0
3988 4028 -4043 0
3988 4030 -4045 0
c (0<=(aux438 + aux444 - aux445))
-4030 4045 0
-4028 4043 0
-4026 4041 0
-4025 4039 0
-3988 4045 0
-3988 -4030 4043 0
-3988 -4028 4041 0
-3988 -4026 4039 0
-3988 -4025 4037 0
-3986 4043 0
-3986 -4030 4041 0
-3986 -4028 4039 0
-3986 -4026 4037 0
-3986 -4025 4035 0
-3984 4041 0
-3984 -4030 4039 0
-3984 -4028 4037 0
-3984 -4026 4035 0
-3984 -4025 4033 0
-3983 4039 0
-3983 -4030 4037 0
-3983 -4028 4035 0
-3983 -4026 4033 0
-3983 -4025 4032 0
c ((aux437 + aux441 - aux446)<=0)
4004 -4047 0
4005 -4048 0
4007 -4050 0
4009 -4052 0
3976 -4047 0
3976 4004 -4048 0
3976 4005 -4050 0
3976 4007 -4052 0
3976 4009 -4054 0
3977 -4048 0
3977 4004 -4050 0
3977 4005 -4052 0
3977 4007 -4054 0
3977 4009 -4056 0
3979 -4050 0
3979 4004 -4052 0
3979 4005 -4054 0
3979 4007 -4056 0
3979 4009 -4058 0
3981 -4052 0
3981 4004 -4054 0
3981 4005 -4056 0
3981 4007 -4058 0
3981 4009 -4060 0
c (0<=(aux437 + aux441 - aux446))
-4009 4060 0
-4007 4058 0
-4005 4056 0
-4004 4054 0
-3981 4060 0
-3981 -4009 4058 0
-3981 -4007 4056 0
-3981 -4005 4054 0
-3981 -4004 4052 0
-3979 4058 0
-3979 -4009 4056 0
-3979 -4007 4054 0
-3979 -4005 4052 0
-3979 -4004 4050 0
-3977 4056 0
-3977 -4009 4054 0
-3977 -4007 4052 0
-3977 -4005 4050 0
-3977 -4004 4048 0
-3976 4054 0
-3976 -4009 4052 0
-3976 -4007 4050 0
-3976 -4005 4048 0
-3976 -4004 4047 0
c ((aux435 + aux436 - aux447)<=0)
3969 -4062 0
3970 -4063 0
3972 -4065 0
3974 -4067 0
3962 -4062 0
3962 3969 -4063 0
3962 3970 -4065 0
3962 3972 -4067 0
3962 3974 -4069 0
3963 -4063 0
3963 3969 -4065 0
3963 3970 -4067 0
3963 3972 -4069 0
3963 3974 -4071 0
3965 -4065 0
3965 3969 -4067 0
3965 3970 -4069 0
3965 3972 -4071 0
3965 3974 -4073 0
3967 -4067 0
3967 3969 -4069 0
3967 3970 -4071 0
3967 3972 -4073 0
3967 3974 -4075 0
c (0<=(aux435 + aux436 - aux447))
-3974 4075 0
-3972 4073 0
-3970 4071 0
-3969 4069 0
-3967 4075 0
-3967 -3974 4073 0
-3967 -3972 4071 0
-3967 -3970 4069 0
-3967 -3969 4067 0
-3965 4073 0
-3965 -3974 4071 0
-3965 -3972 4069 0
-3965 -3970 4067 0
-3965 -3969 4065 0
-3963 4071 0
-3963 -3974 4069 0
-3963 -3972 4067 0
-3963 -3970 4065 0
-3963 -3969 4063 0
-3962 4069 0
-3962 -3974 4067 0
-3962 -3972 4065 0
-3962 -3970 4063 0
-3962 -3969 4062 0
c ((aux439 + aux440 - aux448)<=0)
3997 -4077 0
3998 -4078 0
4000 -4080 0
4002 -4082 0
3990 -4077 0
3990 3997 -4078 0
3990 3998 -4080 0
3990 4000 -4082 0
3990 4002 -4084 0
3991 -4078 0
3991 3997 -4080 0
3991 3998 -4082 0
3991 4000 -4084 0
3991 4002 -4086 0
3993 -4080 0
3993 3997 -4082 0
3993 3998 -4084 0
3993 4000 -4086 0
3993 4002 -4088 0
3995 -4082 0
3995 3997 -4084 0
3995 3998 -4086 0
3995 4000 -4088 0
3995 4002 -4090 0
c (0<=(aux439 + aux440 - aux448))
-4002 4090 0
-4000 4088 0
-3998 4086 0
-3997 4084 0
-3995 4090 0
-3995 -4002 4088 0
-3995 -4000 4086 0
-3995 -3998 4084 0
-3995 -3997 4082 0
-3993 4088 0
-3993 -4002 4086 0
-3993 -4000 4084 0
-3993 -3998 4082 0
-3993 -3997 4080 0
-3991 4086 0
-3991 -4002 4084 0
-3991 -4000 4082 0
-3991 -3998 4080 0
-3991 -3997 4078 0
-3990 4084 0
-3990 -4002 4082 0
-3990 -4000 4080 0
-3990 -3998 4078 0
-3990 -3997 4077 0
c ((aux442 + aux443 - aux449)<=0)
4018 -4092 0
4019 -4093 0
4021 -4095 0
4023 -4097 0
4011 -4092 0
4011 4018 -4093 0
4011 4019 -4095 0
4011 4021 -4097 0
4011 4023 -4099 0
4012 -4093 0
4012 4018 -4095 0
4012 4019 -4097 0
4012 4021 -4099 0
4012 4023 -4101 0
4014 -4095 0
4014 4018 -4097 0
4014 4019 -4099 0
4014 4021 -4101 0
4014 4023 -4103 0
4016 -4097 0
4016 4018 -4099 0
4016 4019 -4101 0
4016 4021 -4103 0
4016 4023 -4105 0
c (0<=(aux442 + aux443 - aux449))
-4023 4105 0
-4021 4103 0
-4019 4101 0
-4018 4099 0
-4016 4105 0
-4016 -4023 4103 0
-4016 -4021 4101 0
-4016 -4019 4099 0
-4016 -4018 4097 0
-4014 4103 0
-4014 -4023 4101 0
-4014 -4021 4099 0
-4014 -4019 4097 0
-4014 -4018 4095 0
-4012 4101 0
-4012 -4023 4099 0
-4012 -4021 4097 0
-4012 -4019 4095 0
-4012 -4018 4093 0
-4011 4099 0
-4011 -4023 4097 0
-4011 -4021 4095 0
-4011 -4019 4093 0
-4011 -4018 4092 0
c ((aux446 + aux449 - aux450)<=0)
4092 -4107 0
4093 -4108 0
4095 -4110 0
4097 -4112 0
4099 -4114 0
4101 -4116 0
4103 -4118 0
4105 -4120 0
4047 -4107 0
4047 4092 -4108 0
4047 4093 -4110 0
4047 4095 -4112 0
4047 4097 -4114 0
4047 4099 -4116 0
4047 4101 -4118 0
4047 4103 -4120 0
4047 4105 -4122 0
4048 -4108 0
4048 4092 -4110 0
4048 4093 -4112 0
4048 4095 -4114 0
4048 4097 -4116 0
4048 4099 -4118 0
4048 4101 -4120 0
4048 4103 -4122 0
4048 4105 -4124 0
4050 -4110 0
4050 4092 -4112 0
4050 4093 -4114 0
4050 4095 -4116 0
4050 4097 -4118 0
4050 4099 -4120 0
4050 4101 -4122 0
4050 4103 -4124 0
4050 4105 -4126 0
4052 -4112 0
4052 4092 -4114 0
4052 4093 -4116 0
4052 4095 -4118 0
4052 4097 -4120 0
4052 4099 -4122 0
4052 4101 -4124 0
4052 4103 -4126 0
4052 4105 -4128 0
4054 -4114 0
4054 4092 -4116 0
4054 4093 -4118 0
4054 4095 -4120 0
4054 4097 -4122 0
4054 4099 -4124 0
4054 4101 -4126 0
4054 4103 -4128 0
4054 4105 -4130 0
4056 -4116 0
4056 4092 -4118 0
4056 4093 -4120 0
4056 4095 -4122 0
4056 4097 -4124 0
4056 4099 -4126 0
4056 4101 -4128 0
4056 4103 -4130 0
4056 4105 -4132 0
4058 -4118 0
4058 4092 -4120 0
4058 4093 -4122 0
4058 4095 -4124 0
4058 4097 -4126 0
4058 4099 -4128 0
4058 4101 -4130 0
4058 4103 -4132 0
4058 4105 -4134 0
4060 -4120 0
4060 4092 -4122 0
4060 4093 -4124 0
4060 4095 -4126 0
4060 4097 -4128 0
4060 4099 -4130 0
4060 4101 -4132 0
4060 4103 -4134 0
4060 4105 -4136 0
c (0<=(aux446 + aux449 - aux450))
-4105 4136 0
-4103 4134 0
-4101 4132 0
-4099 4130 0
-4097 4128 0
-4095 4126 0
-4093 4124 0
-4092 4122 0
-4060 4136 0
-4060 -4105 4134 0
-4060 -4103 4132 0
-4060 -4101 4130 0
-4060 -4099 4128 0
-4060 -4097 4126 0
-4060 -4095 4124 0
-4060 -4093 4122 0
-4060 -4092 4120 0
-4058 4134 0
-4058 -4105 4132 0
-4058 -4103 4130 0
-4058 -4101 4128 0
-4058 -4099 4126 0
-4058 -4097 4124 0
-4058 -4095 4122 0
-4058 -4093 4120 0
-4058 -4092 4118 0
-4056 4132 0
-4056 -4105 4130 0
-4056 -4103 4128 0
-4056 -4101 4126 0
-4056 -4099 4124 0
-4056 -4097 4122 0
-4056 -4095 4120 0
-4056 -4093 4118 0
-4056 -4092 4116 0
-4054 4130 0
-4054 -4105 4128 0
-4054 -4103 4126 0
-4054 -4101 4124 0
-4054 -4099 4122 0
-4054 -4097 4120 0
-4054 -4095 4118 0
-4054 -4093 4116 0
-4054 -4092 4114 0
-4052 4128 0
-4052 -4105 4126 0
-4052 -4103 4124 0
-4052 -4101 4122 0
-4052 -4099 4120 0
-4052 -4097 4118 0
-4052 -4095 4116 0
-4052 -4093 4114 0
-4052 -4092 4112 0
-4050 4126 0
-4050 -4105 4124 0
-4050 -4103 4122 0
-4050 -4101 4120 0
-4050 -4099 4118 0
-4050 -4097 4116 0
-4050 -4095 4114 0
-4050 -4093 4112 0
-4050 -4092 4110 0
-4048 4124 0
-4048 -4105 4122 0
-4048 -4103 4120 0
-4048 -4101 4118 0
-4048 -4099 4116 0
-4048 -4097 4114 0
-4048 -4095 4112 0
-4048 -4093 4110 0
-4048 -4092 4108 0
-4047 4122 0
-4047 -4105 4120 0
-4047 -4103 4118 0
-4047 -4101 4116 0
-4047 -4099 4114 0
-4047 -4097 4112 0
-4047 -4095 4110 0
-4047 -4093 4108 0
-4047 -4092 4107 0
c ((aux445 + aux447 - aux451)<=0)
4062 -4138 0
4063 -4139 0
4065 -4141 0
4067 -4143 0
4069 -4145 0
4071 -4147 0
4073 -4149 0
4075 -4151 0
4032 -4138 0
4032 4062 -4139 0
4032 4063 -4141 0
4032 4065 -4143 0
4032 4067 -4145 0
4032 4069 -4147 0
4032 4071 -4149 0
4032 4073 -4151 0
4032 4075 -4153 0
4033 -4139 0
4033 4062 -4141 0
4033 4063 -4143 0
4033 4065 -4145 0
4033 4067 -4147 0
4033 4069 -4149 0
4033 4071 -4151 0
4033 4073 -4153 0
4033 4075 -4155 0
4035 -4141 0
4035 4062 -4143 0
4035 4063 -4145 0
4035 4065 -4147 0
4035 4067 -4149 0
4035 4069 -4151 0
4035 4071 -4153 0
4035 4073 -4155 0
4035 4075 -4157 0
4037 -4143 0
4037 4062 -4145 0
4037 4063 -4147 0
4037 4065 -4149 0
4037 4067 -4151 0
4037 4069 -4153 0
4037 4071 -4155 0
4037 4073 -4157 0
4037 4075 -4159 0
4039 -4145 0
4039 4062 -4147 0
4039 4063 -4149 0
4039 4065 -4151 0
4039 4067 -4153 0
4039 4069 -4155 0
4039 4071 -4157 0
4039 4073 -4159 0
4039 4075 -4161 0
4041 -4147 0
4041 4062 -4149 0
4041 4063 -4151 0
4041 4065 -4153 0
4041 4067 -4155 0
4041 4069 -4157 0
4041 4071 -4159 0
4041 4073 -4161 0
4041 4075 -4163 0
4043 -4149 0
4043 4062 -4151 0
4043 4063 -4153 0
4043 4065 -4155 0
4043 4067 -4157 0
4043 4069 -4159 0
4043 4071 -4161 0
4043 4073 -4163 0
4043 4075 -4165 0
4045 -4151 0
4045 4062 -4153 0
4045 4063 -4155 0
4045 4065 -4157 0
4045 4067 -4159 0
4045 4069 -4161 0
4045 4071 -4163 0
4045 4073 -4165 0
4045 4075 -4167 0
c (0<=(aux445 + aux447 - aux451))
-4075 4167 0
-4073 4165 0
-4071 4163 0
-4069 4161 0
-4067 4159 0
-4065 4157 0
-4063 4155 0
-4062 4153 0
-4045 4167 0
-4045 -4075 4165 0
-4045 -4073 4163 0
-4045 -4071 4161 0
-4045 -4069 4159 0
-4045 -4067 4157 0
-4045 -4065 4155 0
-4045 -4063 4153 0
-4045 -4062 4151 0
-4043 4165 0
-4043 -4075 4163 0
-4043 -4073 4161 0
-4043 -4071 4159 0
-4043 -4069 4157 0
-4043 -4067 4155 0
-4043 -4065 4153 0
-4043 -4063 4151 0
-4043 -4062 4149 0
-4041 4163 0
-4041 -4075 4161 0
-4041 -4073 4159 0
-4041 -4071 4157 0
-4041 -4069 4155 0
-4041 -4067 4153 0
-4041 -4065 4151 0
-4041 -4063 4149 0
-4041 -4062 4147 0
-4039 4161 0
-4039 -4075 4159 0
-4039 -4073 4157 0
-4039 -4071 4155 0
-4039 -4069 4153 0
-4039 -4067 4151 0
-4039 -4065 4149 0
-4039 -4063 4147 0
-4039 -4062 4145 0
-4037 4159 0
-4037 -4075 4157 0
-4037 -4073 4155 0
-4037 -4071 4153 0
-4037 -4069 4151 0
-4037 -4067 4149 0
-4037 -4065 4147 0
-4037 -4063 4145 0
-4037 -4062 4143 0
-4035 4157 0
-4035 -4075 4155 0
-4035 -4073 4153 0
-4035 -4071 4151 0
-4035 -4069 4149 0
-4035 -4067 4147 0
-4035 -4065 4145 0
-4035 -4063 4143 0
-4035 -4062 4141 0
-4033 4155 0
-4033 -4075 4153 0
-4033 -4073 4151 0
-4033 -4071 4149 0
-4033 -4069 4147 0
-4033 -4067 4145 0
-4033 -4065 4143 0
-4033 -4063 4141 0
-4033 -4062 4139 0
-4032 4153 0
-4032 -4075 4151 0
-4032 -4073 4149 0
-4032 -4071 4147 0
-4032 -4069 4145 0
-4032 -4067 4143 0
-4032 -4065 4141 0
-4032 -4063 4139 0
-4032 -4062 4138 0
c ((SATLiteral(507) - aux452 + SATLiteral(94))<=0)
-94 -4169 0
-507 -4169 0
-507 -94 -4170 0
c (0<=(SATLiteral(507) - aux452 + SATLiteral(94)))
94 4170 0
507 4170 0
507 94 4169 0
c ((SATLiteral(525) - aux453 + SATLiteral(77))<=0)
-77 -4172 0
-525 -4172 0
-525 -77 -4173 0
c (0<=(SATLiteral(525) - aux453 + SATLiteral(77)))
77 4173 0
525 4173 0
525 77 4172 0
c ((SATLiteral(560) - aux454 + SATLiteral(60))<=0)
-60 -4175 0
-560 -4175 0
-560 -60 -4176 0
c (0<=(SATLiteral(560) - aux454 + SATLiteral(60)))
60 4176 0
560 4176 0
560 60 4175 0
c ((SATLiteral(353) - aux455 + SATLiteral(43))<=0)
-43 -4178 0
-353 -4178 0
-353 -43 -4179 0
c (0<=(SATLiteral(353) - aux455 + SATLiteral(43)))
43 4179 0
353 4179 0
353 43 4178 0
c (( - aux456 + SATLiteral(612) + SATLiteral(26))<=0)
-26 -4181 0
-612 -4181 0
-612 -26 -4182 0
c (0<=( - aux456 + SATLiteral(612) + SATLiteral(26)))
26 4182 0
612 4182 0
612 26 4181 0
c (( - aux457 + SATLiteral(456) + SATLiteral(9))<=0)
-9 -4184 0
-456 -4184 0
-456 -9 -4185 0
c (0<=( - aux457 + SATLiteral(456) + SATLiteral(9)))
9 4185 0
456 4185 0
456 9 4184 0
c (( - aux458 + SATLiteral(629) + SATLiteral(473))<=0)
-473 -4187 0
-629 -4187 0
-629 -473 -4188 0
c (0<=( - aux458 + SATLiteral(629) + SATLiteral(473)))
473 4188 0
629 4188 0
629 473 4187 0
c ((SATLiteral(370) - aux459 + SATLiteral(490))<=0)
-490 -4190 0
-370 -4190 0
-370 -490 -4191 0
c (0<=(SATLiteral(370) - aux459 + SATLiteral(490)))
490 4191 0
370 4191 0
370 490 4190 0
c (( - aux460 + SATLiteral(646) + SATLiteral(663))<=0)
-663 -4193 0
-646 -4193 0
-646 -663 -4194 0
c (0<=( - aux460 + SATLiteral(646) + SATLiteral(663)))
663 4194 0
646 4194 0
646 663 4193 0
c ((SATLiteral(301) - aux461 + SATLiteral(439))<=0)
-439 -4196 0
-301 -4196 0
-301 -439 -4197 0
c (0<=(SATLiteral(301) - aux461 + SATLiteral(439)))
439 4197 0
301 4197 0
301 439 4196 0
c (( - aux462 + SATLiteral(111) + SATLiteral(422))<=0)
-422 -4199 0
-111 -4199 0
-111 -422 -4200 0
c (0<=( - aux462 + SATLiteral(111) + SATLiteral(422)))
422 4200 0
111 4200 0
111 422 4199 0
c (( - aux463 + SATLiteral(680) + SATLiteral(405))<=0)
-405 -4202 0
-680 -4202 0
-680 -405 -4203 0
c (0<=( - aux463 + SATLiteral(680) + SATLiteral(405)))
405 4203 0
680 4203 0
680 405 4202 0
c (( - aux464 + SATLiteral(182) + SATLiteral(388))<=0)
-388 -4205 0
-182 -4205 0
-182 -388 -4206 0
c (0<=( - aux464 + SATLiteral(182) + SATLiteral(388)))
388 4206 0
182 4206 0
182 388 4205 0
c (( - aux465 + SATLiteral(129) + SATLiteral(284))<=0)
-284 -4208 0
-129 -4208 0
-129 -284 -4209 0
c (0<=( - aux465 + SATLiteral(129) + SATLiteral(284)))
284 4209 0
129 4209 0
129 284 4208 0
c (( - aux466 + SATLiteral(199) + SATLiteral(267))<=0)
-267 -4211 0
-199 -4211 0
-199 -267 -4212 0
c (0<=( - aux466 + SATLiteral(199) + SATLiteral(267)))
267 4212 0
199 4212 0
199 267 4211 0
c (( - aux467 + SATLiteral(216) + SATLiteral(250))<=0)
-250 -4214 0
-216 -4214 0
-216 -250 -4215 0
c (0<=( - aux467 + SATLiteral(216) + SATLiteral(250)))
250 4215 0
216 4215 0
216 250 4214 0
c ((SATLiteral(542) - aux468 + SATLiteral(233))<=0)
-233 -4217 0
-542 -4217 0
-542 -233 -4218 0
c (0<=(SATLiteral(542) - aux468 + SATLiteral(233)))
233 4218 0
542 4218 0
542 233 4217 0
c ((SATLiteral(319) - aux469 + SATLiteral(146))<=0)
-146 -4220 0
-319 -4220 0
-319 -146 -4221 0
c (0<=(SATLiteral(319) - aux469 + SATLiteral(146)))
146 4221 0
319 4221 0
319 146 4220 0
c ((SATLiteral(336) - aux470 + SATLiteral(164))<=0)
-164 -4223 0
-336 -4223 0
-336 -164 -4224 0
c (0<=(SATLiteral(336) - aux470 + SATLiteral(164)))
164 4224 0
336 4224 0
336 164 4223 0
c (( - aux471 + SATLiteral(578) + SATLiteral(595))<=0)
-595 -4226 0
-578 -4226 0
-578 -595 -4227 0
c (0<=( - aux471 + SATLiteral(578) + SATLiteral(595)))
595 4227 0
578 4227 0
578 595 4226 0
c ((aux459 + aux471 - aux472)<=0)
4226 -4229 0
4227 -4230 0
4190 -4229 0
4190 4226 -4230 0
4190 4227 -4232 0
4191 -4230 0
4191 4226 -4232 0
4191 4227 -4234 0
c (0<=(aux459 + aux471 - aux472))
-4227 4234 0
-4226 4232 0
-4191 4234 0
-4191 -4227 4232 0
-4191 -4226 4230 0
-4190 4232 0
-4190 -4227 4230 0
-4190 -4226 4229 0
c ((aux453 + aux466 - aux473)<=0)
4211 -4236 0
4212 -4237 0
4172 -4236 0
4172 4211 -4237 0
4172 4212 -4239 0
4173 -4237 0
4173 4211 -4239 0
4173 4212 -4241 0
c (0<=(aux453 + aux466 - aux473))
-4212 4241 0
-4211 4239 0
-4173 4241 0
-4173 -4212 4239 0
-4173 -4211 4237 0
-4172 4239 0
-4172 -4212 4237 0
-4172 -4211 4236 0
c ((aux452 + aux457 - aux474)<=0)
4184 -4243 0
4185 -4244 0
4169 -4243 0
4169 4184 -4244 0
4169 4185 -4246 0
4170 -4244 0
4170 4184 -4246 0
4170 4185 -4248 0
c (0<=(aux452 + aux457 - aux474))
-4185 4248 0
-4184 4246 0
-4170 4248 0
-4170 -4185 4246 0
-4170 -4184 4244 0
-4169 4246 0
-4169 -4185 4244 0
-4169 -4184 4243 0
c ((aux454 + aux455 - aux475)<=0)
4178 -4250 0
4179 -4251 0
4175 -4250 0
4175 4178 -4251 0
4175 4179 -4253 0
4176 -4251 0
4176 4178 -4253 0
4176 4179 -4255 0
c (0<=(aux454 + aux455 - aux475))
-4179 4255 0
-4178 4253 0
-4176 4255 0
-4176 -4179 4253 0
-4176 -4178 4251 0
-4175 4253 0
-4175 -4179 4251 0
-4175 -4178 4250 0
c ((aux456 + aux458 - aux476)<=0)
4187 -4257 0
4188 -4258 0
4181 -4257 0
4181 4187 -4258 0
4181 4188 -4260 0
4182 -4258 0
4182 4187 -4260 0
4182 4188 -4262 0
c (0<=(aux456 + aux458 - aux476))
-4188 4262 0
-4187 4260 0
-4182 4262 0
-4182 -4188 4260 0
-4182 -4187 4258 0
-4181 4260 0
-4181 -4188 4258 0
-4181 -4187 4257 0
c ((aux465 + aux469 - aux477)<=0)
4220 -4264 0
4221 -4265 0
4208 -4264 0
4208 4220 -4265 0
4208 4221 -4267 0
4209 -4265 0
4209 4220 -4267 0
4209 4221 -4269 0
c (0<=(aux465 + aux469 - aux477))
-4221 4269 0
-4220 4267 0
-4209 4269 0
-4209 -4221 4267 0
-4209 -4220 4265 0
-4208 4267 0
-4208 -4221 4265 0
-4208 -4220 4264 0
c ((aux461 + aux462 - aux478)<=0)
4199 -4271 0
4200 -4272 0
4196 -4271 0
4196 4199 -4272 0
4196 4200 -4274 0
4197 -4272 0
4197 4199 -4274 0
4197 4200 -4276 0
c (0<=(aux461 + aux462 - aux478))
-4200 4276 0
-4199 4274 0
-4197 4276 0
-4197 -4200 4274 0
-4197 -4199 4272 0
-4196 4274 0
-4196 -4200 4272 0
-4196 -4199 4271 0
c ((aux463 + aux464 - aux479)<=0)
4205 -4278 0
4206 -4279 0
4202 -4278 0
4202 4205 -4279 0
4202 4206 -4281 0
4203 -4279 0
4203 4205 -4281 0
4203 4206 -4283 0
c (0<=(aux463 + aux464 - aux479))
-4206 4283 0
-4205 4281 0
-4203 4283 0
-4203 -4206 4281 0
-4203 -4205 4279 0
-4202 4281 0
-4202 -4206 4279 0
-4202 -4205 4278 0
c ((aux467 + aux470 - aux480)<=0)
4223 -4285 0
4224 -4286 0
4214 -4285 0
4214 4223 -4286 0
4214 4224 -4288 0
4215 -4286 0
4215 4223 -4288 0
4215 4224 -4290 0
c (0<=(aux467 + aux470 - aux480))
-4224 4290 0
-4223 4288 0
-4215 4290 0
-4215 -4224 4288 0
-4215 -4223 4286 0
-4214 4288 0
-4214 -4224 4286 0
-4214 -4223 4285 0
c ((aux460 + aux468 - aux481)<=0)
4217 -4292 0
4218 -4293 0
4193 -4292 0
4193 4217 -4293 0
4193 4218 -4295 0
4194 -4293 0
4194 4217 -4295 0
4194 4218 -4297 0
c (0<=(aux460 + aux468 - aux481))
-4218 4297 0
-4217 4295 0
-4194 4297 0
-4194 -4218 4295 0
-4194 -4217 4293 0
-4193 4295 0
-4193 -4218 4293 0
-4193 -4217 4292 0
c ((aux475 + aux481 - aux482)<=0)
4292 -4299 0
4293 -4300 0
4295 -4302 0
4297 -4304 0
4250 -4299 0
4250 4292 -4300 0
4250 4293 -4302 0
4250 4295 -4304 0
4250 4297 -4306 0
4251 -4300 0
4251 4292 -4302 0
4251 4293 -4304 0
4251 4295 -4306 0
4251 4297 -4308 0
4253 -4302 0
4253 4292 -4304 0
4253 4293 -4306 0
4253 4295 -4308 0
4253 4297 -4310 0
4255 -4304 0
4255 4292 -4306 0
4255 4293 -4308 0
4255 4295 -4310 0
4255 4297 -4312 0
c (0<=(aux475 + aux481 - aux482))
-4297 4312 0
-4295 4310 0
-4293 4308 0
-4292 4306 0
-4255 4312 0
-4255 -4297 4310 0
-4255 -4295 4308 0
-4255 -4293 4306 0
-4255 -4292 4304 0
-4253 4310 0
-4253 -4297 4308 0
-4253 -4295 4306 0
-4253 -4293 4304 0
-4253 -4292 4302 0
-4251 4308 0
-4251 -4297 4306 0
-4251 -4295 4304 0
-4251 -4293 4302 0
-4251 -4292 4300 0
-4250 4306 0
-4250 -4297 4304 0
-4250 -4295 4302 0
-4250 -4293 4300 0
-4250 -4292 4299 0
c ((aux474 + aux478 - aux483)<=0)
4271 -4314 0
4272 -4315 0
4274 -4317 0
4276 -4319 0
4243 -4314 0
4243 4271 -4315 0
4243 4272 -4317 0
4243 4274 -4319 0
4243 4276 -4321 0
4244 -4315 0
4244 4271 -4317 0
4244 4272 -4319 0
4244 4274 -4321 0
4244 4276 -4323 0
4246 -4317 0
4246 4271 -4319 0
4246 4272 -4321 0
4246 4274 -4323 0
4246 4276 -4325 0
4248 -4319 0
4248 4271 -4321 0
4248 4272 -4323 0
4248 4274 -4325 0
4248 4276 -4327 0
c (0<=(aux474 + aux478 - aux483))
-4276 4327 0
-4274 4325 0
-4272 4323 0
-4271 4321 0
-4248 4327 0
-4248 -4276 4325 0
-4248 -4274 4323 0
-4248 -4272 4321 0
-4248 -4271 4319 0
-4246 4325 0
-4246 -4276 4323 0
-4246 -4274 4321 0
-4246 -4272 4319 0
-4246 -4271 4317 0
-4244 4323 0
-4244 -4276 4321 0
-4244 -4274 4319 0
-4244 -4272 4317 0
-4244 -4271 4315 0
-4243 4321 0
-4243 -4276 4319 0
-4243 -4274 4317 0
-4243 -4272 4315 0
-4243 -4271 4314 0
c ((aux472 + aux473 - aux484)<=0)
4236 -4329 0
4237 -4330 0
4239 -4332 0
4241 -4334 0
4229 -4329 0
4229 4236 -4330 0
4229 4237 -4332 0
4229 4239 -4334 0
4229 4241 -4336 0
4230 -4330 0
4230 4236 -4332 0
4230 4237 -4334 0
4230 4239 -4336 0
4230 4241 -4338 0
4232 -4332 0
4232 4236 -4334 0
4232 4237 -4336 0
4232 4239 -4338 0
4232 4241 -4340 0
4234 -4334 0
4234 4236 -4336 0
4234 4237 -4338 0
4234 4239 -4340 0
4234 4241 -4342 0
c (0<=(aux472 + aux473 - aux484))
-4241 4342 0
-4239 4340 0
-4237 4338 0
-4236 4336 0
-4234 4342 0
-4234 -4241 4340 0
-4234 -4239 4338 0
-4234 -4237 4336 0
-4234 -4236 4334 0
-4232 4340 0
-4232 -4241 4338 0
-4232 -4239 4336 0
-4232 -4237 4334 0
-4232 -4236 4332 0
-4230 4338 0
-4230 -4241 4336 0
-4230 -4239 4334 0
-4230 -4237 4332 0
-4230 -4236 4330 0
-4229 4336 0
-4229 -4241 4334 0
-4229 -4239 4332 0
-4229 -4237 4330 0
-4229 -4236 4329 0
c ((aux476 + aux477 - aux485)<=0)
4264 -4344 0
4265 -4345 0
4267 -4347 0
4269 -4349 0
4257 -4344 0
4257 4264 -4345 0
4257 4265 -4347 0
4257 4267 -4349 0
4257 4269 -4351 0
4258 -4345 0
4258 4264 -4347 0
4258 4265 -4349 0
4258 4267 -4351 0
4258 4269 -4353 0
4260 -4347 0
4260 4264 -4349 0
4260 4265 -4351 0
4260 4267 -4353 0
4260 4269 -4355 0
4262 -4349 0
4262 4264 -4351 0
4262 4265 -4353 0
4262 4267 -4355 0
4262 4269 -4357 0
c (0<=(aux476 + aux477 - aux485))
-4269 4357 0
-4267 4355 0
-4265 4353 0
-4264 4351 0
-4262 4357 0
-4262 -4269 4355 0
-4262 -4267 4353 0
-4262 -4265 4351 0
-4262 -4264 4349 0
-4260 4355 0
-4260 -4269 4353 0
-4260 -4267 4351 0
-4260 -4265 4349 0
-4260 -4264 4347 0
-4258 4353 0
-4258 -4269 4351 0
-4258 -4267 4349 0
-4258 -4265 4347 0
-4258 -4264 4345 0
-4257 4351 0
-4257 -4269 4349 0
-4257 -4267 4347 0
-4257 -4265 4345 0
-4257 -4264 4344 0
c ((aux479 + aux480 - aux486)<=0)
4285 -4359 0
4286 -4360 0
4288 -4362 0
4290 -4364 0
4278 -4359 0
4278 4285 -4360 0
4278 4286 -4362 0
4278 4288 -4364 0
4278 4290 -4366 0
4279 -4360 0
4279 4285 -4362 0
4279 4286 -4364 0
4279 4288 -4366 0
4279 4290 -4368 0
4281 -4362 0
4281 4285 -4364 0
4281 4286 -4366 0
4281 4288 -4368 0
4281 4290 -4370 0
4283 -4364 0
4283 4285 -4366 0
4283 4286 -4368 0
4283 4288 -4370 0
4283 4290 -4372 0
c (0<=(aux479 + aux480 - aux486))
-4290 4372 0
-4288 4370 0
-4286 4368 0
-4285 4366 0
-4283 4372 0
-4283 -4290 4370 0
-4283 -4288 4368 0
-4283 -4286 4366 0
-4283 -4285 4364 0
-4281 4370 0
-4281 -4290 4368 0
-4281 -4288 4366 0
-4281 -4286 4364 0
-4281 -4285 4362 0
-4279 4368 0
-4279 -4290 4366 0
-4279 -4288 4364 0
-4279 -4286 4362 0
-4279 -4285 4360 0
-4278 4366 0
-4278 -4290 4364 0
-4278 -4288 4362 0
-4278 -4286 4360 0
-4278 -4285 4359 0
c ((aux483 + aux486 - aux487)<=0)
4359 -4374 0
4360 -4375 0
4362 -4377 0
4364 -4379 0
4366 -4381 0
4368 -4383 0
4370 -4385 0
4372 -4387 0
4314 -4374 0
4314 4359 -4375 0
4314 4360 -4377 0
4314 4362 -4379 0
4314 4364 -4381 0
4314 4366 -4383 0
4314 4368 -4385 0
4314 4370 -4387 0
4314 4372 -4389 0
4315 -4375 0
4315 4359 -4377 0
4315 4360 -4379 0
4315 4362 -4381 0
4315 4364 -4383 0
4315 4366 -4385 0
4315 4368 -4387 0
4315 4370 -4389 0
4315 4372 -4391 0
4317 -4377 0
4317 4359 -4379 0
4317 4360 -4381 0
4317 4362 -4383 0
4317 4364 -4385 0
4317 4366 -4387 0
4317 4368 -4389 0
4317 4370 -4391 0
4317 4372 -4393 0
4319 -4379 0
4319 4359 -4381 0
4319 4360 -4383 0
4319 4362 -4385 0
4319 4364 -4387 0
4319 4366 -4389 0
4319 4368 -4391 0
4319 4370 -4393 0
4319 4372 -4395 0
4321 -4381 0
4321 4359 -4383 0
4321 4360 -4385 0
4321 4362 -4387 0
4321 4364 -4389 0
4321 4366 -4391 0
4321 4368 -4393 0
4321 4370 -4395 0
4321 4372 -4397 0
4323 -4383 0
4323 4359 -4385 0
4323 4360 -4387 0
4323 4362 -4389 0
4323 4364 -4391 0
4323 4366 -4393 0
4323 4368 -4395 0
4323 4370 -4397 0
4323 4372 -4399 0
4325 -4385 0
4325 4359 -4387 0
4325 4360 -4389 0
4325 4362 -4391 0
4325 4364 -4393 0
4325 4366 -4395 0
4325 4368 -4397 0
4325 4370 -4399 0
4325 4372 -4401 0
4327 -4387 0
4327 4359 -4389 0
4327 4360 -4391 0
4327 4362 -4393 0
4327 4364 -4395 0
4327 4366 -4397 0
4327 4368 -4399 0
4327 4370 -4401 0
4327 4372 -4403 0
c (0<=(aux483 + aux486 - aux487))
-4372 4403 0
-4370 4401 0
-4368 4399 0
-4366 4397 0
-4364 4395 0
-4362 4393 0
-4360 4391 0
-4359 4389 0
-4327 4403 0
-4327 -4372 4401 0
-4327 -4370 4399 0
-4327 -4368 4397 0
-4327 -4366 4395 0
-4327 -4364 4393 0
-4327 -4362 4391 0
-4327 -4360 4389 0
-4327 -4359 4387 0
-4325 4401 0
-4325 -4372 4399 0
-4325 -4370 4397 0
-4325 -4368 4395 0
-4325 -4366 4393 0
-4325 -4364 4391 0
-4325 -4362 4389 0
-4325 -4360 4387 0
-4325 -4359 4385 0
-4323 4399 0
-4323 -4372 4397 0
-4323 -4370 4395 0
-4323 -4368 4393 0
-4323 -4366 4391 0
-4323 -4364 4389 0
-4323 -4362 4387 0
-4323 -4360 4385 0
-4323 -4359 4383 0
-4321 4397 0
-4321 -4372 4395 0
-4321 -4370 4393 0
-4321 -4368 4391 0
-4321 -4366 4389 0
-4321 -4364 4387 0
-4321 -4362 4385 0
-4321 -4360 4383 0
-4321 -4359 4381 0
-4319 4395 0
-4319 -4372 4393 0
-4319 -4370 4391 0
-4319 -4368 4389 0
-4319 -4366 4387 0
-4319 -4364 4385 0
-4319 -4362 4383 0
-4319 -4360 4381 0
-4319 -4359 4379 0
-4317 4393 0
-4317 -4372 4391 0
-4317 -4370 4389 0
-4317 -4368 4387 0
-4317 -4366 4385 0
-4317 -4364 4383 0
-4317 -4362 4381 0
-4317 -4360 4379 0
-4317 -4359 4377 0
-4315 4391 0
-4315 -4372 4389 0
-4315 -4370 4387 0
-4315 -4368 4385 0
-4315 -4366 4383 0
-4315 -4364 4381 0
-4315 -4362 4379 0
-4315 -4360 4377 0
-4315 -4359 4375 0
-4314 4389 0
-4314 -4372 4387 0
-4314 -4370 4385 0
-4314 -4368 4383 0
-4314 -4366 4381 0
-4314 -4364 4379 0
-4314 -4362 4377 0
-4314 -4360 4375 0
-4314 -4359 4374 0
c ((aux482 + aux484 - aux488)<=0)
4329 -4405 0
4330 -4406 0
4332 -4408 0
4334 -4410 0
4336 -4412 0
4338 -4414 0
4340 -4416 0
4342 -4418 0
4299 -4405 0
4299 4329 -4406 0
4299 4330 -4408 0
4299 4332 -4410 0
4299 4334 -4412 0
4299 4336 -4414 0
4299 4338 -4416 0
4299 4340 -4418 0
4299 4342 -4420 0
4300 -4406 0
4300 4329 -4408 0
4300 4330 -4410 0
4300 4332 -4412 0
4300 4334 -4414 0
4300 4336 -4416 0
4300 4338 -4418 0
4300 4340 -4420 0
4300 4342 -4422 0
4302 -4408 0
4302 4329 -4410 0
4302 4330 -4412 0
4302 4332 -4414 0
4302 4334 -4416 0
4302 4336 -4418 0
4302 4338 -4420 0
4302 4340 -4422 0
4302 4342 -4424 0
4304 -4410 0
4304 4329 -4412 0
4304 4330 -4414 0
4304 4332 -4416 0
4304 4334 -4418 0
4304 4336 -4420 0
4304 4338 -4422 0
4304 4340 -4424 0
4304 4342 -4426 0
4306 -4412 0
4306 4329 -4414 0
4306 4330 -4416 0
4306 4332 -4418 0
4306 4334 -4420 0
4306 4336 -4422 0
4306 4338 -4424 0
4306 4340 -4426 0
4306 4342 -4428 0
4308 -4414 0
4308 4329 -4416 0
4308 4330 -4418 0
4308 4332 -4420 0
4308 4334 -4422 0
4308 4336 -4424 0
4308 4338 -4426 0
4308 4340 -4428 0
4308 4342 -4430 0
4310 -4416 0
4310 4329 -4418 0
4310 4330 -4420 0
4310 4332 -4422 0
4310 4334 -4424 0
4310 4336 -4426 0
4310 4338 -4428 0
4310 4340 -4430 0
4310 4342 -4432 0
4312 -4418 0
4312 4329 -4420 0
4312 4330 -4422 0
4312 4332 -4424 0
4312 4334 -4426 0
4312 4336 -4428 0
4312 4338 -4430 0
4312 4340 -4432 0
4312 4342 -4434 0
c (0<=(aux482 + aux484 - aux488))
-4342 4434 0
-4340 4432 0
-4338 4430 0
-4336 4428 0
-4334 4426 0
-4332 4424 0
-4330 4422 0
-4329 4420 0
-4312 4434 0
-4312 -4342 4432 0
-4312 -4340 4430 0
-4312 -4338 4428 0
-4312 -4336 4426 0
-4312 -4334 4424 0
-4312 -4332 4422 0
-4312 -4330 4420 0
-4312 -4329 4418 0
-4310 4432 0
-4310 -4342 4430 0
-4310 -4340 4428 0
-4310 -4338 4426 0
-4310 -4336 4424 0
-4310 -4334 4422 0
-4310 -4332 4420 0
-4310 -4330 4418 0
-4310 -4329 4416 0
-4308 4430 0
-4308 -4342 4428 0
-4308 -4340 4426 0
-4308 -4338 4424 0
-4308 -4336 4422 0
-4308 -4334 4420 0
-4308 -4332 4418 0
-4308 -4330 4416 0
-4308 -4329 4414 0
-4306 4428 0
-4306 -4342 4426 0
-4306 -4340 4424 0
-4306 -4338 4422 0
-4306 -4336 4420 0
-4306 -4334 4418 0
-4306 -4332 4416 0
-4306 -4330 4414 0
-4306 -4329 4412 0
-4304 4426 0
-4304 -4342 4424 0
-4304 -4340 4422 0
-4304 -4338 4420 0
-4304 -4336 4418 0
-4304 -4334 4416 0
-4304 -4332 4414 0
-4304 -4330 4412 0
-4304 -4329 4410 0
-4302 4424 0
-4302 -4342 4422 0
-4302 -4340 4420 0
-4302 -4338 4418 0
-4302 -4336 4416 0
-4302 -4334 4414 0
-4302 -4332 4412 0
-4302 -4330 4410 0
-4302 -4329 4408 0
-4300 4422 0
-4300 -4342 4420 0
-4300 -4340 4418 0
-4300 -4338 4416 0
-4300 -4336 4414 0
-4300 -4334 4412 0
-4300 -4332 4410 0
-4300 -4330 4408 0
-4300 -4329 4406 0
-4299 4420 0
-4299 -4342 4418 0
-4299 -4340 4416 0
-4299 -4338 4414 0
-4299 -4336 4412 0
-4299 -4334 4410 0
-4299 -4332 4408 0
-4299 -4330 4406 0
-4299 -4329 4405 0
c ((SATLiteral(509) - aux489 + SATLiteral(96))<=0)
-96 -4436 0
-509 -4436 0
-509 -96 -4437 0
c (0<=(SATLiteral(509) - aux489 + SATLiteral(96)))
96 4437 0
509 4437 0
509 96 4436 0
c ((SATLiteral(527) - aux490 + SATLiteral(79))<=0)
-79 -4439 0
-527 -4439 0
-527 -79 -4440 0
c (0<=(SATLiteral(527) - aux490 + SATLiteral(79)))
79 4440 0
527 4440 0
527 79 4439 0
c ((SATLiteral(562) - aux491 + SATLiteral(62))<=0)
-62 -4442 0
-562 -4442 0
-562 -62 -4443 0
c (0<=(SATLiteral(562) - aux491 + SATLiteral(62)))
62 4443 0
562 4443 0
562 62 4442 0
c ((SATLiteral(355) - aux492 + SATLiteral(45))<=0)
-45 -4445 0
-355 -4445 0
-355 -45 -4446 0
c (0<=(SATLiteral(355) - aux492 + SATLiteral(45)))
45 4446 0
355 4446 0
355 45 4445 0
c (( - aux493 + SATLiteral(614) + SATLiteral(28))<=0)
-28 -4448 0
-614 -4448 0
-614 -28 -4449 0
c (0<=( - aux493 + SATLiteral(614) + SATLiteral(28)))
28 4449 0
614 4449 0
614 28 4448 0
c (( - aux494 + SATLiteral(458) + SATLiteral(11))<=0)
-11 -4451 0
-458 -4451 0
-458 -11 -4452 0
c (0<=( - aux494 + SATLiteral(458) + SATLiteral(11)))
11 4452 0
458 4452 0
458 11 4451 0
c (( - aux495 + SATLiteral(631) + SATLiteral(475))<=0)
-475 -4454 0
-631 -4454 0
-631 -475 -4455 0
c (0<=( - aux495 + SATLiteral(631) + SATLiteral(475)))
475 4455 0
631 4455 0
631 475 4454 0
c ((SATLiteral(372) - aux496 + SATLiteral(492))<=0)
-492 -4457 0
-372 -4457 0
-372 -492 -4458 0
c (0<=(SATLiteral(372) - aux496 + SATLiteral(492)))
492 4458 0
372 4458 0
372 492 4457 0
c (( - aux497 + SATLiteral(648) + SATLiteral(665))<=0)
-665 -4460 0
-648 -4460 0
-648 -665 -4461 0
c (0<=( - aux497 + SATLiteral(648) + SATLiteral(665)))
665 4461 0
648 4461 0
648 665 4460 0
c ((SATLiteral(303) - aux498 + SATLiteral(441))<=0)
-441 -4463 0
-303 -4463 0
-303 -441 -4464 0
c (0<=(SATLiteral(303) - aux498 + SATLiteral(441)))
441 4464 0
303 4464 0
303 441 4463 0
c (( - aux499 + SATLiteral(113) + SATLiteral(424))<=0)
-424 -4466 0
-113 -4466 0
-113 -424 -4467 0
c (0<=( - aux499 + SATLiteral(113) + SATLiteral(424)))
424 4467 0
113 4467 0
113 424 4466 0
c (( - aux500 + SATLiteral(682) + SATLiteral(407))<=0)
-407 -4469 0
-682 -4469 0
-682 -407 -4470 0
c (0<=( - aux500 + SATLiteral(682) + SATLiteral(407)))
407 4470 0
682 4470 0
682 407 4469 0
c (( - aux501 + SATLiteral(184) + SATLiteral(390))<=0)
-390 -4472 0
-184 -4472 0
-184 -390 -4473 0
c (0<=( - aux501 + SATLiteral(184) + SATLiteral(390)))
390 4473 0
184 4473 0
184 390 4472 0
c (( - aux502 + SATLiteral(131) + SATLiteral(286))<=0)
-286 -4475 0
-131 -4475 0
-131 -286 -4476 0
c (0<=( - aux502 + SATLiteral(131) + SATLiteral(286)))
286 4476 0
131 4476 0
131 286 4475 0
c (( - aux503 + SATLiteral(201) + SATLiteral(269))<=0)
-269 -4478 0
-201 -4478 0
-201 -269 -4479 0
c (0<=( - aux503 + SATLiteral(201) + SATLiteral(269)))
269 4479 0
201 4479 0
201 269 4478 0
c (( - aux504 + SATLiteral(218) + SATLiteral(252))<=0)
-252 -4481 0
-218 -4481 0
-218 -252 -4482 0
c (0<=( - aux504 + SATLiteral(218) + SATLiteral(252)))
252 4482 0
218 4482 0
218 252 4481 0
c ((SATLiteral(544) - aux505 + SATLiteral(235))<=0)
-235 -4484 0
-544 -4484 0
-544 -235 -4485 0
c (0<=(SATLiteral(544) - aux505 + SATLiteral(235)))
235 4485 0
544 4485 0
544 235 4484 0
c ((SATLiteral(321) - aux506 + SATLiteral(148))<=0)
-148 -4487 0
-321 -4487 0
-321 -148 -4488 0
c (0<=(SATLiteral(321) - aux506 + SATLiteral(148)))
148 4488 0
321 4488 0
321 148 4487 0
c ((SATLiteral(338) - aux507 + SATLiteral(166))<=0)
-166 -4490 0
-338 -4490 0
-338 -166 -4491 0
c (0<=(SATLiteral(338) - aux507 + SATLiteral(166)))
166 4491 0
338 4491 0
338 166 4490 0
c (( - aux508 + SATLiteral(580) + SATLiteral(597))<=0)
-597 -4493 0
-580 -4493 0
-580 -597 -4494 0
c (0<=( - aux508 + SATLiteral(580) + SATLiteral(597)))
597 4494 0
580 4494 0
580 597 4493 0
c ((aux496 + aux508 - aux509)<=0)
4493 -4496 0
4494 -4497 0
4457 -4496 0
4457 4493 -4497 0
4457 4494 -4499 0
4458 -4497 0
4458 4493 -4499 0
4458 4494 -4501 0
c (0<=(aux496 + aux508 - aux509))
-4494 4501 0
-4493 4499 0
-4458 4501 0
-4458 -4494 4499 0
-4458 -4493 4497 0
-4457 4499 0
-4457 -4494 4497 0
-4457 -4493 4496 0
c ((aux490 + aux503 - aux510)<=0)
4478 -4503 0
4479 -4504 0
4439 -4503 0
4439 4478 -4504 0
4439 4479 -4506 0
4440 -4504 0
4440 4478 -4506 0
4440 4479 -4508 0
c (0<=(aux490 + aux503 - aux510))
-4479 4508 0
-4478 4506 0
-4440 4508 0
-4440 -4479 4506 0
-4440 -4478 4504 0
-4439 4506 0
-4439 -4479 4504 0
-4439 -4478 4503 0
c ((aux489 + aux494 - aux511)<=0)
4451 -4510 0
4452 -4511 0
4436 -4510 0
4436 4451 -4511 0
4436 4452 -4513 0
4437 -4511 0
4437 4451 -4513 0
4437 4452 -4515 0
c (0<=(aux489 + aux494 - aux511))
-4452 4515 0
-4451 4513 0
-4437 4515 0
-4437 -4452 4513 0
-4437 -4451 4511 0
-4436 4513 0
-4436 -4452 4511 0
-4436 -4451 4510 0
c ((aux491 + aux492 - aux512)<=0)
4445 -4517 0
4446 -4518 0
4442 -4517 0
4442 4445 -4518 0
4442 4446 -4520 0
4443 -4518 0
4443 4445 -4520 0
4443 4446 -4522 0
c (0<=(aux491 + aux492 - aux512))
-4446 4522 0
-4445 4520 0
-4443 4522 0
-4443 -4446 4520 0
-4443 -4445 4518 0
-4442 4520 0
-4442 -4446 4518 0
-4442 -4445 4517 0
c ((aux493 + aux495 - aux513)<=0)
4454 -4524 0
4455 -4525 0
4448 -4524 0
4448 4454 -4525 0
4448 4455 -4527 0
4449 -4525 0
4449 4454 -4527 0
4449 4455 -4529 0
c (0<=(aux493 + aux495 - aux513))
-4455 4529 0
-4454 4527 0
-4449 4529 0
-4449 -4455 4527 0
-4449 -4454 4525 0
-4448 4527 0
-4448 -4455 4525 0
-4448 -4454 4524 0
c ((aux502 + aux506 - aux514)<=0)
4487 -4531 0
4488 -4532 0
4475 -4531 0
4475 4487 -4532 0
4475 4488 -4534 0
4476 -4532 0
4476 4487 -4534 0
4476 4488 -4536 0
c (0<=(aux502 + aux506 - aux514))
-4488 4536 0
-4487 4534 0
-4476 4536 0
-4476 -4488 4534 0
-4476 -4487 4532 0
-4475 4534 0
-4475 -4488 4532 0
-4475 -4487 4531 0
c ((aux498 + aux499 - aux515)<=0)
4466 -4538 0
4467 -4539 0
4463 -4538 0
4463 4466 -4539 0
4463 4467 -4541 0
4464 -4539 0
4464 4466 -4541 0
4464 4467 -4543 0
c (0<=(aux498 + aux499 - aux515))
-4467 4543 0
-4466 4541 0
-4464 4543 0
-4464 -4467 4541 0
-4464 -4466 4539 0
-4463 4541 0
-4463 -4467 4539 0
-4463 -4466 4538 0
c ((aux500 + aux501 - aux516)<=0)
4472 -4545 0
4473 -4546 0
4469 -4545 0
4469 4472 -4546 0
4469 4473 -4548 0
4470 -4546 0
4470 4472 -4548 0
4470 4473 -4550 0
c (0<=(aux500 + aux501 - aux516))
-4473 4550 0
-4472 4548 0
-4470 4550 0
-4470 -4473 4548 0
-4470 -4472 4546 0
-4469 4548 0
-4469 -4473 4546 0
-4469 -4472 4545 0
c ((aux504 + aux507 - aux517)<=0)
4490 -4552 0
4491 -4553 0
4481 -4552 0
4481 4490 -4553 0
4481 4491 -4555 0
4482 -4553 0
4482 4490 -4555 0
4482 4491 -4557 0
c (0<=(aux504 + aux507 - aux517))
-4491 4557 0
-4490 4555 0
-4482 4557 0
-4482 -4491 4555 0
-4482 -4490 4553 0
-4481 4555 0
-4481 -4491 4553 0
-4481 -4490 4552 0
c ((aux497 + aux505 - aux518)<=0)
4484 -4559 0
4485 -4560 0
4460 -4559 0
4460 4484 -4560 0
4460 4485 -4562 0
4461 -4560 0
4461 4484 -4562 0
4461 4485 -4564 0
c (0<=(aux497 + aux505 - aux518))
-4485 4564 0
-4484 4562 0
-4461 4564 0
-4461 -4485 4562 0
-4461 -4484 4560 0
-4460 4562 0
-4460 -4485 4560 0
-4460 -4484 4559 0
c ((aux512 + aux518 - aux519)<=0)
4559 -4566 0
4560 -4567 0
4562 -4569 0
4564 -4571 0
4517 -4566 0
4517 4559 -4567 0
4517 4560 -4569 0
4517 4562 -4571 0
4517 4564 -4573 0
4518 -4567 0
4518 4559 -4569 0
4518 4560 -4571 0
4518 4562 -4573 0
4518 4564 -4575 0
4520 -4569 0
4520 4559 -4571 0
4520 4560 -4573 0
4520 4562 -4575 0
4520 4564 -4577 0
4522 -4571 0
4522 4559 -4573 0
4522 4560 -4575 0
4522 4562 -4577 0
4522 4564 -4579 0
c (0<=(aux512 + aux518 - aux519))
-4564 4579 0
-4562 4577 0
-4560 4575 0
-4559 4573 0
-4522 4579 0
-4522 -4564 4577 0
-4522 -4562 4575 0
-4522 -4560 4573 0
-4522 -4559 4571 0
-4520 4577 0
-4520 -4564 4575 0
-4520 -4562 4573 0
-4520 -4560 4571 0
-4520 -4559 4569 0
-4518 4575 0
-4518 -4564 4573 0
-4518 -4562 4571 0
-4518 -4560 4569 0
-4518 -4559 4567 0
-4517 4573 0
-4517 -4564 4571 0
-4517 -4562 4569 0
-4517 -4560 4567 0
-4517 -4559 4566 0
c ((aux511 + aux515 - aux520)<=0)
4538 -4581 0
4539 -4582 0
4541 -4584 0
4543 -4586 0
4510 -4581 0
4510 4538 -4582 0
4510 4539 -4584 0
4510 4541 -4586 0
4510 4543 -4588 0
4511 -4582 0
4511 4538 -4584 0
4511 4539 -4586 0
4511 4541 -4588 0
4511 4543 -4590 0
4513 -4584 0
4513 4538 -4586 0
4513 4539 -4588 0
4513 4541 -4590 0
4513 4543 -4592 0
4515 -4586 0
4515 4538 -4588 0
4515 4539 -4590 0
4515 4541 -4592 0
4515 4543 -4594 0
c (0<=(aux511 + aux515 - aux520))
-4543 4594 0
-4541 4592 0
-4539 4590 0
-4538 4588 0
-4515 4594 0
-4515 -4543 4592 0
-4515 -4541 4590 0
-4515 -4539 4588 0
-4515 -4538 4586 0
-4513 4592 0
-4513 -4543 4590 0
-4513 -4541 4588 0
-4513 -4539 4586 0
-4513 -4538 4584 0
-4511 4590 0
-4511 -4543 4588 0
-4511 -4541 4586 0
-4511 -4539 4584 0
-4511 -4538 4582 0
-4510 4588 0
-4510 -4543 4586 0
-4510 -4541 4584 0
-4510 -4539 4582 0
-4510 -4538 4581 0
c ((aux509 + aux510 - aux521)<=0)
4503 -4596 0
4504 -4597 0
4506 -4599 0
4508 -4601 0
4496 -4596 0
4496 4503 -4597 0
4496 4504 -4599 0
4496 4506 -4601 0
4496 4508 -4603 0
4497 -4597 0
4497 4503 -4599 0
4497 4504 -4601 0
4497 4506 -4603 0
4497 4508 -4605 0
4499 -4599 0
4499 4503 -4601 0
4499 4504 -4603 0
4499 4506 -4605 0
4499 4508 -4607 0
4501 -4601 0
4501 4503 -4603 0
4501 4504 -4605 0
4501 4506 -4607 0
4501 4508 -4609 0
c (0<=(aux509 + aux510 - aux521))
-4508 4609 0
-4506 4607 0
-4504 4605 0
-4503 4603 0
-4501 4609 0
-4501 -4508 4607 0
-4501 -4506 4605 0
-4501 -4504 4603 0
-4501 -4503 4601 0
-4499 4607 0
-4499 -4508 4605 0
-4499 -4506 4603 0
-4499 -4504 4601 0
-4499 -4503 4599 0
-4497 4605 0
-4497 -4508 4603 0
-4497 -4506 4601 0
-4497 -4504 4599 0
-4497 -4503 4597 0
-4496 4603 0
-4496 -4508 4601 0
-4496 -4506 4599 0
-4496 -4504 4597 0
-4496 -4503 4596 0
c ((aux513 + aux514 - aux522)<=0)
4531 -4611 0
4532 -4612 0
4534 -4614 0
4536 -4616 0
4524 -4611 0
4524 4531 -4612 0
4524 4532 -4614 0
4524 4534 -4616 0
4524 4536 -4618 0
4525 -4612 0
4525 4531 -4614 0
4525 4532 -4616 0
4525 4534 -4618 0
4525 4536 -4620 0
4527 -4614 0
4527 4531 -4616 0
4527 4532 -4618 0
4527 4534 -4620 0
4527 4536 -4622 0
4529 -4616 0
4529 4531 -4618 0
4529 4532 -4620 0
4529 4534 -4622 0
4529 4536 -4624 0
c (0<=(aux513 + aux514 - aux522))
-4536 4624 0
-4534 4622 0
-4532 4620 0
-4531 4618 0
-4529 4624 0
-4529 -4536 4622 0
-4529 -4534 4620 0
-4529 -4532 4618 0
-4529 -4531 4616 0
-4527 4622 0
-4527 -4536 4620 0
-4527 -4534 4618 0
-4527 -4532 4616 0
-4527 -4531 4614 0
-4525 4620 0
-4525 -4536 4618 0
-4525 -4534 4616 0
-4525 -4532 4614 0
-4525 -4531 4612 0
-4524 4618 0
-4524 -4536 4616 0
-4524 -4534 4614 0
-4524 -4532 4612 0
-4524 -4531 4611 0
c ((aux516 + aux517 - aux523)<=0)
4552 -4626 0
4553 -4627 0
4555 -4629 0
4557 -4631 0
4545 -4626 0
4545 4552 -4627 0
4545 4553 -4629 0
4545 4555 -4631 0
4545 4557 -4633 0
4546 -4627 0
4546 4552 -4629 0
4546 4553 -4631 0
4546 4555 -4633 0
4546 4557 -4635 0
4548 -4629 0
4548 4552 -4631 0
4548 4553 -4633 0
4548 4555 -4635 0
4548 4557 -4637 0
4550 -4631 0
4550 4552 -4633 0
4550 4553 -4635 0
4550 4555 -4637 0
4550 4557 -4639 0
c (0<=(aux516 + aux517 - aux523))
-4557 4639 0
-4555 4637 0
-4553 4635 0
-4552 4633 0
-4550 4639 0
-4550 -4557 4637 0
-4550 -4555 4635 0
-4550 -4553 4633 0
-4550 -4552 4631 0
-4548 4637 0
-4548 -4557 4635 0
-4548 -4555 4633 0
-4548 -4553 4631 0
-4548 -4552 4629 0
-4546 4635 0
-4546 -4557 4633 0
-4546 -4555 4631 0
-4546 -4553 4629 0
-4546 -4552 4627 0
-4545 4633 0
-4545 -4557 4631 0
-4545 -4555 4629 0
-4545 -4553 4627 0
-4545 -4552 4626 0
c ((aux520 + aux523 - aux524)<=0)
4626 -4641 0
4627 -4642 0
4629 -4644 0
4631 -4646 0
4633 -4648 0
4635 -4650 0
4637 -4652 0
4639 -4654 0
4581 -4641 0
4581 4626 -4642 0
4581 4627 -4644 0
4581 4629 -4646 0
4581 4631 -4648 0
4581 4633 -4650 0
4581 4635 -4652 0
4581 4637 -4654 0
4581 4639 -4656 0
4582 -4642 0
4582 4626 -4644 0
4582 4627 -4646 0
4582 4629 -4648 0
4582 4631 -4650 0
4582 4633 -4652 0
4582 4635 -4654 0
4582 4637 -4656 0
4582 4639 -4658 0
4584 -4644 0
4584 4626 -4646 0
4584 4627 -4648 0
4584 4629 -4650 0
4584 4631 -4652 0
4584 4633 -4654 0
4584 4635 -4656 0
4584 4637 -4658 0
4584 4639 -4660 0
4586 -4646 0
4586 4626 -4648 0
4586 4627 -4650 0
4586 4629 -4652 0
4586 4631 -4654 0
4586 4633 -4656 0
4586 4635 -4658 0
4586 4637 -4660 0
4586 4639 -4662 0
4588 -4648 0
4588 4626 -4650 0
4588 4627 -4652 0
4588 4629 -4654 0
4588 4631 -4656 0
4588 4633 -4658 0
4588 4635 -4660 0
4588 4637 -4662 0
4588 4639 -4664 0
4590 -4650 0
4590 4626 -4652 0
4590 4627 -4654 0
4590 4629 -4656 0
4590 4631 -4658 0
4590 4633 -4660 0
4590 4635 -4662 0
4590 4637 -4664 0
4590 4639 -4666 0
4592 -4652 0
4592 4626 -4654 0
4592 4627 -4656 0
4592 4629 -4658 0
4592 4631 -4660 0
4592 4633 -4662 0
4592 4635 -4664 0
4592 4637 -4666 0
4592 4639 -4668 0
4594 -4654 0
4594 4626 -4656 0
4594 4627 -4658 0
4594 4629 -4660 0
4594 4631 -4662 0
4594 4633 -4664 0
4594 4635 -4666 0
4594 4637 -4668 0
4594 4639 -4670 0
c (0<=(aux520 + aux523 - aux524))
-4639 4670 0
-4637 4668 0
-4635 4666 0
-4633 4664 0
-4631 4662 0
-4629 4660 0
-4627 4658 0
-4626 4656 0
-4594 4670 0
-4594 -4639 4668 0
-4594 -4637 4666 0
-4594 -4635 4664 0
-4594 -4633 4662 0
-4594 -4631 4660 0
-4594 -4629 4658 0
-4594 -4627 4656 0
-4594 -4626 4654 0
-4592 4668 0
-4592 -4639 4666 0
-4592 -4637 4664 0
-4592 -4635 4662 0
-4592 -4633 4660 0
-4592 -4631 4658 0
-4592 -4629 4656 0
-4592 -4627 4654 0
-4592 -4626 4652 0
-4590 4666 0
-4590 -4639 4664 0
-4590 -4637 4662 0
-4590 -4635 4660 0
-4590 -4633 4658 0
-4590 -4631 4656 0
-4590 -4629 4654 0
-4590 -4627 4652 0
-4590 -4626 4650 0
-4588 4664 0
-4588 -4639 4662 0
-4588 -4637 4660 0
-4588 -4635 4658 0
-4588 -4633 4656 0
-4588 -4631 4654 0
-4588 -4629 4652 0
-4588 -4627 4650 0
-4588 -4626 4648 0
-4586 4662 0
-4586 -4639 4660 0
-4586 -4637 4658 0
-4586 -4635 4656 0
-4586 -4633 4654 0
-4586 -4631 4652 0
-4586 -4629 4650 0
-4586 -4627 4648 0
-4586 -4626 4646 0
-4584 4660 0
-4584 -4639 4658 0
-4584 -4637 4656 0
-4584 -4635 4654 0
-4584 -4633 4652 0
-4584 -4631 4650 0
-4584 -4629 4648 0
-4584 -4627 4646 0
-4584 -4626 4644 0
-4582 4658 0
-4582 -4639 4656 0
-4582 -4637 4654 0
-4582 -4635 4652 0
-4582 -4633 4650 0
-4582 -4631 4648 0
-4582 -4629 4646 0
-4582 -4627 4644 0
-4582 -4626 4642 0
-4581 4656 0
-4581 -4639 4654 0
-4581 -4637 4652 0
-4581 -4635 4650 0
-4581 -4633 4648 0
-4581 -4631 4646 0
-4581 -4629 4644 0
-4581 -4627 4642 0
-4581 -4626 4641 0
c ((aux519 + aux521 - aux525)<=0)
4596 -4672 0
4597 -4673 0
4599 -4675 0
4601 -4677 0
4603 -4679 0
4605 -4681 0
4607 -4683 0
4609 -4685 0
4566 -4672 0
4566 4596 -4673 0
4566 4597 -4675 0
4566 4599 -4677 0
4566 4601 -4679 0
4566 4603 -4681 0
4566 4605 -4683 0
4566 4607 -4685 0
4566 4609 -4687 0
4567 -4673 0
4567 4596 -4675 0
4567 4597 -4677 0
4567 4599 -4679 0
4567 4601 -4681 0
4567 4603 -4683 0
4567 4605 -4685 0
4567 4607 -4687 0
4567 4609 -4689 0
4569 -4675 0
4569 4596 -4677 0
4569 4597 -4679 0
4569 4599 -4681 0
4569 4601 -4683 0
4569 4603 -4685 0
4569 4605 -4687 0
4569 4607 -4689 0
4569 4609 -4691 0
4571 -4677 0
4571 4596 -4679 0
4571 4597 -4681 0
4571 4599 -4683 0
4571 4601 -4685 0
4571 4603 -4687 0
4571 4605 -4689 0
4571 4607 -4691 0
4571 4609 -4693 0
4573 -4679 0
4573 4596 -4681 0
4573 4597 -4683 0
4573 4599 -4685 0
4573 4601 -4687 0
4573 4603 -4689 0
4573 4605 -4691 0
4573 4607 -4693 0
4573 4609 -4695 0
4575 -4681 0
4575 4596 -4683 0
4575 4597 -4685 0
4575 4599 -4687 0
4575 4601 -4689 0
4575 4603 -4691 0
4575 4605 -4693 0
4575 4607 -4695 0
4575 4609 -4697 0
4577 -4683 0
4577 4596 -4685 0
4577 4597 -4687 0
4577 4599 -4689 0
4577 4601 -4691 0
4577 4603 -4693 0
4577 4605 -4695 0
4577 4607 -4697 0
4577 4609 -4699 0
4579 -4685 0
4579 4596 -4687 0
4579 4597 -4689 0
4579 4599 -4691 0
4579 4601 -4693 0
4579 4603 -4695 0
4579 4605 -4697 0
4579 4607 -4699 0
4579 4609 -4701 0
c (0<=(aux519 + aux521 - aux525))
-4609 4701 0
-4607 4699 0
-4605 4697 0
-4603 4695 0
-4601 4693 0
-4599 4691 0
-4597 4689 0
-4596 4687 0
-4579 4701 0
-4579 -4609 4699 0
-4579 -4607 4697 0
-4579 -4605 4695 0
-4579 -4603 4693 0
-4579 -4601 4691 0
-4579 -4599 4689 0
-4579 -4597 4687 0
-4579 -4596 4685 0
-4577 4699 0
-4577 -4609 4697 0
-4577 -4607 4695 0
-4577 -4605 4693 0
-4577 -4603 4691 0
-4577 -4601 4689 0
-4577 -4599 4687 0
-4577 -4597 4685 0
-4577 -4596 4683 0
-4575 4697 0
-4575 -4609 4695 0
-4575 -4607 4693 0
-4575 -4605 4691 0
-4575 -4603 4689 0
-4575 -4601 4687 0
-4575 -4599 4685 0
-4575 -4597 4683 0
-4575 -4596 4681 0
-4573 4695 0
-4573 -4609 4693 0
-4573 -4607 4691 0
-4573 -4605 4689 0
-4573 -4603 4687 0
-4573 -4601 4685 0
-4573 -4599 4683 0
-4573 -4597 4681 0
-4573 -4596 4679 0
-4571 4693 0
-4571 -4609 4691 0
-4571 -4607 4689 0
-4571 -4605 4687 0
-4571 -4603 4685 0
-4571 -4601 4683 0
-4571 -4599 4681 0
-4571 -4597 4679 0
-4571 -4596 4677 0
-4569 4691 0
-4569 -4609 4689 0
-4569 -4607 4687 0
-4569 -4605 4685 0
-4569 -4603 4683 0
-4569 -4601 4681 0
-4569 -4599 4679 0
-4569 -4597 4677 0
-4569 -4596 4675 0
-4567 4689 0
-4567 -4609 4687 0
-4567 -4607 4685 0
-4567 -4605 4683 0
-4567 -4603 4681 0
-4567 -4601 4679 0
-4567 -4599 4677 0
-4567 -4597 4675 0
-4567 -4596 4673 0
-4566 4687 0
-4566 -4609 4685 0
-4566 -4607 4683 0
-4566 -4605 4681 0
-4566 -4603 4679 0
-4566 -4601 4677 0
-4566 -4599 4675 0
-4566 -4597 4673 0
-4566 -4596 4672 0
c ((SATLiteral(511) - aux526 + SATLiteral(98))<=0)
-98 -4703 0
-511 -4703 0
-511 -98 -4704 0
c (0<=(SATLiteral(511) - aux526 + SATLiteral(98)))
98 4704 0
511 4704 0
511 98 4703 0
c ((SATLiteral(529) - aux527 + SATLiteral(81))<=0)
-81 -4706 0
-529 -4706 0
-529 -81 -4707 0
c (0<=(SATLiteral(529) - aux527 + SATLiteral(81)))
81 4707 0
529 4707 0
529 81 4706 0
c ((SATLiteral(564) - aux528 + SATLiteral(64))<=0)
-64 -4709 0
-564 -4709 0
-564 -64 -4710 0
c (0<=(SATLiteral(564) - aux528 + SATLiteral(64)))
64 4710 0
564 4710 0
564 64 4709 0
c ((SATLiteral(357) - aux529 + SATLiteral(47))<=0)
-47 -4712 0
-357 -4712 0
-357 -47 -4713 0
c (0<=(SATLiteral(357) - aux529 + SATLiteral(47)))
47 4713 0
357 4713 0
357 47 4712 0
c (( - aux530 + SATLiteral(616) + SATLiteral(30))<=0)
-30 -4715 0
-616 -4715 0
-616 -30 -4716 0
c (0<=( - aux530 + SATLiteral(616) + SATLiteral(30)))
30 4716 0
616 4716 0
616 30 4715 0
c (( - aux531 + SATLiteral(460) + SATLiteral(13))<=0)
-13 -4718 0
-460 -4718 0
-460 -13 -4719 0
c (0<=( - aux531 + SATLiteral(460) + SATLiteral(13)))
13 4719 0
460 4719 0
460 13 4718 0
c (( - aux532 + SATLiteral(633) + SATLiteral(477))<=0)
-477 -4721 0
-633 -4721 0
-633 -477 -4722 0
c (0<=( - aux532 + SATLiteral(633) + SATLiteral(477)))
477 4722 0
633 4722 0
633 477 4721 0
c ((SATLiteral(374) - aux533 + SATLiteral(494))<=0)
-494 -4724 0
-374 -4724 0
-374 -494 -4725 0
c (0<=(SATLiteral(374) - aux533 + SATLiteral(494)))
494 4725 0
374 4725 0
374 494 4724 0
c (( - aux534 + SATLiteral(650) + SATLiteral(667))<=0)
-667 -4727 0
-650 -4727 0
-650 -667 -4728 0
c (0<=( - aux534 + SATLiteral(650) + SATLiteral(667)))
667 4728 0
650 4728 0
650 667 4727 0
c ((SATLiteral(305) - aux535 + SATLiteral(443))<=0)
-443 -4730 0
-305 -4730 0
-305 -443 -4731 0
c (0<=(SATLiteral(305) - aux535 + SATLiteral(443)))
443 4731 0
305 4731 0
305 443 4730 0
c (( - aux536 + SATLiteral(115) + SATLiteral(426))<=0)
-426 -4733 0
-115 -4733 0
-115 -426 -4734 0
c (0<=( - aux536 + SATLiteral(115) + SATLiteral(426)))
426 4734 0
115 4734 0
115 426 4733 0
c (( - aux537 + SATLiteral(684) + SATLiteral(409))<=0)
-409 -4736 0
-684 -4736 0
-684 -409 -4737 0
c (0<=( - aux537 + SATLiteral(684) + SATLiteral(409)))
409 4737 0
684 4737 0
684 409 4736 0
c (( - aux538 + SATLiteral(186) + SATLiteral(392))<=0)
-392 -4739 0
-186 -4739 0
-186 -392 -4740 0
c (0<=( - aux538 + SATLiteral(186) + SATLiteral(392)))
392 4740 0
186 4740 0
186 392 4739 0
c (( - aux539 + SATLiteral(133) + SATLiteral(288))<=0)
-288 -4742 0
-133 -4742 0
-133 -288 -4743 0
c (0<=( - aux539 + SATLiteral(133) + SATLiteral(288)))
288 4743 0
133 4743 0
133 288 4742 0
c (( - aux540 + SATLiteral(203) + SATLiteral(271))<=0)
-271 -4745 0
-203 -4745 0
-203 -271 -4746 0
c (0<=( - aux540 + SATLiteral(203) + SATLiteral(271)))
271 4746 0
203 4746 0
203 271 4745 0
c (( - aux541 + SATLiteral(220) + SATLiteral(254))<=0)
-254 -4748 0
-220 -4748 0
-220 -254 -4749 0
c (0<=( - aux541 + SATLiteral(220) + SATLiteral(254)))
254 4749 0
220 4749 0
220 254 4748 0
c ((SATLiteral(546) - aux542 + SATLiteral(237))<=0)
-237 -4751 0
-546 -4751 0
-546 -237 -4752 0
c (0<=(SATLiteral(546) - aux542 + SATLiteral(237)))
237 4752 0
546 4752 0
546 237 4751 0
c ((SATLiteral(323) - aux543 + SATLiteral(150))<=0)
-150 -4754 0
-323 -4754 0
-323 -150 -4755 0
c (0<=(SATLiteral(323) - aux543 + SATLiteral(150)))
150 4755 0
323 4755 0
323 150 4754 0
c ((SATLiteral(340) - aux544 + SATLiteral(168))<=0)
-168 -4757 0
-340 -4757 0
-340 -168 -4758 0
c (0<=(SATLiteral(340) - aux544 + SATLiteral(168)))
168 4758 0
340 4758 0
340 168 4757 0
c (( - aux545 + SATLiteral(582) + SATLiteral(599))<=0)
-599 -4760 0
-582 -4760 0
-582 -599 -4761 0
c (0<=( - aux545 + SATLiteral(582) + SATLiteral(599)))
599 4761 0
582 4761 0
582 599 4760 0
c ((aux533 + aux545 - aux546)<=0)
4760 -4763 0
4761 -4764 0
4724 -4763 0
4724 4760 -4764 0
4724 4761 -4766 0
4725 -4764 0
4725 4760 -4766 0
4725 4761 -4768 0
c (0<=(aux533 + aux545 - aux546))
-4761 4768 0
-4760 4766 0
-4725 4768 0
-4725 -4761 4766 0
-4725 -4760 4764 0
-4724 4766 0
-4724 -4761 4764 0
-4724 -4760 4763 0
c ((aux527 + aux540 - aux547)<=0)
4745 -4770 0
4746 -4771 0
4706 -4770 0
4706 4745 -4771 0
4706 4746 -4773 0
4707 -4771 0
4707 4745 -4773 0
4707 4746 -4775 0
c (0<=(aux527 + aux540 - aux547))
-4746 4775 0
-4745 4773 0
-4707 4775 0
-4707 -4746 4773 0
-4707 -4745 4771 0
-4706 4773 0
-4706 -4746 4771 0
-4706 -4745 4770 0
c ((aux526 + aux531 - aux548)<=0)
4718 -4777 0
4719 -4778 0
4703 -4777 0
4703 4718 -4778 0
4703 4719 -4780 0
4704 -4778 0
4704 4718 -4780 0
4704 4719 -4782 0
c (0<=(aux526 + aux531 - aux548))
-4719 4782 0
-4718 4780 0
-4704 4782 0
-4704 -4719 4780 0
-4704 -4718 4778 0
-4703 4780 0
-4703 -4719 4778 0
-4703 -4718 4777 0
c ((aux528 + aux529 - aux549)<=0)
4712 -4784 0
4713 -4785 0
4709 -4784 0
4709 4712 -4785 0
4709 4713 -4787 0
4710 -4785 0
4710 4712 -4787 0
4710 4713 -4789 0
c (0<=(aux528 + aux529 - aux549))
-4713 4789 0
-4712 4787 0
-4710 4789 0
-4710 -4713 4787 0
-4710 -4712 4785 0
-4709 4787 0
-4709 -4713 4785 0
-4709 -4712 4784 0
c ((aux530 + aux532 - aux550)<=0)
4721 -4791 0
4722 -4792 0
4715 -4791 0
4715 4721 -4792 0
4715 4722 -4794 0
4716 -4792 0
4716 4721 -4794 0
4716 4722 -4796 0
c (0<=(aux530 + aux532 - aux550))
-4722 4796 0
-4721 4794 0
-4716 4796 0
-4716 -4722 4794 0
-4716 -4721 4792 0
-4715 4794 0
-4715 -4722 4792 0
-4715 -4721 4791 0
c ((aux539 + aux543 - aux551)<=0)
4754 -4798 0
4755 -4799 0
4742 -4798 0
4742 4754 -4799 0
4742 4755 -4801 0
4743 -4799 0
4743 4754 -4801 0
4743 4755 -4803 0
c (0<=(aux539 + aux543 - aux551))
-4755 4803 0
-4754 4801 0
-4743 4803 0
-4743 -4755 4801 0
-4743 -4754 4799 0
-4742 4801 0
-4742 -4755 4799 0
-4742 -4754 4798 0
c ((aux535 + aux536 - aux552)<=0)
4733 -4805 0
4734 -4806 0
4730 -4805 0
4730 4733 -4806 0
4730 4734 -4808 0
4731 -4806 0
4731 4733 -4808 0
4731 4734 -4810 0
c (0<=(aux535 + aux536 - aux552))
-4734 4810 0
-4733 4808 0
-4731 4810 0
-4731 -4734 4808 0
-4731 -4733 4806 0
-4730 4808 0
-4730 -4734 4806 0
-4730 -4733 4805 0
c ((aux537 + aux538 - aux553)<=0)
4739 -4812 0
4740 -4813 0
4736 -4812 0
4736 4739 -4813 0
4736 4740 -4815 0
4737 -4813 0
4737 4739 -4815 0
4737 4740 -4817 0
c (0<=(aux537 + aux538 - aux553))
-4740 4817 0
-4739 4815 0
-4737 4817 0
-4737 -4740 4815 0
-4737 -4739 4813 0
-4736 4815 0
-4736 -4740 4813 0
-4736 -4739 4812 0
c ((aux541 + aux544 - aux554)<=0)
4757 -4819 0
4758 -4820 0
4748 -4819 0
4748 4757 -4820 0
4748 4758 -4822 0
4749 -4820 0
4749 4757 -4822 0
4749 4758 -4824 0
c (0<=(aux541 + aux544 - aux554))
-4758 4824 0
-4757 4822 0
-4749 4824 0
-4749 -4758 4822 0
-4749 -4757 4820 0
-4748 4822 0
-4748 -4758 4820 0
-4748 -4757 4819 0
c ((aux534 + aux542 - aux555)<=0)
4751 -4826 0
4752 -4827 0
4727 -4826 0
4727 4751 -4827 0
4727 4752 -4829 0
4728 -4827 0
4728 4751 -4829 0
4728 4752 -4831 0
c (0<=(aux534 + aux542 - aux555))
-4752 4831 0
-4751 4829 0
-4728 4831 0
-4728 -4752 4829 0
-4728 -4751 4827 0
-4727 4829 0
-4727 -4752 4827 0
-4727 -4751 4826 0
c ((aux549 + aux555 - aux556)<=0)
4826 -4833 0
4827 -4834 0
4829 -4836 0
4831 -4838 0
4784 -4833 0
4784 4826 -4834 0
4784 4827 -4836 0
4784 4829 -4838 0
4784 4831 -4840 0
4785 -4834 0
4785 4826 -4836 0
4785 4827 -4838 0
4785 4829 -4840 0
4785 4831 -4842 0
4787 -4836 0
4787 4826 -4838 0
4787 4827 -4840 0
4787 4829 -4842 0
4787 4831 -4844 0
4789 -4838 0
4789 4826 -4840 0
4789 4827 -4842 0
4789 4829 -4844 0
4789 4831 -4846 0
c (0<=(aux549 + aux555 - aux556))
-4831 4846 0
-4829 4844 0
-4827 4842 0
-4826 4840 0
-4789 4846 0
-4789 -4831 4844 0
-4789 -4829 4842 0
-4789 -4827 4840 0
-4789 -4826 4838 0
-4787 4844 0
-4787 -4831 4842 0
-4787 -4829 4840 0
-4787 -4827 4838 0
-4787 -4826 4836 0
-4785 4842 0
-4785 -4831 4840 0
-4785 -4829 4838 0
-4785 -4827 4836 0
-4785 -4826 4834 0
-4784 4840 0
-4784 -4831 4838 0
-4784 -4829 4836 0
-4784 -4827 4834 0
-4784 -4826 4833 0
c ((aux548 + aux552 - aux557)<=0)
4805 -4848 0
4806 -4849 0
4808 -4851 0
4810 -4853 0
4777 -4848 0
4777 4805 -4849 0
4777 4806 -4851 0
4777 4808 -4853 0
4777 4810 -4855 0
4778 -4849 0
4778 4805 -4851 0
4778 4806 -4853 0
4778 4808 -4855 0
4778 4810 -4857 0
4780 -4851 0
4780 4805 -4853 0
4780 4806 -4855 0
4780 4808 -4857 0
4780 4810 -4859 0
4782 -4853 0
4782 4805 -4855 0
4782 4806 -4857 0
4782 4808 -4859 0
4782 4810 -4861 0
c (0<=(aux548 + aux552 - aux557))
-4810 4861 0
-4808 4859 0
-4806 4857 0
-4805 4855 0
-4782 4861 0
-4782 -4810 4859 0
-4782 -4808 4857 0
-4782 -4806 4855 0
-4782 -4805 4853 0
-4780 4859 0
-4780 -4810 4857 0
-4780 -4808 4855 0
-4780 -4806 4853 0
-4780 -4805 4851 0
-4778 4857 0
-4778 -4810 4855 0
-4778 -4808 4853 0
-4778 -4806 4851 0
-4778 -4805 4849 0
-4777 4855 0
-4777 -4810 4853 0
-4777 -4808 4851 0
-4777 -4806 4849 0
-4777 -4805 4848 0
c ((aux546 + aux547 - aux558)<=0)
4770 -4863 0
4771 -4864 0
4773 -4866 0
4775 -4868 0
4763 -4863 0
4763 4770 -4864 0
4763 4771 -4866 0
4763 4773 -4868 0
4763 4775 -4870 0
4764 -4864 0
4764 4770 -4866 0
4764 4771 -4868 0
4764 4773 -4870 0
4764 4775 -4872 0
4766 -4866 0
4766 4770 -4868 0
4766 4771 -4870 0
4766 4773 -4872 0
4766 4775 -4874 0
4768 -4868 0
4768 4770 -4870 0
4768 4771 -4872 0
4768 4773 -4874 0
4768 4775 -4876 0
c (0<=(aux546 + aux547 - aux558))
-4775 4876 0
-4773 4874 0
-4771 4872 0
-4770 4870 0
-4768 4876 0
-4768 -4775 4874 0
-4768 -4773 4872 0
-4768 -4771 4870 0
-4768 -4770 4868 0
-4766 4874 0
-4766 -4775 4872 0
-4766 -4773 4870 0
-4766 -4771 4868 0
-4766 -4770 4866 0
-4764 4872 0
-4764 -4775 4870 0
-4764 -4773 4868 0
-4764 -4771 4866 0
-4764 -4770 4864 0
-4763 4870 0
-4763 -4775 4868 0
-4763 -4773 4866 0
-4763 -4771 4864 0
-4763 -4770 4863 0
c ((aux550 + aux551 - aux559)<=0)
4798 -4878 0
4799 -4879 0
4801 -4881 0
4803 -4883 0
4791 -4878 0
4791 4798 -4879 0
4791 4799 -4881 0
4791 4801 -4883 0
4791 4803 -4885 0
4792 -4879 0
4792 4798 -4881 0
4792 4799 -4883 0
4792 4801 -4885 0
4792 4803 -4887 0
4794 -4881 0
4794 4798 -4883 0
4794 4799 -4885 0
4794 4801 -4887 0
4794 4803 -4889 0
4796 -4883 0
4796 4798 -4885 0
4796 4799 -4887 0
4796 4801 -4889 0
4796 4803 -4891 0
c (0<=(aux550 + aux551 - aux559))
-4803 4891 0
-4801 4889 0
-4799 4887 0
-4798 4885 0
-4796 4891 0
-4796 -4803 4889 0
-4796 -4801 4887 0
-4796 -4799 4885 0
-4796 -4798 4883 0
-4794 4889 0
-4794 -4803 4887 0
-4794 -4801 4885 0
-4794 -4799 4883 0
-4794 -4798 4881 0
-4792 4887 0
-4792 -4803 4885 0
-4792 -4801 4883 0
-4792 -4799 4881 0
-4792 -4798 4879 0
-4791 4885 0
-4791 -4803 4883 0
-4791 -4801 4881 0
-4791 -4799 4879 0
-4791 -4798 4878 0
c ((aux553 + aux554 - aux560)<=0)
4819 -4893 0
4820 -4894 0
4822 -4896 0
4824 -4898 0
4812 -4893 0
4812 4819 -4894 0
4812 4820 -4896 0
4812 4822 -4898 0
4812 4824 -4900 0
4813 -4894 0
4813 4819 -4896 0
4813 4820 -4898 0
4813 4822 -4900 0
4813 4824 -4902 0
4815 -4896 0
4815 4819 -4898 0
4815 4820 -4900 0
4815 4822 -4902 0
4815 4824 -4904 0
4817 -4898 0
4817 4819 -4900 0
4817 4820 -4902 0
4817 4822 -4904 0
4817 4824 -4906 0
c (0<=(aux553 + aux554 - aux560))
-4824 4906 0
-4822 4904 0
-4820 4902 0
-4819 4900 0
-4817 4906 0
-4817 -4824 4904 0
-4817 -4822 4902 0
-4817 -4820 4900 0
-4817 -4819 4898 0
-4815 4904 0
-4815 -4824 4902 0
-4815 -4822 4900 0
-4815 -4820 4898 0
-4815 -4819 4896 0
-4813 4902 0
-4813 -4824 4900 0
-4813 -4822 4898 0
-4813 -4820 4896 0
-4813 -4819 4894 0
-4812 4900 0
-4812 -4824 4898 0
-4812 -4822 4896 0
-4812 -4820 4894 0
-4812 -4819 4893 0
c ((aux557 + aux560 - aux561)<=0)
4893 -4908 0
4894 -4909 0
4896 -4911 0
4898 -4913 0
4900 -4915 0
4902 -4917 0
4904 -4919 0
4906 -4921 0
4848 -4908 0
4848 4893 -4909 0
4848 4894 -4911 0
4848 4896 -4913 0
4848 4898 -4915 0
4848 4900 -4917 0
4848 4902 -4919 0
4848 4904 -4921 0
4848 4906 -4923 0
4849 -4909 0
4849 4893 -4911 0
4849 4894 -4913 0
4849 4896 -4915 0
4849 4898 -4917 0
4849 4900 -4919 0
4849 4902 -4921 0
4849 4904 -4923 0
4849 4906 -4925 0
4851 -4911 0
4851 4893 -4913 0
4851 4894 -4915 0
4851 4896 -4917 0
4851 4898 -4919 0
4851 4900 -4921 0
4851 4902 -4923 0
4851 4904 -4925 0
4851 4906 -4927 0
4853 -4913 0
4853 4893 -4915 0
4853 4894 -4917 0
4853 4896 -4919 0
4853 4898 -4921 0
4853 4900 -4923 0
4853 4902 -4925 0
4853 4904 -4927 0
4853 4906 -4929 0
4855 -4915 0
4855 4893 -4917 0
4855 4894 -4919 0
4855 4896 -4921 0
4855 4898 -4923 0
4855 4900 -4925 0
4855 4902 -4927 0
4855 4904 -4929 0
4855 4906 -4931 0
4857 -4917 0
4857 4893 -4919 0
4857 4894 -4921 0
4857 4896 -4923 0
4857 4898 -4925 0
4857 4900 -4927 0
4857 4902 -4929 0
4857 4904 -4931 0
4857 4906 -4933 0
4859 -4919 0
4859 4893 -4921 0
4859 4894 -4923 0
4859 4896 -4925 0
4859 4898 -4927 0
4859 4900 -4929 0
4859 4902 -4931 0
4859 4904 -4933 0
4859 4906 -4935 0
4861 -4921 0
4861 4893 -4923 0
4861 4894 -4925 0
4861 4896 -4927 0
4861 4898 -4929 0
4861 4900 -4931 0
4861 4902 -4933 0
4861 4904 -4935 0
4861 4906 -4937 0
c (0<=(aux557 + aux560 - aux561))
-4906 4937 0
-4904 4935 0
-4902 4933 0
-4900 4931 0
-4898 4929 0
-4896 4927 0
-4894 4925 0
-4893 4923 0
-4861 4937 0
-4861 -4906 4935 0
-4861 -4904 4933 0
-4861 -4902 4931 0
-4861 -4900 4929 0
-4861 -4898 4927 0
-4861 -4896 4925 0
-4861 -4894 4923 0
-4861 -4893 4921 0
-4859 4935 0
-4859 -4906 4933 0
-4859 -4904 4931 0
-4859 -4902 4929 0
-4859 -4900 4927 0
-4859 -4898 4925 0
-4859 -4896 4923 0
-4859 -4894 4921 0
-4859 -4893 4919 0
-4857 4933 0
-4857 -4906 4931 0
-4857 -4904 4929 0
-4857 -4902 4927 0
-4857 -4900 4925 0
-4857 -4898 4923 0
-4857 -4896 4921 0
-4857 -4894 4919 0
-4857 -4893 4917 0
-4855 4931 0
-4855 -4906 4929 0
-4855 -4904 4927 0
-4855 -4902 4925 0
-4855 -4900 4923 0
-4855 -4898 4921 0
-4855 -4896 4919 0
-4855 -4894 4917 0
-4855 -4893 4915 0
-4853 4929 0
-4853 -4906 4927 0
-4853 -4904 4925 0
-4853 -4902 4923 0
-4853 -4900 4921 0
-4853 -4898 4919 0
-4853 -4896 4917 0
-4853 -4894 4915 0
-4853 -4893 4913 0
-4851 4927 0
-4851 -4906 4925 0
-4851 -4904 4923 0
-4851 -4902 4921 0
-4851 -4900 4919 0
-4851 -4898 4917 0
-4851 -4896 4915 0
-4851 -4894 4913 0
-4851 -4893 4911 0
-4849 4925 0
-4849 -4906 4923 0
-4849 -4904 4921 0
-4849 -4902 4919 0
-4849 -4900 4917 0
-4849 -4898 4915 0
-4849 -4896 4913 0
-4849 -4894 4911 0
-4849 -4893 4909 0
-4848 4923 0
-4848 -4906 4921 0
-4848 -4904 4919 0
-4848 -4902 4917 0
-4848 -4900 4915 0
-4848 -4898 4913 0
-4848 -4896 4911 0
-4848 -4894 4909 0
-4848 -4893 4908 0
c ((aux556 + aux558 - aux562)<=0)
4863 -4939 0
4864 -4940 0
4866 -4942 0
4868 -4944 0
4870 -4946 0
4872 -4948 0
4874 -4950 0
4876 -4952 0
4833 -4939 0
4833 4863 -4940 0
4833 4864 -4942 0
4833 4866 -4944 0
4833 4868 -4946 0
4833 4870 -4948 0
4833 4872 -4950 0
4833 4874 -4952 0
4833 4876 -4954 0
4834 -4940 0
4834 4863 -4942 0
4834 4864 -4944 0
4834 4866 -4946 0
4834 4868 -4948 0
4834 4870 -4950 0
4834 4872 -4952 0
4834 4874 -4954 0
4834 4876 -4956 0
4836 -4942 0
4836 4863 -4944 0
4836 4864 -4946 0
4836 4866 -4948 0
4836 4868 -4950 0
4836 4870 -4952 0
4836 4872 -4954 0
4836 4874 -4956 0
4836 4876 -4958 0
4838 -4944 0
4838 4863 -4946 0
4838 4864 -4948 0
4838 4866 -4950 0
4838 4868 -4952 0
4838 4870 -4954 0
4838 4872 -4956 0
4838 4874 -4958 0
4838 4876 -4960 0
4840 -4946 0
4840 4863 -4948 0
4840 4864 -4950 0
4840 4866 -4952 0
4840 4868 -4954 0
4840 4870 -4956 0
4840 4872 -4958 0
4840 4874 -4960 0
4840 4876 -4962 0
4842 -4948 0
4842 4863 -4950 0
4842 4864 -4952 0
4842 4866 -4954 0
4842 4868 -4956 0
4842 4870 -4958 0
4842 4872 -4960 0
4842 4874 -4962 0
4842 4876 -4964 0
4844 -4950 0
4844 4863 -4952 0
4844 4864 -4954 0
4844 4866 -4956 0
4844 4868 -4958 0
4844 4870 -4960 0
4844 4872 -4962 0
4844 4874 -4964 0
4844 4876 -4966 0
4846 -4952 0
4846 4863 -4954 0
4846 4864 -4956 0
4846 4866 -4958 0
4846 4868 -4960 0
4846 4870 -4962 0
4846 4872 -4964 0
4846 4874 -4966 0
4846 4876 -4968 0
c (0<=(aux556 + aux558 - aux562))
-4876 4968 0
-4874 4966 0
-4872 4964 0
-4870 4962 0
-4868 4960 0
-4866 4958 0
-4864 4956 0
-4863 4954 0
-4846 4968 0
-4846 -4876 4966 0
-4846 -4874 4964 0
-4846 -4872 4962 0
-4846 -4870 4960 0
-4846 -4868 4958 0
-4846 -4866 4956 0
-4846 -4864 4954 0
-4846 -4863 4952 0
-4844 4966 0
-4844 -4876 4964 0
-4844 -4874 4962 0
-4844 -4872 4960 0
-4844 -4870 4958 0
-4844 -4868 4956 0
-4844 -4866 4954 0
-4844 -4864 4952 0
-4844 -4863 4950 0
-4842 4964 0
-4842 -4876 4962 0
-4842 -4874 4960 0
-4842 -4872 4958 0
-4842 -4870 4956 0
-4842 -4868 4954 0
-4842 -4866 4952 0
-4842 -4864 4950 0
-4842 -4863 4948 0
-4840 4962 0
-4840 -4876 4960 0
-4840 -4874 4958 0
-4840 -4872 4956 0
-4840 -4870 4954 0
-4840 -4868 4952 0
-4840 -4866 4950 0
-4840 -4864 4948 0
-4840 -4863 4946 0
-4838 4960 0
-4838 -4876 4958 0
-4838 -4874 4956 0
-4838 -4872 4954 0
-4838 -4870 4952 0
-4838 -4868 4950 0
-4838 -4866 4948 0
-4838 -4864 4946 0
-4838 -4863 4944 0
-4836 4958 0
-4836 -4876 4956 0
-4836 -4874 4954 0
-4836 -4872 4952 0
-4836 -4870 4950 0
-4836 -4868 4948 0
-4836 -4866 4946 0
-4836 -4864 4944 0
-4836 -4863 4942 0
-4834 4956 0
-4834 -4876 4954 0
-4834 -4874 4952 0
-4834 -4872 4950 0
-4834 -4870 4948 0
-4834 -4868 4946 0
-4834 -4866 4944 0
-4834 -4864 4942 0
-4834 -4863 4940 0
-4833 4954 0
-4833 -4876 4952 0
-4833 -4874 4950 0
-4833 -4872 4948 0
-4833 -4870 4946 0
-4833 -4868 4944 0
-4833 -4866 4942 0
-4833 -4864 4940 0
-4833 -4863 4939 0
c ((SATLiteral(513) - aux563 + SATLiteral(100))<=0)
-100 -4970 0
-513 -4970 0
-513 -100 -4971 0
c (0<=(SATLiteral(513) - aux563 + SATLiteral(100)))
100 4971 0
513 4971 0
513 100 4970 0
c ((SATLiteral(531) - aux564 + SATLiteral(83))<=0)
-83 -4973 0
-531 -4973 0
-531 -83 -4974 0
c (0<=(SATLiteral(531) - aux564 + SATLiteral(83)))
83 4974 0
531 4974 0
531 83 4973 0
c ((SATLiteral(566) - aux565 + SATLiteral(66))<=0)
-66 -4976 0
-566 -4976 0
-566 -66 -4977 0
c (0<=(SATLiteral(566) - aux565 + SATLiteral(66)))
66 4977 0
566 4977 0
566 66 4976 0
c ((SATLiteral(359) - aux566 + SATLiteral(49))<=0)
-49 -4979 0
-359 -4979 0
-359 -49 -4980 0
c (0<=(SATLiteral(359) - aux566 + SATLiteral(49)))
49 4980 0
359 4980 0
359 49 4979 0
c (( - aux567 + SATLiteral(618) + SATLiteral(32))<=0)
-32 -4982 0
-618 -4982 0
-618 -32 -4983 0
c (0<=( - aux567 + SATLiteral(618) + SATLiteral(32)))
32 4983 0
618 4983 0
618 32 4982 0
c (( - aux568 + SATLiteral(462) + SATLiteral(15))<=0)
-15 -4985 0
-462 -4985 0
-462 -15 -4986 0
c (0<=( - aux568 + SATLiteral(462) + SATLiteral(15)))
15 4986 0
462 4986 0
462 15 4985 0
c (( - aux569 + SATLiteral(635) + SATLiteral(479))<=0)
-479 -4988 0
-635 -4988 0
-635 -479 -4989 0
c (0<=( - aux569 + SATLiteral(635) + SATLiteral(479)))
479 4989 0
635 4989 0
635 479 4988 0
c ((SATLiteral(376) - aux570 + SATLiteral(496))<=0)
-496 -4991 0
-376 -4991 0
-376 -496 -4992 0
c (0<=(SATLiteral(376) - aux570 + SATLiteral(496)))
496 4992 0
376 4992 0
376 496 4991 0
c (( - aux571 + SATLiteral(652) + SATLiteral(669))<=0)
-669 -4994 0
-652 -4994 0
-652 -669 -4995 0
c (0<=( - aux571 + SATLiteral(652) + SATLiteral(669)))
669 4995 0
652 4995 0
652 669 4994 0
c ((SATLiteral(307) - aux572 + SATLiteral(445))<=0)
-445 -4997 0
-307 -4997 0
-307 -445 -4998 0
c (0<=(SATLiteral(307) - aux572 + SATLiteral(445)))
445 4998 0
307 4998 0
307 445 4997 0
c (( - aux573 + SATLiteral(117) + SATLiteral(428))<=0)
-428 -5000 0
-117 -5000 0
-117 -428 -5001 0
c (0<=( - aux573 + SATLiteral(117) + SATLiteral(428)))
428 5001 0
117 5001 0
117 428 5000 0
c (( - aux574 + SATLiteral(686) + SATLiteral(411))<=0)
-411 -5003 0
-686 -5003 0
-686 -411 -5004 0
c (0<=( - aux574 + SATLiteral(686) + SATLiteral(411)))
411 5004 0
686 5004 0
686 411 5003 0
c (( - aux575 + SATLiteral(188) + SATLiteral(394))<=0)
-394 -5006 0
-188 -5006 0
-188 -394 -5007 0
c (0<=( - aux575 + SATLiteral(188) + SATLiteral(394)))
394 5007 0
188 5007 0
188 394 5006 0
c (( - aux576 + SATLiteral(135) + SATLiteral(290))<=0)
-290 -5009 0
-135 -5009 0
-135 -290 -5010 0
c (0<=( - aux576 + SATLiteral(135) + SATLiteral(290)))
290 5010 0
135 5010 0
135 290 5009 0
c (( - aux577 + SATLiteral(205) + SATLiteral(273))<=0)
-273 -5012 0
-205 -5012 0
-205 -273 -5013 0
c (0<=( - aux577 + SATLiteral(205) + SATLiteral(273)))
273 5013 0
205 5013 0
205 273 5012 0
c (( - aux578 + SATLiteral(222) + SATLiteral(256))<=0)
-256 -5015 0
-222 -5015 0
-222 -256 -5016 0
c (0<=( - aux578 + SATLiteral(222) + SATLiteral(256)))
256 5016 0
222 5016 0
222 256 5015 0
c ((SATLiteral(548) - aux579 + SATLiteral(239))<=0)
-239 -5018 0
-548 -5018 0
-548 -239 -5019 0
c (0<=(SATLiteral(548) - aux579 + SATLiteral(239)))
239 5019 0
548 5019 0
548 239 5018 0
c ((SATLiteral(325) - aux580 + SATLiteral(152))<=0)
-152 -5021 0
-325 -5021 0
-325 -152 -5022 0
c (0<=(SATLiteral(325) - aux580 + SATLiteral(152)))
152 5022 0
325 5022 0
325 152 5021 0
c ((SATLiteral(342) - aux581 + SATLiteral(170))<=0)
-170 -5024 0
-342 -5024 0
-342 -170 -5025 0
c (0<=(SATLiteral(342) - aux581 + SATLiteral(170)))
170 5025 0
342 5025 0
342 170 5024 0
c (( - aux582 + SATLiteral(584) + SATLiteral(601))<=0)
-601 -5027 0
-584 -5027 0
-584 -601 -5028 0
c (0<=( - aux582 + SATLiteral(584) + SATLiteral(601)))
601 5028 0
584 5028 0
584 601 5027 0
c ((aux570 + aux582 - aux583)<=0)
5027 -5030 0
5028 -5031 0
4991 -5030 0
4991 5027 -5031 0
4991 5028 -5033 0
4992 -5031 0
4992 5027 -5033 0
4992 5028 -5035 0
c (0<=(aux570 + aux582 - aux583))
-5028 5035 0
-5027 5033 0
-4992 5035 0
-4992 -5028 5033 0
-4992 -5027 5031 0
-4991 5033 0
-4991 -5028 5031 0
-4991 -5027 5030 0
c ((aux564 + aux577 - aux584)<=0)
5012 -5037 0
5013 -5038 0
4973 -5037 0
4973 5012 -5038 0
4973 5013 -5040 0
4974 -5038 0
4974 5012 -5040 0
4974 5013 -5042 0
c (0<=(aux564 + aux577 - aux584))
-5013 5042 0
-5012 5040 0
-4974 5042 0
-4974 -5013 5040 0
-4974 -5012 5038 0
-4973 5040 0
-4973 -5013 5038 0
-4973 -5012 5037 0
c ((aux563 + aux568 - aux585)<=0)
4985 -5044 0
4986 -5045 0
4970 -5044 0
4970 4985 -5045 0
4970 4986 -5047 0
4971 -5045 0
4971 4985 -5047 0
4971 4986 -5049 0
c (0<=(aux563 + aux568 - aux585))
-4986 5049 0
-4985 5047 0
-4971 5049 0
-4971 -4986 5047 0
-4971 -4985 5045 0
-4970 5047 0
-4970 -4986 5045 0
-4970 -4985 5044 0
c ((aux565 + aux566 - aux586)<=0)
4979 -5051 0
4980 -5052 0
4976 -5051 0
4976 4979 -5052 0
4976 4980 -5054 0
4977 -5052 0
4977 4979 -5054 0
4977 4980 -5056 0
c (0<=(aux565 + aux566 - aux586))
-4980 5056 0
-4979 5054 0
-4977 5056 0
-4977 -4980 5054 0
-4977 -4979 5052 0
-4976 5054 0
-4976 -4980 5052 0
-4976 -4979 5051 0
c ((aux567 + aux569 - aux587)<=0)
4988 -5058 0
4989 -5059 0
4982 -5058 0
4982 4988 -5059 0
4982 4989 -5061 0
4983 -5059 0
4983 4988 -5061 0
4983 4989 -5063 0
c (0<=(aux567 + aux569 - aux587))
-4989 5063 0
-4988 5061 0
-4983 5063 0
-4983 -4989 5061 0
-4983 -4988 5059 0
-4982 5061 0
-4982 -4989 5059 0
-4982 -4988 5058 0
c ((aux576 + aux580 - aux588)<=0)
5021 -5065 0
5022 -5066 0
5009 -5065 0
5009 5021 -5066 0
5009 5022 -5068 0
5010 -5066 0
5010 5021 -5068 0
5010 5022 -5070 0
c (0<=(aux576 + aux580 - aux588))
-5022 5070 0
-5021 5068 0
-5010 5070 0
-5010 -5022 5068 0
-5010 -5021 5066 0
-5009 5068 0
-5009 -5022 5066 0
-5009 -5021 5065 0
c ((aux572 + aux573 - aux589)<=0)
5000 -5072 0
5001 -5073 0
4997 -5072 0
4997 5000 -5073 0
4997 5001 -5075 0
4998 -5073 0
4998 5000 -5075 0
4998 5001 -5077 0
c (0<=(aux572 + aux573 - aux589))
-5001 5077 0
-5000 5075 0
-4998 5077 0
-4998 -5001 5075 0
-4998 -5000 5073 0
-4997 5075 0
-4997 -5001 5073 0
-4997 -5000 5072 0
c ((aux574 + aux575 - aux590)<=0)
5006 -5079 0
5007 -5080 0
5003 -5079 0
5003 5006 -5080 0
5003 5007 -5082 0
5004 -5080 0
5004 5006 -5082 0
5004 5007 -5084 0
c (0<=(aux574 + aux575 - aux590))
-5007 5084 0
-5006 5082 0
-5004 5084 0
-5004 -5007 5082 0
-5004 -5006 5080 0
-5003 5082 0
-5003 -5007 5080 0
-5003 -5006 5079 0
c ((aux578 + aux581 - aux591)<=0)
5024 -5086 0
5025 -5087 0
5015 -5086 0
5015 5024 -5087 0
5015 5025 -5089 0
5016 -5087 0
5016 5024 -5089 0
5016 5025 -5091 0
c (0<=(aux578 + aux581 - aux591))
-5025 5091 0
-5024 5089 0
-5016 5091 0
-5016 -5025 5089 0
-5016 -5024 5087 0
-5015 5089 0
-5015 -5025 5087 0
-5015 -5024 5086 0
c ((aux571 + aux579 - aux592)<=0)
5018 -5093 0
5019 -5094 0
4994 -5093 0
4994 5018 -5094 0
4994 5019 -5096 0
4995 -5094 0
4995 5018 -5096 0
4995 5019 -5098 0
c (0<=(aux571 + aux579 - aux592))
-5019 5098 0
-5018 5096 0
-4995 5098 0
-4995 -5019 5096 0
-4995 -5018 5094 0
-4994 5096 0
-4994 -5019 5094 0
-4994 -5018 5093 0
c ((aux586 + aux592 - aux593)<=0)
5093 -5100 0
5094 -5101 0
5096 -5103 0
5098 -5105 0
5051 -5100 0
5051 5093 -5101 0
5051 5094 -5103 0
5051 5096 -5105 0
5051 5098 -5107 0
5052 -5101 0
5052 5093 -5103 0
5052 5094 -5105 0
5052 5096 -5107 0
5052 5098 -5109 0
5054 -5103 0
5054 5093 -5105 0
5054 5094 -5107 0
5054 5096 -5109 0
5054 5098 -5111 0
5056 -5105 0
5056 5093 -5107 0
5056 5094 -5109 0
5056 5096 -5111 0
5056 5098 -5113 0
c (0<=(aux586 + aux592 - aux593))
-5098 5113 0
-5096 5111 0
-5094 5109 0
-5093 5107 0
-5056 5113 0
-5056 -5098 5111 0
-5056 -5096 5109 0
-5056 -5094 5107 0
-5056 -5093 5105 0
-5054 5111 0
-5054 -5098 5109 0
-5054 -5096 5107 0
-5054 -5094 5105 0
-5054 -5093 5103 0
-5052 5109 0
-5052 -5098 5107 0
-5052 -5096 5105 0
-5052 -5094 5103 0
-5052 -5093 5101 0
-5051 5107 0
-5051 -5098 5105 0
-5051 -5096 5103 0
-5051 -5094 5101 0
-5051 -5093 5100 0
c ((aux585 + aux589 - aux594)<=0)
5072 -5115 0
5073 -5116 0
5075 -5118 0
5077 -5120 0
5044 -5115 0
5044 5072 -5116 0
5044 5073 -5118 0
5044 5075 -5120 0
5044 5077 -5122 0
5045 -5116 0
5045 5072 -5118 0
5045 5073 -5120 0
5045 5075 -5122 0
5045 5077 -5124 0
5047 -5118 0
5047 5072 -5120 0
5047 5073 -5122 0
5047 5075 -5124 0
5047 5077 -5126 0
5049 -5120 0
5049 5072 -5122 0
5049 5073 -5124 0
5049 5075 -5126 0
5049 5077 -5128 0
c (0<=(aux585 + aux589 - aux594))
-5077 5128 0
-5075 5126 0
-5073 5124 0
-5072 5122 0
-5049 5128 0
-5049 -5077 5126 0
-5049 -5075 5124 0
-5049 -5073 5122 0
-5049 -5072 5120 0
-5047 5126 0
-5047 -5077 5124 0
-5047 -5075 5122 0
-5047 -5073 5120 0
-5047 -5072 5118 0
-5045 5124 0
-5045 -5077 5122 0
-5045 -5075 5120 0
-5045 -5073 5118 0
-5045 -5072 5116 0
-5044 5122 0
-5044 -5077 5120 0
-5044 -5075 5118 0
-5044 -5073 5116 0
-5044 -5072 5115 0
c ((aux583 + aux584 - aux595)<=0)
5037 -5130 0
5038 -5131 0
5040 -5133 0
5042 -5135 0
5030 -5130 0
5030 5037 -5131 0
5030 5038 -5133 0
5030 5040 -5135 0
5030 5042 -5137 0
5031 -5131 0
5031 5037 -5133 0
5031 5038 -5135 0
5031 5040 -5137 0
5031 5042 -5139 0
5033 -5133 0
5033 5037 -5135 0
5033 5038 -5137 0
5033 5040 -5139 0
5033 5042 -5141 0
5035 -5135 0
5035 5037 -5137 0
5035 5038 -5139 0
5035 5040 -5141 0
5035 5042 -5143 0
c (0<=(aux583 + aux584 - aux595))
-5042 5143 0
-5040 5141 0
-5038 5139 0
-5037 5137 0
-5035 5143 0
-5035 -5042 5141 0
-5035 -5040 5139 0
-5035 -5038 5137 0
-5035 -5037 5135 0
-5033 5141 0
-5033 -5042 5139 0
-5033 -5040 5137 0
-5033 -5038 5135 0
-5033 -5037 5133 0
-5031 5139 0
-5031 -5042 5137 0
-5031 -5040 5135 0
-5031 -5038 5133 0
-5031 -5037 5131 0
-5030 5137 0
-5030 -5042 5135 0
-5030 -5040 5133 0
-5030 -5038 5131 0
-5030 -5037 5130 0
c ((aux587 + aux588 - aux596)<=0)
5065 -5145 0
5066 -5146 0
5068 -5148 0
5070 -5150 0
5058 -5145 0
5058 5065 -5146 0
5058 5066 -5148 0
5058 5068 -5150 0
5058 5070 -5152 0
5059 -5146 0
5059 5065 -5148 0
5059 5066 -5150 0
5059 5068 -5152 0
5059 5070 -5154 0
5061 -5148 0
5061 5065 -5150 0
5061 5066 -5152 0
5061 5068 -5154 0
5061 5070 -5156 0
5063 -5150 0
5063 5065 -5152 0
5063 5066 -5154 0
5063 5068 -5156 0
5063 5070 -5158 0
c (0<=(aux587 + aux588 - aux596))
-5070 5158 0
-5068 5156 0
-5066 5154 0
-5065 5152 0
-5063 5158 0
-5063 -5070 5156 0
-5063 -5068 5154 0
-5063 -5066 5152 0
-5063 -5065 5150 0
-5061 5156 0
-5061 -5070 5154 0
-5061 -5068 5152 0
-5061 -5066 5150 0
-5061 -5065 5148 0
-5059 5154 0
-5059 -5070 5152 0
-5059 -5068 5150 0
-5059 -5066 5148 0
-5059 -5065 5146 0
-5058 5152 0
-5058 -5070 5150 0
-5058 -5068 5148 0
-5058 -5066 5146 0
-5058 -5065 5145 0
c ((aux590 + aux591 - aux597)<=0)
5086 -5160 0
5087 -5161 0
5089 -5163 0
5091 -5165 0
5079 -5160 0
5079 5086 -5161 0
5079 5087 -5163 0
5079 5089 -5165 0
5079 5091 -5167 0
5080 -5161 0
5080 5086 -5163 0
5080 5087 -5165 0
5080 5089 -5167 0
5080 5091 -5169 0
5082 -5163 0
5082 5086 -5165 0
5082 5087 -5167 0
5082 5089 -5169 0
5082 5091 -5171 0
5084 -5165 0
5084 5086 -5167 0
5084 5087 -5169 0
5084 5089 -5171 0
5084 5091 -5173 0
c (0<=(aux590 + aux591 - aux597))
-5091 5173 0
-5089 5171 0
-5087 5169 0
-5086 5167 0
-5084 5173 0
-5084 -5091 5171 0
-5084 -5089 5169 0
-5084 -5087 5167 0
-5084 -5086 5165 0
-5082 5171 0
-5082 -5091 5169 0
-5082 -5089 5167 0
-5082 -5087 5165 0
-5082 -5086 5163 0
-5080 5169 0
-5080 -5091 5167 0
-5080 -5089 5165 0
-5080 -5087 5163 0
-5080 -5086 5161 0
-5079 5167 0
-5079 -5091 5165 0
-5079 -5089 5163 0
-5079 -5087 5161 0
-5079 -5086 5160 0
c ((aux594 + aux597 - aux598)<=0)
5160 -5175 0
5161 -5176 0
5163 -5178 0
5165 -5180 0
5167 -5182 0
5169 -5184 0
5171 -5186 0
5173 -5188 0
5115 -5175 0
5115 5160 -5176 0
5115 5161 -5178 0
5115 5163 -5180 0
5115 5165 -5182 0
5115 5167 -5184 0
5115 5169 -5186 0
5115 5171 -5188 0
5115 5173 -5190 0
5116 -5176 0
5116 5160 -5178 0
5116 5161 -5180 0
5116 5163 -5182 0
5116 5165 -5184 0
5116 5167 -5186 0
5116 5169 -5188 0
5116 5171 -5190 0
5116 5173 -5192 0
5118 -5178 0
5118 5160 -5180 0
5118 5161 -5182 0
5118 5163 -5184 0
5118 5165 -5186 0
5118 5167 -5188 0
5118 5169 -5190 0
5118 5171 -5192 0
5118 5173 -5194 0
5120 -5180 0
5120 5160 -5182 0
5120 5161 -5184 0
5120 5163 -5186 0
5120 5165 -5188 0
5120 5167 -5190 0
5120 5169 -5192 0
5120 5171 -5194 0
5120 5173 -5196 0
5122 -5182 0
5122 5160 -5184 0
5122 5161 -5186 0
5122 5163 -5188 0
5122 5165 -5190 0
5122 5167 -5192 0
5122 5169 -5194 0
5122 5171 -5196 0
5122 5173 -5198 0
5124 -5184 0
5124 5160 -5186 0
5124 5161 -5188 0
5124 5163 -5190 0
5124 5165 -5192 0
5124 5167 -5194 0
5124 5169 -5196 0
5124 5171 -5198 0
5124 5173 -5200 0
5126 -5186 0
5126 5160 -5188 0
5126 5161 -5190 0
5126 5163 -5192 0
5126 5165 -5194 0
5126 5167 -5196 0
5126 5169 -5198 0
5126 5171 -5200 0
5126 5173 -5202 0
5128 -5188 0
5128 5160 -5190 0
5128 5161 -5192 0
5128 5163 -5194 0
5128 5165 -5196 0
5128 5167 -5198 0
5128 5169 -5200 0
5128 5171 -5202 0
5128 5173 -5204 0
c (0<=(aux594 + aux597 - aux598))
-5173 5204 0
-5171 5202 0
-5169 5200 0
-5167 5198 0
-5165 5196 0
-5163 5194 0
-5161 5192 0
-5160 5190 0
-5128 5204 0
-5128 -5173 5202 0
-5128 -5171 5200 0
-5128 -5169 5198 0
-5128 -5167 5196 0
-5128 -5165 5194 0
-5128 -5163 5192 0
-5128 -5161 5190 0
-5128 -5160 5188 0
-5126 5202 0
-5126 -5173 5200 0
-5126 -5171 5198 0
-5126 -5169 5196 0
-5126 -5167 5194 0
-5126 -5165 5192 0
-5126 -5163 5190 0
-5126 -5161 5188 0
-5126 -5160 5186 0
-5124 5200 0
-5124 -5173 5198 0
-5124 -5171 5196 0
-5124 -5169 5194 0
-5124 -5167 5192 0
-5124 -5165 5190 0
-5124 -5163 5188 0
-5124 -5161 5186 0
-5124 -5160 5184 0
-5122 5198 0
-5122 -5173 5196 0
-5122 -5171 5194 0
-5122 -5169 5192 0
-5122 -5167 5190 0
-5122 -5165 5188 0
-5122 -5163 5186 0
-5122 -5161 5184 0
-5122 -5160 5182 0
-5120 5196 0
-5120 -5173 5194 0
-5120 -5171 5192 0
-5120 -5169 5190 0
-5120 -5167 5188 0
-5120 -5165 5186 0
-5120 -5163 5184 0
-5120 -5161 5182 0
-5120 -5160 5180 0
-5118 5194 0
-5118 -5173 5192 0
-5118 -5171 5190 0
-5118 -5169 5188 0
-5118 -5167 5186 0
-5118 -5165 5184 0
-5118 -5163 5182 0
-5118 -5161 5180 0
-5118 -5160 5178 0
-5116 5192 0
-5116 -5173 5190 0
-5116 -5171 5188 0
-5116 -5169 5186 0
-5116 -5167 5184 0
-5116 -5165 5182 0
-5116 -5163 5180 0
-5116 -5161 5178 0
-5116 -5160 5176 0
-5115 5190 0
-5115 -5173 5188 0
-5115 -5171 5186 0
-5115 -5169 5184 0
-5115 -5167 5182 0
-5115 -5165 5180 0
-5115 -5163 5178 0
-5115 -5161 5176 0
-5115 -5160 5175 0
c ((aux593 + aux595 - aux599)<=0)
5130 -5206 0
5131 -5207 0
5133 -5209 0
5135 -5211 0
5137 -5213 0
5139 -5215 0
5141 -5217 0
5143 -5219 0
5100 -5206 0
5100 5130 -5207 0
5100 5131 -5209 0
5100 5133 -5211 0
5100 5135 -5213 0
5100 5137 -5215 0
5100 5139 -5217 0
5100 5141 -5219 0
5100 5143 -5221 0
5101 -5207 0
5101 5130 -5209 0
5101 5131 -5211 0
5101 5133 -5213 0
5101 5135 -5215 0
5101 5137 -5217 0
5101 5139 -5219 0
5101 5141 -5221 0
5101 5143 -5223 0
5103 -5209 0
5103 5130 -5211 0
5103 5131 -5213 0
5103 5133 -5215 0
5103 5135 -5217 0
5103 5137 -5219 0
5103 5139 -5221 0
5103 5141 -5223 0
5103 5143 -5225 0
5105 -5211 0
5105 5130 -5213 0
5105 5131 -5215 0
5105 5133 -5217 0
5105 5135 -5219 0
5105 5137 -5221 0
5105 5139 -5223 0
5105 5141 -5225 0
5105 5143 -5227 0
5107 -5213 0
5107 5130 -5215 0
5107 5131 -5217 0
5107 5133 -5219 0
5107 5135 -5221 0
5107 5137 -5223 0
5107 5139 -5225 0
5107 5141 -5227 0
5107 5143 -5229 0
5109 -5215 0
5109 5130 -5217 0
5109 5131 -5219 0
5109 5133 -5221 0
5109 5135 -5223 0
5109 5137 -5225 0
5109 5139 -5227 0
5109 5141 -5229 0
5109 5143 -5231 0
5111 -5217 0
5111 5130 -5219 0
5111 5131 -5221 0
5111 5133 -5223 0
5111 5135 -5225 0
5111 5137 -5227 0
5111 5139 -5229 0
5111 5141 -5231 0
5111 5143 -5233 0
5113 -5219 0
5113 5130 -5221 0
5113 5131 -5223 0
5113 5133 -5225 0
5113 5135 -5227 0
5113 5137 -5229 0
5113 5139 -5231 0
5113 5141 -5233 0
5113 5143 -5235 0
c (0<=(aux593 + aux595 - aux599))
-5143 5235 0
-5141 5233 0
-5139 5231 0
-5137 5229 0
-5135 5227 0
-5133 5225 0
-5131 5223 0
-5130 5221 0
-5113 5235 0
-5113 -5143 5233 0
-5113 -5141 5231 0
-5113 -5139 5229 0
-5113 -5137 5227 0
-5113 -5135 5225 0
-5113 -5133 5223 0
-5113 -5131 5221 0
-5113 -5130 5219 0
-5111 5233 0
-5111 -5143 5231 0
-5111 -5141 5229 0
-5111 -5139 5227 0
-5111 -5137 5225 0
-5111 -5135 5223 0
-5111 -5133 5221 0
-5111 -5131 5219 0
-5111 -5130 5217 0
-5109 5231 0
-5109 -5143 5229 0
-5109 -5141 5227 0
-5109 -5139 5225 0
-5109 -5137 5223 0
-5109 -5135 5221 0
-5109 -5133 5219 0
-5109 -5131 5217 0
-5109 -5130 5215 0
-5107 5229 0
-5107 -5143 5227 0
-5107 -5141 5225 0
-5107 -5139 5223 0
-5107 -5137 5221 0
-5107 -5135 5219 0
-5107 -5133 5217 0
-5107 -5131 5215 0
-5107 -5130 5213 0
-5105 5227 0
-5105 -5143 5225 0
-5105 -5141 5223 0
-5105 -5139 5221 0
-5105 -5137 5219 0
-5105 -5135 5217 0
-5105 -5133 5215 0
-5105 -5131 5213 0
-5105 -5130 5211 0
-5103 5225 0
-5103 -5143 5223 0
-5103 -5141 5221 0
-5103 -5139 5219 0
-5103 -5137 5217 0
-5103 -5135 5215 0
-5103 -5133 5213 0
-5103 -5131 5211 0
-5103 -5130 5209 0
-5101 5223 0
-5101 -5143 5221 0
-5101 -5141 5219 0
-5101 -5139 5217 0
-5101 -5137 5215 0
-5101 -5135 5213 0
-5101 -5133 5211 0
-5101 -5131 5209 0
-5101 -5130 5207 0
-5100 5221 0
-5100 -5143 5219 0
-5100 -5141 5217 0
-5100 -5139 5215 0
-5100 -5137 5213 0
-5100 -5135 5211 0
-5100 -5133 5209 0
-5100 -5131 5207 0
-5100 -5130 5206 0
c ((SATLiteral(515) - aux600 + SATLiteral(102))<=0)
-102 -5237 0
-515 -5237 0
-515 -102 -5238 0
c (0<=(SATLiteral(515) - aux600 + SATLiteral(102)))
102 5238 0
515 5238 0
515 102 5237 0
c ((SATLiteral(533) - aux601 + SATLiteral(85))<=0)
-85 -5240 0
-533 -5240 0
-533 -85 -5241 0
c (0<=(SATLiteral(533) - aux601 + SATLiteral(85)))
85 5241 0
533 5241 0
533 85 5240 0
c ((SATLiteral(568) - aux602 + SATLiteral(68))<=0)
-68 -5243 0
-568 -5243 0
-568 -68 -5244 0
c (0<=(SATLiteral(568) - aux602 + SATLiteral(68)))
68 5244 0
568 5244 0
568 68 5243 0
c ((SATLiteral(361) - aux603 + SATLiteral(51))<=0)
-51 -5246 0
-361 -5246 0
-361 -51 -5247 0
c (0<=(SATLiteral(361) - aux603 + SATLiteral(51)))
51 5247 0
361 5247 0
361 51 5246 0
c (( - aux604 + SATLiteral(620) + SATLiteral(34))<=0)
-34 -5249 0
-620 -5249 0
-620 -34 -5250 0
c (0<=( - aux604 + SATLiteral(620) + SATLiteral(34)))
34 5250 0
620 5250 0
620 34 5249 0
c (( - aux605 + SATLiteral(464) + SATLiteral(17))<=0)
-17 -5252 0
-464 -5252 0
-464 -17 -5253 0
c (0<=( - aux605 + SATLiteral(464) + SATLiteral(17)))
17 5253 0
464 5253 0
464 17 5252 0
c (( - aux606 + SATLiteral(637) + SATLiteral(481))<=0)
-481 -5255 0
-637 -5255 0
-637 -481 -5256 0
c (0<=( - aux606 + SATLiteral(637) + SATLiteral(481)))
481 5256 0
637 5256 0
637 481 5255 0
c ((SATLiteral(378) - aux607 + SATLiteral(498))<=0)
-498 -5258 0
-378 -5258 0
-378 -498 -5259 0
c (0<=(SATLiteral(378) - aux607 + SATLiteral(498)))
498 5259 0
378 5259 0
378 498 5258 0
c (( - aux608 + SATLiteral(654) + SATLiteral(671))<=0)
-671 -5261 0
-654 -5261 0
-654 -671 -5262 0
c (0<=( - aux608 + SATLiteral(654) + SATLiteral(671)))
671 5262 0
654 5262 0
654 671 5261 0
c ((SATLiteral(309) - aux609 + SATLiteral(447))<=0)
-447 -5264 0
-309 -5264 0
-309 -447 -5265 0
c (0<=(SATLiteral(309) - aux609 + SATLiteral(447)))
447 5265 0
309 5265 0
309 447 5264 0
c (( - aux610 + SATLiteral(119) + SATLiteral(430))<=0)
-430 -5267 0
-119 -5267 0
-119 -430 -5268 0
c (0<=( - aux610 + SATLiteral(119) + SATLiteral(430)))
430 5268 0
119 5268 0
119 430 5267 0
c (( - aux611 + SATLiteral(688) + SATLiteral(413))<=0)
-413 -5270 0
-688 -5270 0
-688 -413 -5271 0
c (0<=( - aux611 + SATLiteral(688) + SATLiteral(413)))
413 5271 0
688 5271 0
688 413 5270 0
c (( - aux612 + SATLiteral(190) + SATLiteral(396))<=0)
-396 -5273 0
-190 -5273 0
-190 -396 -5274 0
c (0<=( - aux612 + SATLiteral(190) + SATLiteral(396)))
396 5274 0
190 5274 0
190 396 5273 0
c (( - aux613 + SATLiteral(137) + SATLiteral(292))<=0)
-292 -5276 0
-137 -5276 0
-137 -292 -5277 0
c (0<=( - aux613 + SATLiteral(137) + SATLiteral(292)))
292 5277 0
137 5277 0
137 292 5276 0
c (( - aux614 + SATLiteral(207) + SATLiteral(275))<=0)
-275 -5279 0
-207 -5279 0
-207 -275 -5280 0
c (0<=( - aux614 + SATLiteral(207) + SATLiteral(275)))
275 5280 0
207 5280 0
207 275 5279 0
c (( - aux615 + SATLiteral(224) + SATLiteral(258))<=0)
-258 -5282 0
-224 -5282 0
-224 -258 -5283 0
c (0<=( - aux615 + SATLiteral(224) + SATLiteral(258)))
258 5283 0
224 5283 0
224 258 5282 0
c ((SATLiteral(550) - aux616 + SATLiteral(241))<=0)
-241 -5285 0
-550 -5285 0
-550 -241 -5286 0
c (0<=(SATLiteral(550) - aux616 + SATLiteral(241)))
241 5286 0
550 5286 0
550 241 5285 0
c ((SATLiteral(327) - aux617 + SATLiteral(154))<=0)
-154 -5288 0
-327 -5288 0
-327 -154 -5289 0
c (0<=(SATLiteral(327) - aux617 + SATLiteral(154)))
154 5289 0
327 5289 0
327 154 5288 0
c ((SATLiteral(344) - aux618 + SATLiteral(172))<=0)
-172 -5291 0
-344 -5291 0
-344 -172 -5292 0
c (0<=(SATLiteral(344) - aux618 + SATLiteral(172)))
172 5292 0
344 5292 0
344 172 5291 0
c (( - aux619 + SATLiteral(586) + SATLiteral(603))<=0)
-603 -5294 0
-586 -5294 0
-586 -603 -5295 0
c (0<=( - aux619 + SATLiteral(586) + SATLiteral(603)))
603 5295 0
586 5295 0
586 603 5294 0
c ((aux607 + aux619 - aux620)<=0)
5294 -5297 0
5295 -5298 0
5258 -5297 0
5258 5294 -5298 0
5258 5295 -5300 0
5259 -5298 0
5259 5294 -5300 0
5259 5295 -5302 0
c (0<=(aux607 + aux619 - aux620))
-5295 5302 0
-5294 5300 0
-5259 5302 0
-5259 -5295 5300 0
-5259 -5294 5298 0
-5258 5300 0
-5258 -5295 5298 0
-5258 -5294 5297 0
c ((aux601 + aux614 - aux621)<=0)
5279 -5304 0
5280 -5305 0
5240 -5304 0
5240 5279 -5305 0
5240 5280 -5307 0
5241 -5305 0
5241 5279 -5307 0
5241 5280 -5309 0
c (0<=(aux601 + aux614 - aux621))
-5280 5309 0
-5279 5307 0
-5241 5309 0
-5241 -5280 5307 0
-5241 -5279 5305 0
-5240 5307 0
-5240 -5280 5305 0
-5240 -5279 5304 0
c ((aux600 + aux605 - aux622)<=0)
5252 -5311 0
5253 -5312 0
5237 -5311 0
5237 5252 -5312 0
5237 5253 -5314 0
5238 -5312 0
5238 5252 -5314 0
5238 5253 -5316 0
c (0<=(aux600 + aux605 - aux622))
-5253 5316 0
-5252 5314 0
-5238 5316 0
-5238 -5253 5314 0
-5238 -5252 5312 0
-5237 5314 0
-5237 -5253 5312 0
-5237 -5252 5311 0
c ((aux602 + aux603 - aux623)<=0)
5246 -5318 0
5247 -5319 0
5243 -5318 0
5243 5246 -5319 0
5243 5247 -5321 0
5244 -5319 0
5244 5246 -5321 0
5244 5247 -5323 0
c (0<=(aux602 + aux603 - aux623))
-5247 5323 0
-5246 5321 0
-5244 5323 0
-5244 -5247 5321 0
-5244 -5246 5319 0
-5243 5321 0
-5243 -5247 5319 0
-5243 -5246 5318 0
c ((aux604 + aux606 - aux624)<=0)
5255 -5325 0
5256 -5326 0
5249 -5325 0
5249 5255 -5326 0
5249 5256 -5328 0
5250 -5326 0
5250 5255 -5328 0
5250 5256 -5330 0
c (0<=(aux604 + aux606 - aux624))
-5256 5330 0
-5255 5328 0
-5250 5330 0
-5250 -5256 5328 0
-5250 -5255 5326 0
-5249 5328 0
-5249 -5256 5326 0
-5249 -5255 5325 0
c ((aux613 + aux617 - aux625)<=0)
5288 -5332 0
5289 -5333 0
5276 -5332 0
5276 5288 -5333 0
5276 5289 -5335 0
5277 -5333 0
5277 5288 -5335 0
5277 5289 -5337 0
c (0<=(aux613 + aux617 - aux625))
-5289 5337 0
-5288 5335 0
-5277 5337 0
-5277 -5289 5335 0
-5277 -5288 5333 0
-5276 5335 0
-5276 -5289 5333 0
-5276 -5288 5332 0
c ((aux609 + aux610 - aux626)<=0)
5267 -5339 0
5268 -5340 0
5264 -5339 0
5264 5267 -5340 0
5264 5268 -5342 0
5265 -5340 0
5265 5267 -5342 0
5265 5268 -5344 0
c (0<=(aux609 + aux610 - aux626))
-5268 5344 0
-5267 5342 0
-5265 5344 0
-5265 -5268 5342 0
-5265 -5267 5340 0
-5264 5342 0
-5264 -5268 5340 0
-5264 -5267 5339 0
c ((aux611 + aux612 - aux627)<=0)
5273 -5346 0
5274 -5347 0
5270 -5346 0
5270 5273 -5347 0
5270 5274 -5349 0
5271 -5347 0
5271 5273 -5349 0
5271 5274 -5351 0
c (0<=(aux611 + aux612 - aux627))
-5274 5351 0
-5273 5349 0
-5271 5351 0
-5271 -5274 5349 0
-5271 -5273 5347 0
-5270 5349 0
-5270 -5274 5347 0
-5270 -5273 5346 0
c ((aux615 + aux618 - aux628)<=0)
5291 -5353 0
5292 -5354 0
5282 -5353 0
5282 5291 -5354 0
5282 5292 -5356 0
5283 -5354 0
5283 5291 -5356 0
5283 5292 -5358 0
c (0<=(aux615 + aux618 - aux628))
-5292 5358 0
-5291 5356 0
-5283 5358 0
-5283 -5292 5356 0
-5283 -5291 5354 0
-5282 5356 0
-5282 -5292 5354 0
-5282 -5291 5353 0
c ((aux608 + aux616 - aux629)<=0)
5285 -5360 0
5286 -5361 0
5261 -5360 0
5261 5285 -5361 0
5261 5286 -5363 0
5262 -5361 0
5262 5285 -5363 0
5262 5286 -5365 0
c (0<=(aux608 + aux616 - aux629))
-5286 5365 0
-5285 5363 0
-5262 5365 0
-5262 -5286 5363 0
-5262 -5285 5361 0
-5261 5363 0
-5261 -5286 5361 0
-5261 -5285 5360 0
c ((aux623 + aux629 - aux630)<=0)
5360 -5367 0
5361 -5368 0
5363 -5370 0
5365 -5372 0
5318 -5367 0
5318 5360 -5368 0
5318 5361 -5370 0
5318 5363 -5372 0
5318 5365 -5374 0
5319 -5368 0
5319 5360 -5370 0
5319 5361 -5372 0
5319 5363 -5374 0
5319 5365 -5376 0
5321 -5370 0
5321 5360 -5372 0
5321 5361 -5374 0
5321 5363 -5376 0
5321 5365 -5378 0
5323 -5372 0
5323 5360 -5374 0
5323 5361 -5376 0
5323 5363 -5378 0
5323 5365 -5380 0
c (0<=(aux623 + aux629 - aux630))
-5365 5380 0
-5363 5378 0
-5361 5376 0
-5360 5374 0
-5323 5380 0
-5323 -5365 5378 0
-5323 -5363 5376 0
-5323 -5361 5374 0
-5323 -5360 5372 0
-5321 5378 0
-5321 -5365 5376 0
-5321 -5363 5374 0
-5321 -5361 5372 0
-5321 -5360 5370 0
-5319 5376 0
-5319 -5365 5374 0
-5319 -5363 5372 0
-5319 -5361 5370 0
-5319 -5360 5368 0
-5318 5374 0
-5318 -5365 5372 0
-5318 -5363 5370 0
-5318 -5361 5368 0
-5318 -5360 5367 0
c ((aux622 + aux626 - aux631)<=0)
5339 -5382 0
5340 -5383 0
5342 -5385 0
5344 -5387 0
5311 -5382 0
5311 5339 -5383 0
5311 5340 -5385 0
5311 5342 -5387 0
5311 5344 -5389 0
5312 -5383 0
5312 5339 -5385 0
5312 5340 -5387 0
5312 5342 -5389 0
5312 5344 -5391 0
5314 -5385 0
5314 5339 -5387 0
5314 5340 -5389 0
5314 5342 -5391 0
5314 5344 -5393 0
5316 -5387 0
5316 5339 -5389 0
5316 5340 -5391 0
5316 5342 -5393 0
5316 5344 -5395 0
c (0<=(aux622 + aux626 - aux631))
-5344 5395 0
-5342 5393 0
-5340 5391 0
-5339 5389 0
-5316 5395 0
-5316 -5344 5393 0
-5316 -5342 5391 0
-5316 -5340 5389 0
-5316 -5339 5387 0
-5314 5393 0
-5314 -5344 5391 0
-5314 -5342 5389 0
-5314 -5340 5387 0
-5314 -5339 5385 0
-5312 5391 0
-5312 -5344 5389 0
-5312 -5342 5387 0
-5312 -5340 5385 0
-5312 -5339 5383 0
-5311 5389 0
-5311 -5344 5387 0
-5311 -5342 5385 0
-5311 -5340 5383 0
-5311 -5339 5382 0
c ((aux620 + aux621 - aux632)<=0)
5304 -5397 0
5305 -5398 0
5307 -5400 0
5309 -5402 0
5297 -5397 0
5297 5304 -5398 0
5297 5305 -5400 0
5297 5307 -5402 0
5297 5309 -5404 0
5298 -5398 0
5298 5304 -5400 0
5298 5305 -5402 0
5298 5307 -5404 0
5298 5309 -5406 0
5300 -5400 0
5300 5304 -5402 0
5300 5305 -5404 0
5300 5307 -5406 0
5300 5309 -5408 0
5302 -5402 0
5302 5304 -5404 0
5302 5305 -5406 0
5302 5307 -5408 0
5302 5309 -5410 0
c (0<=(aux620 + aux621 - aux632))
-5309 5410 0
-5307 5408 0
-5305 5406 0
-5304 5404 0
-5302 5410 0
-5302 -5309 5408 0
-5302 -5307 5406 0
-5302 -5305 5404 0
-5302 -5304 5402 0
-5300 5408 0
-5300 -5309 5406 0
-5300 -5307 5404 0
-5300 -5305 5402 0
-5300 -5304 5400 0
-5298 5406 0
-5298 -5309 5404 0
-5298 -5307 5402 0
-5298 -5305 5400 0
-5298 -5304 5398 0
-5297 5404 0
-5297 -5309 5402 0
-5297 -5307 5400 0
-5297 -5305 5398 0
-5297 -5304 5397 0
c ((aux624 + aux625 - aux633)<=0)
5332 -5412 0
5333 -5413 0
5335 -5415 0
5337 -5417 0
5325 -5412 0
5325 5332 -5413 0
5325 5333 -5415 0
5325 5335 -5417 0
5325 5337 -5419 0
5326 -5413 0
5326 5332 -5415 0
5326 5333 -5417 0
5326 5335 -5419 0
5326 5337 -5421 0
5328 -5415 0
5328 5332 -5417 0
5328 5333 -5419 0
5328 5335 -5421 0
5328 5337 -5423 0
5330 -5417 0
5330 5332 -5419 0
5330 5333 -5421 0
5330 5335 -5423 0
5330 5337 -5425 0
c (0<=(aux624 + aux625 - aux633))
-5337 5425 0
-5335 5423 0
-5333 5421 0
-5332 5419 0
-5330 5425 0
-5330 -5337 5423 0
-5330 -5335 5421 0
-5330 -5333 5419 0
-5330 -5332 5417 0
-5328 5423 0
-5328 -5337 5421 0
-5328 -5335 5419 0
-5328 -5333 5417 0
-5328 -5332 5415 0
-5326 5421 0
-5326 -5337 5419 0
-5326 -5335 5417 0
-5326 -5333 5415 0
-5326 -5332 5413 0
-5325 5419 0
-5325 -5337 5417 0
-5325 -5335 5415 0
-5325 -5333 5413 0
-5325 -5332 5412 0
c ((aux627 + aux628 - aux634)<=0)
5353 -5427 0
5354 -5428 0
5356 -5430 0
5358 -5432 0
5346 -5427 0
5346 5353 -5428 0
5346 5354 -5430 0
5346 5356 -5432 0
5346 5358 -5434 0
5347 -5428 0
5347 5353 -5430 0
5347 5354 -5432 0
5347 5356 -5434 0
5347 5358 -5436 0
5349 -5430 0
5349 5353 -5432 0
5349 5354 -5434 0
5349 5356 -5436 0
5349 5358 -5438 0
5351 -5432 0
5351 5353 -5434 0
5351 5354 -5436 0
5351 5356 -5438 0
5351 5358 -5440 0
c (0<=(aux627 + aux628 - aux634))
-5358 5440 0
-5356 5438 0
-5354 5436 0
-5353 5434 0
-5351 5440 0
-5351 -5358 5438 0
-5351 -5356 5436 0
-5351 -5354 5434 0
-5351 -5353 5432 0
-5349 5438 0
-5349 -5358 5436 0
-5349 -5356 5434 0
-5349 -5354 5432 0
-5349 -5353 5430 0
-5347 5436 0
-5347 -5358 5434 0
-5347 -5356 5432 0
-5347 -5354 5430 0
-5347 -5353 5428 0
-5346 5434 0
-5346 -5358 5432 0
-5346 -5356 5430 0
-5346 -5354 5428 0
-5346 -5353 5427 0
c ((aux631 + aux634 - aux635)<=0)
5427 -5442 0
5428 -5443 0
5430 -5445 0
5432 -5447 0
5434 -5449 0
5436 -5451 0
5438 -5453 0
5440 -5455 0
5382 -5442 0
5382 5427 -5443 0
5382 5428 -5445 0
5382 5430 -5447 0
5382 5432 -5449 0
5382 5434 -5451 0
5382 5436 -5453 0
5382 5438 -5455 0
5382 5440 -5457 0
5383 -5443 0
5383 5427 -5445 0
5383 5428 -5447 0
5383 5430 -5449 0
5383 5432 -5451 0
5383 5434 -5453 0
5383 5436 -5455 0
5383 5438 -5457 0
5383 5440 -5459 0
5385 -5445 0
5385 5427 -5447 0
5385 5428 -5449 0
5385 5430 -5451 0
5385 5432 -5453 0
5385 5434 -5455 0
5385 5436 -5457 0
5385 5438 -5459 0
5385 5440 -5461 0
5387 -5447 0
5387 5427 -5449 0
5387 5428 -5451 0
5387 5430 -5453 0
5387 5432 -5455 0
5387 5434 -5457 0
5387 5436 -5459 0
5387 5438 -5461 0
5387 5440 -5463 0
5389 -5449 0
5389 5427 -5451 0
5389 5428 -5453 0
5389 5430 -5455 0
5389 5432 -5457 0
5389 5434 -5459 0
5389 5436 -5461 0
5389 5438 -5463 0
5389 5440 -5465 0
5391 -5451 0
5391 5427 -5453 0
5391 5428 -5455 0
5391 5430 -5457 0
5391 5432 -5459 0
5391 5434 -5461 0
5391 5436 -5463 0
5391 5438 -5465 0
5391 5440 -5467 0
5393 -5453 0
5393 5427 -5455 0
5393 5428 -5457 0
5393 5430 -5459 0
5393 5432 -5461 0
5393 5434 -5463 0
5393 5436 -5465 0
5393 5438 -5467 0
5393 5440 -5469 0
5395 -5455 0
5395 5427 -5457 0
5395 5428 -5459 0
5395 5430 -5461 0
5395 5432 -5463 0
5395 5434 -5465 0
5395 5436 -5467 0
5395 5438 -5469 0
5395 5440 -5471 0
c (0<=(aux631 + aux634 - aux635))
-5440 5471 0
-5438 5469 0
-5436 5467 0
-5434 5465 0
-5432 5463 0
-5430 5461 0
-5428 5459 0
-5427 5457 0
-5395 5471 0
-5395 -5440 5469 0
-5395 -5438 5467 0
-5395 -5436 5465 0
-5395 -5434 5463 0
-5395 -5432 5461 0
-5395 -5430 5459 0
-5395 -5428 5457 0
-5395 -5427 5455 0
-5393 5469 0
-5393 -5440 5467 0
-5393 -5438 5465 0
-5393 -5436 5463 0
-5393 -5434 5461 0
-5393 -5432 5459 0
-5393 -5430 5457 0
-5393 -5428 5455 0
-5393 -5427 5453 0
-5391 5467 0
-5391 -5440 5465 0
-5391 -5438 5463 0
-5391 -5436 5461 0
-5391 -5434 5459 0
-5391 -5432 5457 0
-5391 -5430 5455 0
-5391 -5428 5453 0
-5391 -5427 5451 0
-5389 5465 0
-5389 -5440 5463 0
-5389 -5438 5461 0
-5389 -5436 5459 0
-5389 -5434 5457 0
-5389 -5432 5455 0
-5389 -5430 5453 0
-5389 -5428 5451 0
-5389 -5427 5449 0
-5387 5463 0
-5387 -5440 5461 0
-5387 -5438 5459 0
-5387 -5436 5457 0
-5387 -5434 5455 0
-5387 -5432 5453 0
-5387 -5430 5451 0
-5387 -5428 5449 0
-5387 -5427 5447 0
-5385 5461 0
-5385 -5440 5459 0
-5385 -5438 5457 0
-5385 -5436 5455 0
-5385 -5434 5453 0
-5385 -5432 5451 0
-5385 -5430 5449 0
-5385 -5428 5447 0
-5385 -5427 5445 0
-5383 5459 0
-5383 -5440 5457 0
-5383 -5438 5455 0
-5383 -5436 5453 0
-5383 -5434 5451 0
-5383 -5432 5449 0
-5383 -5430 5447 0
-5383 -5428 5445 0
-5383 -5427 5443 0
-5382 5457 0
-5382 -5440 5455 0
-5382 -5438 5453 0
-5382 -5436 5451 0
-5382 -5434 5449 0
-5382 -5432 5447 0
-5382 -5430 5445 0
-5382 -5428 5443 0
-5382 -5427 5442 0
c ((aux630 + aux632 - aux636)<=0)
5397 -5473 0
5398 -5474 0
5400 -5476 0
5402 -5478 0
5404 -5480 0
5406 -5482 0
5408 -5484 0
5410 -5486 0
5367 -5473 0
5367 5397 -5474 0
5367 5398 -5476 0
5367 5400 -5478 0
5367 5402 -5480 0
5367 5404 -5482 0
5367 5406 -5484 0
5367 5408 -5486 0
5367 5410 -5488 0
5368 -5474 0
5368 5397 -5476 0
5368 5398 -5478 0
5368 5400 -5480 0
5368 5402 -5482 0
5368 5404 -5484 0
5368 5406 -5486 0
5368 5408 -5488 0
5368 5410 -5490 0
5370 -5476 0
5370 5397 -5478 0
5370 5398 -5480 0
5370 5400 -5482 0
5370 5402 -5484 0
5370 5404 -5486 0
5370 5406 -5488 0
5370 5408 -5490 0
5370 5410 -5492 0
5372 -5478 0
5372 5397 -5480 0
5372 5398 -5482 0
5372 5400 -5484 0
5372 5402 -5486 0
5372 5404 -5488 0
5372 5406 -5490 0
5372 5408 -5492 0
5372 5410 -5494 0
5374 -5480 0
5374 5397 -5482 0
5374 5398 -5484 0
5374 5400 -5486 0
5374 5402 -5488 0
5374 5404 -5490 0
5374 5406 -5492 0
5374 5408 -5494 0
5374 5410 -5496 0
5376 -5482 0
5376 5397 -5484 0
5376 5398 -5486 0
5376 5400 -5488 0
5376 5402 -5490 0
5376 5404 -5492 0
5376 5406 -5494 0
5376 5408 -5496 0
5376 5410 -5498 0
5378 -5484 0
5378 5397 -5486 0
5378 5398 -5488 0
5378 5400 -5490 0
5378 5402 -5492 0
5378 5404 -5494 0
5378 5406 -5496 0
5378 5408 -5498 0
5378 5410 -5500 0
5380 -5486 0
5380 5397 -5488 0
5380 5398 -5490 0
5380 5400 -5492 0
5380 5402 -5494 0
5380 5404 -5496 0
5380 5406 -5498 0
5380 5408 -5500 0
5380 5410 -5502 0
c (0<=(aux630 + aux632 - aux636))
-5410 5502 0
-5408 5500 0
-5406 5498 0
-5404 5496 0
-5402 5494 0
-5400 5492 0
-5398 5490 0
-5397 5488 0
-5380 5502 0
-5380 -5410 5500 0
-5380 -5408 5498 0
-5380 -5406 5496 0
-5380 -5404 5494 0
-5380 -5402 5492 0
-5380 -5400 5490 0
-5380 -5398 5488 0
-5380 -5397 5486 0
-5378 5500 0
-5378 -5410 5498 0
-5378 -5408 5496 0
-5378 -5406 5494 0
-5378 -5404 5492 0
-5378 -5402 5490 0
-5378 -5400 5488 0
-5378 -5398 5486 0
-5378 -5397 5484 0
-5376 5498 0
-5376 -5410 5496 0
-5376 -5408 5494 0
-5376 -5406 5492 0
-5376 -5404 5490 0
-5376 -5402 5488 0
-5376 -5400 5486 0
-5376 -5398 5484 0
-5376 -5397 5482 0
-5374 5496 0
-5374 -5410 5494 0
-5374 -5408 5492 0
-5374 -5406 5490 0
-5374 -5404 5488 0
-5374 -5402 5486 0
-5374 -5400 5484 0
-5374 -5398 5482 0
-5374 -5397 5480 0
-5372 5494 0
-5372 -5410 5492 0
-5372 -5408 5490 0
-5372 -5406 5488 0
-5372 -5404 5486 0
-5372 -5402 5484 0
-5372 -5400 5482 0
-5372 -5398 5480 0
-5372 -5397 5478 0
-5370 5492 0
-5370 -5410 5490 0
-5370 -5408 5488 0
-5370 -5406 5486 0
-5370 -5404 5484 0
-5370 -5402 5482 0
-5370 -5400 5480 0
-5370 -5398 5478 0
-5370 -5397 5476 0
-5368 5490 0
-5368 -5410 5488 0
-5368 -5408 5486 0
-5368 -5406 5484 0
-5368 -5404 5482 0
-5368 -5402 5480 0
-5368 -5400 5478 0
-5368 -5398 5476 0
-5368 -5397 5474 0
-5367 5488 0
-5367 -5410 5486 0
-5367 -5408 5484 0
-5367 -5406 5482 0
-5367 -5404 5480 0
-5367 -5402 5478 0
-5367 -5400 5476 0
-5367 -5398 5474 0
-5367 -5397 5473 0
c ((SATLiteral(517) - aux637 + SATLiteral(104))<=0)
-104 -5504 0
-517 -5504 0
-517 -104 -5505 0
c (0<=(SATLiteral(517) - aux637 + SATLiteral(104)))
104 5505 0
517 5505 0
517 104 5504 0
c ((SATLiteral(535) - aux638 + SATLiteral(87))<=0)
-87 -5507 0
-535 -5507 0
-535 -87 -5508 0
c (0<=(SATLiteral(535) - aux638 + SATLiteral(87)))
87 5508 0
535 5508 0
535 87 5507 0
c ((SATLiteral(570) - aux639 + SATLiteral(70))<=0)
-70 -5510 0
-570 -5510 0
-570 -70 -5511 0
c (0<=(SATLiteral(570) - aux639 + SATLiteral(70)))
70 5511 0
570 5511 0
570 70 5510 0
c ((SATLiteral(363) - aux640 + SATLiteral(53))<=0)
-53 -5513 0
-363 -5513 0
-363 -53 -5514 0
c (0<=(SATLiteral(363) - aux640 + SATLiteral(53)))
53 5514 0
363 5514 0
363 53 5513 0
c (( - aux641 + SATLiteral(622) + SATLiteral(36))<=0)
-36 -5516 0
-622 -5516 0
-622 -36 -5517 0
c (0<=( - aux641 + SATLiteral(622) + SATLiteral(36)))
36 5517 0
622 5517 0
622 36 5516 0
c (( - aux642 + SATLiteral(466) + SATLiteral(19))<=0)
-19 -5519 0
-466 -5519 0
-466 -19 -5520 0
c (0<=( - aux642 + SATLiteral(466) + SATLiteral(19)))
19 5520 0
466 5520 0
466 19 5519 0
c (( - aux643 + SATLiteral(639) + SATLiteral(483))<=0)
-483 -5522 0
-639 -5522 0
-639 -483 -5523 0
c (0<=( - aux643 + SATLiteral(639) + SATLiteral(483)))
483 5523 0
639 5523 0
639 483 5522 0
c ((SATLiteral(380) - aux644 + SATLiteral(500))<=0)
-500 -5525 0
-380 -5525 0
-380 -500 -5526 0
c (0<=(SATLiteral(380) - aux644 + SATLiteral(500)))
500 5526 0
380 5526 0
380 500 5525 0
c (( - aux645 + SATLiteral(656) + SATLiteral(673))<=0)
-673 -5528 0
-656 -5528 0
-656 -673 -5529 0
c (0<=( - aux645 + SATLiteral(656) + SATLiteral(673)))
673 5529 0
656 5529 0
656 673 5528 0
c ((SATLiteral(311) - aux646 + SATLiteral(449))<=0)
-449 -5531 0
-311 -5531 0
-311 -449 -5532 0
c (0<=(SATLiteral(311) - aux646 + SATLiteral(449)))
449 5532 0
311 5532 0
311 449 5531 0
c (( - aux647 + SATLiteral(121) + SATLiteral(432))<=0)
-432 -5534 0
-121 -5534 0
-121 -432 -5535 0
c (0<=( - aux647 + SATLiteral(121) + SATLiteral(432)))
432 5535 0
121 5535 0
121 432 5534 0
c (( - aux648 + SATLiteral(690) + SATLiteral(415))<=0)
-415 -5537 0
-690 -5537 0
-690 -415 -5538 0
c (0<=( - aux648 + SATLiteral(690) + SATLiteral(415)))
415 5538 0
690 5538 0
690 415 5537 0
c (( - aux649 + SATLiteral(192) + SATLiteral(398))<=0)
-398 -5540 0
-192 -5540 0
-192 -398 -5541 0
c (0<=( - aux649 + SATLiteral(192) + SATLiteral(398)))
398 5541 0
192 5541 0
192 398 5540 0
c (( - aux650 + SATLiteral(139) + SATLiteral(294))<=0)
-294 -5543 0
-139 -5543 0
-139 -294 -5544 0
c (0<=( - aux650 + SATLiteral(139) + SATLiteral(294)))
294 5544 0
139 5544 0
139 294 5543 0
c (( - aux651 + SATLiteral(209) + SATLiteral(277))<=0)
-277 -5546 0
-209 -5546 0
-209 -277 -5547 0
c (0<=( - aux651 + SATLiteral(209) + SATLiteral(277)))
277 5547 0
209 5547 0
209 277 5546 0
c (( - aux652 + SATLiteral(226) + SATLiteral(260))<=0)
-260 -5549 0
-226 -5549 0
-226 -260 -5550 0
c (0<=( - aux652 + SATLiteral(226) + SATLiteral(260)))
260 5550 0
226 5550 0
226 260 5549 0
c ((SATLiteral(552) - aux653 + SATLiteral(243))<=0)
-243 -5552 0
-552 -5552 0
-552 -243 -5553 0
c (0<=(SATLiteral(552) - aux653 + SATLiteral(243)))
243 5553 0
552 5553 0
552 243 5552 0
c ((SATLiteral(329) - aux654 + SATLiteral(156))<=0)
-156 -5555 0
-329 -5555 0
-329 -156 -5556 0
c (0<=(SATLiteral(329) - aux654 + SATLiteral(156)))
156 5556 0
329 5556 0
329 156 5555 0
c ((SATLiteral(346) - aux655 + SATLiteral(174))<=0)
-174 -5558 0
-346 -5558 0
-346 -174 -5559 0
c (0<=(SATLiteral(346) - aux655 + SATLiteral(174)))
174 5559 0
346 5559 0
346 174 5558 0
c (( - aux656 + SATLiteral(588) + SATLiteral(605))<=0)
-605 -5561 0
-588 -5561 0
-588 -605 -5562 0
c (0<=( - aux656 + SATLiteral(588) + SATLiteral(605)))
605 5562 0
588 5562 0
588 605 5561 0
c ((aux644 + aux656 - aux657)<=0)
5561 -5564 0
5562 -5565 0
5525 -5564 0
5525 5561 -5565 0
5525 5562 -5567 0
5526 -5565 0
5526 5561 -5567 0
5526 5562 -5569 0
c (0<=(aux644 + aux656 - aux657))
-5562 5569 0
-5561 5567 0
-5526 5569 0
-5526 -5562 5567 0
-5526 -5561 5565 0
-5525 5567 0
-5525 -5562 5565 0
-5525 -5561 5564 0
c ((aux638 + aux651 - aux658)<=0)
5546 -5571 0
5547 -5572 0
5507 -5571 0
5507 5546 -5572 0
5507 5547 -5574 0
5508 -5572 0
5508 5546 -5574 0
5508 5547 -5576 0
c (0<=(aux638 + aux651 - aux658))
-5547 5576 0
-5546 5574 0
-5508 5576 0
-5508 -5547 5574 0
-5508 -5546 5572 0
-5507 5574 0
-5507 -5547 5572 0
-5507 -5546 5571 0
c ((aux637 + aux642 - aux659)<=0)
5519 -5578 0
5520 -5579 0
5504 -5578 0
5504 5519 -5579 0
5504 5520 -5581 0
5505 -5579 0
5505 5519 -5581 0
5505 5520 -5583 0
c (0<=(aux637 + aux642 - aux659))
-5520 5583 0
-5519 5581 0
-5505 5583 0
-5505 -5520 5581 0
-5505 -5519 5579 0
-5504 5581 0
-5504 -5520 5579 0
-5504 -5519 5578 0
c ((aux639 + aux640 - aux660)<=0)
5513 -5585 0
5514 -5586 0
5510 -5585 0
5510 5513 -5586 0
5510 5514 -5588 0
5511 -5586 0
5511 5513 -5588 0
5511 5514 -5590 0
c (0<=(aux639 + aux640 - aux660))
-5514 5590 0
-5513 5588 0
-5511 5590 0
-5511 -5514 5588 0
-5511 -5513 5586 0
-5510 5588 0
-5510 -5514 5586 0
-5510 -5513 5585 0
c ((aux641 + aux643 - aux661)<=0)
5522 -5592 0
5523 -5593 0
5516 -5592 0
5516 5522 -5593 0
5516 5523 -5595 0
5517 -5593 0
5517 5522 -5595 0
5517 5523 -5597 0
c (0<=(aux641 + aux643 - aux661))
-5523 5597 0
-5522 5595 0
-5517 5597 0
-5517 -5523 5595 0
-5517 -5522 5593 0
-5516 5595 0
-5516 -5523 5593 0
-5516 -5522 5592 0
c ((aux650 + aux654 - aux662)<=0)
5555 -5599 0
5556 -5600 0
5543 -5599 0
5543 5555 -5600 0
5543 5556 -5602 0
5544 -5600 0
5544 5555 -5602 0
5544 5556 -5604 0
c (0<=(aux650 + aux654 - aux662))
-5556 5604 0
-5555 5602 0
-5544 5604 0
-5544 -5556 5602 0
-5544 -5555 5600 0
-5543 5602 0
-5543 -5556 5600 0
-5543 -5555 5599 0
c ((aux646 + aux647 - aux663)<=0)
5534 -5606 0
5535 -5607 0
5531 -5606 0
5531 5534 -5607 0
5531 5535 -5609 0
5532 -5607 0
5532 5534 -5609 0
5532 5535 -5611 0
c (0<=(aux646 + aux647 - aux663))
-5535 5611 0
-5534 5609 0
-5532 5611 0
-5532 -5535 5609 0
-5532 -5534 5607 0
-5531 5609 0
-5531 -5535 5607 0
-5531 -5534 5606 0
c ((aux648 + aux649 - aux664)<=0)
5540 -5613 0
5541 -5614 0
5537 -5613 0
5537 5540 -5614 0
5537 5541 -5616 0
5538 -5614 0
5538 5540 -5616 0
5538 5541 -5618 0
c (0<=(aux648 + aux649 - aux664))
-5541 5618 0
-5540 5616 0
-5538 5618 0
-5538 -5541 5616 0
-5538 -5540 5614 0
-5537 5616 0
-5537 -5541 5614 0
-5537 -5540 5613 0
c ((aux652 + aux655 - aux665)<=0)
5558 -5620 0
5559 -5621 0
5549 -5620 0
5549 5558 -5621 0
5549 5559 -5623 0
5550 -5621 0
5550 5558 -5623 0
5550 5559 -5625 0
c (0<=(aux652 + aux655 - aux665))
-5559 5625 0
-5558 5623 0
-5550 5625 0
-5550 -5559 5623 0
-5550 -5558 5621 0
-5549 5623 0
-5549 -5559 5621 0
-5549 -5558 5620 0
c ((aux645 + aux653 - aux666)<=0)
5552 -5627 0
5553 -5628 0
5528 -5627 0
5528 5552 -5628 0
5528 5553 -5630 0
5529 -5628 0
5529 5552 -5630 0
5529 5553 -5632 0
c (0<=(aux645 + aux653 - aux666))
-5553 5632 0
-5552 5630 0
-5529 5632 0
-5529 -5553 5630 0
-5529 -5552 5628 0
-5528 5630 0
-5528 -5553 5628 0
-5528 -5552 5627 0
c ((aux660 + aux666 - aux667)<=0)
5627 -5634 0
5628 -5635 0
5630 -5637 0
5632 -5639 0
5585 -5634 0
5585 5627 -5635 0
5585 5628 -5637 0
5585 5630 -5639 0
5585 5632 -5641 0
5586 -5635 0
5586 5627 -5637 0
5586 5628 -5639 0
5586 5630 -5641 0
5586 5632 -5643 0
5588 -5637 0
5588 5627 -5639 0
5588 5628 -5641 0
5588 5630 -5643 0
5588 5632 -5645 0
5590 -5639 0
5590 5627 -5641 0
5590 5628 -5643 0
5590 5630 -5645 0
5590 5632 -5647 0
c (0<=(aux660 + aux666 - aux667))
-5632 5647 0
-5630 5645 0
-5628 5643 0
-5627 5641 0
-5590 5647 0
-5590 -5632 5645 0
-5590 -5630 5643 0
-5590 -5628 5641 0
-5590 -5627 5639 0
-5588 5645 0
-5588 -5632 5643 0
-5588 -5630 5641 0
-5588 -5628 5639 0
-5588 -5627 5637 0
-5586 5643 0
-5586 -5632 5641 0
-5586 -5630 5639 0
-5586 -5628 5637 0
-5586 -5627 5635 0
-5585 5641 0
-5585 -5632 5639 0
-5585 -5630 5637 0
-5585 -5628 5635 0
-5585 -5627 5634 0
c ((aux659 + aux663 - aux668)<=0)
5606 -5649 0
5607 -5650 0
5609 -5652 0
5611 -5654 0
5578 -5649 0
5578 5606 -5650 0
5578 5607 -5652 0
5578 5609 -5654 0
5578 5611 -5656 0
5579 -5650 0
5579 5606 -5652 0
5579 5607 -5654 0
5579 5609 -5656 0
5579 5611 -5658 0
5581 -5652 0
5581 5606 -5654 0
5581 5607 -5656 0
5581 5609 -5658 0
5581 5611 -5660 0
5583 -5654 0
5583 5606 -5656 0
5583 5607 -5658 0
5583 5609 -5660 0
5583 5611 -5662 0
c (0<=(aux659 + aux663 - aux668))
-5611 5662 0
-5609 5660 0
-5607 5658 0
-5606 5656 0
-5583 5662 0
-5583 -5611 5660 0
-5583 -5609 5658 0
-5583 -5607 5656 0
-5583 -5606 5654 0
-5581 5660 0
-5581 -5611 5658 0
-5581 -5609 5656 0
-5581 -5607 5654 0
-5581 -5606 5652 0
-5579 5658 0
-5579 -5611 5656 0
-5579 -5609 5654 0
-5579 -5607 5652 0
-5579 -5606 5650 0
-5578 5656 0
-5578 -5611 5654 0
-5578 -5609 5652 0
-5578 -5607 5650 0
-5578 -5606 5649 0
c ((aux657 + aux658 - aux669)<=0)
5571 -5664 0
5572 -5665 0
5574 -5667 0
5576 -5669 0
5564 -5664 0
5564 5571 -5665 0
5564 5572 -5667 0
5564 5574 -5669 0
5564 5576 -5671 0
5565 -5665 0
5565 5571 -5667 0
5565 5572 -5669 0
5565 5574 -5671 0
5565 5576 -5673 0
5567 -5667 0
5567 5571 -5669 0
5567 5572 -5671 0
5567 5574 -5673 0
5567 5576 -5675 0
5569 -5669 0
5569 5571 -5671 0
5569 5572 -5673 0
5569 5574 -5675 0
5569 5576 -5677 0
c (0<=(aux657 + aux658 - aux669))
-5576 5677 0
-5574 5675 0
-5572 5673 0
-5571 5671 0
-5569 5677 0
-5569 -5576 5675 0
-5569 -5574 5673 0
-5569 -5572 5671 0
-5569 -5571 5669 0
-5567 5675 0
-5567 -5576 5673 0
-5567 -5574 5671 0
-5567 -5572 5669 0
-5567 -5571 5667 0
-5565 5673 0
-5565 -5576 5671 0
-5565 -5574 5669 0
-5565 -5572 5667 0
-5565 -5571 5665 0
-5564 5671 0
-5564 -5576 5669 0
-5564 -5574 5667 0
-5564 -5572 5665 0
-5564 -5571 5664 0
c ((aux661 + aux662 - aux670)<=0)
5599 -5679 0
5600 -5680 0
5602 -5682 0
5604 -5684 0
5592 -5679 0
5592 5599 -5680 0
5592 5600 -5682 0
5592 5602 -5684 0
5592 5604 -5686 0
5593 -5680 0
5593 5599 -5682 0
5593 5600 -5684 0
5593 5602 -5686 0
5593 5604 -5688 0
5595 -5682 0
5595 5599 -5684 0
5595 5600 -5686 0
5595 5602 -5688 0
5595 5604 -5690 0
5597 -5684 0
5597 5599 -5686 0
5597 5600 -5688 0
5597 5602 -5690 0
5597 5604 -5692 0
c (0<=(aux661 + aux662 - aux670))
-5604 5692 0
-5602 5690 0
-5600 5688 0
-5599 5686 0
-5597 5692 0
-5597 -5604 5690 0
-5597 -5602 5688 0
-5597 -5600 5686 0
-5597 -5599 5684 0
-5595 5690 0
-5595 -5604 5688 0
-5595 -5602 5686 0
-5595 -5600 5684 0
-5595 -5599 5682 0
-5593 5688 0
-5593 -5604 5686 0
-5593 -5602 5684 0
-5593 -5600 5682 0
-5593 -5599 5680 0
-5592 5686 0
-5592 -5604 5684 0
-5592 -5602 5682 0
-5592 -5600 5680 0
-5592 -5599 5679 0
c ((aux664 + aux665 - aux671)<=0)
5620 -5694 0
5621 -5695 0
5623 -5697 0
5625 -5699 0
5613 -5694 0
5613 5620 -5695 0
5613 5621 -5697 0
5613 5623 -5699 0
5613 5625 -5701 0
5614 -5695 0
5614 5620 -5697 0
5614 5621 -5699 0
5614 5623 -5701 0
5614 5625 -5703 0
5616 -5697 0
5616 5620 -5699 0
5616 5621 -5701 0
5616 5623 -5703 0
5616 5625 -5705 0
5618 -5699 0
5618 5620 -5701 0
5618 5621 -5703 0
5618 5623 -5705 0
5618 5625 -5707 0
c (0<=(aux664 + aux665 - aux671))
-5625 5707 0
-5623 5705 0
-5621 5703 0
-5620 5701 0
-5618 5707 0
-5618 -5625 5705 0
-5618 -5623 5703 0
-5618 -5621 5701 0
-5618 -5620 5699 0
-5616 5705 0
-5616 -5625 5703 0
-5616 -5623 5701 0
-5616 -5621 5699 0
-5616 -5620 5697 0
-5614 5703 0
-5614 -5625 5701 0
-5614 -5623 5699 0
-5614 -5621 5697 0
-5614 -5620 5695 0
-5613 5701 0
-5613 -5625 5699 0
-5613 -5623 5697 0
-5613 -5621 5695 0
-5613 -5620 5694 0
c ((aux668 + aux671 - aux672)<=0)
5694 -5709 0
5695 -5710 0
5697 -5712 0
5699 -5714 0
5701 -5716 0
5703 -5718 0
5705 -5720 0
5707 -5722 0
5649 -5709 0
5649 5694 -5710 0
5649 5695 -5712 0
5649 5697 -5714 0
5649 5699 -5716 0
5649 5701 -5718 0
5649 5703 -5720 0
5649 5705 -5722 0
5649 5707 -5724 0
5650 -5710 0
5650 5694 -5712 0
5650 5695 -5714 0
5650 5697 -5716 0
5650 5699 -5718 0
5650 5701 -5720 0
5650 5703 -5722 0
5650 5705 -5724 0
5650 5707 -5726 0
5652 -5712 0
5652 5694 -5714 0
5652 5695 -5716 0
5652 5697 -5718 0
5652 5699 -5720 0
5652 5701 -5722 0
5652 5703 -5724 0
5652 5705 -5726 0
5652 5707 -5728 0
5654 -5714 0
5654 5694 -5716 0
5654 5695 -5718 0
5654 5697 -5720 0
5654 5699 -5722 0
5654 5701 -5724 0
5654 5703 -5726 0
5654 5705 -5728 0
5654 5707 -5730 0
5656 -5716 0
5656 5694 -5718 0
5656 5695 -5720 0
5656 5697 -5722 0
5656 5699 -5724 0
5656 5701 -5726 0
5656 5703 -5728 0
5656 5705 -5730 0
5656 5707 -5732 0
5658 -5718 0
5658 5694 -5720 0
5658 5695 -5722 0
5658 5697 -5724 0
5658 5699 -5726 0
5658 5701 -5728 0
5658 5703 -5730 0
5658 5705 -5732 0
5658 5707 -5734 0
5660 -5720 0
5660 5694 -5722 0
5660 5695 -5724 0
5660 5697 -5726 0
5660 5699 -5728 0
5660 5701 -5730 0
5660 5703 -5732 0
5660 5705 -5734 0
5660 5707 -5736 0
5662 -5722 0
5662 5694 -5724 0
5662 5695 -5726 0
5662 5697 -5728 0
5662 5699 -5730 0
5662 5701 -5732 0
5662 5703 -5734 0
5662 5705 -5736 0
5662 5707 -5738 0
c (0<=(aux668 + aux671 - aux672))
-5707 5738 0
-5705 5736 0
-5703 5734 0
-5701 5732 0
-5699 5730 0
-5697 5728 0
-5695 5726 0
-5694 5724 0
-5662 5738 0
-5662 -5707 5736 0
-5662 -5705 5734 0
-5662 -5703 5732 0
-5662 -5701 5730 0
-5662 -5699 5728 0
-5662 -5697 5726 0
-5662 -5695 5724 0
-5662 -5694 5722 0
-5660 5736 0
-5660 -5707 5734 0
-5660 -5705 5732 0
-5660 -5703 5730 0
-5660 -5701 5728 0
-5660 -5699 5726 0
-5660 -5697 5724 0
-5660 -5695 5722 0
-5660 -5694 5720 0
-5658 5734 0
-5658 -5707 5732 0
-5658 -5705 5730 0
-5658 -5703 5728 0
-5658 -5701 5726 0
-5658 -5699 5724 0
-5658 -5697 5722 0
-5658 -5695 5720 0
-5658 -5694 5718 0
-5656 5732 0
-5656 -5707 5730 0
-5656 -5705 5728 0
-5656 -5703 5726 0
-5656 -5701 5724 0
-5656 -5699 5722 0
-5656 -5697 5720 0
-5656 -5695 5718 0
-5656 -5694 5716 0
-5654 5730 0
-5654 -5707 5728 0
-5654 -5705 5726 0
-5654 -5703 5724 0
-5654 -5701 5722 0
-5654 -5699 5720 0
-5654 -5697 5718 0
-5654 -5695 5716 0
-5654 -5694 5714 0
-5652 5728 0
-5652 -5707 5726 0
-5652 -5705 5724 0
-5652 -5703 5722 0
-5652 -5701 5720 0
-5652 -5699 5718 0
-5652 -5697 5716 0
-5652 -5695 5714 0
-5652 -5694 5712 0
-5650 5726 0
-5650 -5707 5724 0
-5650 -5705 5722 0
-5650 -5703 5720 0
-5650 -5701 5718 0
-5650 -5699 5716 0
-5650 -5697 5714 0
-5650 -5695 5712 0
-5650 -5694 5710 0
-5649 5724 0
-5649 -5707 5722 0
-5649 -5705 5720 0
-5649 -5703 5718 0
-5649 -5701 5716 0
-5649 -5699 5714 0
-5649 -5697 5712 0
-5649 -5695 5710 0
-5649 -5694 5709 0
c ((aux667 + aux669 - aux673)<=0)
5664 -5740 0
5665 -5741 0
5667 -5743 0
5669 -5745 0
5671 -5747 0
5673 -5749 0
5675 -5751 0
5677 -5753 0
5634 -5740 0
5634 5664 -5741 0
5634 5665 -5743 0
5634 5667 -5745 0
5634 5669 -5747 0
5634 5671 -5749 0
5634 5673 -5751 0
5634 5675 -5753 0
5634 5677 -5755 0
5635 -5741 0
5635 5664 -5743 0
5635 5665 -5745 0
5635 5667 -5747 0
5635 5669 -5749 0
5635 5671 -5751 0
5635 5673 -5753 0
5635 5675 -5755 0
5635 5677 -5757 0
5637 -5743 0
5637 5664 -5745 0
5637 5665 -5747 0
5637 5667 -5749 0
5637 5669 -5751 0
5637 5671 -5753 0
5637 5673 -5755 0
5637 5675 -5757 0
5637 5677 -5759 0
5639 -5745 0
5639 5664 -5747 0
5639 5665 -5749 0
5639 5667 -5751 0
5639 5669 -5753 0
5639 5671 -5755 0
5639 5673 -5757 0
5639 5675 -5759 0
5639 5677 -5761 0
5641 -5747 0
5641 5664 -5749 0
5641 5665 -5751 0
5641 5667 -5753 0
5641 5669 -5755 0
5641 5671 -5757 0
5641 5673 -5759 0
5641 5675 -5761 0
5641 5677 -5763 0
5643 -5749 0
5643 5664 -5751 0
5643 5665 -5753 0
5643 5667 -5755 0
5643 5669 -5757 0
5643 5671 -5759 0
5643 5673 -5761 0
5643 5675 -5763 0
5643 5677 -5765 0
5645 -5751 0
5645 5664 -5753 0
5645 5665 -5755 0
5645 5667 -5757 0
5645 5669 -5759 0
5645 5671 -5761 0
5645 5673 -5763 0
5645 5675 -5765 0
5645 5677 -5767 0
5647 -5753 0
5647 5664 -5755 0
5647 5665 -5757 0
5647 5667 -5759 0
5647 5669 -5761 0
5647 5671 -5763 0
5647 5673 -5765 0
5647 5675 -5767 0
5647 5677 -5769 0
c (0<=(aux667 + aux669 - aux673))
-5677 5769 0
-5675 5767 0
-5673 5765 0
-5671 5763 0
-5669 5761 0
-5667 5759 0
-5665 5757 0
-5664 5755 0
-5647 5769 0
-5647 -5677 5767 0
-5647 -5675 5765 0
-5647 -5673 5763 0
-5647 -5671 5761 0
-5647 -5669 5759 0
-5647 -5667 5757 0
-5647 -5665 5755 0
-5647 -5664 5753 0
-5645 5767 0
-5645 -5677 5765 0
-5645 -5675 5763 0
-5645 -5673 5761 0
-5645 -5671 5759 0
-5645 -5669 5757 0
-5645 -5667 5755 0
-5645 -5665 5753 0
-5645 -5664 5751 0
-5643 5765 0
-5643 -5677 5763 0
-5643 -5675 5761 0
-5643 -5673 5759 0
-5643 -5671 5757 0
-5643 -5669 5755 0
-5643 -5667 5753 0
-5643 -5665 5751 0
-5643 -5664 5749 0
-5641 5763 0
-5641 -5677 5761 0
-5641 -5675 5759 0
-5641 -5673 5757 0
-5641 -5671 5755 0
-5641 -5669 5753 0
-5641 -5667 5751 0
-5641 -5665 5749 0
-5641 -5664 5747 0
-5639 5761 0
-5639 -5677 5759 0
-5639 -5675 5757 0
-5639 -5673 5755 0
-5639 -5671 5753 0
-5639 -5669 5751 0
-5639 -5667 5749 0
-5639 -5665 5747 0
-5639 -5664 5745 0
-5637 5759 0
-5637 -5677 5757 0
-5637 -5675 5755 0
-5637 -5673 5753 0
-5637 -5671 5751 0
-5637 -5669 5749 0
-5637 -5667 5747 0
-5637 -5665 5745 0
-5637 -5664 5743 0
-5635 5757 0
-5635 -5677 5755 0
-5635 -5675 5753 0
-5635 -5673 5751 0
-5635 -5671 5749 0
-5635 -5669 5747 0
-5635 -5667 5745 0
-5635 -5665 5743 0
-5635 -5664 5741 0
-5634 5755 0
-5634 -5677 5753 0
-5634 -5675 5751 0
-5634 -5673 5749 0
-5634 -5671 5747 0
-5634 -5669 5745 0
-5634 -5667 5743 0
-5634 -5665 5741 0
-5634 -5664 5740 0
c ((SATLiteral(-516) - aux674 + SATLiteral(-103))<=0)
103 -5771 0
516 -5771 0
516 103 -5772 0
c (0<=(SATLiteral(-516) - aux674 + SATLiteral(-103)))
-103 5772 0
-516 5772 0
-516 -103 5771 0
c ((SATLiteral(-534) - aux675 + SATLiteral(-86))<=0)
86 -5774 0
534 -5774 0
534 86 -5775 0
c (0<=(SATLiteral(-534) - aux675 + SATLiteral(-86)))
-86 5775 0
-534 5775 0
-534 -86 5774 0
c ((SATLiteral(-569) - aux676 + SATLiteral(-69))<=0)
69 -5777 0
569 -5777 0
569 69 -5778 0
c (0<=(SATLiteral(-569) - aux676 + SATLiteral(-69)))
-69 5778 0
-569 5778 0
-569 -69 5777 0
c ((SATLiteral(-362) - aux677 + SATLiteral(-52))<=0)
52 -5780 0
362 -5780 0
362 52 -5781 0
c (0<=(SATLiteral(-362) - aux677 + SATLiteral(-52)))
-52 5781 0
-362 5781 0
-362 -52 5780 0
c (( - aux678 + SATLiteral(-621) + SATLiteral(-35))<=0)
35 -5783 0
621 -5783 0
621 35 -5784 0
c (0<=( - aux678 + SATLiteral(-621) + SATLiteral(-35)))
-35 5784 0
-621 5784 0
-621 -35 5783 0
c (( - aux679 + SATLiteral(-465) + SATLiteral(-18))<=0)
18 -5786 0
465 -5786 0
465 18 -5787 0
c (0<=( - aux679 + SATLiteral(-465) + SATLiteral(-18)))
-18 5787 0
-465 5787 0
-465 -18 5786 0
c (( - aux680 + SATLiteral(-638) + SATLiteral(-482))<=0)
482 -5789 0
638 -5789 0
638 482 -5790 0
c (0<=( - aux680 + SATLiteral(-638) + SATLiteral(-482)))
-482 5790 0
-638 5790 0
-638 -482 5789 0
c ((SATLiteral(-379) - aux681 + SATLiteral(-499))<=0)
499 -5792 0
379 -5792 0
379 499 -5793 0
c (0<=(SATLiteral(-379) - aux681 + SATLiteral(-499)))
-499 5793 0
-379 5793 0
-379 -499 5792 0
c (( - aux682 + SATLiteral(-655) + SATLiteral(-672))<=0)
672 -5795 0
655 -5795 0
655 672 -5796 0
c (0<=( - aux682 + SATLiteral(-655) + SATLiteral(-672)))
-672 5796 0
-655 5796 0
-655 -672 5795 0
c ((SATLiteral(-310) - aux683 + SATLiteral(-448))<=0)
448 -5798 0
310 -5798 0
310 448 -5799 0
c (0<=(SATLiteral(-310) - aux683 + SATLiteral(-448)))
-448 5799 0
-310 5799 0
-310 -448 5798 0
c (( - aux684 + SATLiteral(-120) + SATLiteral(-431))<=0)
431 -5801 0
120 -5801 0
120 431 -5802 0
c (0<=( - aux684 + SATLiteral(-120) + SATLiteral(-431)))
-431 5802 0
-120 5802 0
-120 -431 5801 0
c (( - aux685 + SATLiteral(-689) + SATLiteral(-414))<=0)
414 -5804 0
689 -5804 0
689 414 -5805 0
c (0<=( - aux685 + SATLiteral(-689) + SATLiteral(-414)))
-414 5805 0
-689 5805 0
-689 -414 5804 0
c (( - aux686 + SATLiteral(-191) + SATLiteral(-397))<=0)
397 -5807 0
191 -5807 0
191 397 -5808 0
c (0<=( - aux686 + SATLiteral(-191) + SATLiteral(-397)))
-397 5808 0
-191 5808 0
-191 -397 5807 0
c (( - aux687 + SATLiteral(-138) + SATLiteral(-293))<=0)
293 -5810 0
138 -5810 0
138 293 -5811 0
c (0<=( - aux687 + SATLiteral(-138) + SATLiteral(-293)))
-293 5811 0
-138 5811 0
-138 -293 5810 0
c (( - aux688 + SATLiteral(-208) + SATLiteral(-276))<=0)
276 -5813 0
208 -5813 0
208 276 -5814 0
c (0<=( - aux688 + SATLiteral(-208) + SATLiteral(-276)))
-276 5814 0
-208 5814 0
-208 -276 5813 0
c (( - aux689 + SATLiteral(-225) + SATLiteral(-259))<=0)
259 -5816 0
225 -5816 0
225 259 -5817 0
c (0<=( - aux689 + SATLiteral(-225) + SATLiteral(-259)))
-259 5817 0
-225 5817 0
-225 -259 5816 0
c ((SATLiteral(-551) - aux690 + SATLiteral(-242))<=0)
242 -5819 0
551 -5819 0
551 242 -5820 0
c (0<=(SATLiteral(-551) - aux690 + SATLiteral(-242)))
-242 5820 0
-551 5820 0
-551 -242 5819 0
c ((SATLiteral(-328) - aux691 + SATLiteral(-155))<=0)
155 -5822 0
328 -5822 0
328 155 -5823 0
c (0<=(SATLiteral(-328) - aux691 + SATLiteral(-155)))
-155 5823 0
-328 5823 0
-328 -155 5822 0
c ((SATLiteral(-345) - aux692 + SATLiteral(-173))<=0)
173 -5825 0
345 -5825 0
345 173 -5826 0
c (0<=(SATLiteral(-345) - aux692 + SATLiteral(-173)))
-173 5826 0
-345 5826 0
-345 -173 5825 0
c (( - aux693 + SATLiteral(-587) + SATLiteral(-604))<=0)
604 -5828 0
587 -5828 0
587 604 -5829 0
c (0<=( - aux693 + SATLiteral(-587) + SATLiteral(-604)))
-604 5829 0
-587 5829 0
-587 -604 5828 0
c ((aux681 + aux693 - aux694)<=0)
5828 -5831 0
5829 -5832 0
5792 -5831 0
5792 5828 -5832 0
5792 5829 -5834 0
5793 -5832 0
5793 5828 -5834 0
5793 5829 -5836 0
c (0<=(aux681 + aux693 - aux694))
-5829 5836 0
-5828 5834 0
-5793 5836 0
-5793 -5829 5834 0
-5793 -5828 5832 0
-5792 5834 0
-5792 -5829 5832 0
-5792 -5828 5831 0
c ((aux675 + aux688 - aux695)<=0)
5813 -5838 0
5814 -5839 0
5774 -5838 0
5774 5813 -5839 0
5774 5814 -5841 0
5775 -5839 0
5775 5813 -5841 0
5775 5814 -5843 0
c (0<=(aux675 + aux688 - aux695))
-5814 5843 0
-5813 5841 0
-5775 5843 0
-5775 -5814 5841 0
-5775 -5813 5839 0
-5774 5841 0
-5774 -5814 5839 0
-5774 -5813 5838 0
c ((aux674 + aux679 - aux696)<=0)
5786 -5845 0
5787 -5846 0
5771 -5845 0
5771 5786 -5846 0
5771 5787 -5848 0
5772 -5846 0
5772 5786 -5848 0
5772 5787 -5850 0
c (0<=(aux674 + aux679 - aux696))
-5787 5850 0
-5786 5848 0
-5772 5850 0
-5772 -5787 5848 0
-5772 -5786 5846 0
-5771 5848 0
-5771 -5787 5846 0
-5771 -5786 5845 0
c ((aux676 + aux677 - aux697)<=0)
5780 -5852 0
5781 -5853 0
5777 -5852 0
5777 5780 -5853 0
5777 5781 -5855 0
5778 -5853 0
5778 5780 -5855 0
5778 5781 -5857 0
c (0<=(aux676 + aux677 - aux697))
-5781 5857 0
-5780 5855 0
-5778 5857 0
-5778 -5781 5855 0
-5778 -5780 5853 0
-5777 5855 0
-5777 -5781 5853 0
-5777 -5780 5852 0
c ((aux678 + aux680 - aux698)<=0)
5789 -5859 0
5790 -5860 0
5783 -5859 0
5783 5789 -5860 0
5783 5790 -5862 0
5784 -5860 0
5784 5789 -5862 0
5784 5790 -5864 0
c (0<=(aux678 + aux680 - aux698))
-5790 5864 0
-5789 5862 0
-5784 5864 0
-5784 -5790 5862 0
-5784 -5789 5860 0
-5783 5862 0
-5783 -5790 5860 0
-5783 -5789 5859 0
c ((aux687 + aux691 - aux699)<=0)
5822 -5866 0
5823 -5867 0
5810 -5866 0
5810 5822 -5867 0
5810 5823 -5869 0
5811 -5867 0
5811 5822 -5869 0
5811 5823 -5871 0
c (0<=(aux687 + aux691 - aux699))
-5823 5871 0
-5822 5869 0
-5811 5871 0
-5811 -5823 5869 0
-5811 -5822 5867 0
-5810 5869 0
-5810 -5823 5867 0
-5810 -5822 5866 0
c ((aux683 + aux684 - aux700)<=0)
5801 -5873 0
5802 -5874 0
5798 -5873 0
5798 5801 -5874 0
5798 5802 -5876 0
5799 -5874 0
5799 5801 -5876 0
5799 5802 -5878 0
c (0<=(aux683 + aux684 - aux700))
-5802 5878 0
-5801 5876 0
-5799 5878 0
-5799 -5802 5876 0
-5799 -5801 5874 0
-5798 5876 0
-5798 -5802 5874 0
-5798 -5801 5873 0
c ((aux685 + aux686 - aux701)<=0)
5807 -5880 0
5808 -5881 0
5804 -5880 0
5804 5807 -5881 0
5804 5808 -5883 0
5805 -5881 0
5805 5807 -5883 0
5805 5808 -5885 0
c (0<=(aux685 + aux686 - aux701))
-5808 5885 0
-5807 5883 0
-5805 5885 0
-5805 -5808 5883 0
-5805 -5807 5881 0
-5804 5883 0
-5804 -5808 5881 0
-5804 -5807 5880 0
c ((aux689 + aux692 - aux702)<=0)
5825 -5887 0
5826 -5888 0
5816 -5887 0
5816 5825 -5888 0
5816 5826 -5890 0
5817 -5888 0
5817 5825 -5890 0
5817 5826 -5892 0
c (0<=(aux689 + aux692 - aux702))
-5826 5892 0
-5825 5890 0
-5817 5892 0
-5817 -5826 5890 0
-5817 -5825 5888 0
-5816 5890 0
-5816 -5826 5888 0
-5816 -5825 5887 0
c ((aux682 + aux690 - aux703)<=0)
5819 -5894 0
5820 -5895 0
5795 -5894 0
5795 5819 -5895 0
5795 5820 -5897 0
5796 -5895 0
5796 5819 -5897 0
5796 5820 -5899 0
c (0<=(aux682 + aux690 - aux703))
-5820 5899 0
-5819 5897 0
-5796 5899 0
-5796 -5820 5897 0
-5796 -5819 5895 0
-5795 5897 0
-5795 -5820 5895 0
-5795 -5819 5894 0
c ((aux697 + aux703 - aux704)<=0)
5894 -5901 0
5895 -5902 0
5897 -5904 0
5899 -5906 0
5852 -5901 0
5852 5894 -5902 0
5852 5895 -5904 0
5852 5897 -5906 0
5852 5899 -5908 0
5853 -5902 0
5853 5894 -5904 0
5853 5895 -5906 0
5853 5897 -5908 0
5853 5899 -5910 0
5855 -5904 0
5855 5894 -5906 0
5855 5895 -5908 0
5855 5897 -5910 0
5855 5899 -5912 0
5857 -5906 0
5857 5894 -5908 0
5857 5895 -5910 0
5857 5897 -5912 0
5857 5899 -5914 0
c (0<=(aux697 + aux703 - aux704))
-5899 5914 0
-5897 5912 0
-5895 5910 0
-5894 5908 0
-5857 5914 0
-5857 -5899 5912 0
-5857 -5897 5910 0
-5857 -5895 5908 0
-5857 -5894 5906 0
-5855 5912 0
-5855 -5899 5910 0
-5855 -5897 5908 0
-5855 -5895 5906 0
-5855 -5894 5904 0
-5853 5910 0
-5853 -5899 5908 0
-5853 -5897 5906 0
-5853 -5895 5904 0
-5853 -5894 5902 0
-5852 5908 0
-5852 -5899 5906 0
-5852 -5897 5904 0
-5852 -5895 5902 0
-5852 -5894 5901 0
c ((aux696 + aux700 - aux705)<=0)
5873 -5916 0
5874 -5917 0
5876 -5919 0
5878 -5921 0
5845 -5916 0
5845 5873 -5917 0
5845 5874 -5919 0
5845 5876 -5921 0
5845 5878 -5923 0
5846 -5917 0
5846 5873 -5919 0
5846 5874 -5921 0
5846 5876 -5923 0
5846 5878 -5925 0
5848 -5919 0
5848 5873 -5921 0
5848 5874 -5923 0
5848 5876 -5925 0
5848 5878 -5927 0
5850 -5921 0
5850 5873 -5923 0
5850 5874 -5925 0
5850 5876 -5927 0
5850 5878 -5929 0
c (0<=(aux696 + aux700 - aux705))
-5878 5929 0
-5876 5927 0
-5874 5925 0
-5873 5923 0
-5850 5929 0
-5850 -5878 5927 0
-5850 -5876 5925 0
-5850 -5874 5923 0
-5850 -5873 5921 0
-5848 5927 0
-5848 -5878 5925 0
-5848 -5876 5923 0
-5848 -5874 5921 0
-5848 -5873 5919 0
-5846 5925 0
-5846 -5878 5923 0
-5846 -5876 5921 0
-5846 -5874 5919 0
-5846 -5873 5917 0
-5845 5923 0
-5845 -5878 5921 0
-5845 -5876 5919 0
-5845 -5874 5917 0
-5845 -5873 5916 0
c ((aux694 + aux695 - aux706)<=0)
5838 -5931 0
5839 -5932 0
5841 -5934 0
5843 -5936 0
5831 -5931 0
5831 5838 -5932 0
5831 5839 -5934 0
5831 5841 -5936 0
5831 5843 -5938 0
5832 -5932 0
5832 5838 -5934 0
5832 5839 -5936 0
5832 5841 -5938 0
5832 5843 -5940 0
5834 -5934 0
5834 5838 -5936 0
5834 5839 -5938 0
5834 5841 -5940 0
5834 5843 -5942 0
5836 -5936 0
5836 5838 -5938 0
5836 5839 -5940 0
5836 5841 -5942 0
5836 5843 -5944 0
c (0<=(aux694 + aux695 - aux706))
-5843 5944 0
-5841 5942 0
-5839 5940 0
-5838 5938 0
-5836 5944 0
-5836 -5843 5942 0
-5836 -5841 5940 0
-5836 -5839 5938 0
-5836 -5838 5936 0
-5834 5942 0
-5834 -5843 5940 0
-5834 -5841 5938 0
-5834 -5839 5936 0
-5834 -5838 5934 0
-5832 5940 0
-5832 -5843 5938 0
-5832 -5841 5936 0
-5832 -5839 5934 0
-5832 -5838 5932 0
-5831 5938 0
-5831 -5843 5936 0
-5831 -5841 5934 0
-5831 -5839 5932 0
-5831 -5838 5931 0
c ((aux698 + aux699 - aux707)<=0)
5866 -5946 0
5867 -5947 0
5869 -5949 0
5871 -5951 0
5859 -5946 0
5859 5866 -5947 0
5859 5867 -5949 0
5859 5869 -5951 0
5859 5871 -5953 0
5860 -5947 0
5860 5866 -5949 0
5860 5867 -5951 0
5860 5869 -5953 0
5860 5871 -5955 0
5862 -5949 0
5862 5866 -5951 0
5862 5867 -5953 0
5862 5869 -5955 0
5862 5871 -5957 0
5864 -5951 0
5864 5866 -5953 0
5864 5867 -5955 0
5864 5869 -5957 0
5864 5871 -5959 0
c (0<=(aux698 + aux699 - aux707))
-5871 5959 0
-5869 5957 0
-5867 5955 0
-5866 5953 0
-5864 5959 0
-5864 -5871 5957 0
-5864 -5869 5955 0
-5864 -5867 5953 0
-5864 -5866 5951 0
-5862 5957 0
-5862 -5871 5955 0
-5862 -5869 5953 0
-5862 -5867 5951 0
-5862 -5866 5949 0
-5860 5955 0
-5860 -5871 5953 0
-5860 -5869 5951 0
-5860 -5867 5949 0
-5860 -5866 5947 0
-5859 5953 0
-5859 -5871 5951 0
-5859 -5869 5949 0
-5859 -5867 5947 0
-5859 -5866 5946 0
c ((aux701 + aux702 - aux708)<=0)
5887 -5961 0
5888 -5962 0
5890 -5964 0
5892 -5966 0
5880 -5961 0
5880 5887 -5962 0
5880 5888 -5964 0
5880 5890 -5966 0
5880 5892 -5968 0
5881 -5962 0
5881 5887 -5964 0
5881 5888 -5966 0
5881 5890 -5968 0
5881 5892 -5970 0
5883 -5964 0
5883 5887 -5966 0
5883 5888 -5968 0
5883 5890 -5970 0
5883 5892 -5972 0
5885 -5966 0
5885 5887 -5968 0
5885 5888 -5970 0
5885 5890 -5972 0
5885 5892 -5974 0
c (0<=(aux701 + aux702 - aux708))
-5892 5974 0
-5890 5972 0
-5888 5970 0
-5887 5968 0
-5885 5974 0
-5885 -5892 5972 0
-5885 -5890 5970 0
-5885 -5888 5968 0
-5885 -5887 5966 0
-5883 5972 0
-5883 -5892 5970 0
-5883 -5890 5968 0
-5883 -5888 5966 0
-5883 -5887 5964 0
-5881 5970 0
-5881 -5892 5968 0
-5881 -5890 5966 0
-5881 -5888 5964 0
-5881 -5887 5962 0
-5880 5968 0
-5880 -5892 5966 0
-5880 -5890 5964 0
-5880 -5888 5962 0
-5880 -5887 5961 0
c ((aux705 + aux708 - aux709)<=0)
5961 -5976 0
5962 -5977 0
5964 -5979 0
5966 -5981 0
5968 -5983 0
5970 -5985 0
5972 -5987 0
5974 -5989 0
5916 -5976 0
5916 5961 -5977 0
5916 5962 -5979 0
5916 5964 -5981 0
5916 5966 -5983 0
5916 5968 -5985 0
5916 5970 -5987 0
5916 5972 -5989 0
5916 5974 -5991 0
5917 -5977 0
5917 5961 -5979 0
5917 5962 -5981 0
5917 5964 -5983 0
5917 5966 -5985 0
5917 5968 -5987 0
5917 5970 -5989 0
5917 5972 -5991 0
5917 5974 -5993 0
5919 -5979 0
5919 5961 -5981 0
5919 5962 -5983 0
5919 5964 -5985 0
5919 5966 -5987 0
5919 5968 -5989 0
5919 5970 -5991 0
5919 5972 -5993 0
5919 5974 -5995 0
5921 -5981 0
5921 5961 -5983 0
5921 5962 -5985 0
5921 5964 -5987 0
5921 5966 -5989 0
5921 5968 -5991 0
5921 5970 -5993 0
5921 5972 -5995 0
5921 5974 -5997 0
5923 -5983 0
5923 5961 -5985 0
5923 5962 -5987 0
5923 5964 -5989 0
5923 5966 -5991 0
5923 5968 -5993 0
5923 5970 -5995 0
5923 5972 -5997 0
5923 5974 -5999 0
5925 -5985 0
5925 5961 -5987 0
5925 5962 -5989 0
5925 5964 -5991 0
5925 5966 -5993 0
5925 5968 -5995 0
5925 5970 -5997 0
5925 5972 -5999 0
5925 5974 -6001 0
5927 -5987 0
5927 5961 -5989 0
5927 5962 -5991 0
5927 5964 -5993 0
5927 5966 -5995 0
5927 5968 -5997 0
5927 5970 -5999 0
5927 5972 -6001 0
5927 5974 -6003 0
5929 -5989 0
5929 5961 -5991 0
5929 5962 -5993 0
5929 5964 -5995 0
5929 5966 -5997 0
5929 5968 -5999 0
5929 5970 -6001 0
5929 5972 -6003 0
5929 5974 -6005 0
c (0<=(aux705 + aux708 - aux709))
-5974 6005 0
-5972 6003 0
-5970 6001 0
-5968 5999 0
-5966 5997 0
-5964 5995 0
-5962 5993 0
-5961 5991 0
-5929 6005 0
-5929 -5974 6003 0
-5929 -5972 6001 0
-5929 -5970 5999 0
-5929 -5968 5997 0
-5929 -5966 5995 0
-5929 -5964 5993 0
-5929 -5962 5991 0
-5929 -5961 5989 0
-5927 6003 0
-5927 -5974 6001 0
-5927 -5972 5999 0
-5927 -5970 5997 0
-5927 -5968 5995 0
-5927 -5966 5993 0
-5927 -5964 5991 0
-5927 -5962 5989 0
-5927 -5961 5987 0
-5925 6001 0
-5925 -5974 5999 0
-5925 -5972 5997 0
-5925 -5970 5995 0
-5925 -5968 5993 0
-5925 -5966 5991 0
-5925 -5964 5989 0
-5925 -5962 5987 0
-5925 -5961 5985 0
-5923 5999 0
-5923 -5974 5997 0
-5923 -5972 5995 0
-5923 -5970 5993 0
-5923 -5968 5991 0
-5923 -5966 5989 0
-5923 -5964 5987 0
-5923 -5962 5985 0
-5923 -5961 5983 0
-5921 5997 0
-5921 -5974 5995 0
-5921 -5972 5993 0
-5921 -5970 5991 0
-5921 -5968 5989 0
-5921 -5966 5987 0
-5921 -5964 5985 0
-5921 -5962 5983 0
-5921 -5961 5981 0
-5919 5995 0
-5919 -5974 5993 0
-5919 -5972 5991 0
-5919 -5970 5989 0
-5919 -5968 5987 0
-5919 -5966 5985 0
-5919 -5964 5983 0
-5919 -5962 5981 0
-5919 -5961 5979 0
-5917 5993 0
-5917 -5974 5991 0
-5917 -5972 5989 0
-5917 -5970 5987 0
-5917 -5968 5985 0
-5917 -5966 5983 0
-5917 -5964 5981 0
-5917 -5962 5979 0
-5917 -5961 5977 0
-5916 5991 0
-5916 -5974 5989 0
-5916 -5972 5987 0
-5916 -5970 5985 0
-5916 -5968 5983 0
-5916 -5966 5981 0
-5916 -5964 5979 0
-5916 -5962 5977 0
-5916 -5961 5976 0
c ((aux704 + aux706 - aux710)<=0)
5931 -6007 0
5932 -6008 0
5934 -6010 0
5936 -6012 0
5938 -6014 0
5940 -6016 0
5942 -6018 0
5944 -6020 0
5901 -6007 0
5901 5931 -6008 0
5901 5932 -6010 0
5901 5934 -6012 0
5901 5936 -6014 0
5901 5938 -6016 0
5901 5940 -6018 0
5901 5942 -6020 0
5901 5944 -6022 0
5902 -6008 0
5902 5931 -6010 0
5902 5932 -6012 0
5902 5934 -6014 0
5902 5936 -6016 0
5902 5938 -6018 0
5902 5940 -6020 0
5902 5942 -6022 0
5902 5944 -6024 0
5904 -6010 0
5904 5931 -6012 0
5904 5932 -6014 0
5904 5934 -6016 0
5904 5936 -6018 0
5904 5938 -6020 0
5904 5940 -6022 0
5904 5942 -6024 0
5904 5944 -6026 0
5906 -6012 0
5906 5931 -6014 0
5906 5932 -6016 0
5906 5934 -6018 0
5906 5936 -6020 0
5906 5938 -6022 0
5906 5940 -6024 0
5906 5942 -6026 0
5906 5944 -6028 0
5908 -6014 0
5908 5931 -6016 0
5908 5932 -6018 0
5908 5934 -6020 0
5908 5936 -6022 0
5908 5938 -6024 0
5908 5940 -6026 0
5908 5942 -6028 0
5908 5944 -6030 0
5910 -6016 0
5910 5931 -6018 0
5910 5932 -6020 0
5910 5934 -6022 0
5910 5936 -6024 0
5910 5938 -6026 0
5910 5940 -6028 0
5910 5942 -6030 0
5910 5944 -6032 0
5912 -6018 0
5912 5931 -6020 0
5912 5932 -6022 0
5912 5934 -6024 0
5912 5936 -6026 0
5912 5938 -6028 0
5912 5940 -6030 0
5912 5942 -6032 0
5912 5944 -6034 0
5914 -6020 0
5914 5931 -6022 0
5914 5932 -6024 0
5914 5934 -6026 0
5914 5936 -6028 0
5914 5938 -6030 0
5914 5940 -6032 0
5914 5942 -6034 0
5914 5944 -6036 0
c (0<=(aux704 + aux706 - aux710))
-5944 6036 0
-5942 6034 0
-5940 6032 0
-5938 6030 0
-5936 6028 0
-5934 6026 0
-5932 6024 0
-5931 6022 0
-5914 6036 0
-5914 -5944 6034 0
-5914 -5942 6032 0
-5914 -5940 6030 0
-5914 -5938 6028 0
-5914 -5936 6026 0
-5914 -5934 6024 0
-5914 -5932 6022 0
-5914 -5931 6020 0
-5912 6034 0
-5912 -5944 6032 0
-5912 -5942 6030 0
-5912 -5940 6028 0
-5912 -5938 6026 0
-5912 -5936 6024 0
-5912 -5934 6022 0
-5912 -5932 6020 0
-5912 -5931 6018 0
-5910 6032 0
-5910 -5944 6030 0
-5910 -5942 6028 0
-5910 -5940 6026 0
-5910 -5938 6024 0
-5910 -5936 6022 0
-5910 -5934 6020 0
-5910 -5932 6018 0
-5910 -5931 6016 0
-5908 6030 0
-5908 -5944 6028 0
-5908 -5942 6026 0
-5908 -5940 6024 0
-5908 -5938 6022 0
-5908 -5936 6020 0
-5908 -5934 6018 0
-5908 -5932 6016 0
-5908 -5931 6014 0
-5906 6028 0
-5906 -5944 6026 0
-5906 -5942 6024 0
-5906 -5940 6022 0
-5906 -5938 6020 0
-5906 -5936 6018 0
-5906 -5934 6016 0
-5906 -5932 6014 0
-5906 -5931 6012 0
-5904 6026 0
-5904 -5944 6024 0
-5904 -5942 6022 0
-5904 -5940 6020 0
-5904 -5938 6018 0
-5904 -5936 6016 0
-5904 -5934 6014 0
-5904 -5932 6012 0
-5904 -5931 6010 0
-5902 6024 0
-5902 -5944 6022 0
-5902 -5942 6020 0
-5902 -5940 6018 0
-5902 -5938 6016 0
-5902 -5936 6014 0
-5902 -5934 6012 0
-5902 -5932 6010 0
-5902 -5931 6008 0
-5901 6022 0
-5901 -5944 6020 0
-5901 -5942 6018 0
-5901 -5940 6016 0
-5901 -5938 6014 0
-5901 -5936 6012 0
-5901 -5934 6010 0
-5901 -5932 6008 0
-5901 -5931 6007 0
c (( - aux711 + SATLiteral(-3) + SATLiteral(-88))<=0)
88 -6038 0
3 -6038 0
3 88 -6039 0
c (0<=( - aux711 + SATLiteral(-3) + SATLiteral(-88)))
-88 6039 0
-3 6039 0
-3 -88 6038 0
c (( - aux712 + SATLiteral(-20) + SATLiteral(-71))<=0)
71 -6041 0
20 -6041 0
20 71 -6042 0
c (0<=( - aux712 + SATLiteral(-20) + SATLiteral(-71)))
-71 6042 0
-20 6042 0
-20 -71 6041 0
c (( - aux713 + SATLiteral(-37) + SATLiteral(-54))<=0)
54 -6044 0
37 -6044 0
37 54 -6045 0
c (0<=( - aux713 + SATLiteral(-37) + SATLiteral(-54)))
-54 6045 0
-37 6045 0
-37 -54 6044 0
c ((SATLiteral(-176) + SATLiteral(-278) - aux715)<=0)
278 -6050 0
176 -6050 0
176 278 -6051 0
c (0<=(SATLiteral(-176) + SATLiteral(-278) - aux715))
-278 6051 0
-176 6051 0
-176 -278 6050 0
c ((SATLiteral(-193) + SATLiteral(-261) - aux716)<=0)
261 -6053 0
193 -6053 0
193 261 -6054 0
c (0<=(SATLiteral(-193) + SATLiteral(-261) - aux716))
-261 6054 0
-193 6054 0
-193 -261 6053 0
c ((SATLiteral(-227) + SATLiteral(-244) - aux717)<=0)
244 -6056 0
227 -6056 0
227 244 -6057 0
c (0<=(SATLiteral(-227) + SATLiteral(-244) - aux717))
-244 6057 0
-227 6057 0
-227 -244 6056 0
c ((SATLiteral(-210) + aux717 - aux718)<=0)
6056 -6059 0
6057 -6060 0
210 -6059 0
210 6056 -6060 0
210 6057 -6062 0
c (0<=(SATLiteral(-210) + aux717 - aux718))
-6057 6062 0
-6056 6060 0
-210 6062 0
-210 -6057 6060 0
-210 -6056 6059 0
c (( - aux719 + SATLiteral(-382) + SATLiteral(-484))<=0)
484 -6064 0
382 -6064 0
382 484 -6065 0
c (0<=( - aux719 + SATLiteral(-382) + SATLiteral(-484)))
-484 6065 0
-382 6065 0
-382 -484 6064 0
c (( - aux720 + SATLiteral(-399) + SATLiteral(-467))<=0)
467 -6067 0
399 -6067 0
399 467 -6068 0
c (0<=( - aux720 + SATLiteral(-399) + SATLiteral(-467)))
-467 6068 0
-399 6068 0
-399 -467 6067 0
c (( - aux721 + SATLiteral(-433) + SATLiteral(-450))<=0)
450 -6070 0
433 -6070 0
433 450 -6071 0
c (0<=( - aux721 + SATLiteral(-433) + SATLiteral(-450)))
-450 6071 0
-433 6071 0
-433 -450 6070 0
c ((aux721 - aux722 + SATLiteral(-416))<=0)
6070 -6073 0
6071 -6074 0
416 -6073 0
416 6070 -6074 0
416 6071 -6076 0
c (0<=(aux721 - aux722 + SATLiteral(-416)))
-6071 6076 0
-6070 6074 0
-416 6076 0
-416 -6071 6074 0
-416 -6070 6073 0
c (( - aux724 + SATLiteral(-572) + SATLiteral(-674))<=0)
674 -6081 0
572 -6081 0
572 674 -6082 0
c (0<=( - aux724 + SATLiteral(-572) + SATLiteral(-674)))
-674 6082 0
-572 6082 0
-572 -674 6081 0
c (( - aux725 + SATLiteral(-589) + SATLiteral(-657))<=0)
657 -6084 0
589 -6084 0
589 657 -6085 0
c (0<=( - aux725 + SATLiteral(-589) + SATLiteral(-657)))
-657 6085 0
-589 6085 0
-589 -657 6084 0
c (( - aux726 + SATLiteral(-623) + SATLiteral(-640))<=0)
640 -6087 0
623 -6087 0
623 640 -6088 0
c (0<=( - aux726 + SATLiteral(-623) + SATLiteral(-640)))
-640 6088 0
-623 6088 0
-623 -640 6087 0
c ((aux726 - aux727 + SATLiteral(-606))<=0)
6087 -6090 0
6088 -6091 0
606 -6090 0
606 6087 -6091 0
606 6088 -6093 0
c (0<=(aux726 - aux727 + SATLiteral(-606)))
-6088 6093 0
-6087 6091 0
-606 6093 0
-606 -6088 6091 0
-606 -6087 6090 0
c (( - aux728 + SATLiteral(-3) + SATLiteral(-88))<=0)
88 -6095 0
3 -6095 0
3 88 -6096 0
c (0<=( - aux728 + SATLiteral(-3) + SATLiteral(-88)))
-88 6096 0
-3 6096 0
-3 -88 6095 0
c (( - aux729 + SATLiteral(-20) + SATLiteral(-71))<=0)
71 -6098 0
20 -6098 0
20 71 -6099 0
c (0<=( - aux729 + SATLiteral(-20) + SATLiteral(-71)))
-71 6099 0
-20 6099 0
-20 -71 6098 0
c (( - aux730 + SATLiteral(-37) + SATLiteral(-54))<=0)
54 -6101 0
37 -6101 0
37 54 -6102 0
c (0<=( - aux730 + SATLiteral(-37) + SATLiteral(-54)))
-54 6102 0
-37 6102 0
-37 -54 6101 0
c ((SATLiteral(-176) + SATLiteral(-278) - aux732)<=0)
278 -6107 0
176 -6107 0
176 278 -6108 0
c (0<=(SATLiteral(-176) + SATLiteral(-278) - aux732))
-278 6108 0
-176 6108 0
-176 -278 6107 0
c ((SATLiteral(-193) + SATLiteral(-261) - aux733)<=0)
261 -6110 0
193 -6110 0
193 261 -6111 0
c (0<=(SATLiteral(-193) + SATLiteral(-261) - aux733))
-261 6111 0
-193 6111 0
-193 -261 6110 0
c ((SATLiteral(-227) + SATLiteral(-244) - aux734)<=0)
244 -6113 0
227 -6113 0
227 244 -6114 0
c (0<=(SATLiteral(-227) + SATLiteral(-244) - aux734))
-244 6114 0
-227 6114 0
-227 -244 6113 0
c ((SATLiteral(-210) + aux734 - aux735)<=0)
6113 -6116 0
6114 -6117 0
210 -6116 0
210 6113 -6117 0
210 6114 -6119 0
c (0<=(SATLiteral(-210) + aux734 - aux735))
-6114 6119 0
-6113 6117 0
-210 6119 0
-210 -6114 6117 0
-210 -6113 6116 0
c (( - aux736 + SATLiteral(-295) + SATLiteral(-364))<=0)
364 -6121 0
295 -6121 0
295 364 -6122 0
c (0<=( - aux736 + SATLiteral(-295) + SATLiteral(-364)))
-364 6122 0
-295 6122 0
-295 -364 6121 0
c (( - aux737 + SATLiteral(-313) + SATLiteral(-347))<=0)
347 -6124 0
313 -6124 0
313 347 -6125 0
c (0<=( - aux737 + SATLiteral(-313) + SATLiteral(-347)))
-347 6125 0
-313 6125 0
-313 -347 6124 0
c (( - aux738 + SATLiteral(-382) + SATLiteral(-484))<=0)
484 -6127 0
382 -6127 0
382 484 -6128 0
c (0<=( - aux738 + SATLiteral(-382) + SATLiteral(-484)))
-484 6128 0
-382 6128 0
-382 -484 6127 0
c (( - aux739 + SATLiteral(-399) + SATLiteral(-467))<=0)
467 -6130 0
399 -6130 0
399 467 -6131 0
c (0<=( - aux739 + SATLiteral(-399) + SATLiteral(-467)))
-467 6131 0
-399 6131 0
-399 -467 6130 0
c (( - aux740 + SATLiteral(-433) + SATLiteral(-450))<=0)
450 -6133 0
433 -6133 0
433 450 -6134 0
c (0<=( - aux740 + SATLiteral(-433) + SATLiteral(-450)))
-450 6134 0
-433 6134 0
-433 -450 6133 0
c ((aux740 - aux741 + SATLiteral(-416))<=0)
6133 -6136 0
6134 -6137 0
416 -6136 0
416 6133 -6137 0
416 6134 -6139 0
c (0<=(aux740 - aux741 + SATLiteral(-416)))
-6134 6139 0
-6133 6137 0
-416 6139 0
-416 -6134 6137 0
-416 -6133 6136 0
c (( - aux743 + SATLiteral(-572) + SATLiteral(-674))<=0)
674 -6144 0
572 -6144 0
572 674 -6145 0
c (0<=( - aux743 + SATLiteral(-572) + SATLiteral(-674)))
-674 6145 0
-572 6145 0
-572 -674 6144 0
c (( - aux744 + SATLiteral(-589) + SATLiteral(-657))<=0)
657 -6147 0
589 -6147 0
589 657 -6148 0
c (0<=( - aux744 + SATLiteral(-589) + SATLiteral(-657)))
-657 6148 0
-589 6148 0
-589 -657 6147 0
c (( - aux745 + SATLiteral(-623) + SATLiteral(-640))<=0)
640 -6150 0
623 -6150 0
623 640 -6151 0
c (0<=( - aux745 + SATLiteral(-623) + SATLiteral(-640)))
-640 6151 0
-623 6151 0
-623 -640 6150 0
c ((aux745 - aux746 + SATLiteral(-606))<=0)
6150 -6153 0
6151 -6154 0
606 -6153 0
606 6150 -6154 0
606 6151 -6156 0
c (0<=(aux745 - aux746 + SATLiteral(-606)))
-6151 6156 0
-6150 6154 0
-606 6156 0
-606 -6151 6154 0
-606 -6150 6153 0
c ((SATLiteral(-176) - aux747 + SATLiteral(-572))<=0)
572 -6158 0
176 -6158 0
176 572 -6159 0
c (0<=(SATLiteral(-176) - aux747 + SATLiteral(-572)))
-572 6159 0
-176 6159 0
-176 -572 6158 0
c (( - aux748 + SATLiteral(-295) + SATLiteral(-105))<=0)
105 -6161 0
295 -6161 0
295 105 -6162 0
c (0<=( - aux748 + SATLiteral(-295) + SATLiteral(-105)))
-105 6162 0
-295 6162 0
-295 -105 6161 0
c (( - aux749 + SATLiteral(-382) + SATLiteral(-501))<=0)
501 -6164 0
382 -6164 0
382 501 -6165 0
c (0<=( - aux749 + SATLiteral(-382) + SATLiteral(-501)))
-501 6165 0
-382 6165 0
-382 -501 6164 0
c ((SATLiteral(-210) - aux751 + SATLiteral(-606))<=0)
606 -6170 0
210 -6170 0
210 606 -6171 0
c (0<=(SATLiteral(-210) - aux751 + SATLiteral(-606)))
-606 6171 0
-210 6171 0
-210 -606 6170 0
c (( - aux752 + SATLiteral(-313) + SATLiteral(-123))<=0)
123 -6173 0
313 -6173 0
313 123 -6174 0
c (0<=( - aux752 + SATLiteral(-313) + SATLiteral(-123)))
-123 6174 0
-313 6174 0
-313 -123 6173 0
c (( - aux753 + SATLiteral(-20) + SATLiteral(-519))<=0)
519 -6176 0
20 -6176 0
20 519 -6177 0
c (0<=( - aux753 + SATLiteral(-20) + SATLiteral(-519)))
-519 6177 0
-20 6177 0
-20 -519 6176 0
c ((aux753 - aux754 + SATLiteral(-416))<=0)
6176 -6179 0
6177 -6180 0
416 -6179 0
416 6176 -6180 0
416 6177 -6182 0
c (0<=(aux753 - aux754 + SATLiteral(-416)))
-6177 6182 0
-6176 6180 0
-416 6182 0
-416 -6177 6180 0
-416 -6176 6179 0
c ((SATLiteral(-227) - aux755 + SATLiteral(-623))<=0)
623 -6184 0
227 -6184 0
227 623 -6185 0
c (0<=(SATLiteral(-227) - aux755 + SATLiteral(-623)))
-623 6185 0
-227 6185 0
-227 -623 6184 0
c (( - aux756 + SATLiteral(-330) + SATLiteral(-140))<=0)
140 -6187 0
330 -6187 0
330 140 -6188 0
c (0<=( - aux756 + SATLiteral(-330) + SATLiteral(-140)))
-140 6188 0
-330 6188 0
-330 -140 6187 0
c (( - aux757 + SATLiteral(-37) + SATLiteral(-536))<=0)
536 -6190 0
37 -6190 0
37 536 -6191 0
c (0<=( - aux757 + SATLiteral(-37) + SATLiteral(-536)))
-536 6191 0
-37 6191 0
-37 -536 6190 0
c ((aux757 - aux758 + SATLiteral(-433))<=0)
6190 -6193 0
6191 -6194 0
433 -6193 0
433 6190 -6194 0
433 6191 -6196 0
c (0<=(aux757 - aux758 + SATLiteral(-433)))
-6191 6196 0
-6190 6194 0
-433 6196 0
-433 -6191 6194 0
-433 -6190 6193 0
c ((SATLiteral(-244) - aux759 + SATLiteral(-640))<=0)
640 -6198 0
244 -6198 0
244 640 -6199 0
c (0<=(SATLiteral(-244) - aux759 + SATLiteral(-640)))
-640 6199 0
-244 6199 0
-244 -640 6198 0
c (( - aux760 + SATLiteral(-347) + SATLiteral(-54))<=0)
54 -6201 0
347 -6201 0
347 54 -6202 0
c (0<=( - aux760 + SATLiteral(-347) + SATLiteral(-54)))
-54 6202 0
-347 6202 0
-347 -54 6201 0
c ((SATLiteral(-261) - aux761 + SATLiteral(-657))<=0)
657 -6204 0
261 -6204 0
261 657 -6205 0
c (0<=(SATLiteral(-261) - aux761 + SATLiteral(-657)))
-657 6205 0
-261 6205 0
-261 -657 6204 0
c (( - aux762 + SATLiteral(-364) + SATLiteral(-158))<=0)
158 -6207 0
364 -6207 0
364 158 -6208 0
c (0<=( - aux762 + SATLiteral(-364) + SATLiteral(-158)))
-158 6208 0
-364 6208 0
-364 -158 6207 0
c (( - aux763 + SATLiteral(-71) + SATLiteral(-554))<=0)
554 -6210 0
71 -6210 0
71 554 -6211 0
c (0<=( - aux763 + SATLiteral(-71) + SATLiteral(-554)))
-554 6211 0
-71 6211 0
-71 -554 6210 0
c ((aux763 - aux764 + SATLiteral(-467))<=0)
6210 -6213 0
6211 -6214 0
467 -6213 0
467 6210 -6214 0
467 6211 -6216 0
c (0<=(aux763 - aux764 + SATLiteral(-467)))
-6211 6216 0
-6210 6214 0
-467 6216 0
-467 -6211 6214 0
-467 -6210 6213 0
c ((SATLiteral(-176) - aux766 + SATLiteral(-572))<=0)
572 -6221 0
176 -6221 0
176 572 -6222 0
c (0<=(SATLiteral(-176) - aux766 + SATLiteral(-572)))
-572 6222 0
-176 6222 0
-176 -572 6221 0
c (( - aux767 + SATLiteral(-295) + SATLiteral(-105))<=0)
105 -6224 0
295 -6224 0
295 105 -6225 0
c (0<=( - aux767 + SATLiteral(-295) + SATLiteral(-105)))
-105 6225 0
-295 6225 0
-295 -105 6224 0
c (( - aux768 + SATLiteral(-382) + SATLiteral(-501))<=0)
501 -6227 0
382 -6227 0
382 501 -6228 0
c (0<=( - aux768 + SATLiteral(-382) + SATLiteral(-501)))
-501 6228 0
-382 6228 0
-382 -501 6227 0
c ((SATLiteral(-210) - aux770 + SATLiteral(-606))<=0)
606 -6233 0
210 -6233 0
210 606 -6234 0
c (0<=(SATLiteral(-210) - aux770 + SATLiteral(-606)))
-606 6234 0
-210 6234 0
-210 -606 6233 0
c (( - aux771 + SATLiteral(-313) + SATLiteral(-123))<=0)
123 -6236 0
313 -6236 0
313 123 -6237 0
c (0<=( - aux771 + SATLiteral(-313) + SATLiteral(-123)))
-123 6237 0
-313 6237 0
-313 -123 6236 0
c (( - aux772 + SATLiteral(-20) + SATLiteral(-519))<=0)
519 -6239 0
20 -6239 0
20 519 -6240 0
c (0<=( - aux772 + SATLiteral(-20) + SATLiteral(-519)))
-519 6240 0
-20 6240 0
-20 -519 6239 0
c ((aux772 - aux773 + SATLiteral(-416))<=0)
6239 -6242 0
6240 -6243 0
416 -6242 0
416 6239 -6243 0
416 6240 -6245 0
c (0<=(aux772 - aux773 + SATLiteral(-416)))
-6240 6245 0
-6239 6243 0
-416 6245 0
-416 -6240 6243 0
-416 -6239 6242 0
c ((SATLiteral(-227) - aux774 + SATLiteral(-623))<=0)
623 -6247 0
227 -6247 0
227 623 -6248 0
c (0<=(SATLiteral(-227) - aux774 + SATLiteral(-623)))
-623 6248 0
-227 6248 0
-227 -623 6247 0
c (( - aux775 + SATLiteral(-330) + SATLiteral(-140))<=0)
140 -6250 0
330 -6250 0
330 140 -6251 0
c (0<=( - aux775 + SATLiteral(-330) + SATLiteral(-140)))
-140 6251 0
-330 6251 0
-330 -140 6250 0
c (( - aux776 + SATLiteral(-37) + SATLiteral(-536))<=0)
536 -6253 0
37 -6253 0
37 536 -6254 0
c (0<=( - aux776 + SATLiteral(-37) + SATLiteral(-536)))
-536 6254 0
-37 6254 0
-37 -536 6253 0
c ((aux776 - aux777 + SATLiteral(-433))<=0)
6253 -6256 0
6254 -6257 0
433 -6256 0
433 6253 -6257 0
433 6254 -6259 0
c (0<=(aux776 - aux777 + SATLiteral(-433)))
-6254 6259 0
-6253 6257 0
-433 6259 0
-433 -6254 6257 0
-433 -6253 6256 0
c ((SATLiteral(-244) - aux778 + SATLiteral(-640))<=0)
640 -6261 0
244 -6261 0
244 640 -6262 0
c (0<=(SATLiteral(-244) - aux778 + SATLiteral(-640)))
-640 6262 0
-244 6262 0
-244 -640 6261 0
c (( - aux779 + SATLiteral(-347) + SATLiteral(-54))<=0)
54 -6264 0
347 -6264 0
347 54 -6265 0
c (0<=( - aux779 + SATLiteral(-347) + SATLiteral(-54)))
-54 6265 0
-347 6265 0
-347 -54 6264 0
c ((SATLiteral(-261) - aux780 + SATLiteral(-657))<=0)
657 -6267 0
261 -6267 0
261 657 -6268 0
c (0<=(SATLiteral(-261) - aux780 + SATLiteral(-657)))
-657 6268 0
-261 6268 0
-261 -657 6267 0
c (( - aux781 + SATLiteral(-364) + SATLiteral(-158))<=0)
158 -6270 0
364 -6270 0
364 158 -6271 0
c (0<=( - aux781 + SATLiteral(-364) + SATLiteral(-158)))
-158 6271 0
-364 6271 0
-364 -158 6270 0
c (( - aux782 + SATLiteral(-71) + SATLiteral(-554))<=0)
554 -6273 0
71 -6273 0
71 554 -6274 0
c (0<=( - aux782 + SATLiteral(-71) + SATLiteral(-554)))
-554 6274 0
-71 6274 0
-71 -554 6273 0
c ((aux782 - aux783 + SATLiteral(-467))<=0)
6273 -6276 0
6274 -6277 0
467 -6276 0
467 6273 -6277 0
467 6274 -6279 0
c (0<=(aux782 - aux783 + SATLiteral(-467)))
-6274 6279 0
-6273 6277 0
-467 6279 0
-467 -6274 6277 0
-467 -6273 6276 0
